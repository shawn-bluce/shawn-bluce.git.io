{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/Alipay.jpg","path":"images/Alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/Wechat.png","path":"images/Wechat.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"063450642ca60f3a19b5e7beee6195d52b51e724","modified":1498895705000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1504358140498},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1504358140498},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1504358140498},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1504358140498},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1504358140498},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1504358140498},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1504358140498},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1504358140498},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1504358140498},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1504358140498},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1504358140502},{"_id":"themes/next/README.md","hash":"950ca6e9c0fa607d290a5b1fd883df44725b36b2","modified":1504358140502},{"_id":"themes/next/_config.yml","hash":"575449b13b655b05bce834727d253a4fe89b850c","modified":1504440119132},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1504358140502},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1504358140502},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1504358140502},{"_id":"source/404/index.md","hash":"0ab4c8f5886ded8b4e572fc077cd7a8f845a3ef6","modified":1504429816213},{"_id":"source/about/index.md","hash":"48e88e3778ceaf388ca88d8981fbfa086cc7de9d","modified":1504446894248},{"_id":"source/_posts/apache_vhost.md","hash":"6c4b9394c82ef9dcd40d14b83825f8e841a9df02","modified":1504363124150},{"_id":"source/_posts/c_language_bool_type.md","hash":"207b70135c4bbbf23a901aa67d6b1b739e87f76d","modified":1504363138382},{"_id":"source/_posts/c_push_box.md","hash":"3d282b29d085738335113db3b0d68e42600fe940","modified":1504360924818},{"_id":"source/_posts/filesystem.md","hash":"e046eba271a3eb7d4d7a769a87b23090edaea36e","modified":1504363170478},{"_id":"source/_posts/firewall_cmd.md","hash":"52e7c672a418c00e6a5c8f4153c1164a9be9a963","modified":1504363190286},{"_id":"source/_posts/hdfs_simple.md","hash":"9d9964b66fb46eab0a4a2f27d1e86f03ff20a32b","modified":1504363247042},{"_id":"source/_posts/java_class_interface.md","hash":"6a47210e4473e49e026e731a3c40ca2d2222e23e","modified":1504363269290},{"_id":"source/_posts/java_md5_base64.md","hash":"8bc92e0948f5190919345c0c485958100ab8a1eb","modified":1504363292230},{"_id":"source/_posts/flask_build_api.md","hash":"c158ffa56846b275ba14caca17651cedcfc079c1","modified":1504363223142},{"_id":"source/_posts/java_str.md","hash":"cd24b33ba534478114de07ca9c236d749577b836","modified":1504363303186},{"_id":"source/_posts/linux_acl.md","hash":"b02528740aab7209a24142d3419ec878702ad09f","modified":1504363317678},{"_id":"source/_posts/linux_crontab.md","hash":"c00872fe2ac71a6e7363ce8733255d464cbc293a","modified":1504363333414},{"_id":"source/_posts/linux_dhcp_server.md","hash":"bbd346c3fc3246eb273732cc64e6d55a77e09ef5","modified":1504363347098},{"_id":"source/_posts/linux_dirtree.md","hash":"59afca4ff7feeccd9bcecab73c7b3d2b2c107fb3","modified":1504363361754},{"_id":"source/_posts/linux_ln.md","hash":"b8d478d5194ecc671be62502b7079464c1c5946b","modified":1504363388818},{"_id":"source/_posts/linux_mysql_chinese.md","hash":"5cf1bd8ba909a7fc833956d2af4781726c51a212","modified":1504363488818},{"_id":"source/_posts/linux_lvm.md","hash":"eb549da582e96c3ddb6ff5ce048b556150d3cb15","modified":1504363402478},{"_id":"source/_posts/linux_nfs.md","hash":"3acc8e74e130cd7a849b330766b00373ec6a7258","modified":1504363503178},{"_id":"source/_posts/linux_mysql_dump.md","hash":"a76cb6480bc4bab299bc75ef4bf7dc6b05b5ccb3","modified":1504363469794},{"_id":"source/_posts/linux_swap_virtualmemery.md","hash":"d7385afee9ba3e05512a0b8cfc1896c623527072","modified":1504363553574},{"_id":"source/_posts/mysql_crud.md","hash":"24c234a39894cc803050525437b5b028896589d6","modified":1504363571910},{"_id":"source/_posts/linux_nmcli_ip.md","hash":"5c48e0ded390dcac051ac38b681eb19216daf0f1","modified":1504363528334},{"_id":"source/_posts/openssh_pub_pri.md","hash":"d6b1e8dcdf8b2b1e9957e40bcd743173a925be84","modified":1504363604902},{"_id":"source/_posts/page_swap.md","hash":"11b9a91ea2ee8ad527f47fc533ba6f2bb5c834c3","modified":1504363627006},{"_id":"source/_posts/python_args_kwargs.md","hash":"9fc4cc555c82e3ae5a92c7daccf3e93575822034","modified":1504626226621},{"_id":"source/_posts/python_cal.md","hash":"f1fef4af6796b70b6bf7aea7a2231d56952ddb81","modified":1504363642302},{"_id":"source/_posts/python_execption.md","hash":"c709665b64079a87d068c3368981a2311cc8861a","modified":1504363658102},{"_id":"source/_posts/python_dict.md","hash":"d385a7f6694ef610179b26a844ace37f520640ef","modified":1504361370066},{"_id":"source/_posts/python_function.md","hash":"e806b9561c4070a4eec90e18bb64537b3af0b71c","modified":1504363680842},{"_id":"source/_posts/python_list_tumple.md","hash":"ae68b2e091036ef9049ef71e9428d63799ed71d2","modified":1504363694170},{"_id":"source/_posts/python_magic_1.md","hash":"54013676769c5f0eda86327afc76475b350b582a","modified":1504363718250},{"_id":"source/_posts/python_magic_3.md","hash":"78683e29ed4d7823d9dac4e548a1c79bd8da359a","modified":1504363746386},{"_id":"source/_posts/python_magic_2.md","hash":"c6da5851a4cec1ae5eb674a152a4ccc6158a4bcb","modified":1504363731370},{"_id":"source/_posts/python_magic_4.md","hash":"7c3f43c9055a45a567a7fa46735506fed6befa56","modified":1504363765946},{"_id":"source/_posts/python_oop.md","hash":"98cdda90ca144d029848eaa8be2f5189928fa03e","modified":1504363797758},{"_id":"source/_posts/python_pip_virtualenv.md","hash":"a59716778898ed43ebb0907983dcb18f01f824ef","modified":1504363827174},{"_id":"source/_posts/python_str.md","hash":"1d865c1c35014aa7716d38a3487146a0e1f85f48","modified":1504363855710},{"_id":"source/_posts/python_rabbitmq.md","hash":"b7699cf029b288ab199349222867ccd7089fe60c","modified":1504363847070},{"_id":"source/_posts/python_threading.md","hash":"b9dd0071521ca76a881c8095dcf4192c2958b39d","modified":1504362027094},{"_id":"source/_posts/python_virtualenvwapper.md","hash":"7a67aa6a82c69ecb62de77ce20d0afe88e6e9c4d","modified":1505840070029},{"_id":"source/_posts/shadowsocks_build.md","hash":"55b692bae6310361d64fc9eb04fbbee332c0db08","modified":1504363878666},{"_id":"source/_posts/shell_programming.md","hash":"d2738995071b8cdc7666c162800184c3c9ed4afa","modified":1504363889182},{"_id":"source/archive/index.md","hash":"2c65d26bae9c8ba8f78dcbecc07069d509288ca5","modified":1504322799035},{"_id":"source/links/index.md","hash":"b97d8959319b27468a58c018c5d11bb0197cbcc8","modified":1504430627185},{"_id":"source/tags/index.md","hash":"93a62a45eece3587da3b57b0b6589d23a4ab5d69","modified":1504432816229},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1504358140478},{"_id":"themes/next/.git/config","hash":"073c1c5af4e0139a70cc8de631817a8e357f5832","modified":1504358140478},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1504358078650},{"_id":"themes/next/.git/index","hash":"92482d4b3fdd8e400f52ba7402d88c757b4a6d6a","modified":1504358140530},{"_id":"themes/next/.git/packed-refs","hash":"5e3a8a92e93cf54e7f0ef8b75e6cd7749f9fbb97","modified":1504358140478},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1504358140498},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"213d0f6c9c7ed9b035d84486b540a57e24869909","modified":1504358140498},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"5d34ae00d5478526664969d0f1fd2cd5d5556e64","modified":1504358140498},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1504358140498},{"_id":"themes/next/languages/de.yml","hash":"98aa551443b2a61a74b6f2a218635da6d2f6cf57","modified":1504358140502},{"_id":"themes/next/languages/default.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1504358140502},{"_id":"themes/next/languages/en.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1504358140502},{"_id":"themes/next/languages/fr-FR.yml","hash":"a14d051bbec26cfcae358bdcf1acf62a35fb1a45","modified":1504358140502},{"_id":"themes/next/languages/id.yml","hash":"f8b57daac2e50ace9a6d5051b17208af8139c2ae","modified":1504358140502},{"_id":"themes/next/languages/ja.yml","hash":"0c99ba4ba7d36c43d002342611d2c656ef498582","modified":1504358140502},{"_id":"themes/next/languages/ko.yml","hash":"043951e82997131dd8be40ff2093ef36849ba725","modified":1504358140502},{"_id":"themes/next/languages/pt-BR.yml","hash":"91584764104ef29293117375fc010b1bdbe9aff6","modified":1504358140502},{"_id":"themes/next/languages/pt.yml","hash":"dfd0b8574177346b78cab29db055fbc44ac309dc","modified":1504358140502},{"_id":"themes/next/languages/ru.yml","hash":"98dd9b6ddd88400a7b02cd7e8adb41e7b842bf57","modified":1504358140502},{"_id":"themes/next/languages/zh-Hans.yml","hash":"73ddf2c1499c57a2625a619182b8d22522ebcf8c","modified":1504432548661},{"_id":"themes/next/languages/zh-hk.yml","hash":"e8072846fd43beadbae394e30a49aa5c92a0a53b","modified":1504358140502},{"_id":"themes/next/languages/zh-tw.yml","hash":"562141bfe450432131af012baa262a3de79a50bc","modified":1504358140502},{"_id":"themes/next/layout/_layout.swig","hash":"ada7ffc71cf05e7236a19e0648bce6d6d6cbc7dc","modified":1504358140502},{"_id":"themes/next/layout/archive.swig","hash":"fa4eb21ab7f6638ee3409c3df24978540501e2ab","modified":1506094087611},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1504358140502},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1504358140502},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1504358140502},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1504358140502},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1504358140502},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1504358140502},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1504358140502},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1504358140502},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1504358140526},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1504358140526},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1504358140526},{"_id":"source/_posts/python_magic_5.md","hash":"b3aa8a277a766b07712669fe71fc69ffc6d1e600","modified":1504363782090},{"_id":"source/_posts/python_os_lib.md","hash":"6419cc50605ba42487bfb329858dd4d7e33f3828","modified":1504363811566},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358140506},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1504358078650},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1504358078650},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1504358078650},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1504358078650},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1504358078650},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1504358078650},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1504358078650},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1504358078650},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1504358078650},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1504358078650},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1504358078650},{"_id":"themes/next/.git/logs/HEAD","hash":"b46715450ed9388929b903d7eda3aaab5e31039e","modified":1504358140478},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1504358140502},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1504358140502},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1504358140502},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1504358140502},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1504358140502},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1504358140502},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"661a97e79bc447262ab558b478dd72e00f7372d4","modified":1504358140502},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1504358140502},{"_id":"themes/next/layout/_partials/comments.swig","hash":"010ef8c42d2e1a95abc60caf757293ca8eb4a68b","modified":1504358140502},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fb02c81273d5897ebb98b50f4c10f7edc34f9240","modified":1504358140502},{"_id":"themes/next/layout/_partials/head.swig","hash":"2cbeae795c9929ec1966b8a1fb9c058a0b547fa9","modified":1504358140502},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1504358140502},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1504358140502},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1504358140502},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1504358140502},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1504358140502},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1504358140502},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1504358140502},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1504358140502},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1504358140502},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1504358140502},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1504358140502},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1504358140502},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1504358140502},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1504358140502},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1504358140502},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1504358140502},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1504358140502},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1504358140502},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1504358140502},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1504358140502},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1504358140506},{"_id":"themes/next/source/images/Alipay.jpg","hash":"a1c4ecf19060d988463aca6ebf95227c4cb96999","modified":1504432020653},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1504358140506},{"_id":"themes/next/source/images/Wechat.png","hash":"1e4b2f7478ac35afd43dc560f511038999e6f488","modified":1504432024397},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1504358140506},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1504358140506},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1504358140506},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1504358140506},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1504358140506},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1504358140506},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1504358140506},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1504358140506},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504358140506},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504358140506},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1504358140506},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1504358140506},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1504358140506},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1504358140502},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1504358140502},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358140502},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358140502},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358140506},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358140506},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358140506},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358140506},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358140506},{"_id":"themes/next/.git/refs/heads/master","hash":"a062340ee7aebb333d6abee4e660fdce140732ed","modified":1504358140478},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1504358140502},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1504358140502},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1504358140502},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1504358140502},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1504358140502},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1504358140502},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1504358140502},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1504358140502},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1504358140502},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1504358140502},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1504358140502},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1504358140502},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1504358140502},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1504358140502},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1504358140502},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1504358140502},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1504358140502},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1504358140502},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1504358140502},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1504358140502},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1504358140502},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1504358140502},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1504358140502},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1504358140502},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1504358140502},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1504358140506},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1504358140506},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1504358140506},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1504358140506},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"6359c84aaa02c90be60b22abe638b737ddd69c9c","modified":1504358140506},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1504358140506},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1504358140506},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1504358140506},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1504358140506},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1504358140506},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1504358140506},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1504358140506},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1504358140506},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1504358140506},{"_id":"themes/next/source/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1504358140510},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1504358140510},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1504358140510},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1504358140510},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1504358140510},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1504358140510},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1504358140510},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1504358140510},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1504358140510},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1504358140510},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1504358140514},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1504358140514},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1504358140514},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1504358140514},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1504358140522},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1504358140514},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1504358140514},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1504358140514},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1504358140514},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1504358140514},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1504358140522},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1504358140522},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1504358140522},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1504358140522},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1504358140522},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1504358140522},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1504358140526},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1504358140526},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1504358140526},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1504358140522},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1504358140522},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1504358140526},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1504358140526},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1504358140526},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1504358140526},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1504358140526},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1504358140522},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"b46715450ed9388929b903d7eda3aaab5e31039e","modified":1504358140478},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1504358140478},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1504358140502},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1504358140502},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1504358140502},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1504358140502},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1504358140502},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1504358140502},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1504358140502},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1504358140506},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"f2030fa436c47791d1a42358cc0ef6f9809f212c","modified":1504358140506},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1504358140506},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1504358140506},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1504358140506},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1504358140506},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1504358140506},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"0af5a9322156c4c21d3c7d38f5ee48de5286f523","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1504358140506},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1504358140510},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1504358140510},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1504358140510},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1504358140510},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1504358140514},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1504358140514},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1504358140514},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1504358140514},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1504358140514},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1504358140514},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1504358140526},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1504358140526},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1504358140510},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1504358140522},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1504358140522},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1504358140526},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"b46715450ed9388929b903d7eda3aaab5e31039e","modified":1504358140478},{"_id":"themes/next/.git/objects/pack/pack-b03a314ce45a3018aec3d6c87ee25d06461e9901.idx","hash":"37891c7379ba599b427c422e4b3aac82757a40b0","modified":1504358140466},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"67c357ddc16b31e7dfd8f956a77f984662c06fc2","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1504358140506},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1504358140506},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1504358140506},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1504358140510},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1504358140510},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1504358140510},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1504358140510},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1504358140514},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1504358140514},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1504358140518},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1504358140518},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1504358140522},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1504358140510},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1504358140526},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1504358140522},{"_id":"themes/next/.git/objects/pack/pack-b03a314ce45a3018aec3d6c87ee25d06461e9901.pack","hash":"bd586f46c49a25cd0d45be9aebee55db4ad6f8c6","modified":1504358140462},{"_id":"public/404/index.html","hash":"779691d9754a28a6cb99dd66e920df2b2a9301c2","modified":1506094161407},{"_id":"public/about/index.html","hash":"dd91ea4d92f8081a9776e0fff7a4ce760baebf48","modified":1506094161407},{"_id":"public/archive/index.html","hash":"fcad1de96f01d5121853be653e40cf5bbc4a35a4","modified":1506094161407},{"_id":"public/links/index.html","hash":"750418624b458eba70c179812351627304905a18","modified":1506094161407},{"_id":"public/tags/index.html","hash":"6af1cf74af5e7a93ab149c7589fb0d8ad4201c77","modified":1506094161408},{"_id":"public/2017/09/20/python_virtualenvwapper/index.html","hash":"5cc04ad26e6f67c86ea10884f15ee0c3751ebea1","modified":1506094161408},{"_id":"public/2017/09/05/python_args_kwargs/index.html","hash":"81c95ce3c3dae154978e583bf23423cce4e444a8","modified":1506094161408},{"_id":"public/2017/08/18/python_pip_virtualenv/index.html","hash":"5483f59eb23b18806d78a9c2a372ccbeb45db064","modified":1506094161408},{"_id":"public/2017/06/13/python_rabbitmq/index.html","hash":"9c273fd149dc6f679c79d17b76f0a193e19f5ad9","modified":1506094161408},{"_id":"public/2017/06/03/flask_build_api/index.html","hash":"7a116c0d355eb0cc93888670fc63eb3acf906787","modified":1506094161408},{"_id":"public/2017/04/01/python_os_lib/index.html","hash":"13349b98bbb7e8dab3ea3dc673e53e7883adc04d","modified":1506094161408},{"_id":"public/2017/03/06/hdfs_simple/index.html","hash":"24c6b163e398f35f1e0cf64ef2a88f734b39a9fb","modified":1506094161408},{"_id":"public/2017/02/13/java_str/index.html","hash":"e38b450e119364c5a8641b1198d0578eed9dc05a","modified":1506094161408},{"_id":"public/2017/01/31/python_magic_5/index.html","hash":"99c4423e1994eb06e4ab8b31601f751b34a19742","modified":1506094161408},{"_id":"public/2017/01/24/python_magic_4/index.html","hash":"115699c2e49a58418b29a2351b36a01cf8116760","modified":1506094161408},{"_id":"public/2017/01/21/python_magic_3/index.html","hash":"30b30e5c69fe7e8646e5476775356ff0549c0012","modified":1506094161408},{"_id":"public/2017/01/19/python_magic_2/index.html","hash":"e1492f8bf18172f190f13691c4ab9831823b50fe","modified":1506094161408},{"_id":"public/2017/01/15/python_magic_1/index.html","hash":"7cd1268f5bac84cfcde7cd22c6e7a1cc6f7a243a","modified":1506094161408},{"_id":"public/2017/01/01/python_function/index.html","hash":"c9a4b395c459a653a2dbc4f6e425a49582d76687","modified":1506094161408},{"_id":"public/2016/12/15/linux_mysql_chinese/index.html","hash":"1942372cef07682adec2b4f5a428c0238fb2e791","modified":1506094161408},{"_id":"public/2016/12/15/page_swap/index.html","hash":"a132198e3ff1f870e463e99baebeecbadbc148fd","modified":1506094161408},{"_id":"public/2016/12/12/python_threading/index.html","hash":"878d6d54d21211ea472f22634abc3172fa67e3c2","modified":1506094161408},{"_id":"public/2016/11/20/linux_mysql_dump/index.html","hash":"06937498a1e434168b171a64b29198b0c73f75d5","modified":1506094161408},{"_id":"public/2016/11/17/firewall_cmd/index.html","hash":"5fc1936e446dd3b3691d1ce3f67ece6633dd44e1","modified":1506094161408},{"_id":"public/2016/11/16/filesystem/index.html","hash":"55fe721a74a72f8455f49199084ad36198f35fcc","modified":1506094161408},{"_id":"public/2016/11/02/linux_crontab/index.html","hash":"27d71dabfa71e88043f3580a2bcf79974a82bc87","modified":1506094161409},{"_id":"public/2016/11/02/linux_acl/index.html","hash":"ec9b46ae8f9a9c0a9dd1166edb68bbe00738109b","modified":1506094161409},{"_id":"public/2016/10/28/linux_nmcli_ip/index.html","hash":"3892e7e7a1cc268ed6511a45487bff227e73042d","modified":1506094161409},{"_id":"public/2016/10/27/python_execption/index.html","hash":"c4e88f780e963f543f5c9b6e96df2835bb55e6cc","modified":1506094161409},{"_id":"public/2016/10/17/openssh_pub_pri/index.html","hash":"279f196bf5fae4c53f641436460f8c59813fdabe","modified":1506094161409},{"_id":"public/2016/10/02/shell_programming/index.html","hash":"67d56f405f24c166d27b23e2b4a0ac05ee9818d5","modified":1506094161409},{"_id":"public/2016/09/14/python_oop/index.html","hash":"5a2e70899daa88d70cac10555002adb3173aa85d","modified":1506094161409},{"_id":"public/2016/09/13/python_dict/index.html","hash":"514e7b8666d58a860d93b12bde2abf4763bb5736","modified":1506094161409},{"_id":"public/2016/09/07/python_list_tumple/index.html","hash":"9b27577d3ad24e32c771cd508040a3920a46719f","modified":1506094161409},{"_id":"public/2016/09/05/python_str/index.html","hash":"b9bb2b0e60d77791708c4da8b686aff08a97e134","modified":1506094161409},{"_id":"public/2016/07/23/shadowsocks_build/index.html","hash":"d09c95c178b92106c5c0e8e5b19eeb50a08cf964","modified":1506094161409},{"_id":"public/2016/07/17/java_md5_base64/index.html","hash":"ea9dafaf9bbce105d987190069f83667428fdaca","modified":1506094161409},{"_id":"public/2016/06/12/linux_nfs/index.html","hash":"728df78b7eca1ec67ed8459270a384ff2ddf876e","modified":1506094161409},{"_id":"public/2016/05/28/linux_swap_virtualmemery/index.html","hash":"a4f564ca304bbb2493a25fec4892f34ca7e52f01","modified":1506094161409},{"_id":"public/2016/05/17/linux_lvm/index.html","hash":"2605c0d15fb6decb9908a00d9c9d892c1f8cc4cd","modified":1506094161409},{"_id":"public/2016/05/12/linux_dhcp_server/index.html","hash":"c4da9c3c57e41a3fba3d3f83b3b282a94a681918","modified":1506094161409},{"_id":"public/2016/05/11/linux_ln/index.html","hash":"47356a3b43d911aeda23626ccc91a893ad067a90","modified":1506094161409},{"_id":"public/2016/05/08/apache_vhost/index.html","hash":"b62f79a804fa9e4a56fcfa9cd55b6d0e1df0450e","modified":1506094161409},{"_id":"public/2016/03/15/mysql_crud/index.html","hash":"c019f47f09fb9ef80f858b7017698083ce8397d3","modified":1506094161409},{"_id":"public/2015/11/21/java_class_interface/index.html","hash":"5cd219ea52774bd516f03d49c8751127892fa809","modified":1506094161409},{"_id":"public/2015/10/19/c_push_box/index.html","hash":"16b4c6de60ca6f2e9d37c813c82753c288a84e0e","modified":1506094161409},{"_id":"public/2015/07/07/python_cal/index.html","hash":"9aa766c87339e029c39ccc4ab9875868c9318418","modified":1506094161409},{"_id":"public/2015/06/09/linux_dirtree/index.html","hash":"fbbb034beda4aa8b359613fa5901a52af9057894","modified":1506094161410},{"_id":"public/2015/03/17/c_language_bool_type/index.html","hash":"1f04a3986fb1e0445838a8f05055586207e73ff0","modified":1506094161410},{"_id":"public/archives/index.html","hash":"2c790522a8c34aa193cb6742db3eb893324f4dd0","modified":1506094161410},{"_id":"public/archives/page/2/index.html","hash":"87f6421e6b3df133d69290b3b13163d469645ae1","modified":1506094161410},{"_id":"public/archives/page/3/index.html","hash":"f578ce73c8f63d3743170c5f711ecb7236ae5956","modified":1506094161410},{"_id":"public/archives/page/4/index.html","hash":"28ca090a0916098d989145853fa001f5c27f8da3","modified":1506094161410},{"_id":"public/archives/page/5/index.html","hash":"65f070857b516b0e1285010615e6f9c0666bdef3","modified":1506094161410},{"_id":"public/archives/2015/index.html","hash":"4b133c9d5fc9ec6d41418febd58b9581a3e37ac3","modified":1506094161410},{"_id":"public/archives/2015/03/index.html","hash":"9c1e4247e76171646d1251ec20728be8ef73811c","modified":1506094161410},{"_id":"public/archives/2015/06/index.html","hash":"05539b0e01b37c11da2a5e1f0d9599e8e6af0e93","modified":1506094161410},{"_id":"public/archives/2015/07/index.html","hash":"e50872982662018d80f4ade26ff4dd525ab8acb7","modified":1506094161410},{"_id":"public/archives/2015/10/index.html","hash":"8cce97d7a84e857f6240cd46dd0686f552b16dd9","modified":1506094161410},{"_id":"public/archives/2015/11/index.html","hash":"b042660a924e71e747bc1f8f2170c29227800590","modified":1506094161410},{"_id":"public/archives/2016/index.html","hash":"7fd066af424bce205cef4abdc9d9f0d5acf6c9be","modified":1506094161410},{"_id":"public/archives/2016/page/2/index.html","hash":"8fbefd497046de42028464575bf6f1ddd3104f18","modified":1506094161410},{"_id":"public/archives/2016/page/3/index.html","hash":"6c47ab62959a5f5ba93e1e36502cce5fe6217a86","modified":1506094161410},{"_id":"public/archives/2016/03/index.html","hash":"f7d0b168816a921eb9f685f1f4bf40922f8a24d7","modified":1506094161410},{"_id":"public/archives/2016/05/index.html","hash":"72ce7d77f9911a2da17470997ac4c05ccc404fe4","modified":1506094161410},{"_id":"public/archives/2016/06/index.html","hash":"38b497d3b89bd2635986f79f62f51f680fcefa74","modified":1506094161410},{"_id":"public/archives/2016/07/index.html","hash":"ef7e7f5fb112e2a4cb06fb7a303bb3ffcb478fb5","modified":1506094161410},{"_id":"public/archives/2016/09/index.html","hash":"e3f24248678960f43e00abf0310be9f71c936c63","modified":1506094161410},{"_id":"public/archives/2016/10/index.html","hash":"913f7946fea8ba2166512e401beb1abc7588bb73","modified":1506094161410},{"_id":"public/archives/2016/11/index.html","hash":"752fd8f4dcd6bd0587cdd7bb48e9a9e285e7ea09","modified":1506094161411},{"_id":"public/archives/2016/12/index.html","hash":"f3746cab9a31c1a026ce6b54108ed9a4e5e9e526","modified":1506094161411},{"_id":"public/archives/2017/index.html","hash":"9f24b15eb711a9404bab7762ae0dbc6af08fdd71","modified":1506094161411},{"_id":"public/archives/2017/page/2/index.html","hash":"9238ab014f0958ec874e9bfbb23813bc8a3c61e9","modified":1506094161411},{"_id":"public/archives/2017/01/index.html","hash":"458a93bcdee939fa66e86c2637564b2a24168ca2","modified":1506094161411},{"_id":"public/archives/2017/02/index.html","hash":"49b87d2da7bcb46b50065a09b6c3333ec0ccbdd4","modified":1506094161411},{"_id":"public/archives/2017/03/index.html","hash":"98d91b4e5345fb77ea92d3b8452cd6f3072c14a8","modified":1506094161411},{"_id":"public/archives/2017/04/index.html","hash":"baf1d578ac013d8ccce2eb82525b842c44035302","modified":1506094161411},{"_id":"public/archives/2017/06/index.html","hash":"9f4033363d952aaae37d47e9b0da8bdc0ffd403b","modified":1506094161411},{"_id":"public/archives/2017/08/index.html","hash":"942ba704bc133e0616898bc0b3c99d3671c06aed","modified":1506094161411},{"_id":"public/archives/2017/09/index.html","hash":"dfd25e8e8764d4eea6637d29c02b21c7ce7cf578","modified":1506094161411},{"_id":"public/tags/Apache/index.html","hash":"34119a5aee745dcb2f2ff6941b583b205249f229","modified":1506094161411},{"_id":"public/tags/Web服务/index.html","hash":"6a4bbb312f794d8a1ae6bc73f155ce6aba7ebfc5","modified":1506094161411},{"_id":"public/tags/虚拟主机/index.html","hash":"03986be2b46734a92a1253c6d7d98c3735c0a0d9","modified":1506094161411},{"_id":"public/tags/PHP/index.html","hash":"11b2444f9d59a4cab8cec6a48d6fab485cac009e","modified":1506094161411},{"_id":"public/tags/C语言/index.html","hash":"8e80a2e7dc9481c895eb85140faac1b28d6dfd01","modified":1506094161411},{"_id":"public/tags/Bool/index.html","hash":"2e065489fded3946648364f5d15173a24c6aa7fe","modified":1506094161411},{"_id":"public/tags/文件系统/index.html","hash":"2967102947acae80adc04c6bf3bc50d47968ca6f","modified":1506094161411},{"_id":"public/tags/操作系统/index.html","hash":"a610336fa81f58a77739b761104d0b3707b77735","modified":1506094161411},{"_id":"public/tags/防火墙/index.html","hash":"38b26fcede12e070d305da8fee2815e4ba63bbc6","modified":1506094161411},{"_id":"public/tags/firewall-cmd/index.html","hash":"1abc9bcdccfd86eb52188c6c22af12a099006890","modified":1506094161411},{"_id":"public/tags/Linux/index.html","hash":"4ca17f88eef0e43f49c14339e722246bf0e92f61","modified":1506094161411},{"_id":"public/tags/Linux/page/2/index.html","hash":"b65d3f3f95015f94974bf9b447661a0857640a3c","modified":1506094161411},{"_id":"public/tags/HDFS/index.html","hash":"f96c1b911eb5578d8baa795f69ac7bbf75a329c0","modified":1506094161412},{"_id":"public/tags/大数据/index.html","hash":"964ad10502c6da2994c1050f6097614f0d8c4bc7","modified":1506094161412},{"_id":"public/tags/Hadoop/index.html","hash":"8376ba2722457c1868856b509f878970536d3ce0","modified":1506094161412},{"_id":"public/tags/Java/index.html","hash":"44599af3e126cc73c8d3f0caaa1385c375be6ce2","modified":1506094161412},{"_id":"public/tags/面向对象/index.html","hash":"925cf7056e53913407de7ceeb779e5ad964fcfad","modified":1506094161412},{"_id":"public/tags/MD5/index.html","hash":"9d46813f5415a8fbe9f509e21d80daf74f56930c","modified":1506094161412},{"_id":"public/tags/BASE64/index.html","hash":"17b6ea6694b6282bce3208ad029ae906de2e4115","modified":1506094161412},{"_id":"public/tags/加密/index.html","hash":"8442b8efbe0aad50d14473a0d65c153742f0ea4c","modified":1506094161412},{"_id":"public/tags/解密/index.html","hash":"7f913ecfcebb220110cea08f9ae21fb92ba57076","modified":1506094161412},{"_id":"public/tags/编码/index.html","hash":"93d457a98f7f3a479df3a3d8b22d881632fd3626","modified":1506094161412},{"_id":"public/tags/解码/index.html","hash":"c891caaa36ad868e999f804a4ee0160cfaacda3a","modified":1506094161412},{"_id":"public/tags/flask/index.html","hash":"06f68b885f97fb58447b6ad58bb9cad943629119","modified":1506094161412},{"_id":"public/tags/Python/index.html","hash":"bd375088e1d8a160e2c7d0b376fde14c963a3d4f","modified":1506094161412},{"_id":"public/tags/Python/page/2/index.html","hash":"2c11fb7c2b186cdff25127dba167627ebd16a4cc","modified":1506094161412},{"_id":"public/tags/API/index.html","hash":"40385a2565dc680d9990a1502341330925c29124","modified":1506094161412},{"_id":"public/tags/字符串/index.html","hash":"22c7815c251538781238645f71d618f1c2c0e3e7","modified":1506094161412},{"_id":"public/tags/ACL/index.html","hash":"83143270f82907290a4aeb86ba0e8d46b3dea82a","modified":1506094161412},{"_id":"public/tags/权限/index.html","hash":"2bd3e3ea90e8d9daf60d902e751737786be55957","modified":1506094161412},{"_id":"public/tags/Crontab/index.html","hash":"fab8d58fb9d661619f3e1cb9058cf5fc2f43962e","modified":1506094161412},{"_id":"public/tags/计划任务/index.html","hash":"52c01f99b233633da1f826bbc2ad7f6c7d884fed","modified":1506094161412},{"_id":"public/tags/DHCP/index.html","hash":"c7eed56ee5c80b88daa1b67f5c92944e565b2552","modified":1506094161412},{"_id":"public/tags/服务配置/index.html","hash":"0a08104354eb9e72dd217898c57ffa1a5a169f76","modified":1506094161412},{"_id":"public/tags/目录树/index.html","hash":"db8aeb586f99ff1440c936c4098410e6629d2db7","modified":1506094161412},{"_id":"public/tags/软链接/index.html","hash":"70c1d9f6d3ecf51a627022feb1d1b9fdf0a0cdeb","modified":1506094161412},{"_id":"public/tags/硬链接/index.html","hash":"31209ef76a1a4b0197e973f351b4a189230baf76","modified":1506094161413},{"_id":"public/tags/链接/index.html","hash":"2d0fa834a0e289484e15f4e80b7d303e3586d9f2","modified":1506094161413},{"_id":"public/tags/MySQL/index.html","hash":"e0ea0b973fe477013f90261cceead0a059694adb","modified":1506094161413},{"_id":"public/tags/MariaDB/index.html","hash":"6563ff784d661235ae44bcc6574b8e642343d351","modified":1506094161413},{"_id":"public/tags/数据库/index.html","hash":"85ea62df29dcf4503ca6a38121527598582f9a2b","modified":1506094161413},{"_id":"public/tags/中文/index.html","hash":"72fb2f1612a339838abd7e73f0c75b1d812a8c55","modified":1506094161413},{"_id":"public/tags/LVM/index.html","hash":"7be7a4a570eae77422798a356e924c567c31cef8","modified":1506094161413},{"_id":"public/tags/分区/index.html","hash":"cdb735727f82e03c8c607f16c9c0499441c3cfa8","modified":1506094161413},{"_id":"public/tags/格式化/index.html","hash":"4fb846cdf48c0ab74e121479b1f692c572b7a539","modified":1506094161413},{"_id":"public/tags/NFS/index.html","hash":"a8a7fab984a9168aa79900623e910f02f6093a58","modified":1506094161413},{"_id":"public/tags/用户管理/index.html","hash":"6a2d4b08a58eab80dc82f07637bdd6e7819425b2","modified":1506094161413},{"_id":"public/tags/服务安装/index.html","hash":"048ef4230a2960a99c24193ddd26eac15a151334","modified":1506094161413},{"_id":"public/tags/数据备份/index.html","hash":"7a4c675d98b9caff97642fd9c73df23fb171ce4a","modified":1506094161413},{"_id":"public/tags/swap/index.html","hash":"fe6921d3201840bee0a18e0d24aa4132f248abe8","modified":1506094161413},{"_id":"public/tags/交换分区/index.html","hash":"aa0f6cb5e7e1ed84a7f75d34a556d50d137b2aeb","modified":1506094161413},{"_id":"public/tags/虚拟内存/index.html","hash":"1cf7b16bd05dc75cf700b480767ddbc9c0bbaba6","modified":1506094161413},{"_id":"public/tags/nmcli/index.html","hash":"7302a0a44f2f06259778136344da207469089113","modified":1506094161413},{"_id":"public/tags/ip/index.html","hash":"253c6a7a57e97d662fd29b7cb2b13ef990e6628d","modified":1506094161413},{"_id":"public/tags/网络/index.html","hash":"fd18abfff788f6de7228bcfd95063f6b226ee44b","modified":1506094161413},{"_id":"public/tags/OpenSSH/index.html","hash":"292d7aebf3cdaa8745d5a95a1887355e827ea572","modified":1506094161413},{"_id":"public/tags/公钥/index.html","hash":"d56d25fe6e3484ffc814853708676f0cdaaf85c8","modified":1506094161413},{"_id":"public/tags/私钥/index.html","hash":"2b0722b79a1d0f523b1c31e8d953ce4c305521f4","modified":1506094161413},{"_id":"public/tags/签名/index.html","hash":"a06e42c60e287f1c5c45a8f65f350294a3839475","modified":1506094161413},{"_id":"public/tags/非对称加密/index.html","hash":"55f08cc817e20dc5b142ae9f201e27cb82257580","modified":1506094161414},{"_id":"public/tags/Demo/index.html","hash":"f27b81de1e1e0c186f4691954552b6bdd6786a59","modified":1506094161414},{"_id":"public/tags/Exception/index.html","hash":"2b1fb6af98c0fdc493b31645bcfe8f77be8d2623","modified":1506094161414},{"_id":"public/tags/算法/index.html","hash":"88306fa6f0d0f0964272023ea8f4cb5a0bc22864","modified":1506094161414},{"_id":"public/tags/实例方法/index.html","hash":"edcae04ccb08793d9c73c28b957fcfe02e6ab4fa","modified":1506094161414},{"_id":"public/tags/静态方法/index.html","hash":"9b5d67f7bb038ff308457af7c2ed0a8361e65601","modified":1506094161414},{"_id":"public/tags/类方法/index.html","hash":"c4f561cbd34f4b3f6d7a948ec5693dd50e3c5014","modified":1506094161414},{"_id":"public/tags/OOP/index.html","hash":"3d357cc28ee6230dfb20e378d808ed6da1e72868","modified":1506094161414},{"_id":"public/tags/数据结构/index.html","hash":"e9415dd42fdc54445c1521867f934f922da867ce","modified":1506094161414},{"_id":"public/tags/Dict/index.html","hash":"d579dd830b3e8de9b39126f96dcdfc462ac2047a","modified":1506094161414},{"_id":"public/tags/List/index.html","hash":"73a7f028dde9ee85be7d6c904d20b7a87e8fe568","modified":1506094161414},{"_id":"public/tags/function/index.html","hash":"29e33cf768f639c51a09b2c128d6f0d6b18c33fd","modified":1506094161414},{"_id":"public/tags/String/index.html","hash":"67ea0c56d3a2b5061ac27c981cccf72970295ef0","modified":1506094161414},{"_id":"public/tags/I-O/index.html","hash":"0d91b6f943e4bfdcc5be961f38a323fb9e31e4e4","modified":1506094161414},{"_id":"public/tags/RabbieMQ/index.html","hash":"3d0d194593ccde3558cf7d430d0c66af019c0c0e","modified":1506094161414},{"_id":"public/tags/消息队列/index.html","hash":"e3f3c0805c391808c67bc1995bc91b6946a6d1b1","modified":1506094161414},{"_id":"public/tags/demo/index.html","hash":"96a341858f41254e5a693d76586bd2965adac279","modified":1506094161414},{"_id":"public/tags/pip/index.html","hash":"2256f69d66f41cc94bd0e3b38e912e2e424953d4","modified":1506094161414},{"_id":"public/tags/virtualenv/index.html","hash":"61f0397c0b0de64241dad9bd96149cb1ad054a16","modified":1506094161414},{"_id":"public/tags/Virtualenvwapper/index.html","hash":"5e72c52013a435f55a4593c92d645eeb918b5eec","modified":1506094161414},{"_id":"public/tags/Shadowsocks/index.html","hash":"12c63fc5e0026994c8bd1e8d51a380ffc888a292","modified":1506094161414},{"_id":"public/tags/梯子/index.html","hash":"94efcbc002a65eefbe18005c0f99fe714e03b130","modified":1506094161414},{"_id":"public/tags/代理/index.html","hash":"73044b2a8927e8526632d016711d4a19c0d8b48a","modified":1506094161415},{"_id":"public/tags/VPS/index.html","hash":"c3762aa6f03a972bdd8a795bcb7e82085dff0ebf","modified":1506094161415},{"_id":"public/tags/Shell/index.html","hash":"09ec92e4fa56210930b9010a98467bdd6679923a","modified":1506094161415},{"_id":"public/tags/Script/index.html","hash":"b0d2932e150972acee0d0fb1fb9fb581ab75f9b5","modified":1506094161415},{"_id":"public/index.html","hash":"4af8d6b7ceedf4a6e53d548821710f7f1f2eb975","modified":1506094161415},{"_id":"public/page/2/index.html","hash":"8cdf2ef99cd219cf27817f12f589355930c7836a","modified":1506094161415},{"_id":"public/page/3/index.html","hash":"5d0783c423dbe2243b15784e4e714b87c384aa8c","modified":1506094161415},{"_id":"public/page/4/index.html","hash":"8c3de415af346972f6f50a33c3955e5444f70c8b","modified":1506094161415},{"_id":"public/page/5/index.html","hash":"8be34a80631f6cac1576460169ab982913490e36","modified":1506094161415},{"_id":"public/favicon.ico","hash":"063450642ca60f3a19b5e7beee6195d52b51e724","modified":1506094161423},{"_id":"public/images/Alipay.jpg","hash":"a1c4ecf19060d988463aca6ebf95227c4cb96999","modified":1506094161423},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1506094161423},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1506094161423},{"_id":"public/images/Wechat.png","hash":"1e4b2f7478ac35afd43dc560f511038999e6f488","modified":1506094161423},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1506094161423},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1506094161423},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1506094161423},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1506094161423},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1506094161423},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1506094161423},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1506094161423},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506094161423},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1506094161423},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1506094161424},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1506094161424},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1506094161424},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1506094161424},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1506094161424},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506094161424},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506094161424},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506094161424},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506094161424},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506094161424},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506094161424},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1506094161424},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1506094161424},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1506094161424},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1506094161424},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1506094161424},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506094161424},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1506094161925},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1506094161931},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1506094161943},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1506094161943},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1506094161943},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1506094161943},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1506094161943},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1506094161943},{"_id":"public/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1506094161943},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1506094161943},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1506094161943},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1506094161943},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1506094161943},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1506094161943},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1506094161944},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1506094161944},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1506094161944},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1506094161944},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1506094161944},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1506094161944},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1506094161944},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1506094161944},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1506094161944},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1506094161944},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1506094161944},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1506094161944},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1506094161944},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1506094161944},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1506094161944},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1506094161944},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1506094161945},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1506094161945},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1506094161945},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506094161945},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1506094161945},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1506094161945},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506094161945},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1506094161945},{"_id":"public/css/main.css","hash":"c1cf3222e7afc98f11b049a0f7c128bb1ea44f33","modified":1506094161945},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1506094161945},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1506094161945},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1506094161945},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1506094161945},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1506094161945},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1506094161945},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1506094161945},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1506094161945},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1506094161945},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1506094161945},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1506094161945},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1506094161945},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1506094161945},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1506094161945},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1506094161946},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1506094161946},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1506094161946},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1506094161946},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1506094161946},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1506094161946},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1506094161946},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1506094161958}],"Category":[],"Data":[],"Page":[{"title":"404 Not Found","_content":"\n1969-12-31 23:59.00\n\n页面不见了，可能是被外星人带走了;\n页面不见了，可能是人类文明消失了;\n页面不见了，可能是Github宕机了;\n页面不见了，可能是Http再跟你开玩笑;\n页面不见了，可能是时间戳溢出了;\n页面不见了，可能是浏览器在逗你玩;\n页面不见了，可能是页面被路由器吃了;\n页面不见了，可能是你滚键盘访问的本站;\n页面不见了，可能是。。。。蛤？\n\n\n反正页面不见了。\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found\n---\n\n1969-12-31 23:59.00\n\n页面不见了，可能是被外星人带走了;\n页面不见了，可能是人类文明消失了;\n页面不见了，可能是Github宕机了;\n页面不见了，可能是Http再跟你开玩笑;\n页面不见了，可能是时间戳溢出了;\n页面不见了，可能是浏览器在逗你玩;\n页面不见了，可能是页面被路由器吃了;\n页面不见了，可能是你滚键盘访问的本站;\n页面不见了，可能是。。。。蛤？\n\n\n反正页面不见了。\n","date":"2017-09-03T09:10:16.217Z","updated":"2017-09-03T09:10:16.213Z","path":"404/index.html","comments":1,"layout":"page","_id":"cj7w1kmdf0000hnlpkqox79gy","content":"<p>1969-12-31 23:59.00</p>\n<p>页面不见了，可能是被外星人带走了;<br>页面不见了，可能是人类文明消失了;<br>页面不见了，可能是Github宕机了;<br>页面不见了，可能是Http再跟你开玩笑;<br>页面不见了，可能是时间戳溢出了;<br>页面不见了，可能是浏览器在逗你玩;<br>页面不见了，可能是页面被路由器吃了;<br>页面不见了，可能是你滚键盘访问的本站;<br>页面不见了，可能是。。。。蛤？</p>\n<p>反正页面不见了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1969-12-31 23:59.00</p>\n<p>页面不见了，可能是被外星人带走了;<br>页面不见了，可能是人类文明消失了;<br>页面不见了，可能是Github宕机了;<br>页面不见了，可能是Http再跟你开玩笑;<br>页面不见了，可能是时间戳溢出了;<br>页面不见了，可能是浏览器在逗你玩;<br>页面不见了，可能是页面被路由器吃了;<br>页面不见了，可能是你滚键盘访问的本站;<br>页面不见了，可能是。。。。蛤？</p>\n<p>反正页面不见了。</p>\n"},{"title":"关于我","date":"2016-07-25T14:47:00.000Z","tags":"index hello world","_content":"\n# 在校大学生、伪技术宅\n\n* 称呼：Shawn、耗子\n* 兴趣：看火影、转魔方、玩电脑、看书、玩弄各种电子产品\n* Github：https://github.com/shawn-bluce\n* 邮箱：shawnbluce@gmail.com\n\n# 看火影\n从小学就接触了吧，那个时候好多小伙伴用左手抓着右手大喊“千鸟！！”的中二时光还是很棒的哈。高中毕业的那个暑假才把火影从第一集开始看的，一直看到了鸣人和雏田走到了婚姻殿堂，祝他们幸福。小樱也终于和佐助在一起了，也祝福他们。想吐槽的一大点，鸣人他们是商量好了一起生的孩子嘛，为啥他们的孩子都是同一级的啊，贼诡异。\n要说火影教给我最多的，大概就是“说到做到，有话直说”的忍道了吧。说来也巧，写到这里的时候正好网易云随机到了青鸟。\n\n# 转魔方\n最早学魔方就是因为帅，但是练习到帅的程度可远没有那么简单，以至于现在三阶魔方还只是40s的新手水平。不过其他倒是了解了一点儿，二三四五阶魔方都能玩。还有一个镜面魔方，这个是耍帅利器，因为六面都是一个颜色还高低不平，就看起来很帅，其实呢却很简单，嗯。\n\n# 玩电脑\n接触电脑算是比较早的了吧，第一次应该是小学二年级的微机课，到后来三四年级家里买了电脑就各种折腾。经常把电脑弄坏，然后找人来家里修。在修电脑的时候我就一直问问题，问东问西的，不过幸运的是每次修电脑的哥哥们都不会烦，而是认真回答我的问题。大概从那个时候我就对了解电脑的那群人有了比较好的印象。小学的时候就是玩游戏过来的，GBA模拟器、街机模拟器、红警2、CS1.6，当时家里电脑连GTA罪恶都市都不能玩的，还没有网， 就常跑去黑网吧玩问道和征途。\n到了初中家里换了电脑还连了网，就开始玩网游、继续玩征途还开始接触了腾讯的毒瘤：穿越火线和地下城。那段时间玩游戏很多，家里各种阻止我玩电脑，无所不用其极啊。给电脑设密码，藏鼠标，藏键盘，藏电源线。。。正所谓上有政策下有对策。你设密码，我学会了装双系统；你藏鼠标，我学会了快捷键；你藏键盘，我找到了软键盘；你藏电源线，我找电饭锅（据说这招儿好多同学都用过呢）。这段时间就对电脑了解的多了些，不过依旧没有接触过编程。\n高一的时候，在一次偶然的机会下得知了编程，就跑去高中所在县城的新华书店花了三天饭钱买了一本《C语言从入门到精通》，那个时候不懂的嘛就乱买的。不过高中是寄宿制没有电脑可以用，也就一直没有实践机会，就前两个月比较热血的时候中午不午休悄悄在教室用多媒体写代码，到后来没人交流还不知道下一步该干啥，就没再继续了。不过高中三年的《电脑报》是我了解计算机最大的助推器了。基本上三年的电脑报从来没断过，也就是这三年的报纸让我对计算机和其他的电子产品了解的比较系统透彻。\n高考完了买了自己的第一台笔记本，开始了一本正经的学习（虽然还是很菜），不过也是正式开始接触了。大学里大家都差不多的，学C、学Java、学Python和一些理论知识。到了大三大家开始划分不同的方向了，我呢差不多就算是Py和Linux运维了吧，嗯大学还没结束，就这样了。\n\n# 看书\n我喜欢看各种学科的科普，尤其是理科工科的科普。说到看书，还是推荐买本Kindle，一千本书装Kindle里随身带着跑都没问题，而且看起来比手机电脑高到不知道哪里去了，专业书就不推荐看Kindle了，代码和图什么的看着不舒服。好书呢我就不乱推荐了，我都看一些乱七八糟的书，毫无章法没有规律，不好推荐。\n\n# 玩弄各种电子产品\n这个就不说了嘛，可以说是大多数计算机专业甚至工科理科生的通病。看见什么东西都想拆开看看，研究研究原理，瞅瞅能不能改改哪儿的。对了，推荐一款超好玩的玩具，Raspberry（一个超Mini的Linux卡片电脑）。是一个非常棒的玩具，可以安装Linux系统，有USB、以太网、WIFI、蓝牙等接口，USB供电，玩法非常多，有兴趣的同学可以了解一下。\n\n# 喜欢开源&黑客文化\n我是自由软件万千推崇者之一，喜欢用各种自由软件也乐于给他人推荐自由软件，在可以的前提下能用自由软件就用自由软件。关于黑客文化呢，这里指的不是骇客文化，而是那种乐于钻研，对兴趣点执着的精神。\n\n# 博客历史\n2015-03-14 在 CSDN 上注册了博客并写了第一篇博文 [Vim的基础配置](http://blog.csdn.net/mouse_ts/article/details/44261747 )\n2016-05-11 从腾讯云那里拿到了学生优惠，开始在服务器上搭建独立博客，选用[Typecho](http://typecho.org)\n2016-11-24 从新安装博客系统，配置更安全的数据库和 http，修改主题\n2017-03-06 正式启用 https\n2017-09-03 迁移至Github并和Typecho同时更新  [Github新博客](http://blog.xshawn.top)\n","source":"about/index.md","raw":"---\ntitle: 关于我 \ndate: 2016-07-25 22:47\ntags: index hello world\n---\n\n# 在校大学生、伪技术宅\n\n* 称呼：Shawn、耗子\n* 兴趣：看火影、转魔方、玩电脑、看书、玩弄各种电子产品\n* Github：https://github.com/shawn-bluce\n* 邮箱：shawnbluce@gmail.com\n\n# 看火影\n从小学就接触了吧，那个时候好多小伙伴用左手抓着右手大喊“千鸟！！”的中二时光还是很棒的哈。高中毕业的那个暑假才把火影从第一集开始看的，一直看到了鸣人和雏田走到了婚姻殿堂，祝他们幸福。小樱也终于和佐助在一起了，也祝福他们。想吐槽的一大点，鸣人他们是商量好了一起生的孩子嘛，为啥他们的孩子都是同一级的啊，贼诡异。\n要说火影教给我最多的，大概就是“说到做到，有话直说”的忍道了吧。说来也巧，写到这里的时候正好网易云随机到了青鸟。\n\n# 转魔方\n最早学魔方就是因为帅，但是练习到帅的程度可远没有那么简单，以至于现在三阶魔方还只是40s的新手水平。不过其他倒是了解了一点儿，二三四五阶魔方都能玩。还有一个镜面魔方，这个是耍帅利器，因为六面都是一个颜色还高低不平，就看起来很帅，其实呢却很简单，嗯。\n\n# 玩电脑\n接触电脑算是比较早的了吧，第一次应该是小学二年级的微机课，到后来三四年级家里买了电脑就各种折腾。经常把电脑弄坏，然后找人来家里修。在修电脑的时候我就一直问问题，问东问西的，不过幸运的是每次修电脑的哥哥们都不会烦，而是认真回答我的问题。大概从那个时候我就对了解电脑的那群人有了比较好的印象。小学的时候就是玩游戏过来的，GBA模拟器、街机模拟器、红警2、CS1.6，当时家里电脑连GTA罪恶都市都不能玩的，还没有网， 就常跑去黑网吧玩问道和征途。\n到了初中家里换了电脑还连了网，就开始玩网游、继续玩征途还开始接触了腾讯的毒瘤：穿越火线和地下城。那段时间玩游戏很多，家里各种阻止我玩电脑，无所不用其极啊。给电脑设密码，藏鼠标，藏键盘，藏电源线。。。正所谓上有政策下有对策。你设密码，我学会了装双系统；你藏鼠标，我学会了快捷键；你藏键盘，我找到了软键盘；你藏电源线，我找电饭锅（据说这招儿好多同学都用过呢）。这段时间就对电脑了解的多了些，不过依旧没有接触过编程。\n高一的时候，在一次偶然的机会下得知了编程，就跑去高中所在县城的新华书店花了三天饭钱买了一本《C语言从入门到精通》，那个时候不懂的嘛就乱买的。不过高中是寄宿制没有电脑可以用，也就一直没有实践机会，就前两个月比较热血的时候中午不午休悄悄在教室用多媒体写代码，到后来没人交流还不知道下一步该干啥，就没再继续了。不过高中三年的《电脑报》是我了解计算机最大的助推器了。基本上三年的电脑报从来没断过，也就是这三年的报纸让我对计算机和其他的电子产品了解的比较系统透彻。\n高考完了买了自己的第一台笔记本，开始了一本正经的学习（虽然还是很菜），不过也是正式开始接触了。大学里大家都差不多的，学C、学Java、学Python和一些理论知识。到了大三大家开始划分不同的方向了，我呢差不多就算是Py和Linux运维了吧，嗯大学还没结束，就这样了。\n\n# 看书\n我喜欢看各种学科的科普，尤其是理科工科的科普。说到看书，还是推荐买本Kindle，一千本书装Kindle里随身带着跑都没问题，而且看起来比手机电脑高到不知道哪里去了，专业书就不推荐看Kindle了，代码和图什么的看着不舒服。好书呢我就不乱推荐了，我都看一些乱七八糟的书，毫无章法没有规律，不好推荐。\n\n# 玩弄各种电子产品\n这个就不说了嘛，可以说是大多数计算机专业甚至工科理科生的通病。看见什么东西都想拆开看看，研究研究原理，瞅瞅能不能改改哪儿的。对了，推荐一款超好玩的玩具，Raspberry（一个超Mini的Linux卡片电脑）。是一个非常棒的玩具，可以安装Linux系统，有USB、以太网、WIFI、蓝牙等接口，USB供电，玩法非常多，有兴趣的同学可以了解一下。\n\n# 喜欢开源&黑客文化\n我是自由软件万千推崇者之一，喜欢用各种自由软件也乐于给他人推荐自由软件，在可以的前提下能用自由软件就用自由软件。关于黑客文化呢，这里指的不是骇客文化，而是那种乐于钻研，对兴趣点执着的精神。\n\n# 博客历史\n2015-03-14 在 CSDN 上注册了博客并写了第一篇博文 [Vim的基础配置](http://blog.csdn.net/mouse_ts/article/details/44261747 )\n2016-05-11 从腾讯云那里拿到了学生优惠，开始在服务器上搭建独立博客，选用[Typecho](http://typecho.org)\n2016-11-24 从新安装博客系统，配置更安全的数据库和 http，修改主题\n2017-03-06 正式启用 https\n2017-09-03 迁移至Github并和Typecho同时更新  [Github新博客](http://blog.xshawn.top)\n","updated":"2017-09-03T13:54:54.248Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj7w1kmdm0002hnlpe65f9k1e","content":"<h1 id=\"在校大学生、伪技术宅\"><a href=\"#在校大学生、伪技术宅\" class=\"headerlink\" title=\"在校大学生、伪技术宅\"></a>在校大学生、伪技术宅</h1><ul>\n<li>称呼：Shawn、耗子</li>\n<li>兴趣：看火影、转魔方、玩电脑、看书、玩弄各种电子产品</li>\n<li>Github：<a href=\"https://github.com/shawn-bluce\" target=\"_blank\" rel=\"external\">https://github.com/shawn-bluce</a></li>\n<li>邮箱：shawnbluce@gmail.com</li>\n</ul>\n<h1 id=\"看火影\"><a href=\"#看火影\" class=\"headerlink\" title=\"看火影\"></a>看火影</h1><p>从小学就接触了吧，那个时候好多小伙伴用左手抓着右手大喊“千鸟！！”的中二时光还是很棒的哈。高中毕业的那个暑假才把火影从第一集开始看的，一直看到了鸣人和雏田走到了婚姻殿堂，祝他们幸福。小樱也终于和佐助在一起了，也祝福他们。想吐槽的一大点，鸣人他们是商量好了一起生的孩子嘛，为啥他们的孩子都是同一级的啊，贼诡异。<br>要说火影教给我最多的，大概就是“说到做到，有话直说”的忍道了吧。说来也巧，写到这里的时候正好网易云随机到了青鸟。</p>\n<h1 id=\"转魔方\"><a href=\"#转魔方\" class=\"headerlink\" title=\"转魔方\"></a>转魔方</h1><p>最早学魔方就是因为帅，但是练习到帅的程度可远没有那么简单，以至于现在三阶魔方还只是40s的新手水平。不过其他倒是了解了一点儿，二三四五阶魔方都能玩。还有一个镜面魔方，这个是耍帅利器，因为六面都是一个颜色还高低不平，就看起来很帅，其实呢却很简单，嗯。</p>\n<h1 id=\"玩电脑\"><a href=\"#玩电脑\" class=\"headerlink\" title=\"玩电脑\"></a>玩电脑</h1><p>接触电脑算是比较早的了吧，第一次应该是小学二年级的微机课，到后来三四年级家里买了电脑就各种折腾。经常把电脑弄坏，然后找人来家里修。在修电脑的时候我就一直问问题，问东问西的，不过幸运的是每次修电脑的哥哥们都不会烦，而是认真回答我的问题。大概从那个时候我就对了解电脑的那群人有了比较好的印象。小学的时候就是玩游戏过来的，GBA模拟器、街机模拟器、红警2、CS1.6，当时家里电脑连GTA罪恶都市都不能玩的，还没有网， 就常跑去黑网吧玩问道和征途。<br>到了初中家里换了电脑还连了网，就开始玩网游、继续玩征途还开始接触了腾讯的毒瘤：穿越火线和地下城。那段时间玩游戏很多，家里各种阻止我玩电脑，无所不用其极啊。给电脑设密码，藏鼠标，藏键盘，藏电源线。。。正所谓上有政策下有对策。你设密码，我学会了装双系统；你藏鼠标，我学会了快捷键；你藏键盘，我找到了软键盘；你藏电源线，我找电饭锅（据说这招儿好多同学都用过呢）。这段时间就对电脑了解的多了些，不过依旧没有接触过编程。<br>高一的时候，在一次偶然的机会下得知了编程，就跑去高中所在县城的新华书店花了三天饭钱买了一本《C语言从入门到精通》，那个时候不懂的嘛就乱买的。不过高中是寄宿制没有电脑可以用，也就一直没有实践机会，就前两个月比较热血的时候中午不午休悄悄在教室用多媒体写代码，到后来没人交流还不知道下一步该干啥，就没再继续了。不过高中三年的《电脑报》是我了解计算机最大的助推器了。基本上三年的电脑报从来没断过，也就是这三年的报纸让我对计算机和其他的电子产品了解的比较系统透彻。<br>高考完了买了自己的第一台笔记本，开始了一本正经的学习（虽然还是很菜），不过也是正式开始接触了。大学里大家都差不多的，学C、学Java、学Python和一些理论知识。到了大三大家开始划分不同的方向了，我呢差不多就算是Py和Linux运维了吧，嗯大学还没结束，就这样了。</p>\n<h1 id=\"看书\"><a href=\"#看书\" class=\"headerlink\" title=\"看书\"></a>看书</h1><p>我喜欢看各种学科的科普，尤其是理科工科的科普。说到看书，还是推荐买本Kindle，一千本书装Kindle里随身带着跑都没问题，而且看起来比手机电脑高到不知道哪里去了，专业书就不推荐看Kindle了，代码和图什么的看着不舒服。好书呢我就不乱推荐了，我都看一些乱七八糟的书，毫无章法没有规律，不好推荐。</p>\n<h1 id=\"玩弄各种电子产品\"><a href=\"#玩弄各种电子产品\" class=\"headerlink\" title=\"玩弄各种电子产品\"></a>玩弄各种电子产品</h1><p>这个就不说了嘛，可以说是大多数计算机专业甚至工科理科生的通病。看见什么东西都想拆开看看，研究研究原理，瞅瞅能不能改改哪儿的。对了，推荐一款超好玩的玩具，Raspberry（一个超Mini的Linux卡片电脑）。是一个非常棒的玩具，可以安装Linux系统，有USB、以太网、WIFI、蓝牙等接口，USB供电，玩法非常多，有兴趣的同学可以了解一下。</p>\n<h1 id=\"喜欢开源-amp-黑客文化\"><a href=\"#喜欢开源-amp-黑客文化\" class=\"headerlink\" title=\"喜欢开源&amp;黑客文化\"></a>喜欢开源&amp;黑客文化</h1><p>我是自由软件万千推崇者之一，喜欢用各种自由软件也乐于给他人推荐自由软件，在可以的前提下能用自由软件就用自由软件。关于黑客文化呢，这里指的不是骇客文化，而是那种乐于钻研，对兴趣点执着的精神。</p>\n<h1 id=\"博客历史\"><a href=\"#博客历史\" class=\"headerlink\" title=\"博客历史\"></a>博客历史</h1><p>2015-03-14 在 CSDN 上注册了博客并写了第一篇博文 <a href=\"http://blog.csdn.net/mouse_ts/article/details/44261747\" target=\"_blank\" rel=\"external\">Vim的基础配置</a><br>2016-05-11 从腾讯云那里拿到了学生优惠，开始在服务器上搭建独立博客，选用<a href=\"http://typecho.org\" target=\"_blank\" rel=\"external\">Typecho</a><br>2016-11-24 从新安装博客系统，配置更安全的数据库和 http，修改主题<br>2017-03-06 正式启用 https<br>2017-09-03 迁移至Github并和Typecho同时更新  <a href=\"http://blog.xshawn.top\">Github新博客</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在校大学生、伪技术宅\"><a href=\"#在校大学生、伪技术宅\" class=\"headerlink\" title=\"在校大学生、伪技术宅\"></a>在校大学生、伪技术宅</h1><ul>\n<li>称呼：Shawn、耗子</li>\n<li>兴趣：看火影、转魔方、玩电脑、看书、玩弄各种电子产品</li>\n<li>Github：<a href=\"https://github.com/shawn-bluce\" target=\"_blank\" rel=\"external\">https://github.com/shawn-bluce</a></li>\n<li>邮箱：shawnbluce@gmail.com</li>\n</ul>\n<h1 id=\"看火影\"><a href=\"#看火影\" class=\"headerlink\" title=\"看火影\"></a>看火影</h1><p>从小学就接触了吧，那个时候好多小伙伴用左手抓着右手大喊“千鸟！！”的中二时光还是很棒的哈。高中毕业的那个暑假才把火影从第一集开始看的，一直看到了鸣人和雏田走到了婚姻殿堂，祝他们幸福。小樱也终于和佐助在一起了，也祝福他们。想吐槽的一大点，鸣人他们是商量好了一起生的孩子嘛，为啥他们的孩子都是同一级的啊，贼诡异。<br>要说火影教给我最多的，大概就是“说到做到，有话直说”的忍道了吧。说来也巧，写到这里的时候正好网易云随机到了青鸟。</p>\n<h1 id=\"转魔方\"><a href=\"#转魔方\" class=\"headerlink\" title=\"转魔方\"></a>转魔方</h1><p>最早学魔方就是因为帅，但是练习到帅的程度可远没有那么简单，以至于现在三阶魔方还只是40s的新手水平。不过其他倒是了解了一点儿，二三四五阶魔方都能玩。还有一个镜面魔方，这个是耍帅利器，因为六面都是一个颜色还高低不平，就看起来很帅，其实呢却很简单，嗯。</p>\n<h1 id=\"玩电脑\"><a href=\"#玩电脑\" class=\"headerlink\" title=\"玩电脑\"></a>玩电脑</h1><p>接触电脑算是比较早的了吧，第一次应该是小学二年级的微机课，到后来三四年级家里买了电脑就各种折腾。经常把电脑弄坏，然后找人来家里修。在修电脑的时候我就一直问问题，问东问西的，不过幸运的是每次修电脑的哥哥们都不会烦，而是认真回答我的问题。大概从那个时候我就对了解电脑的那群人有了比较好的印象。小学的时候就是玩游戏过来的，GBA模拟器、街机模拟器、红警2、CS1.6，当时家里电脑连GTA罪恶都市都不能玩的，还没有网， 就常跑去黑网吧玩问道和征途。<br>到了初中家里换了电脑还连了网，就开始玩网游、继续玩征途还开始接触了腾讯的毒瘤：穿越火线和地下城。那段时间玩游戏很多，家里各种阻止我玩电脑，无所不用其极啊。给电脑设密码，藏鼠标，藏键盘，藏电源线。。。正所谓上有政策下有对策。你设密码，我学会了装双系统；你藏鼠标，我学会了快捷键；你藏键盘，我找到了软键盘；你藏电源线，我找电饭锅（据说这招儿好多同学都用过呢）。这段时间就对电脑了解的多了些，不过依旧没有接触过编程。<br>高一的时候，在一次偶然的机会下得知了编程，就跑去高中所在县城的新华书店花了三天饭钱买了一本《C语言从入门到精通》，那个时候不懂的嘛就乱买的。不过高中是寄宿制没有电脑可以用，也就一直没有实践机会，就前两个月比较热血的时候中午不午休悄悄在教室用多媒体写代码，到后来没人交流还不知道下一步该干啥，就没再继续了。不过高中三年的《电脑报》是我了解计算机最大的助推器了。基本上三年的电脑报从来没断过，也就是这三年的报纸让我对计算机和其他的电子产品了解的比较系统透彻。<br>高考完了买了自己的第一台笔记本，开始了一本正经的学习（虽然还是很菜），不过也是正式开始接触了。大学里大家都差不多的，学C、学Java、学Python和一些理论知识。到了大三大家开始划分不同的方向了，我呢差不多就算是Py和Linux运维了吧，嗯大学还没结束，就这样了。</p>\n<h1 id=\"看书\"><a href=\"#看书\" class=\"headerlink\" title=\"看书\"></a>看书</h1><p>我喜欢看各种学科的科普，尤其是理科工科的科普。说到看书，还是推荐买本Kindle，一千本书装Kindle里随身带着跑都没问题，而且看起来比手机电脑高到不知道哪里去了，专业书就不推荐看Kindle了，代码和图什么的看着不舒服。好书呢我就不乱推荐了，我都看一些乱七八糟的书，毫无章法没有规律，不好推荐。</p>\n<h1 id=\"玩弄各种电子产品\"><a href=\"#玩弄各种电子产品\" class=\"headerlink\" title=\"玩弄各种电子产品\"></a>玩弄各种电子产品</h1><p>这个就不说了嘛，可以说是大多数计算机专业甚至工科理科生的通病。看见什么东西都想拆开看看，研究研究原理，瞅瞅能不能改改哪儿的。对了，推荐一款超好玩的玩具，Raspberry（一个超Mini的Linux卡片电脑）。是一个非常棒的玩具，可以安装Linux系统，有USB、以太网、WIFI、蓝牙等接口，USB供电，玩法非常多，有兴趣的同学可以了解一下。</p>\n<h1 id=\"喜欢开源-amp-黑客文化\"><a href=\"#喜欢开源-amp-黑客文化\" class=\"headerlink\" title=\"喜欢开源&amp;黑客文化\"></a>喜欢开源&amp;黑客文化</h1><p>我是自由软件万千推崇者之一，喜欢用各种自由软件也乐于给他人推荐自由软件，在可以的前提下能用自由软件就用自由软件。关于黑客文化呢，这里指的不是骇客文化，而是那种乐于钻研，对兴趣点执着的精神。</p>\n<h1 id=\"博客历史\"><a href=\"#博客历史\" class=\"headerlink\" title=\"博客历史\"></a>博客历史</h1><p>2015-03-14 在 CSDN 上注册了博客并写了第一篇博文 <a href=\"http://blog.csdn.net/mouse_ts/article/details/44261747\" target=\"_blank\" rel=\"external\">Vim的基础配置</a><br>2016-05-11 从腾讯云那里拿到了学生优惠，开始在服务器上搭建独立博客，选用<a href=\"http://typecho.org\" target=\"_blank\" rel=\"external\">Typecho</a><br>2016-11-24 从新安装博客系统，配置更安全的数据库和 http，修改主题<br>2017-03-06 正式启用 https<br>2017-09-03 迁移至Github并和Typecho同时更新  <a href=\"http://blog.xshawn.top\">Github新博客</a></p>\n"},{"title":"归档","layout":"page-archive","_content":"","source":"archive/index.md","raw":"---\ntitle: 归档\nlayout: page-archive \n---\n","date":"2017-09-02T03:26:39.035Z","updated":"2017-09-02T03:26:39.035Z","path":"archive/index.html","comments":1,"_id":"cj7w1kmds0005hnlp9c40fgmx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2016-07-25T14:47:00.000Z","_content":"\n### 友链要求：一切个人博客和技术网站\n\n##### [Jrotty:QQ爹的博客](https://qqdie.com/)\n##### [Aaron's blog:我同学的技术博客](http://blog.xiaolizi666.cn/)\n##### [303Donatello:大黑阔](http://www.jianshu.com/u/586e4e6549d5)\n##### [绛木子:90后伪宅男程序猿](http://lixianhua.com/)\n##### [逃跑计划:分享科技咨询与程序拓展](https://blog.perdel.cn/)\n##### [胡博靖:为中华之崛起而读书](http://hubojing.github.io/)\n##### [小纯洁:世上再没有比我更纯洁的了](http://xiaochunjie.me/)\n##### [Volio's Blog](https://niconiconi.org)\n##### [Anotaku:一个伪文艺非技术宅](http://www.anotaku.com/)\n##### [飞翔的技术宅](http://techair.cc/)\n##### [蔡锶铎博客:某陷入代码黑洞的少年（￣▽￣）  迷之零零后](https://idiot.moe/)\n##### [滥情's Blog](http://www.nulll.me/)\n##### [32空间 | 一个搭建在32MB内存VPS的博客⊙﹏⊙  ](https://32mb.space/)\n##### [杜哥: 珠江杜哥](http://duuge.com/)\n##### [SOST：猴儿写的博客](http://www.jianshu.com/users/cd672d2dc963/latest_articles)\n##### [小温之家：行走在猿类世界](http://wenqy.com/)\n##### [威大爷：Whatever you do,do not let go!](http://blog.csdn.net/Ypersistence)\n##### [濡沫杂记：相濡以沫，不如相忘于江湖。](http://www.rumoss.cn/)\n","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2016-07-25 22:47\n---\n\n### 友链要求：一切个人博客和技术网站\n\n##### [Jrotty:QQ爹的博客](https://qqdie.com/)\n##### [Aaron's blog:我同学的技术博客](http://blog.xiaolizi666.cn/)\n##### [303Donatello:大黑阔](http://www.jianshu.com/u/586e4e6549d5)\n##### [绛木子:90后伪宅男程序猿](http://lixianhua.com/)\n##### [逃跑计划:分享科技咨询与程序拓展](https://blog.perdel.cn/)\n##### [胡博靖:为中华之崛起而读书](http://hubojing.github.io/)\n##### [小纯洁:世上再没有比我更纯洁的了](http://xiaochunjie.me/)\n##### [Volio's Blog](https://niconiconi.org)\n##### [Anotaku:一个伪文艺非技术宅](http://www.anotaku.com/)\n##### [飞翔的技术宅](http://techair.cc/)\n##### [蔡锶铎博客:某陷入代码黑洞的少年（￣▽￣）  迷之零零后](https://idiot.moe/)\n##### [滥情's Blog](http://www.nulll.me/)\n##### [32空间 | 一个搭建在32MB内存VPS的博客⊙﹏⊙  ](https://32mb.space/)\n##### [杜哥: 珠江杜哥](http://duuge.com/)\n##### [SOST：猴儿写的博客](http://www.jianshu.com/users/cd672d2dc963/latest_articles)\n##### [小温之家：行走在猿类世界](http://wenqy.com/)\n##### [威大爷：Whatever you do,do not let go!](http://blog.csdn.net/Ypersistence)\n##### [濡沫杂记：相濡以沫，不如相忘于江湖。](http://www.rumoss.cn/)\n","updated":"2017-09-03T09:23:47.185Z","path":"links/index.html","comments":1,"layout":"page","_id":"cj7w1kmdt0007hnlpdkie48nf","content":"<h3 id=\"友链要求：一切个人博客和技术网站\"><a href=\"#友链要求：一切个人博客和技术网站\" class=\"headerlink\" title=\"友链要求：一切个人博客和技术网站\"></a>友链要求：一切个人博客和技术网站</h3><h5 id=\"Jrotty-QQ爹的博客\"><a href=\"#Jrotty-QQ爹的博客\" class=\"headerlink\" title=\"Jrotty:QQ爹的博客\"></a><a href=\"https://qqdie.com/\" target=\"_blank\" rel=\"external\">Jrotty:QQ爹的博客</a></h5><h5 id=\"Aaron’s-blog-我同学的技术博客\"><a href=\"#Aaron’s-blog-我同学的技术博客\" class=\"headerlink\" title=\"Aaron’s blog:我同学的技术博客\"></a><a href=\"http://blog.xiaolizi666.cn/\" target=\"_blank\" rel=\"external\">Aaron’s blog:我同学的技术博客</a></h5><h5 id=\"303Donatello-大黑阔\"><a href=\"#303Donatello-大黑阔\" class=\"headerlink\" title=\"303Donatello:大黑阔\"></a><a href=\"http://www.jianshu.com/u/586e4e6549d5\" target=\"_blank\" rel=\"external\">303Donatello:大黑阔</a></h5><h5 id=\"绛木子-90后伪宅男程序猿\"><a href=\"#绛木子-90后伪宅男程序猿\" class=\"headerlink\" title=\"绛木子:90后伪宅男程序猿\"></a><a href=\"http://lixianhua.com/\" target=\"_blank\" rel=\"external\">绛木子:90后伪宅男程序猿</a></h5><h5 id=\"逃跑计划-分享科技咨询与程序拓展\"><a href=\"#逃跑计划-分享科技咨询与程序拓展\" class=\"headerlink\" title=\"逃跑计划:分享科技咨询与程序拓展\"></a><a href=\"https://blog.perdel.cn/\" target=\"_blank\" rel=\"external\">逃跑计划:分享科技咨询与程序拓展</a></h5><h5 id=\"胡博靖-为中华之崛起而读书\"><a href=\"#胡博靖-为中华之崛起而读书\" class=\"headerlink\" title=\"胡博靖:为中华之崛起而读书\"></a><a href=\"http://hubojing.github.io/\" target=\"_blank\" rel=\"external\">胡博靖:为中华之崛起而读书</a></h5><h5 id=\"小纯洁-世上再没有比我更纯洁的了\"><a href=\"#小纯洁-世上再没有比我更纯洁的了\" class=\"headerlink\" title=\"小纯洁:世上再没有比我更纯洁的了\"></a><a href=\"http://xiaochunjie.me/\" target=\"_blank\" rel=\"external\">小纯洁:世上再没有比我更纯洁的了</a></h5><h5 id=\"Volio’s-Blog\"><a href=\"#Volio’s-Blog\" class=\"headerlink\" title=\"Volio’s Blog\"></a><a href=\"https://niconiconi.org\" target=\"_blank\" rel=\"external\">Volio’s Blog</a></h5><h5 id=\"Anotaku-一个伪文艺非技术宅\"><a href=\"#Anotaku-一个伪文艺非技术宅\" class=\"headerlink\" title=\"Anotaku:一个伪文艺非技术宅\"></a><a href=\"http://www.anotaku.com/\" target=\"_blank\" rel=\"external\">Anotaku:一个伪文艺非技术宅</a></h5><h5 id=\"飞翔的技术宅\"><a href=\"#飞翔的技术宅\" class=\"headerlink\" title=\"飞翔的技术宅\"></a><a href=\"http://techair.cc/\" target=\"_blank\" rel=\"external\">飞翔的技术宅</a></h5><h5 id=\"蔡锶铎博客-某陷入代码黑洞的少年（￣▽￣）-迷之零零后\"><a href=\"#蔡锶铎博客-某陷入代码黑洞的少年（￣▽￣）-迷之零零后\" class=\"headerlink\" title=\"蔡锶铎博客:某陷入代码黑洞的少年（￣▽￣）  迷之零零后\"></a><a href=\"https://idiot.moe/\" target=\"_blank\" rel=\"external\">蔡锶铎博客:某陷入代码黑洞的少年（￣▽￣）  迷之零零后</a></h5><h5 id=\"滥情’s-Blog\"><a href=\"#滥情’s-Blog\" class=\"headerlink\" title=\"滥情’s Blog\"></a><a href=\"http://www.nulll.me/\" target=\"_blank\" rel=\"external\">滥情’s Blog</a></h5><h5 id=\"32空间-一个搭建在32MB内存VPS的博客⊙﹏⊙\"><a href=\"#32空间-一个搭建在32MB内存VPS的博客⊙﹏⊙\" class=\"headerlink\" title=\"32空间 | 一个搭建在32MB内存VPS的博客⊙﹏⊙  \"></a><a href=\"https://32mb.space/\" target=\"_blank\" rel=\"external\">32空间 | 一个搭建在32MB内存VPS的博客⊙﹏⊙  </a></h5><h5 id=\"杜哥-珠江杜哥\"><a href=\"#杜哥-珠江杜哥\" class=\"headerlink\" title=\"杜哥: 珠江杜哥\"></a><a href=\"http://duuge.com/\" target=\"_blank\" rel=\"external\">杜哥: 珠江杜哥</a></h5><h5 id=\"SOST：猴儿写的博客\"><a href=\"#SOST：猴儿写的博客\" class=\"headerlink\" title=\"SOST：猴儿写的博客\"></a><a href=\"http://www.jianshu.com/users/cd672d2dc963/latest_articles\" target=\"_blank\" rel=\"external\">SOST：猴儿写的博客</a></h5><h5 id=\"小温之家：行走在猿类世界\"><a href=\"#小温之家：行走在猿类世界\" class=\"headerlink\" title=\"小温之家：行走在猿类世界\"></a><a href=\"http://wenqy.com/\" target=\"_blank\" rel=\"external\">小温之家：行走在猿类世界</a></h5><h5 id=\"威大爷：Whatever-you-do-do-not-let-go\"><a href=\"#威大爷：Whatever-you-do-do-not-let-go\" class=\"headerlink\" title=\"威大爷：Whatever you do,do not let go!\"></a><a href=\"http://blog.csdn.net/Ypersistence\" target=\"_blank\" rel=\"external\">威大爷：Whatever you do,do not let go!</a></h5><h5 id=\"濡沫杂记：相濡以沫，不如相忘于江湖。\"><a href=\"#濡沫杂记：相濡以沫，不如相忘于江湖。\" class=\"headerlink\" title=\"濡沫杂记：相濡以沫，不如相忘于江湖。\"></a><a href=\"http://www.rumoss.cn/\" target=\"_blank\" rel=\"external\">濡沫杂记：相濡以沫，不如相忘于江湖。</a></h5>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"友链要求：一切个人博客和技术网站\"><a href=\"#友链要求：一切个人博客和技术网站\" class=\"headerlink\" title=\"友链要求：一切个人博客和技术网站\"></a>友链要求：一切个人博客和技术网站</h3><h5 id=\"Jrotty-QQ爹的博客\"><a href=\"#Jrotty-QQ爹的博客\" class=\"headerlink\" title=\"Jrotty:QQ爹的博客\"></a><a href=\"https://qqdie.com/\" target=\"_blank\" rel=\"external\">Jrotty:QQ爹的博客</a></h5><h5 id=\"Aaron’s-blog-我同学的技术博客\"><a href=\"#Aaron’s-blog-我同学的技术博客\" class=\"headerlink\" title=\"Aaron’s blog:我同学的技术博客\"></a><a href=\"http://blog.xiaolizi666.cn/\" target=\"_blank\" rel=\"external\">Aaron’s blog:我同学的技术博客</a></h5><h5 id=\"303Donatello-大黑阔\"><a href=\"#303Donatello-大黑阔\" class=\"headerlink\" title=\"303Donatello:大黑阔\"></a><a href=\"http://www.jianshu.com/u/586e4e6549d5\" target=\"_blank\" rel=\"external\">303Donatello:大黑阔</a></h5><h5 id=\"绛木子-90后伪宅男程序猿\"><a href=\"#绛木子-90后伪宅男程序猿\" class=\"headerlink\" title=\"绛木子:90后伪宅男程序猿\"></a><a href=\"http://lixianhua.com/\" target=\"_blank\" rel=\"external\">绛木子:90后伪宅男程序猿</a></h5><h5 id=\"逃跑计划-分享科技咨询与程序拓展\"><a href=\"#逃跑计划-分享科技咨询与程序拓展\" class=\"headerlink\" title=\"逃跑计划:分享科技咨询与程序拓展\"></a><a href=\"https://blog.perdel.cn/\" target=\"_blank\" rel=\"external\">逃跑计划:分享科技咨询与程序拓展</a></h5><h5 id=\"胡博靖-为中华之崛起而读书\"><a href=\"#胡博靖-为中华之崛起而读书\" class=\"headerlink\" title=\"胡博靖:为中华之崛起而读书\"></a><a href=\"http://hubojing.github.io/\" target=\"_blank\" rel=\"external\">胡博靖:为中华之崛起而读书</a></h5><h5 id=\"小纯洁-世上再没有比我更纯洁的了\"><a href=\"#小纯洁-世上再没有比我更纯洁的了\" class=\"headerlink\" title=\"小纯洁:世上再没有比我更纯洁的了\"></a><a href=\"http://xiaochunjie.me/\" target=\"_blank\" rel=\"external\">小纯洁:世上再没有比我更纯洁的了</a></h5><h5 id=\"Volio’s-Blog\"><a href=\"#Volio’s-Blog\" class=\"headerlink\" title=\"Volio’s Blog\"></a><a href=\"https://niconiconi.org\" target=\"_blank\" rel=\"external\">Volio’s Blog</a></h5><h5 id=\"Anotaku-一个伪文艺非技术宅\"><a href=\"#Anotaku-一个伪文艺非技术宅\" class=\"headerlink\" title=\"Anotaku:一个伪文艺非技术宅\"></a><a href=\"http://www.anotaku.com/\" target=\"_blank\" rel=\"external\">Anotaku:一个伪文艺非技术宅</a></h5><h5 id=\"飞翔的技术宅\"><a href=\"#飞翔的技术宅\" class=\"headerlink\" title=\"飞翔的技术宅\"></a><a href=\"http://techair.cc/\" target=\"_blank\" rel=\"external\">飞翔的技术宅</a></h5><h5 id=\"蔡锶铎博客-某陷入代码黑洞的少年（￣▽￣）-迷之零零后\"><a href=\"#蔡锶铎博客-某陷入代码黑洞的少年（￣▽￣）-迷之零零后\" class=\"headerlink\" title=\"蔡锶铎博客:某陷入代码黑洞的少年（￣▽￣）  迷之零零后\"></a><a href=\"https://idiot.moe/\" target=\"_blank\" rel=\"external\">蔡锶铎博客:某陷入代码黑洞的少年（￣▽￣）  迷之零零后</a></h5><h5 id=\"滥情’s-Blog\"><a href=\"#滥情’s-Blog\" class=\"headerlink\" title=\"滥情’s Blog\"></a><a href=\"http://www.nulll.me/\" target=\"_blank\" rel=\"external\">滥情’s Blog</a></h5><h5 id=\"32空间-一个搭建在32MB内存VPS的博客⊙﹏⊙\"><a href=\"#32空间-一个搭建在32MB内存VPS的博客⊙﹏⊙\" class=\"headerlink\" title=\"32空间 | 一个搭建在32MB内存VPS的博客⊙﹏⊙  \"></a><a href=\"https://32mb.space/\" target=\"_blank\" rel=\"external\">32空间 | 一个搭建在32MB内存VPS的博客⊙﹏⊙  </a></h5><h5 id=\"杜哥-珠江杜哥\"><a href=\"#杜哥-珠江杜哥\" class=\"headerlink\" title=\"杜哥: 珠江杜哥\"></a><a href=\"http://duuge.com/\" target=\"_blank\" rel=\"external\">杜哥: 珠江杜哥</a></h5><h5 id=\"SOST：猴儿写的博客\"><a href=\"#SOST：猴儿写的博客\" class=\"headerlink\" title=\"SOST：猴儿写的博客\"></a><a href=\"http://www.jianshu.com/users/cd672d2dc963/latest_articles\" target=\"_blank\" rel=\"external\">SOST：猴儿写的博客</a></h5><h5 id=\"小温之家：行走在猿类世界\"><a href=\"#小温之家：行走在猿类世界\" class=\"headerlink\" title=\"小温之家：行走在猿类世界\"></a><a href=\"http://wenqy.com/\" target=\"_blank\" rel=\"external\">小温之家：行走在猿类世界</a></h5><h5 id=\"威大爷：Whatever-you-do-do-not-let-go\"><a href=\"#威大爷：Whatever-you-do-do-not-let-go\" class=\"headerlink\" title=\"威大爷：Whatever you do,do not let go!\"></a><a href=\"http://blog.csdn.net/Ypersistence\" target=\"_blank\" rel=\"external\">威大爷：Whatever you do,do not let go!</a></h5><h5 id=\"濡沫杂记：相濡以沫，不如相忘于江湖。\"><a href=\"#濡沫杂记：相濡以沫，不如相忘于江湖。\" class=\"headerlink\" title=\"濡沫杂记：相濡以沫，不如相忘于江湖。\"></a><a href=\"http://www.rumoss.cn/\" target=\"_blank\" rel=\"external\">濡沫杂记：相濡以沫，不如相忘于江湖。</a></h5>"},{"title":"标签云","layout":"page-tag","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签云\nlayout: page-tag\ntype: tags\n---\n","date":"2017-09-03T10:00:16.233Z","updated":"2017-09-03T10:00:16.229Z","path":"tags/index.html","comments":1,"_id":"cj7w1kmdu0009hnlpn8jr0t1y","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Apache配置虚拟主机 VirtualHost 多站点","date":"2016-05-08T07:30:00.000Z","_content":"\n\n如果我们只有一台服务器，应该怎么实现让这台服务器同时处理PHP和JSP的请求？\n这里的解决方案是通过Apache的虚拟主机（vhost）来进行端口转发。\nApache会通过访问服务器的域名将请求转发至不同的端口或者不同的服务器。\n\n# 0X00 前提&目的\n前提：\n　　拥有一个域名，并有两个A解析，同时解析到这台服务器的IP\n　　分别拥有一个JSP和PHP的页面（网站）\n目的：\n　　使用php.test.com访问的时候解析到PHP的网站上\n　　使用jsp.test.com访问的时候解析到JSP的网站上\n操作系统：\n    Centos 7.x 如果是之前的版本或是其他系统可能出现不同的情况\n\n# 0X01 安装httpd  (Apache)\n安装并启动服务\n```\nyum install httpd\nsystemctl start httpd.service\n```\n\n# 0X02 安装PHP\n```\nyum install php\n```\n\n# 0X03 安装JDK用来配合JSP\n```\nyum install java-1.8.0-openjdk\n```\n\n# 0X04 安装tomcat用于解析JSP页面\n```\nyum install tomcat tomcat-webapps tomcat-admin-webapps\nsystemctl start tomcat.service\n```\n# 0X05 配置httpd用于同时支持PHP和JSP\n打开配置文件\n```\nvim /etc/httpd/conf/httpd.conf\n```\n在配置文件的最前端添加如下内容\n```xml\nNameVirtualHost *:80\n\n<VirtualHost *:80>\n        ServerName php.test.com #指定一个域名\n        DocumentRoot /var/www/html #PHP网站的位置\n        ErrorLog logs/php.test.com-error.log #日志位置\n        CustomLog logs/php.test.com-access.log common #日志位置\n</VirtualHost>\n\n<VirtualHost *:80>\n        ServerName jsp.test.com #指定另一个域名\n        DocumentRoot /var/lib/tomcat/webapps/ROOT #JSP网站的位置\n        ErrorLog logs/jsp.test.com-error.log  #日志位置\n        CustomLog logs/jsp.test.com-access.log common #日志位置\n        ProxyPass / http://127.0.0.1:8080/ #转发位置\n        ProxyPassReverse / http://127.0.0.1:8080/ #转发位置\n</VirtualHost>\n```\n\n# 0X06 最后\n```\nsystemctl restart httpd.service\nsystemctl restart tomcat.service\n```\n现在就可以使用php.test.com 和 jsp.test.com分别访问到PHP和JSP的页面了\n","source":"_posts/apache_vhost.md","raw":"---\ntitle: Apache配置虚拟主机 VirtualHost 多站点\ndate: 2016-05-08 15:30\ntags:\n  - Apache\n  - Web服务\n  - 虚拟主机\n  - PHP\n---\n\n\n如果我们只有一台服务器，应该怎么实现让这台服务器同时处理PHP和JSP的请求？\n这里的解决方案是通过Apache的虚拟主机（vhost）来进行端口转发。\nApache会通过访问服务器的域名将请求转发至不同的端口或者不同的服务器。\n\n# 0X00 前提&目的\n前提：\n　　拥有一个域名，并有两个A解析，同时解析到这台服务器的IP\n　　分别拥有一个JSP和PHP的页面（网站）\n目的：\n　　使用php.test.com访问的时候解析到PHP的网站上\n　　使用jsp.test.com访问的时候解析到JSP的网站上\n操作系统：\n    Centos 7.x 如果是之前的版本或是其他系统可能出现不同的情况\n\n# 0X01 安装httpd  (Apache)\n安装并启动服务\n```\nyum install httpd\nsystemctl start httpd.service\n```\n\n# 0X02 安装PHP\n```\nyum install php\n```\n\n# 0X03 安装JDK用来配合JSP\n```\nyum install java-1.8.0-openjdk\n```\n\n# 0X04 安装tomcat用于解析JSP页面\n```\nyum install tomcat tomcat-webapps tomcat-admin-webapps\nsystemctl start tomcat.service\n```\n# 0X05 配置httpd用于同时支持PHP和JSP\n打开配置文件\n```\nvim /etc/httpd/conf/httpd.conf\n```\n在配置文件的最前端添加如下内容\n```xml\nNameVirtualHost *:80\n\n<VirtualHost *:80>\n        ServerName php.test.com #指定一个域名\n        DocumentRoot /var/www/html #PHP网站的位置\n        ErrorLog logs/php.test.com-error.log #日志位置\n        CustomLog logs/php.test.com-access.log common #日志位置\n</VirtualHost>\n\n<VirtualHost *:80>\n        ServerName jsp.test.com #指定另一个域名\n        DocumentRoot /var/lib/tomcat/webapps/ROOT #JSP网站的位置\n        ErrorLog logs/jsp.test.com-error.log  #日志位置\n        CustomLog logs/jsp.test.com-access.log common #日志位置\n        ProxyPass / http://127.0.0.1:8080/ #转发位置\n        ProxyPassReverse / http://127.0.0.1:8080/ #转发位置\n</VirtualHost>\n```\n\n# 0X06 最后\n```\nsystemctl restart httpd.service\nsystemctl restart tomcat.service\n```\n现在就可以使用php.test.com 和 jsp.test.com分别访问到PHP和JSP的页面了\n","slug":"apache_vhost","published":1,"updated":"2017-09-02T14:38:44.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdg0001hnlpczblimiy","content":"<p>如果我们只有一台服务器，应该怎么实现让这台服务器同时处理PHP和JSP的请求？<br>这里的解决方案是通过Apache的虚拟主机（vhost）来进行端口转发。<br>Apache会通过访问服务器的域名将请求转发至不同的端口或者不同的服务器。</p>\n<h1 id=\"0X00-前提-amp-目的\"><a href=\"#0X00-前提-amp-目的\" class=\"headerlink\" title=\"0X00 前提&amp;目的\"></a>0X00 前提&amp;目的</h1><p>前提：<br>　　拥有一个域名，并有两个A解析，同时解析到这台服务器的IP<br>　　分别拥有一个JSP和PHP的页面（网站）<br>目的：<br>　　使用php.test.com访问的时候解析到PHP的网站上<br>　　使用jsp.test.com访问的时候解析到JSP的网站上<br>操作系统：<br>    Centos 7.x 如果是之前的版本或是其他系统可能出现不同的情况</p>\n<h1 id=\"0X01-安装httpd-Apache\"><a href=\"#0X01-安装httpd-Apache\" class=\"headerlink\" title=\"0X01 安装httpd  (Apache)\"></a>0X01 安装httpd  (Apache)</h1><p>安装并启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install httpd</div><div class=\"line\">systemctl start httpd.service</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-安装PHP\"><a href=\"#0X02-安装PHP\" class=\"headerlink\" title=\"0X02 安装PHP\"></a>0X02 安装PHP</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install php</div></pre></td></tr></table></figure>\n<h1 id=\"0X03-安装JDK用来配合JSP\"><a href=\"#0X03-安装JDK用来配合JSP\" class=\"headerlink\" title=\"0X03 安装JDK用来配合JSP\"></a>0X03 安装JDK用来配合JSP</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install java-1.8.0-openjdk</div></pre></td></tr></table></figure>\n<h1 id=\"0X04-安装tomcat用于解析JSP页面\"><a href=\"#0X04-安装tomcat用于解析JSP页面\" class=\"headerlink\" title=\"0X04 安装tomcat用于解析JSP页面\"></a>0X04 安装tomcat用于解析JSP页面</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install tomcat tomcat-webapps tomcat-admin-webapps</div><div class=\"line\">systemctl start tomcat.service</div></pre></td></tr></table></figure>\n<h1 id=\"0X05-配置httpd用于同时支持PHP和JSP\"><a href=\"#0X05-配置httpd用于同时支持PHP和JSP\" class=\"headerlink\" title=\"0X05 配置httpd用于同时支持PHP和JSP\"></a>0X05 配置httpd用于同时支持PHP和JSP</h1><p>打开配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/httpd/conf/httpd.conf</div></pre></td></tr></table></figure></p>\n<p>在配置文件的最前端添加如下内容<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">NameVirtualHost *:80</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VirtualHost</span> *<span class=\"attr\">:80</span>&gt;</span></div><div class=\"line\">        ServerName php.test.com #指定一个域名</div><div class=\"line\">        DocumentRoot /var/www/html #PHP网站的位置</div><div class=\"line\">        ErrorLog logs/php.test.com-error.log #日志位置</div><div class=\"line\">        CustomLog logs/php.test.com-access.log common #日志位置</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VirtualHost</span> *<span class=\"attr\">:80</span>&gt;</span></div><div class=\"line\">        ServerName jsp.test.com #指定另一个域名</div><div class=\"line\">        DocumentRoot /var/lib/tomcat/webapps/ROOT #JSP网站的位置</div><div class=\"line\">        ErrorLog logs/jsp.test.com-error.log  #日志位置</div><div class=\"line\">        CustomLog logs/jsp.test.com-access.log common #日志位置</div><div class=\"line\">        ProxyPass / http://127.0.0.1:8080/ #转发位置</div><div class=\"line\">        ProxyPassReverse / http://127.0.0.1:8080/ #转发位置</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-最后\"><a href=\"#0X06-最后\" class=\"headerlink\" title=\"0X06 最后\"></a>0X06 最后</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart httpd.service</div><div class=\"line\">systemctl restart tomcat.service</div></pre></td></tr></table></figure>\n<p>现在就可以使用php.test.com 和 jsp.test.com分别访问到PHP和JSP的页面了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果我们只有一台服务器，应该怎么实现让这台服务器同时处理PHP和JSP的请求？<br>这里的解决方案是通过Apache的虚拟主机（vhost）来进行端口转发。<br>Apache会通过访问服务器的域名将请求转发至不同的端口或者不同的服务器。</p>\n<h1 id=\"0X00-前提-amp-目的\"><a href=\"#0X00-前提-amp-目的\" class=\"headerlink\" title=\"0X00 前提&amp;目的\"></a>0X00 前提&amp;目的</h1><p>前提：<br>　　拥有一个域名，并有两个A解析，同时解析到这台服务器的IP<br>　　分别拥有一个JSP和PHP的页面（网站）<br>目的：<br>　　使用php.test.com访问的时候解析到PHP的网站上<br>　　使用jsp.test.com访问的时候解析到JSP的网站上<br>操作系统：<br>    Centos 7.x 如果是之前的版本或是其他系统可能出现不同的情况</p>\n<h1 id=\"0X01-安装httpd-Apache\"><a href=\"#0X01-安装httpd-Apache\" class=\"headerlink\" title=\"0X01 安装httpd  (Apache)\"></a>0X01 安装httpd  (Apache)</h1><p>安装并启动服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install httpd</div><div class=\"line\">systemctl start httpd.service</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-安装PHP\"><a href=\"#0X02-安装PHP\" class=\"headerlink\" title=\"0X02 安装PHP\"></a>0X02 安装PHP</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install php</div></pre></td></tr></table></figure>\n<h1 id=\"0X03-安装JDK用来配合JSP\"><a href=\"#0X03-安装JDK用来配合JSP\" class=\"headerlink\" title=\"0X03 安装JDK用来配合JSP\"></a>0X03 安装JDK用来配合JSP</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install java-1.8.0-openjdk</div></pre></td></tr></table></figure>\n<h1 id=\"0X04-安装tomcat用于解析JSP页面\"><a href=\"#0X04-安装tomcat用于解析JSP页面\" class=\"headerlink\" title=\"0X04 安装tomcat用于解析JSP页面\"></a>0X04 安装tomcat用于解析JSP页面</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install tomcat tomcat-webapps tomcat-admin-webapps</div><div class=\"line\">systemctl start tomcat.service</div></pre></td></tr></table></figure>\n<h1 id=\"0X05-配置httpd用于同时支持PHP和JSP\"><a href=\"#0X05-配置httpd用于同时支持PHP和JSP\" class=\"headerlink\" title=\"0X05 配置httpd用于同时支持PHP和JSP\"></a>0X05 配置httpd用于同时支持PHP和JSP</h1><p>打开配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/httpd/conf/httpd.conf</div></pre></td></tr></table></figure></p>\n<p>在配置文件的最前端添加如下内容<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">NameVirtualHost *:80</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VirtualHost</span> *<span class=\"attr\">:80</span>&gt;</span></div><div class=\"line\">        ServerName php.test.com #指定一个域名</div><div class=\"line\">        DocumentRoot /var/www/html #PHP网站的位置</div><div class=\"line\">        ErrorLog logs/php.test.com-error.log #日志位置</div><div class=\"line\">        CustomLog logs/php.test.com-access.log common #日志位置</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VirtualHost</span> *<span class=\"attr\">:80</span>&gt;</span></div><div class=\"line\">        ServerName jsp.test.com #指定另一个域名</div><div class=\"line\">        DocumentRoot /var/lib/tomcat/webapps/ROOT #JSP网站的位置</div><div class=\"line\">        ErrorLog logs/jsp.test.com-error.log  #日志位置</div><div class=\"line\">        CustomLog logs/jsp.test.com-access.log common #日志位置</div><div class=\"line\">        ProxyPass / http://127.0.0.1:8080/ #转发位置</div><div class=\"line\">        ProxyPassReverse / http://127.0.0.1:8080/ #转发位置</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-最后\"><a href=\"#0X06-最后\" class=\"headerlink\" title=\"0X06 最后\"></a>0X06 最后</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart httpd.service</div><div class=\"line\">systemctl restart tomcat.service</div></pre></td></tr></table></figure>\n<p>现在就可以使用php.test.com 和 jsp.test.com分别访问到PHP和JSP的页面了</p>\n"},{"title":"C语言中的Bool类型","date":"2015-03-17T04:12:00.000Z","_content":"\n　　最近在网上看到有的说法里是没有bool类型的，不过以前在书上好像看到过相关的介绍，就特意找出来了那本书《C Primer Plus》，确定了C语言里确实存在bool类型。C语言是在C99标准中添加的bool类型。\n>bool类型是以英国数学家 *George Boole* 命名的，是他开发了用线性代数表示并解决逻辑问题的系统。\n\n　　在C语言中我们使用 _Bool 来定义bool类型的变量\n\n　　下面定义了一个_Bool类型的变量，并把(1 == 3)的计算值赋值给test\n```c\n#include <stdio.h>\n\nint main ()\n{\n    _Bool test;\n    test = (1 == 3);\n    return 0;\n}\n```\n\n　　下面能证明bool类型变量的特点\n　　　　只有0和1两个值\n　　　　只有0赋值给bool类型时，bool才为0\n```c\n#include <stdio.h>\n\nint main ()\n{\n    _Bool test;\n    int i;\n    for (i = -10; i < 10; i++)\n    {\n        test = i;\n        if (test)\n            printf (\"true\\n\");\n        else\n            printf (\"false\\n\");\n    }\n    return 0;\n}\n```\n\n 　　最后我们证明一下bool类型比int类型占的内存要少\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main ()\n{\n    int myint;\n    _Bool mybool;\n    int memint;\n    int membool;\n\n    memint = sizeof(myint);\n    membool = sizeof(mybool);\n\n    printf (\"int   = %d\\n\", memint);\n    printf (\"_Bool = %d\\n\", membool);\n    return 0;\n}\n```\n","source":"_posts/c_language_bool_type.md","raw":"---\ntitle: C语言中的Bool类型\ndate: 2015-03-17 12:12\ntags:\n    - C语言\n    - Bool\n---\n\n　　最近在网上看到有的说法里是没有bool类型的，不过以前在书上好像看到过相关的介绍，就特意找出来了那本书《C Primer Plus》，确定了C语言里确实存在bool类型。C语言是在C99标准中添加的bool类型。\n>bool类型是以英国数学家 *George Boole* 命名的，是他开发了用线性代数表示并解决逻辑问题的系统。\n\n　　在C语言中我们使用 _Bool 来定义bool类型的变量\n\n　　下面定义了一个_Bool类型的变量，并把(1 == 3)的计算值赋值给test\n```c\n#include <stdio.h>\n\nint main ()\n{\n    _Bool test;\n    test = (1 == 3);\n    return 0;\n}\n```\n\n　　下面能证明bool类型变量的特点\n　　　　只有0和1两个值\n　　　　只有0赋值给bool类型时，bool才为0\n```c\n#include <stdio.h>\n\nint main ()\n{\n    _Bool test;\n    int i;\n    for (i = -10; i < 10; i++)\n    {\n        test = i;\n        if (test)\n            printf (\"true\\n\");\n        else\n            printf (\"false\\n\");\n    }\n    return 0;\n}\n```\n\n 　　最后我们证明一下bool类型比int类型占的内存要少\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main ()\n{\n    int myint;\n    _Bool mybool;\n    int memint;\n    int membool;\n\n    memint = sizeof(myint);\n    membool = sizeof(mybool);\n\n    printf (\"int   = %d\\n\", memint);\n    printf (\"_Bool = %d\\n\", membool);\n    return 0;\n}\n```\n","slug":"c_language_bool_type","published":1,"updated":"2017-09-02T14:38:58.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdm0003hnlpwvyprpo8","content":"<p>　　最近在网上看到有的说法里是没有bool类型的，不过以前在书上好像看到过相关的介绍，就特意找出来了那本书《C Primer Plus》，确定了C语言里确实存在bool类型。C语言是在C99标准中添加的bool类型。</p>\n<blockquote>\n<p>bool类型是以英国数学家 <em>George Boole</em> 命名的，是他开发了用线性代数表示并解决逻辑问题的系统。</p>\n</blockquote>\n<p>　　在C语言中我们使用 _Bool 来定义bool类型的变量</p>\n<p>　　下面定义了一个_Bool类型的变量，并把(1 == 3)的计算值赋值给test<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">_Bool</span> test;</div><div class=\"line\">    test = (<span class=\"number\">1</span> == <span class=\"number\">3</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　下面能证明bool类型变量的特点<br>　　　　只有0和1两个值<br>　　　　只有0赋值给bool类型时，bool才为0<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">_Bool</span> test;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">-10</span>; i &lt; <span class=\"number\">10</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        test = i;</div><div class=\"line\">        <span class=\"keyword\">if</span> (test)</div><div class=\"line\">            <span class=\"built_in\">printf</span> (<span class=\"string\">\"true\\n\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"built_in\">printf</span> (<span class=\"string\">\"false\\n\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 　　最后我们证明一下bool类型比int类型占的内存要少</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> myint;</div><div class=\"line\">    <span class=\"keyword\">_Bool</span> mybool;</div><div class=\"line\">    <span class=\"keyword\">int</span> memint;</div><div class=\"line\">    <span class=\"keyword\">int</span> membool;</div><div class=\"line\"></div><div class=\"line\">    memint = <span class=\"keyword\">sizeof</span>(myint);</div><div class=\"line\">    membool = <span class=\"keyword\">sizeof</span>(mybool);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">\"int   = %d\\n\"</span>, memint);</div><div class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">\"_Bool = %d\\n\"</span>, membool);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>　　最近在网上看到有的说法里是没有bool类型的，不过以前在书上好像看到过相关的介绍，就特意找出来了那本书《C Primer Plus》，确定了C语言里确实存在bool类型。C语言是在C99标准中添加的bool类型。</p>\n<blockquote>\n<p>bool类型是以英国数学家 <em>George Boole</em> 命名的，是他开发了用线性代数表示并解决逻辑问题的系统。</p>\n</blockquote>\n<p>　　在C语言中我们使用 _Bool 来定义bool类型的变量</p>\n<p>　　下面定义了一个_Bool类型的变量，并把(1 == 3)的计算值赋值给test<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">_Bool</span> test;</div><div class=\"line\">    test = (<span class=\"number\">1</span> == <span class=\"number\">3</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　下面能证明bool类型变量的特点<br>　　　　只有0和1两个值<br>　　　　只有0赋值给bool类型时，bool才为0<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">_Bool</span> test;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">-10</span>; i &lt; <span class=\"number\">10</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        test = i;</div><div class=\"line\">        <span class=\"keyword\">if</span> (test)</div><div class=\"line\">            <span class=\"built_in\">printf</span> (<span class=\"string\">\"true\\n\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"built_in\">printf</span> (<span class=\"string\">\"false\\n\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 　　最后我们证明一下bool类型比int类型占的内存要少</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> myint;</div><div class=\"line\">    <span class=\"keyword\">_Bool</span> mybool;</div><div class=\"line\">    <span class=\"keyword\">int</span> memint;</div><div class=\"line\">    <span class=\"keyword\">int</span> membool;</div><div class=\"line\"></div><div class=\"line\">    memint = <span class=\"keyword\">sizeof</span>(myint);</div><div class=\"line\">    membool = <span class=\"keyword\">sizeof</span>(mybool);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">\"int   = %d\\n\"</span>, memint);</div><div class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">\"_Bool = %d\\n\"</span>, membool);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"文件系统简述","date":"2016-11-16T05:49:00.000Z","_content":"\n# 0X00 文件\n**‘文件’是进程创建的逻辑单元。**---《现代操作系统（原书第三版）》\n文件我们再熟悉不过了，电脑磁盘上存的都是文件。在Windows里和Unix系列系统里，表面看上去文件之间还是有一点点小的区别。比如，在Windows里主要还是以文件的后缀名来标识文件具体是什么类型的，图片还是视频；在Unix系列里文件的后缀名就没那么重要，主要后缀名是用来帮助人们识别文件类型的，操作系统并不很关心。\n**真正的文件类型**是文件的本质类型，不是我们常说的exe类型、doc类型、更不是什么图片类型和视频类型。在Windows下有常见的普通文件和目录。*没错，目录其实是文件的*。在Unix里，还有一些叫字符特殊文件和块特殊文件的。\n\n# 0X01 文件的元数据\n文件里最重要的东西肯定是文件内容了，但是文件存在磁盘里是还有一些其他的相关数据也被存进去了的，那些数据被称之为**元数据**。想一下文件的相关信息，在Windows里右键一个文件选择属性或者在Linux里使用`ls -l`看到的文件的详细信息，这些几乎全部都是文件的元数据，都存到了磁盘中。常见的元数据有下面这些:创建者、拥有者、权限标志、文件大小、锁等等。比如说我们在Linux下输入`ls -l`能看到文件的大小、权限、所属者，这些都是文件的元数据。\n\n# 0X02 MBR-主引导记录\n经常装系统的话应该比较熟悉这个词‘主引导记录’，在以前的磁盘上常用的就是这种称为MBR的磁盘分区方式，其实现在还有好多在用MBR的，不过由于MBR的原理导致不支持2TB以上的磁盘且不支持4个以上的主分区，所以用的越来越少了，取而代之的是GPT。不过由于MBR比较简单，就先介绍一下MBR。\n计算机在启动的时候，BIOS会读取MBR的分区表来找到引导分区并引导操作系统。可以启动的分区称为活动分区，必须要是活动的分区才可以引导系统启动；MBR的分区表只能容纳四个分区，如果需要更多的分区就需要创建扩展分区。可以在一个MBR的分区表中创建三个主分区，在最后一个位置创建一个扩展分区。实际上最后一个扩展分区是不能直接使用的，相当于扩展分区在磁盘上花了一块当另一个磁盘用、在扩展分区头部还有一个扩展分区的分区表，里面保存着逻辑分区的分区信息，且这个分区表的空间比较大，所以逻辑分区可以创建好多个。\n\n# 0X03 文件存储\n文件存储在磁盘中有好多种分配方案，这些方案各有利弊。随着存储介质、CPU等设备的发展和人们需求的变化，出现了下面这些比较好的方案。\n## 连续分配\n首先我们把磁盘想象成一个超长的条形存储设备，这样就比较好理解（然而实际上现在常见的磁盘是区分盘面、磁道、柱面、扇区的）。\n早期的磁盘和现代的CD-ROM是使用这种连续分配方式存储数据的。连续分配，由字面可知是把文件连续的从头到尾得存到磁盘里，这种方式读写都非常快，但是却非常不适合日常使用。考虑下面这种情况，我有下面这些文件\n`[  A  ][  B  ][  C  ][  D  ][  E  ][  F  ]`整个磁盘大小为6GB，每个文件都有1GB，刚刚好用完整个磁盘。但是当我删除了B和E两个文件的时候就会变成下面这样，空余两个1GB的位置出来，但是这两个空间不连续\n`[  A  ][     ][  C  ][  D  ][     ][  F  ]`现在我有2GB的空间。系统需要维护一个空闲空间列表来让后来的文件放在这些空闲的地方，因为如果不维护这张表的话，当磁盘写满过一次就再也不能写入新的数据了。虽然我们维护了一张这样的表也并不能很让人满意，比如有一个1.5GB的文件想存到磁盘里，系统就会查找连续的空余空间，但是并没有一个连续的高达1.5GB的空间，所以并不能把文件存进去，显然这并不能让人满意。而且，这些还都是建立在一个前提之下的，就是说“存储文件之前必须知道文件的大小”，然而事实上很多时候是不知道的，比如我们打开了AE（一款渲染视频的软件）来制作一段视频特效，然而在生成视频的时候没有人知道这个文件最后是多大的，所以就并不适用于这种情况。但是这种分配方案就没有优点了吗？也不是的。比如我们需要将数据刻录到CD-ROM上，因为CD-ROM是只读设备，所以在第一次刻录之后就没有修改的可能了，那么我们就可以通过这种方案直接将已有的数据顺序刻录到光盘里，这样以后的读取就会变得很快了。然后针对磁盘有了下面的‘链表分配方案’\n\n## 链表分配\n使用链表分配方案时，目录下的每一个文件都只保留文件的头指针，每个文件都是一个链表，这样我们就可以顺着指针的指向把整个文件从文件系统中遍历出来。虽然链表分配方案成功的利用起来了空闲空间，但是还是有下面两个比较严重的问题：\n1. 每次想要访问文件的第n个节点时候，都要从文件头开始访问，有n-1次磁盘的访问是无效的，所以这种方案对随机读取非常慢；\n2. 因为每个磁盘块的大小都是2的n次幂，保存的大小也就是2的n次幂，但是因为文件头被指针占去了一定的字节，就导致实际存储的文件并不是2的n次幂。虽然这个问题并不是致命的，但是确实会让系统变慢，也会让面向系统的编程变得困难很多。\n\n内存链表解决了链表分配的一些问题。\n\n## 内存链表分配\n内存链表分配是将磁盘里所有文件的所有块都做成链表，依旧是每个文件一个链表。但是这次将链表整个存放到内存中，这样在随机访问的时候因为链表全都在内存中就会非常快。但是由于要对每一个文件建立存储，且存放在内存中，所以这种文件系统并不适合用于小文件大磁盘。对于一个200GB的磁盘，里面充满了1KB的块，那么根据系统优化之后这张表需要600~800MB的内存，然而现在动辄TB级的磁盘，则非常不适用。这种内存链表分配方案中维护的表称之为‘文件分配表’英文也就是我们熟悉的‘File Allocation Table\\-\\-\\-\\-\\-FAT’\n为了克服内存链表分配的内存占用大的问题，有了i\\-Node方案。\n\n## i\\-Node\ni\\-Node方案在磁盘头部预留一段空间用来存放i\\-Node，这里的i\\-Node是一种数据结构，里面包含了文件的一些元数据和文件所有块的相关信息，所以根据一个i\\-Node就可以找到着整个文件。因为每个i\\-Node的预留空间都是固定的，如果文件太大太分散就会导致一个i\\-Node并不能存储完所有信息，那么i\\-Node中最后一段就保存了另一个i\\-Node的地址，然后在另一个i\\-Node中继续保存信息。因为i\\-Node是保存在磁盘里的，所以不会影响到内存，只有当文件真正打开的时候才会将数据加载到内存。所以内存占用是核同时打开的文件数量相关的。在Linux中我们使用`ls -l -i`就可以看到每个文件的i-Node编号。现在的大多数文件系统都采用这种方案了，比如EXT、NTFS、XFS等。\n\n# 0X04 文件共享\n首先明确两点：1. 这里说的文件共享并不是说将一个文件通过网络传输给他人的那种文件共享； 2. 系统中的文件结构不是树状，而是图。（当Windows中我们给一个文件建立了一个快捷方式并放在了另一个目录里的时候，就形成了图解构）\n这里的文件共享主要就是链接的问题，关于链接的内容可以在我博客里找到。[Linux软连接/硬链接 理解Linux链接](http://blog.just666.cn/index.php/archives/10/)\n每个文件会保存指向自己的链接数，当只想自己的链接数为0的时候，那么这块数据就抛弃掉了。\n\n# 0X05 文件系统\n## 日志结构文件系统\n因为现在的CPU运算能力和磁盘容量、内存容量等都有了非常大的进步，所以在不实际访问磁盘只在高速缓存上就能访问到很多需要的数据，所以根据这种情况，就出现了日志结构文件系统(Log-structred File System)。这种文件系统将文件操作结构化成日志。在这种文件系统中每次将数据读写缓存到内存，然后定时定量地将数据从内存写入磁盘。\n\n## 日志文件系统\n日志文件系统比日志结构文件系统有更强的鲁棒性（Roubst 也就是健壮性）。在这种文件系统中进行文件操作时，先记录下要干什么，然后再开始操作。这样不管什么时候出了错误，都可以根据日志来恢复操作。比如在Unix中删除一个文件分成三个步骤：1.在目录中删除文件 2.释放i\\-Node到空间i\\-Node节点池 3.强磁盘块归还到操作系统。 如果完成了第一步，就死机了，那么由于日志的存在就可以在知道这个操作究竟要干什么，在恢复开机的时候就可以继续完成这次操作。当所有的任务项都完成了的时候就删除这个日志。\n\n## 虚拟文件系统\n在Windows里用的是多根目录的方式，也就是有多个根目录，比如C盘D盘E盘等，但是在Linux中我们使用的是单根目录形式，如果要同时使用几种文件系统比如：根目录使用XFS、/home使用ext4、/usr目录使用ext3、那么久需要使用一种叫做虚拟文件系统的技术。两个不同的文件系统之间需要连接的话需要使用VFS（虚拟文件系统）接口来将两个文件系统连起来。使用这种虚拟文件系统的技术就可以让同一个根目录下面挂载有不同文件系统的设备。\n\n# 0X06 磁盘分块\n已知文件在磁盘里是按照块存储的，那么每个块分配多大就成为了一个问题。因为在磁盘底层，每个文件占用的块都是整数，比如我一个块是1kb，那么我有一个2.5kb的文件也要占用3个块，甚至是1字节的文件也要占用1kb，每个块中剩余的部分是不能存储其他文件的。从这方面看来分块越大就越浪费空间，块越小磁盘空间利用率越高。那么我们把块都分成最小，这样就行了吗？显然没有这么简单。因为磁盘在读写数据的时候是按照块来的，所以分的块越大读写的速度越快，因为磁盘里的总块数少，块越小越慢。总结下来是这样：随着块大小的提升，磁盘读写效率会提高，但是空间利用率会降低。统计所得，分块大小为4kb最容易获得最佳性能。\n\n# 0X07 缓冲区\n现在的文件系统都支持缓冲区写入。缓冲区写入对应的另一种是‘同步写入’。缓冲区写入：程序生成的或者用户的数据首先写入到内存中，当达到一定时间或者一定量的时候一次性写入磁盘；同步写入：将程序和用户产生的数据实时写入磁盘里。下面对比一下这两种的优缺点\n\n**同步写入优点**：数据实时同步，出现数据丢失的可能性很小\n**同步写入缺点**：由于数据产生很慢，所以磁盘利用率不高，且长期占据磁盘\n**缓冲写入优点**：数据首先写入比磁盘快得多的内存中，再统一写入磁盘只会短时间占用磁盘，且占用磁盘时利用率高\n**缓冲写入缺点**：当数据在缓冲区没有写入磁盘时系统发生异常或者崩溃，数据非常容易丢失\n\n这里有两段Python的代码，展示了缓冲区写入和同步写入的速度差异，首先是使用同步写入方式写入\n```python\n#!/usr/bin/python\n#coding=utf-8\n\nfrom time import ctime\n\nf = open('D:/list.txt', 'r+', 0)    #不使用缓冲\nstart_time = ctime()    #开始时间\nfor i in range(3000000):\n    f.write('hello,world\\n')\nf.close()\nend_time = ctime()  #结束时间\n\nprint start_time\nprint end_time\n```\n运行结果是这样的，我们看到写入300W行'hello,world'用了8秒，最后生成的数据量是37.1MB\n```bash\nThu Nov 17 11:12:21 2016\nThu Nov 17 11:12:29 2016\n```\n然后使用Python默认大小的缓冲区试试：\n```python\n#!/usr/bin/python\n#coding=utf-8\n\nfrom time import ctime\n\nf = open('D:/list.txt', 'r+', -1)    #使用默认缓冲区大小\nstart_time = ctime()    #开始时间\nfor i in range(3000000):\n    f.write('hello,world\\n')\nf.close()\nend_time = ctime()  #结束时间\n\nprint start_time\nprint end_time\n```\n运行结果是这样的，我们看到这次写入相同的数据只用了1秒\n```bash\nThu Nov 17 11:18:04 2016\nThu Nov 17 11:18:05 2016\n```\n\n# 0X08 坏块屏蔽\n在磁盘这种物理结构里出现错误是比较正常的，尤其是机械磁盘磁臂在旋转的时候与磁道的摩擦会产生部分坏块。这些坏块上的数据会发生丢失或者错误，那么怎么屏蔽这些坏块呢？之前在那些分区软件里看到过坏块屏蔽，感觉非常高端，其实原理是很简单的。比如磁盘里有23块坏块，那么修复程序就创建一个文件，指定这个文件就存储在这23个坏块上，且对操作系统不可见，那么操作系统虽然知道这里有文件，但是不会去管他，这样就相当于屏蔽了磁盘里的坏块。\n\n# 0X09 提升文件系统性能 高速缓存\n高速缓存就是将即将需要的文件和经常使用的文件放在磁盘的高速缓存里，因为高速缓存的速度比磁盘要快得多，所以就可以通过这种方式来提高I/O效率。\n在Unix里有一个系统调用sync，在Windows里有一个FlushFileBuffers，是用来将高速缓存里的数据同步写入到磁盘里的。在Unix系列系统中每隔30秒就执行一次sync将数据写入，在Windows中则是实时的。这两种方案并没有谁好谁坏之分，各有优劣。\n\n# 0X0A 磁盘碎片整理\n因为绝大多数的现代文件系统都采用了链表存储的方案，所以在使用磁盘一段时间之后文件都是分散的放在磁盘的各个角落的，这样的话读写文件就会变得比较慢，文件越零散读写就越慢。那么我们可以手动将磁盘进行整理，将分散的文件数据聚合到一起，当然也只能是尽量，因为某些数据是不能被移动的，比如页文件、休眠文件、日志。当零散的文件变成连续的文件的时候读写的效率就会有大幅度提升。但是由于各个操作系统采用的文件系统的内部实现不同，导致几乎只有Windows需要对磁盘进行手动整理。当然所谓的手动整理也是有软件支持的，不需要用户自己去操作磁盘。但是因为Windows的发展，也几乎不再需要手动进行整理了。\n","source":"_posts/filesystem.md","raw":"---\ntitle: 文件系统简述\ndate: 2016-11-16 13:49\ntags:\n  - 文件系统\n  - 操作系统\n---\n\n# 0X00 文件\n**‘文件’是进程创建的逻辑单元。**---《现代操作系统（原书第三版）》\n文件我们再熟悉不过了，电脑磁盘上存的都是文件。在Windows里和Unix系列系统里，表面看上去文件之间还是有一点点小的区别。比如，在Windows里主要还是以文件的后缀名来标识文件具体是什么类型的，图片还是视频；在Unix系列里文件的后缀名就没那么重要，主要后缀名是用来帮助人们识别文件类型的，操作系统并不很关心。\n**真正的文件类型**是文件的本质类型，不是我们常说的exe类型、doc类型、更不是什么图片类型和视频类型。在Windows下有常见的普通文件和目录。*没错，目录其实是文件的*。在Unix里，还有一些叫字符特殊文件和块特殊文件的。\n\n# 0X01 文件的元数据\n文件里最重要的东西肯定是文件内容了，但是文件存在磁盘里是还有一些其他的相关数据也被存进去了的，那些数据被称之为**元数据**。想一下文件的相关信息，在Windows里右键一个文件选择属性或者在Linux里使用`ls -l`看到的文件的详细信息，这些几乎全部都是文件的元数据，都存到了磁盘中。常见的元数据有下面这些:创建者、拥有者、权限标志、文件大小、锁等等。比如说我们在Linux下输入`ls -l`能看到文件的大小、权限、所属者，这些都是文件的元数据。\n\n# 0X02 MBR-主引导记录\n经常装系统的话应该比较熟悉这个词‘主引导记录’，在以前的磁盘上常用的就是这种称为MBR的磁盘分区方式，其实现在还有好多在用MBR的，不过由于MBR的原理导致不支持2TB以上的磁盘且不支持4个以上的主分区，所以用的越来越少了，取而代之的是GPT。不过由于MBR比较简单，就先介绍一下MBR。\n计算机在启动的时候，BIOS会读取MBR的分区表来找到引导分区并引导操作系统。可以启动的分区称为活动分区，必须要是活动的分区才可以引导系统启动；MBR的分区表只能容纳四个分区，如果需要更多的分区就需要创建扩展分区。可以在一个MBR的分区表中创建三个主分区，在最后一个位置创建一个扩展分区。实际上最后一个扩展分区是不能直接使用的，相当于扩展分区在磁盘上花了一块当另一个磁盘用、在扩展分区头部还有一个扩展分区的分区表，里面保存着逻辑分区的分区信息，且这个分区表的空间比较大，所以逻辑分区可以创建好多个。\n\n# 0X03 文件存储\n文件存储在磁盘中有好多种分配方案，这些方案各有利弊。随着存储介质、CPU等设备的发展和人们需求的变化，出现了下面这些比较好的方案。\n## 连续分配\n首先我们把磁盘想象成一个超长的条形存储设备，这样就比较好理解（然而实际上现在常见的磁盘是区分盘面、磁道、柱面、扇区的）。\n早期的磁盘和现代的CD-ROM是使用这种连续分配方式存储数据的。连续分配，由字面可知是把文件连续的从头到尾得存到磁盘里，这种方式读写都非常快，但是却非常不适合日常使用。考虑下面这种情况，我有下面这些文件\n`[  A  ][  B  ][  C  ][  D  ][  E  ][  F  ]`整个磁盘大小为6GB，每个文件都有1GB，刚刚好用完整个磁盘。但是当我删除了B和E两个文件的时候就会变成下面这样，空余两个1GB的位置出来，但是这两个空间不连续\n`[  A  ][     ][  C  ][  D  ][     ][  F  ]`现在我有2GB的空间。系统需要维护一个空闲空间列表来让后来的文件放在这些空闲的地方，因为如果不维护这张表的话，当磁盘写满过一次就再也不能写入新的数据了。虽然我们维护了一张这样的表也并不能很让人满意，比如有一个1.5GB的文件想存到磁盘里，系统就会查找连续的空余空间，但是并没有一个连续的高达1.5GB的空间，所以并不能把文件存进去，显然这并不能让人满意。而且，这些还都是建立在一个前提之下的，就是说“存储文件之前必须知道文件的大小”，然而事实上很多时候是不知道的，比如我们打开了AE（一款渲染视频的软件）来制作一段视频特效，然而在生成视频的时候没有人知道这个文件最后是多大的，所以就并不适用于这种情况。但是这种分配方案就没有优点了吗？也不是的。比如我们需要将数据刻录到CD-ROM上，因为CD-ROM是只读设备，所以在第一次刻录之后就没有修改的可能了，那么我们就可以通过这种方案直接将已有的数据顺序刻录到光盘里，这样以后的读取就会变得很快了。然后针对磁盘有了下面的‘链表分配方案’\n\n## 链表分配\n使用链表分配方案时，目录下的每一个文件都只保留文件的头指针，每个文件都是一个链表，这样我们就可以顺着指针的指向把整个文件从文件系统中遍历出来。虽然链表分配方案成功的利用起来了空闲空间，但是还是有下面两个比较严重的问题：\n1. 每次想要访问文件的第n个节点时候，都要从文件头开始访问，有n-1次磁盘的访问是无效的，所以这种方案对随机读取非常慢；\n2. 因为每个磁盘块的大小都是2的n次幂，保存的大小也就是2的n次幂，但是因为文件头被指针占去了一定的字节，就导致实际存储的文件并不是2的n次幂。虽然这个问题并不是致命的，但是确实会让系统变慢，也会让面向系统的编程变得困难很多。\n\n内存链表解决了链表分配的一些问题。\n\n## 内存链表分配\n内存链表分配是将磁盘里所有文件的所有块都做成链表，依旧是每个文件一个链表。但是这次将链表整个存放到内存中，这样在随机访问的时候因为链表全都在内存中就会非常快。但是由于要对每一个文件建立存储，且存放在内存中，所以这种文件系统并不适合用于小文件大磁盘。对于一个200GB的磁盘，里面充满了1KB的块，那么根据系统优化之后这张表需要600~800MB的内存，然而现在动辄TB级的磁盘，则非常不适用。这种内存链表分配方案中维护的表称之为‘文件分配表’英文也就是我们熟悉的‘File Allocation Table\\-\\-\\-\\-\\-FAT’\n为了克服内存链表分配的内存占用大的问题，有了i\\-Node方案。\n\n## i\\-Node\ni\\-Node方案在磁盘头部预留一段空间用来存放i\\-Node，这里的i\\-Node是一种数据结构，里面包含了文件的一些元数据和文件所有块的相关信息，所以根据一个i\\-Node就可以找到着整个文件。因为每个i\\-Node的预留空间都是固定的，如果文件太大太分散就会导致一个i\\-Node并不能存储完所有信息，那么i\\-Node中最后一段就保存了另一个i\\-Node的地址，然后在另一个i\\-Node中继续保存信息。因为i\\-Node是保存在磁盘里的，所以不会影响到内存，只有当文件真正打开的时候才会将数据加载到内存。所以内存占用是核同时打开的文件数量相关的。在Linux中我们使用`ls -l -i`就可以看到每个文件的i-Node编号。现在的大多数文件系统都采用这种方案了，比如EXT、NTFS、XFS等。\n\n# 0X04 文件共享\n首先明确两点：1. 这里说的文件共享并不是说将一个文件通过网络传输给他人的那种文件共享； 2. 系统中的文件结构不是树状，而是图。（当Windows中我们给一个文件建立了一个快捷方式并放在了另一个目录里的时候，就形成了图解构）\n这里的文件共享主要就是链接的问题，关于链接的内容可以在我博客里找到。[Linux软连接/硬链接 理解Linux链接](http://blog.just666.cn/index.php/archives/10/)\n每个文件会保存指向自己的链接数，当只想自己的链接数为0的时候，那么这块数据就抛弃掉了。\n\n# 0X05 文件系统\n## 日志结构文件系统\n因为现在的CPU运算能力和磁盘容量、内存容量等都有了非常大的进步，所以在不实际访问磁盘只在高速缓存上就能访问到很多需要的数据，所以根据这种情况，就出现了日志结构文件系统(Log-structred File System)。这种文件系统将文件操作结构化成日志。在这种文件系统中每次将数据读写缓存到内存，然后定时定量地将数据从内存写入磁盘。\n\n## 日志文件系统\n日志文件系统比日志结构文件系统有更强的鲁棒性（Roubst 也就是健壮性）。在这种文件系统中进行文件操作时，先记录下要干什么，然后再开始操作。这样不管什么时候出了错误，都可以根据日志来恢复操作。比如在Unix中删除一个文件分成三个步骤：1.在目录中删除文件 2.释放i\\-Node到空间i\\-Node节点池 3.强磁盘块归还到操作系统。 如果完成了第一步，就死机了，那么由于日志的存在就可以在知道这个操作究竟要干什么，在恢复开机的时候就可以继续完成这次操作。当所有的任务项都完成了的时候就删除这个日志。\n\n## 虚拟文件系统\n在Windows里用的是多根目录的方式，也就是有多个根目录，比如C盘D盘E盘等，但是在Linux中我们使用的是单根目录形式，如果要同时使用几种文件系统比如：根目录使用XFS、/home使用ext4、/usr目录使用ext3、那么久需要使用一种叫做虚拟文件系统的技术。两个不同的文件系统之间需要连接的话需要使用VFS（虚拟文件系统）接口来将两个文件系统连起来。使用这种虚拟文件系统的技术就可以让同一个根目录下面挂载有不同文件系统的设备。\n\n# 0X06 磁盘分块\n已知文件在磁盘里是按照块存储的，那么每个块分配多大就成为了一个问题。因为在磁盘底层，每个文件占用的块都是整数，比如我一个块是1kb，那么我有一个2.5kb的文件也要占用3个块，甚至是1字节的文件也要占用1kb，每个块中剩余的部分是不能存储其他文件的。从这方面看来分块越大就越浪费空间，块越小磁盘空间利用率越高。那么我们把块都分成最小，这样就行了吗？显然没有这么简单。因为磁盘在读写数据的时候是按照块来的，所以分的块越大读写的速度越快，因为磁盘里的总块数少，块越小越慢。总结下来是这样：随着块大小的提升，磁盘读写效率会提高，但是空间利用率会降低。统计所得，分块大小为4kb最容易获得最佳性能。\n\n# 0X07 缓冲区\n现在的文件系统都支持缓冲区写入。缓冲区写入对应的另一种是‘同步写入’。缓冲区写入：程序生成的或者用户的数据首先写入到内存中，当达到一定时间或者一定量的时候一次性写入磁盘；同步写入：将程序和用户产生的数据实时写入磁盘里。下面对比一下这两种的优缺点\n\n**同步写入优点**：数据实时同步，出现数据丢失的可能性很小\n**同步写入缺点**：由于数据产生很慢，所以磁盘利用率不高，且长期占据磁盘\n**缓冲写入优点**：数据首先写入比磁盘快得多的内存中，再统一写入磁盘只会短时间占用磁盘，且占用磁盘时利用率高\n**缓冲写入缺点**：当数据在缓冲区没有写入磁盘时系统发生异常或者崩溃，数据非常容易丢失\n\n这里有两段Python的代码，展示了缓冲区写入和同步写入的速度差异，首先是使用同步写入方式写入\n```python\n#!/usr/bin/python\n#coding=utf-8\n\nfrom time import ctime\n\nf = open('D:/list.txt', 'r+', 0)    #不使用缓冲\nstart_time = ctime()    #开始时间\nfor i in range(3000000):\n    f.write('hello,world\\n')\nf.close()\nend_time = ctime()  #结束时间\n\nprint start_time\nprint end_time\n```\n运行结果是这样的，我们看到写入300W行'hello,world'用了8秒，最后生成的数据量是37.1MB\n```bash\nThu Nov 17 11:12:21 2016\nThu Nov 17 11:12:29 2016\n```\n然后使用Python默认大小的缓冲区试试：\n```python\n#!/usr/bin/python\n#coding=utf-8\n\nfrom time import ctime\n\nf = open('D:/list.txt', 'r+', -1)    #使用默认缓冲区大小\nstart_time = ctime()    #开始时间\nfor i in range(3000000):\n    f.write('hello,world\\n')\nf.close()\nend_time = ctime()  #结束时间\n\nprint start_time\nprint end_time\n```\n运行结果是这样的，我们看到这次写入相同的数据只用了1秒\n```bash\nThu Nov 17 11:18:04 2016\nThu Nov 17 11:18:05 2016\n```\n\n# 0X08 坏块屏蔽\n在磁盘这种物理结构里出现错误是比较正常的，尤其是机械磁盘磁臂在旋转的时候与磁道的摩擦会产生部分坏块。这些坏块上的数据会发生丢失或者错误，那么怎么屏蔽这些坏块呢？之前在那些分区软件里看到过坏块屏蔽，感觉非常高端，其实原理是很简单的。比如磁盘里有23块坏块，那么修复程序就创建一个文件，指定这个文件就存储在这23个坏块上，且对操作系统不可见，那么操作系统虽然知道这里有文件，但是不会去管他，这样就相当于屏蔽了磁盘里的坏块。\n\n# 0X09 提升文件系统性能 高速缓存\n高速缓存就是将即将需要的文件和经常使用的文件放在磁盘的高速缓存里，因为高速缓存的速度比磁盘要快得多，所以就可以通过这种方式来提高I/O效率。\n在Unix里有一个系统调用sync，在Windows里有一个FlushFileBuffers，是用来将高速缓存里的数据同步写入到磁盘里的。在Unix系列系统中每隔30秒就执行一次sync将数据写入，在Windows中则是实时的。这两种方案并没有谁好谁坏之分，各有优劣。\n\n# 0X0A 磁盘碎片整理\n因为绝大多数的现代文件系统都采用了链表存储的方案，所以在使用磁盘一段时间之后文件都是分散的放在磁盘的各个角落的，这样的话读写文件就会变得比较慢，文件越零散读写就越慢。那么我们可以手动将磁盘进行整理，将分散的文件数据聚合到一起，当然也只能是尽量，因为某些数据是不能被移动的，比如页文件、休眠文件、日志。当零散的文件变成连续的文件的时候读写的效率就会有大幅度提升。但是由于各个操作系统采用的文件系统的内部实现不同，导致几乎只有Windows需要对磁盘进行手动整理。当然所谓的手动整理也是有软件支持的，不需要用户自己去操作磁盘。但是因为Windows的发展，也几乎不再需要手动进行整理了。\n","slug":"filesystem","published":1,"updated":"2017-09-02T14:39:30.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmds0006hnlpllp748pw","content":"<h1 id=\"0X00-文件\"><a href=\"#0X00-文件\" class=\"headerlink\" title=\"0X00 文件\"></a>0X00 文件</h1><p><strong>‘文件’是进程创建的逻辑单元。</strong>—《现代操作系统（原书第三版）》<br>文件我们再熟悉不过了，电脑磁盘上存的都是文件。在Windows里和Unix系列系统里，表面看上去文件之间还是有一点点小的区别。比如，在Windows里主要还是以文件的后缀名来标识文件具体是什么类型的，图片还是视频；在Unix系列里文件的后缀名就没那么重要，主要后缀名是用来帮助人们识别文件类型的，操作系统并不很关心。<br><strong>真正的文件类型</strong>是文件的本质类型，不是我们常说的exe类型、doc类型、更不是什么图片类型和视频类型。在Windows下有常见的普通文件和目录。<em>没错，目录其实是文件的</em>。在Unix里，还有一些叫字符特殊文件和块特殊文件的。</p>\n<h1 id=\"0X01-文件的元数据\"><a href=\"#0X01-文件的元数据\" class=\"headerlink\" title=\"0X01 文件的元数据\"></a>0X01 文件的元数据</h1><p>文件里最重要的东西肯定是文件内容了，但是文件存在磁盘里是还有一些其他的相关数据也被存进去了的，那些数据被称之为<strong>元数据</strong>。想一下文件的相关信息，在Windows里右键一个文件选择属性或者在Linux里使用<code>ls -l</code>看到的文件的详细信息，这些几乎全部都是文件的元数据，都存到了磁盘中。常见的元数据有下面这些:创建者、拥有者、权限标志、文件大小、锁等等。比如说我们在Linux下输入<code>ls -l</code>能看到文件的大小、权限、所属者，这些都是文件的元数据。</p>\n<h1 id=\"0X02-MBR-主引导记录\"><a href=\"#0X02-MBR-主引导记录\" class=\"headerlink\" title=\"0X02 MBR-主引导记录\"></a>0X02 MBR-主引导记录</h1><p>经常装系统的话应该比较熟悉这个词‘主引导记录’，在以前的磁盘上常用的就是这种称为MBR的磁盘分区方式，其实现在还有好多在用MBR的，不过由于MBR的原理导致不支持2TB以上的磁盘且不支持4个以上的主分区，所以用的越来越少了，取而代之的是GPT。不过由于MBR比较简单，就先介绍一下MBR。<br>计算机在启动的时候，BIOS会读取MBR的分区表来找到引导分区并引导操作系统。可以启动的分区称为活动分区，必须要是活动的分区才可以引导系统启动；MBR的分区表只能容纳四个分区，如果需要更多的分区就需要创建扩展分区。可以在一个MBR的分区表中创建三个主分区，在最后一个位置创建一个扩展分区。实际上最后一个扩展分区是不能直接使用的，相当于扩展分区在磁盘上花了一块当另一个磁盘用、在扩展分区头部还有一个扩展分区的分区表，里面保存着逻辑分区的分区信息，且这个分区表的空间比较大，所以逻辑分区可以创建好多个。</p>\n<h1 id=\"0X03-文件存储\"><a href=\"#0X03-文件存储\" class=\"headerlink\" title=\"0X03 文件存储\"></a>0X03 文件存储</h1><p>文件存储在磁盘中有好多种分配方案，这些方案各有利弊。随着存储介质、CPU等设备的发展和人们需求的变化，出现了下面这些比较好的方案。</p>\n<h2 id=\"连续分配\"><a href=\"#连续分配\" class=\"headerlink\" title=\"连续分配\"></a>连续分配</h2><p>首先我们把磁盘想象成一个超长的条形存储设备，这样就比较好理解（然而实际上现在常见的磁盘是区分盘面、磁道、柱面、扇区的）。<br>早期的磁盘和现代的CD-ROM是使用这种连续分配方式存储数据的。连续分配，由字面可知是把文件连续的从头到尾得存到磁盘里，这种方式读写都非常快，但是却非常不适合日常使用。考虑下面这种情况，我有下面这些文件<br><code>[  A  ][  B  ][  C  ][  D  ][  E  ][  F  ]</code>整个磁盘大小为6GB，每个文件都有1GB，刚刚好用完整个磁盘。但是当我删除了B和E两个文件的时候就会变成下面这样，空余两个1GB的位置出来，但是这两个空间不连续<br><code>[  A  ][     ][  C  ][  D  ][     ][  F  ]</code>现在我有2GB的空间。系统需要维护一个空闲空间列表来让后来的文件放在这些空闲的地方，因为如果不维护这张表的话，当磁盘写满过一次就再也不能写入新的数据了。虽然我们维护了一张这样的表也并不能很让人满意，比如有一个1.5GB的文件想存到磁盘里，系统就会查找连续的空余空间，但是并没有一个连续的高达1.5GB的空间，所以并不能把文件存进去，显然这并不能让人满意。而且，这些还都是建立在一个前提之下的，就是说“存储文件之前必须知道文件的大小”，然而事实上很多时候是不知道的，比如我们打开了AE（一款渲染视频的软件）来制作一段视频特效，然而在生成视频的时候没有人知道这个文件最后是多大的，所以就并不适用于这种情况。但是这种分配方案就没有优点了吗？也不是的。比如我们需要将数据刻录到CD-ROM上，因为CD-ROM是只读设备，所以在第一次刻录之后就没有修改的可能了，那么我们就可以通过这种方案直接将已有的数据顺序刻录到光盘里，这样以后的读取就会变得很快了。然后针对磁盘有了下面的‘链表分配方案’</p>\n<h2 id=\"链表分配\"><a href=\"#链表分配\" class=\"headerlink\" title=\"链表分配\"></a>链表分配</h2><p>使用链表分配方案时，目录下的每一个文件都只保留文件的头指针，每个文件都是一个链表，这样我们就可以顺着指针的指向把整个文件从文件系统中遍历出来。虽然链表分配方案成功的利用起来了空闲空间，但是还是有下面两个比较严重的问题：</p>\n<ol>\n<li>每次想要访问文件的第n个节点时候，都要从文件头开始访问，有n-1次磁盘的访问是无效的，所以这种方案对随机读取非常慢；</li>\n<li>因为每个磁盘块的大小都是2的n次幂，保存的大小也就是2的n次幂，但是因为文件头被指针占去了一定的字节，就导致实际存储的文件并不是2的n次幂。虽然这个问题并不是致命的，但是确实会让系统变慢，也会让面向系统的编程变得困难很多。</li>\n</ol>\n<p>内存链表解决了链表分配的一些问题。</p>\n<h2 id=\"内存链表分配\"><a href=\"#内存链表分配\" class=\"headerlink\" title=\"内存链表分配\"></a>内存链表分配</h2><p>内存链表分配是将磁盘里所有文件的所有块都做成链表，依旧是每个文件一个链表。但是这次将链表整个存放到内存中，这样在随机访问的时候因为链表全都在内存中就会非常快。但是由于要对每一个文件建立存储，且存放在内存中，所以这种文件系统并不适合用于小文件大磁盘。对于一个200GB的磁盘，里面充满了1KB的块，那么根据系统优化之后这张表需要600~800MB的内存，然而现在动辄TB级的磁盘，则非常不适用。这种内存链表分配方案中维护的表称之为‘文件分配表’英文也就是我们熟悉的‘File Allocation Table-----FAT’<br>为了克服内存链表分配的内存占用大的问题，有了i-Node方案。</p>\n<h2 id=\"i-Node\"><a href=\"#i-Node\" class=\"headerlink\" title=\"i-Node\"></a>i-Node</h2><p>i-Node方案在磁盘头部预留一段空间用来存放i-Node，这里的i-Node是一种数据结构，里面包含了文件的一些元数据和文件所有块的相关信息，所以根据一个i-Node就可以找到着整个文件。因为每个i-Node的预留空间都是固定的，如果文件太大太分散就会导致一个i-Node并不能存储完所有信息，那么i-Node中最后一段就保存了另一个i-Node的地址，然后在另一个i-Node中继续保存信息。因为i-Node是保存在磁盘里的，所以不会影响到内存，只有当文件真正打开的时候才会将数据加载到内存。所以内存占用是核同时打开的文件数量相关的。在Linux中我们使用<code>ls -l -i</code>就可以看到每个文件的i-Node编号。现在的大多数文件系统都采用这种方案了，比如EXT、NTFS、XFS等。</p>\n<h1 id=\"0X04-文件共享\"><a href=\"#0X04-文件共享\" class=\"headerlink\" title=\"0X04 文件共享\"></a>0X04 文件共享</h1><p>首先明确两点：1. 这里说的文件共享并不是说将一个文件通过网络传输给他人的那种文件共享； 2. 系统中的文件结构不是树状，而是图。（当Windows中我们给一个文件建立了一个快捷方式并放在了另一个目录里的时候，就形成了图解构）<br>这里的文件共享主要就是链接的问题，关于链接的内容可以在我博客里找到。<a href=\"http://blog.just666.cn/index.php/archives/10/\" target=\"_blank\" rel=\"external\">Linux软连接/硬链接 理解Linux链接</a><br>每个文件会保存指向自己的链接数，当只想自己的链接数为0的时候，那么这块数据就抛弃掉了。</p>\n<h1 id=\"0X05-文件系统\"><a href=\"#0X05-文件系统\" class=\"headerlink\" title=\"0X05 文件系统\"></a>0X05 文件系统</h1><h2 id=\"日志结构文件系统\"><a href=\"#日志结构文件系统\" class=\"headerlink\" title=\"日志结构文件系统\"></a>日志结构文件系统</h2><p>因为现在的CPU运算能力和磁盘容量、内存容量等都有了非常大的进步，所以在不实际访问磁盘只在高速缓存上就能访问到很多需要的数据，所以根据这种情况，就出现了日志结构文件系统(Log-structred File System)。这种文件系统将文件操作结构化成日志。在这种文件系统中每次将数据读写缓存到内存，然后定时定量地将数据从内存写入磁盘。</p>\n<h2 id=\"日志文件系统\"><a href=\"#日志文件系统\" class=\"headerlink\" title=\"日志文件系统\"></a>日志文件系统</h2><p>日志文件系统比日志结构文件系统有更强的鲁棒性（Roubst 也就是健壮性）。在这种文件系统中进行文件操作时，先记录下要干什么，然后再开始操作。这样不管什么时候出了错误，都可以根据日志来恢复操作。比如在Unix中删除一个文件分成三个步骤：1.在目录中删除文件 2.释放i-Node到空间i-Node节点池 3.强磁盘块归还到操作系统。 如果完成了第一步，就死机了，那么由于日志的存在就可以在知道这个操作究竟要干什么，在恢复开机的时候就可以继续完成这次操作。当所有的任务项都完成了的时候就删除这个日志。</p>\n<h2 id=\"虚拟文件系统\"><a href=\"#虚拟文件系统\" class=\"headerlink\" title=\"虚拟文件系统\"></a>虚拟文件系统</h2><p>在Windows里用的是多根目录的方式，也就是有多个根目录，比如C盘D盘E盘等，但是在Linux中我们使用的是单根目录形式，如果要同时使用几种文件系统比如：根目录使用XFS、/home使用ext4、/usr目录使用ext3、那么久需要使用一种叫做虚拟文件系统的技术。两个不同的文件系统之间需要连接的话需要使用VFS（虚拟文件系统）接口来将两个文件系统连起来。使用这种虚拟文件系统的技术就可以让同一个根目录下面挂载有不同文件系统的设备。</p>\n<h1 id=\"0X06-磁盘分块\"><a href=\"#0X06-磁盘分块\" class=\"headerlink\" title=\"0X06 磁盘分块\"></a>0X06 磁盘分块</h1><p>已知文件在磁盘里是按照块存储的，那么每个块分配多大就成为了一个问题。因为在磁盘底层，每个文件占用的块都是整数，比如我一个块是1kb，那么我有一个2.5kb的文件也要占用3个块，甚至是1字节的文件也要占用1kb，每个块中剩余的部分是不能存储其他文件的。从这方面看来分块越大就越浪费空间，块越小磁盘空间利用率越高。那么我们把块都分成最小，这样就行了吗？显然没有这么简单。因为磁盘在读写数据的时候是按照块来的，所以分的块越大读写的速度越快，因为磁盘里的总块数少，块越小越慢。总结下来是这样：随着块大小的提升，磁盘读写效率会提高，但是空间利用率会降低。统计所得，分块大小为4kb最容易获得最佳性能。</p>\n<h1 id=\"0X07-缓冲区\"><a href=\"#0X07-缓冲区\" class=\"headerlink\" title=\"0X07 缓冲区\"></a>0X07 缓冲区</h1><p>现在的文件系统都支持缓冲区写入。缓冲区写入对应的另一种是‘同步写入’。缓冲区写入：程序生成的或者用户的数据首先写入到内存中，当达到一定时间或者一定量的时候一次性写入磁盘；同步写入：将程序和用户产生的数据实时写入磁盘里。下面对比一下这两种的优缺点</p>\n<p><strong>同步写入优点</strong>：数据实时同步，出现数据丢失的可能性很小<br><strong>同步写入缺点</strong>：由于数据产生很慢，所以磁盘利用率不高，且长期占据磁盘<br><strong>缓冲写入优点</strong>：数据首先写入比磁盘快得多的内存中，再统一写入磁盘只会短时间占用磁盘，且占用磁盘时利用率高<br><strong>缓冲写入缺点</strong>：当数据在缓冲区没有写入磁盘时系统发生异常或者崩溃，数据非常容易丢失</p>\n<p>这里有两段Python的代码，展示了缓冲区写入和同步写入的速度差异，首先是使用同步写入方式写入<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</div><div class=\"line\"></div><div class=\"line\">f = open(<span class=\"string\">'D:/list.txt'</span>, <span class=\"string\">'r+'</span>, <span class=\"number\">0</span>)    <span class=\"comment\">#不使用缓冲</span></div><div class=\"line\">start_time = ctime()    <span class=\"comment\">#开始时间</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3000000</span>):</div><div class=\"line\">    f.write(<span class=\"string\">'hello,world\\n'</span>)</div><div class=\"line\">f.close()</div><div class=\"line\">end_time = ctime()  <span class=\"comment\">#结束时间</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> start_time</div><div class=\"line\"><span class=\"keyword\">print</span> end_time</div></pre></td></tr></table></figure></p>\n<p>运行结果是这样的，我们看到写入300W行’hello,world’用了8秒，最后生成的数据量是37.1MB<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thu Nov 17 11:12:21 2016</div><div class=\"line\">Thu Nov 17 11:12:29 2016</div></pre></td></tr></table></figure></p>\n<p>然后使用Python默认大小的缓冲区试试：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</div><div class=\"line\"></div><div class=\"line\">f = open(<span class=\"string\">'D:/list.txt'</span>, <span class=\"string\">'r+'</span>, <span class=\"number\">-1</span>)    <span class=\"comment\">#使用默认缓冲区大小</span></div><div class=\"line\">start_time = ctime()    <span class=\"comment\">#开始时间</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3000000</span>):</div><div class=\"line\">    f.write(<span class=\"string\">'hello,world\\n'</span>)</div><div class=\"line\">f.close()</div><div class=\"line\">end_time = ctime()  <span class=\"comment\">#结束时间</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> start_time</div><div class=\"line\"><span class=\"keyword\">print</span> end_time</div></pre></td></tr></table></figure></p>\n<p>运行结果是这样的，我们看到这次写入相同的数据只用了1秒<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thu Nov 17 11:18:04 2016</div><div class=\"line\">Thu Nov 17 11:18:05 2016</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-坏块屏蔽\"><a href=\"#0X08-坏块屏蔽\" class=\"headerlink\" title=\"0X08 坏块屏蔽\"></a>0X08 坏块屏蔽</h1><p>在磁盘这种物理结构里出现错误是比较正常的，尤其是机械磁盘磁臂在旋转的时候与磁道的摩擦会产生部分坏块。这些坏块上的数据会发生丢失或者错误，那么怎么屏蔽这些坏块呢？之前在那些分区软件里看到过坏块屏蔽，感觉非常高端，其实原理是很简单的。比如磁盘里有23块坏块，那么修复程序就创建一个文件，指定这个文件就存储在这23个坏块上，且对操作系统不可见，那么操作系统虽然知道这里有文件，但是不会去管他，这样就相当于屏蔽了磁盘里的坏块。</p>\n<h1 id=\"0X09-提升文件系统性能-高速缓存\"><a href=\"#0X09-提升文件系统性能-高速缓存\" class=\"headerlink\" title=\"0X09 提升文件系统性能 高速缓存\"></a>0X09 提升文件系统性能 高速缓存</h1><p>高速缓存就是将即将需要的文件和经常使用的文件放在磁盘的高速缓存里，因为高速缓存的速度比磁盘要快得多，所以就可以通过这种方式来提高I/O效率。<br>在Unix里有一个系统调用sync，在Windows里有一个FlushFileBuffers，是用来将高速缓存里的数据同步写入到磁盘里的。在Unix系列系统中每隔30秒就执行一次sync将数据写入，在Windows中则是实时的。这两种方案并没有谁好谁坏之分，各有优劣。</p>\n<h1 id=\"0X0A-磁盘碎片整理\"><a href=\"#0X0A-磁盘碎片整理\" class=\"headerlink\" title=\"0X0A 磁盘碎片整理\"></a>0X0A 磁盘碎片整理</h1><p>因为绝大多数的现代文件系统都采用了链表存储的方案，所以在使用磁盘一段时间之后文件都是分散的放在磁盘的各个角落的，这样的话读写文件就会变得比较慢，文件越零散读写就越慢。那么我们可以手动将磁盘进行整理，将分散的文件数据聚合到一起，当然也只能是尽量，因为某些数据是不能被移动的，比如页文件、休眠文件、日志。当零散的文件变成连续的文件的时候读写的效率就会有大幅度提升。但是由于各个操作系统采用的文件系统的内部实现不同，导致几乎只有Windows需要对磁盘进行手动整理。当然所谓的手动整理也是有软件支持的，不需要用户自己去操作磁盘。但是因为Windows的发展，也几乎不再需要手动进行整理了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-文件\"><a href=\"#0X00-文件\" class=\"headerlink\" title=\"0X00 文件\"></a>0X00 文件</h1><p><strong>‘文件’是进程创建的逻辑单元。</strong>—《现代操作系统（原书第三版）》<br>文件我们再熟悉不过了，电脑磁盘上存的都是文件。在Windows里和Unix系列系统里，表面看上去文件之间还是有一点点小的区别。比如，在Windows里主要还是以文件的后缀名来标识文件具体是什么类型的，图片还是视频；在Unix系列里文件的后缀名就没那么重要，主要后缀名是用来帮助人们识别文件类型的，操作系统并不很关心。<br><strong>真正的文件类型</strong>是文件的本质类型，不是我们常说的exe类型、doc类型、更不是什么图片类型和视频类型。在Windows下有常见的普通文件和目录。<em>没错，目录其实是文件的</em>。在Unix里，还有一些叫字符特殊文件和块特殊文件的。</p>\n<h1 id=\"0X01-文件的元数据\"><a href=\"#0X01-文件的元数据\" class=\"headerlink\" title=\"0X01 文件的元数据\"></a>0X01 文件的元数据</h1><p>文件里最重要的东西肯定是文件内容了，但是文件存在磁盘里是还有一些其他的相关数据也被存进去了的，那些数据被称之为<strong>元数据</strong>。想一下文件的相关信息，在Windows里右键一个文件选择属性或者在Linux里使用<code>ls -l</code>看到的文件的详细信息，这些几乎全部都是文件的元数据，都存到了磁盘中。常见的元数据有下面这些:创建者、拥有者、权限标志、文件大小、锁等等。比如说我们在Linux下输入<code>ls -l</code>能看到文件的大小、权限、所属者，这些都是文件的元数据。</p>\n<h1 id=\"0X02-MBR-主引导记录\"><a href=\"#0X02-MBR-主引导记录\" class=\"headerlink\" title=\"0X02 MBR-主引导记录\"></a>0X02 MBR-主引导记录</h1><p>经常装系统的话应该比较熟悉这个词‘主引导记录’，在以前的磁盘上常用的就是这种称为MBR的磁盘分区方式，其实现在还有好多在用MBR的，不过由于MBR的原理导致不支持2TB以上的磁盘且不支持4个以上的主分区，所以用的越来越少了，取而代之的是GPT。不过由于MBR比较简单，就先介绍一下MBR。<br>计算机在启动的时候，BIOS会读取MBR的分区表来找到引导分区并引导操作系统。可以启动的分区称为活动分区，必须要是活动的分区才可以引导系统启动；MBR的分区表只能容纳四个分区，如果需要更多的分区就需要创建扩展分区。可以在一个MBR的分区表中创建三个主分区，在最后一个位置创建一个扩展分区。实际上最后一个扩展分区是不能直接使用的，相当于扩展分区在磁盘上花了一块当另一个磁盘用、在扩展分区头部还有一个扩展分区的分区表，里面保存着逻辑分区的分区信息，且这个分区表的空间比较大，所以逻辑分区可以创建好多个。</p>\n<h1 id=\"0X03-文件存储\"><a href=\"#0X03-文件存储\" class=\"headerlink\" title=\"0X03 文件存储\"></a>0X03 文件存储</h1><p>文件存储在磁盘中有好多种分配方案，这些方案各有利弊。随着存储介质、CPU等设备的发展和人们需求的变化，出现了下面这些比较好的方案。</p>\n<h2 id=\"连续分配\"><a href=\"#连续分配\" class=\"headerlink\" title=\"连续分配\"></a>连续分配</h2><p>首先我们把磁盘想象成一个超长的条形存储设备，这样就比较好理解（然而实际上现在常见的磁盘是区分盘面、磁道、柱面、扇区的）。<br>早期的磁盘和现代的CD-ROM是使用这种连续分配方式存储数据的。连续分配，由字面可知是把文件连续的从头到尾得存到磁盘里，这种方式读写都非常快，但是却非常不适合日常使用。考虑下面这种情况，我有下面这些文件<br><code>[  A  ][  B  ][  C  ][  D  ][  E  ][  F  ]</code>整个磁盘大小为6GB，每个文件都有1GB，刚刚好用完整个磁盘。但是当我删除了B和E两个文件的时候就会变成下面这样，空余两个1GB的位置出来，但是这两个空间不连续<br><code>[  A  ][     ][  C  ][  D  ][     ][  F  ]</code>现在我有2GB的空间。系统需要维护一个空闲空间列表来让后来的文件放在这些空闲的地方，因为如果不维护这张表的话，当磁盘写满过一次就再也不能写入新的数据了。虽然我们维护了一张这样的表也并不能很让人满意，比如有一个1.5GB的文件想存到磁盘里，系统就会查找连续的空余空间，但是并没有一个连续的高达1.5GB的空间，所以并不能把文件存进去，显然这并不能让人满意。而且，这些还都是建立在一个前提之下的，就是说“存储文件之前必须知道文件的大小”，然而事实上很多时候是不知道的，比如我们打开了AE（一款渲染视频的软件）来制作一段视频特效，然而在生成视频的时候没有人知道这个文件最后是多大的，所以就并不适用于这种情况。但是这种分配方案就没有优点了吗？也不是的。比如我们需要将数据刻录到CD-ROM上，因为CD-ROM是只读设备，所以在第一次刻录之后就没有修改的可能了，那么我们就可以通过这种方案直接将已有的数据顺序刻录到光盘里，这样以后的读取就会变得很快了。然后针对磁盘有了下面的‘链表分配方案’</p>\n<h2 id=\"链表分配\"><a href=\"#链表分配\" class=\"headerlink\" title=\"链表分配\"></a>链表分配</h2><p>使用链表分配方案时，目录下的每一个文件都只保留文件的头指针，每个文件都是一个链表，这样我们就可以顺着指针的指向把整个文件从文件系统中遍历出来。虽然链表分配方案成功的利用起来了空闲空间，但是还是有下面两个比较严重的问题：</p>\n<ol>\n<li>每次想要访问文件的第n个节点时候，都要从文件头开始访问，有n-1次磁盘的访问是无效的，所以这种方案对随机读取非常慢；</li>\n<li>因为每个磁盘块的大小都是2的n次幂，保存的大小也就是2的n次幂，但是因为文件头被指针占去了一定的字节，就导致实际存储的文件并不是2的n次幂。虽然这个问题并不是致命的，但是确实会让系统变慢，也会让面向系统的编程变得困难很多。</li>\n</ol>\n<p>内存链表解决了链表分配的一些问题。</p>\n<h2 id=\"内存链表分配\"><a href=\"#内存链表分配\" class=\"headerlink\" title=\"内存链表分配\"></a>内存链表分配</h2><p>内存链表分配是将磁盘里所有文件的所有块都做成链表，依旧是每个文件一个链表。但是这次将链表整个存放到内存中，这样在随机访问的时候因为链表全都在内存中就会非常快。但是由于要对每一个文件建立存储，且存放在内存中，所以这种文件系统并不适合用于小文件大磁盘。对于一个200GB的磁盘，里面充满了1KB的块，那么根据系统优化之后这张表需要600~800MB的内存，然而现在动辄TB级的磁盘，则非常不适用。这种内存链表分配方案中维护的表称之为‘文件分配表’英文也就是我们熟悉的‘File Allocation Table-----FAT’<br>为了克服内存链表分配的内存占用大的问题，有了i-Node方案。</p>\n<h2 id=\"i-Node\"><a href=\"#i-Node\" class=\"headerlink\" title=\"i-Node\"></a>i-Node</h2><p>i-Node方案在磁盘头部预留一段空间用来存放i-Node，这里的i-Node是一种数据结构，里面包含了文件的一些元数据和文件所有块的相关信息，所以根据一个i-Node就可以找到着整个文件。因为每个i-Node的预留空间都是固定的，如果文件太大太分散就会导致一个i-Node并不能存储完所有信息，那么i-Node中最后一段就保存了另一个i-Node的地址，然后在另一个i-Node中继续保存信息。因为i-Node是保存在磁盘里的，所以不会影响到内存，只有当文件真正打开的时候才会将数据加载到内存。所以内存占用是核同时打开的文件数量相关的。在Linux中我们使用<code>ls -l -i</code>就可以看到每个文件的i-Node编号。现在的大多数文件系统都采用这种方案了，比如EXT、NTFS、XFS等。</p>\n<h1 id=\"0X04-文件共享\"><a href=\"#0X04-文件共享\" class=\"headerlink\" title=\"0X04 文件共享\"></a>0X04 文件共享</h1><p>首先明确两点：1. 这里说的文件共享并不是说将一个文件通过网络传输给他人的那种文件共享； 2. 系统中的文件结构不是树状，而是图。（当Windows中我们给一个文件建立了一个快捷方式并放在了另一个目录里的时候，就形成了图解构）<br>这里的文件共享主要就是链接的问题，关于链接的内容可以在我博客里找到。<a href=\"http://blog.just666.cn/index.php/archives/10/\" target=\"_blank\" rel=\"external\">Linux软连接/硬链接 理解Linux链接</a><br>每个文件会保存指向自己的链接数，当只想自己的链接数为0的时候，那么这块数据就抛弃掉了。</p>\n<h1 id=\"0X05-文件系统\"><a href=\"#0X05-文件系统\" class=\"headerlink\" title=\"0X05 文件系统\"></a>0X05 文件系统</h1><h2 id=\"日志结构文件系统\"><a href=\"#日志结构文件系统\" class=\"headerlink\" title=\"日志结构文件系统\"></a>日志结构文件系统</h2><p>因为现在的CPU运算能力和磁盘容量、内存容量等都有了非常大的进步，所以在不实际访问磁盘只在高速缓存上就能访问到很多需要的数据，所以根据这种情况，就出现了日志结构文件系统(Log-structred File System)。这种文件系统将文件操作结构化成日志。在这种文件系统中每次将数据读写缓存到内存，然后定时定量地将数据从内存写入磁盘。</p>\n<h2 id=\"日志文件系统\"><a href=\"#日志文件系统\" class=\"headerlink\" title=\"日志文件系统\"></a>日志文件系统</h2><p>日志文件系统比日志结构文件系统有更强的鲁棒性（Roubst 也就是健壮性）。在这种文件系统中进行文件操作时，先记录下要干什么，然后再开始操作。这样不管什么时候出了错误，都可以根据日志来恢复操作。比如在Unix中删除一个文件分成三个步骤：1.在目录中删除文件 2.释放i-Node到空间i-Node节点池 3.强磁盘块归还到操作系统。 如果完成了第一步，就死机了，那么由于日志的存在就可以在知道这个操作究竟要干什么，在恢复开机的时候就可以继续完成这次操作。当所有的任务项都完成了的时候就删除这个日志。</p>\n<h2 id=\"虚拟文件系统\"><a href=\"#虚拟文件系统\" class=\"headerlink\" title=\"虚拟文件系统\"></a>虚拟文件系统</h2><p>在Windows里用的是多根目录的方式，也就是有多个根目录，比如C盘D盘E盘等，但是在Linux中我们使用的是单根目录形式，如果要同时使用几种文件系统比如：根目录使用XFS、/home使用ext4、/usr目录使用ext3、那么久需要使用一种叫做虚拟文件系统的技术。两个不同的文件系统之间需要连接的话需要使用VFS（虚拟文件系统）接口来将两个文件系统连起来。使用这种虚拟文件系统的技术就可以让同一个根目录下面挂载有不同文件系统的设备。</p>\n<h1 id=\"0X06-磁盘分块\"><a href=\"#0X06-磁盘分块\" class=\"headerlink\" title=\"0X06 磁盘分块\"></a>0X06 磁盘分块</h1><p>已知文件在磁盘里是按照块存储的，那么每个块分配多大就成为了一个问题。因为在磁盘底层，每个文件占用的块都是整数，比如我一个块是1kb，那么我有一个2.5kb的文件也要占用3个块，甚至是1字节的文件也要占用1kb，每个块中剩余的部分是不能存储其他文件的。从这方面看来分块越大就越浪费空间，块越小磁盘空间利用率越高。那么我们把块都分成最小，这样就行了吗？显然没有这么简单。因为磁盘在读写数据的时候是按照块来的，所以分的块越大读写的速度越快，因为磁盘里的总块数少，块越小越慢。总结下来是这样：随着块大小的提升，磁盘读写效率会提高，但是空间利用率会降低。统计所得，分块大小为4kb最容易获得最佳性能。</p>\n<h1 id=\"0X07-缓冲区\"><a href=\"#0X07-缓冲区\" class=\"headerlink\" title=\"0X07 缓冲区\"></a>0X07 缓冲区</h1><p>现在的文件系统都支持缓冲区写入。缓冲区写入对应的另一种是‘同步写入’。缓冲区写入：程序生成的或者用户的数据首先写入到内存中，当达到一定时间或者一定量的时候一次性写入磁盘；同步写入：将程序和用户产生的数据实时写入磁盘里。下面对比一下这两种的优缺点</p>\n<p><strong>同步写入优点</strong>：数据实时同步，出现数据丢失的可能性很小<br><strong>同步写入缺点</strong>：由于数据产生很慢，所以磁盘利用率不高，且长期占据磁盘<br><strong>缓冲写入优点</strong>：数据首先写入比磁盘快得多的内存中，再统一写入磁盘只会短时间占用磁盘，且占用磁盘时利用率高<br><strong>缓冲写入缺点</strong>：当数据在缓冲区没有写入磁盘时系统发生异常或者崩溃，数据非常容易丢失</p>\n<p>这里有两段Python的代码，展示了缓冲区写入和同步写入的速度差异，首先是使用同步写入方式写入<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</div><div class=\"line\"></div><div class=\"line\">f = open(<span class=\"string\">'D:/list.txt'</span>, <span class=\"string\">'r+'</span>, <span class=\"number\">0</span>)    <span class=\"comment\">#不使用缓冲</span></div><div class=\"line\">start_time = ctime()    <span class=\"comment\">#开始时间</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3000000</span>):</div><div class=\"line\">    f.write(<span class=\"string\">'hello,world\\n'</span>)</div><div class=\"line\">f.close()</div><div class=\"line\">end_time = ctime()  <span class=\"comment\">#结束时间</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> start_time</div><div class=\"line\"><span class=\"keyword\">print</span> end_time</div></pre></td></tr></table></figure></p>\n<p>运行结果是这样的，我们看到写入300W行’hello,world’用了8秒，最后生成的数据量是37.1MB<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thu Nov 17 11:12:21 2016</div><div class=\"line\">Thu Nov 17 11:12:29 2016</div></pre></td></tr></table></figure></p>\n<p>然后使用Python默认大小的缓冲区试试：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> ctime</div><div class=\"line\"></div><div class=\"line\">f = open(<span class=\"string\">'D:/list.txt'</span>, <span class=\"string\">'r+'</span>, <span class=\"number\">-1</span>)    <span class=\"comment\">#使用默认缓冲区大小</span></div><div class=\"line\">start_time = ctime()    <span class=\"comment\">#开始时间</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3000000</span>):</div><div class=\"line\">    f.write(<span class=\"string\">'hello,world\\n'</span>)</div><div class=\"line\">f.close()</div><div class=\"line\">end_time = ctime()  <span class=\"comment\">#结束时间</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> start_time</div><div class=\"line\"><span class=\"keyword\">print</span> end_time</div></pre></td></tr></table></figure></p>\n<p>运行结果是这样的，我们看到这次写入相同的数据只用了1秒<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Thu Nov 17 11:18:04 2016</div><div class=\"line\">Thu Nov 17 11:18:05 2016</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-坏块屏蔽\"><a href=\"#0X08-坏块屏蔽\" class=\"headerlink\" title=\"0X08 坏块屏蔽\"></a>0X08 坏块屏蔽</h1><p>在磁盘这种物理结构里出现错误是比较正常的，尤其是机械磁盘磁臂在旋转的时候与磁道的摩擦会产生部分坏块。这些坏块上的数据会发生丢失或者错误，那么怎么屏蔽这些坏块呢？之前在那些分区软件里看到过坏块屏蔽，感觉非常高端，其实原理是很简单的。比如磁盘里有23块坏块，那么修复程序就创建一个文件，指定这个文件就存储在这23个坏块上，且对操作系统不可见，那么操作系统虽然知道这里有文件，但是不会去管他，这样就相当于屏蔽了磁盘里的坏块。</p>\n<h1 id=\"0X09-提升文件系统性能-高速缓存\"><a href=\"#0X09-提升文件系统性能-高速缓存\" class=\"headerlink\" title=\"0X09 提升文件系统性能 高速缓存\"></a>0X09 提升文件系统性能 高速缓存</h1><p>高速缓存就是将即将需要的文件和经常使用的文件放在磁盘的高速缓存里，因为高速缓存的速度比磁盘要快得多，所以就可以通过这种方式来提高I/O效率。<br>在Unix里有一个系统调用sync，在Windows里有一个FlushFileBuffers，是用来将高速缓存里的数据同步写入到磁盘里的。在Unix系列系统中每隔30秒就执行一次sync将数据写入，在Windows中则是实时的。这两种方案并没有谁好谁坏之分，各有优劣。</p>\n<h1 id=\"0X0A-磁盘碎片整理\"><a href=\"#0X0A-磁盘碎片整理\" class=\"headerlink\" title=\"0X0A 磁盘碎片整理\"></a>0X0A 磁盘碎片整理</h1><p>因为绝大多数的现代文件系统都采用了链表存储的方案，所以在使用磁盘一段时间之后文件都是分散的放在磁盘的各个角落的，这样的话读写文件就会变得比较慢，文件越零散读写就越慢。那么我们可以手动将磁盘进行整理，将分散的文件数据聚合到一起，当然也只能是尽量，因为某些数据是不能被移动的，比如页文件、休眠文件、日志。当零散的文件变成连续的文件的时候读写的效率就会有大幅度提升。但是由于各个操作系统采用的文件系统的内部实现不同，导致几乎只有Windows需要对磁盘进行手动整理。当然所谓的手动整理也是有软件支持的，不需要用户自己去操作磁盘。但是因为Windows的发展，也几乎不再需要手动进行整理了。</p>\n"},{"title":"CentOS7中使用firewall-cmd控制端口和端口转发","date":"2016-11-17T13:16:00.000Z","_content":"\n# 0X00 firewalld 守护进程\n`firewall-cmd`命令需要`firewalld`进程处于运行状态。我们可以使用`systemctl status/start/stop/restart firewalld`来控制这个守护进程。`firewalld`进程为防火墙提供服务。\n\n当我们修改了某些配置之后（尤其是配置文件的修改），firewall并不会立即生效。可以通过两种方式来激活最新配置`systemctl restart firewalld`和`firewall-cmd --reload`两种方式，前一种是重启firewalld服务，建议使用后一种“重载配置文件”。重载配置文件之后不会断掉正在连接的tcp会话，而重启服务则会断开tcp会话。\n\n# 0X01 控制端口/服务\n可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放http服务就是开放了80端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp还是udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。\n```bash\nfirewall-cmd --add-service=mysql\t\t# 开放mysql端口\nfirewall-cmd --remove-service=http\t\t# 阻止http端口\nfirewall-cmd --list-services\t\t\t# 查看开放的服务\n\nfirewall-cmd --add-port=3306/tcp\t\t# 开放通过tcp访问3306\nfirewall-cmd --remove-port=80tcp\t\t# 阻止通过tcp访问3306\nfirewall-cmd --add-port=233/udp\t\t\t# 开放通过udp访问233\nfirewall-cmd --list-ports\t\t\t\t# 查看开放的端口\n```\n\n# 0X02 伪装IP\n防火墙可以实现伪装IP的功能，下面的端口转发就会用到这个功能。\n```bash\nfirewall-cmd --query-masquerade # 检查是否允许伪装IP\nfirewall-cmd --add-masquerade   # 允许防火墙伪装IP\nfirewall-cmd --remove-masquerade# 禁止防火墙伪装IP\n```\n\n\n# 0X03 端口转发\n端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定ip的话就默认为本机，如果指定了ip却没指定端口，则默认使用来源端口。\n如果配置好端口转发之后不能用，可以检查下面两个问题：\n1. 比如我将80端口转发至8080端口，首先检查本地的80端口和目标的8080端口是否开放监听了\n2. 其次检查是否允许伪装IP，没允许的话要开启伪装IP\n\n```bash\n# 将80端口的流量转发至8080\nfirewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080\n\n# 将80端口的流量转发至\nfirewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.1.0.1192.168.0.1\n\n# 将80端口的流量转发至192.168.0.1的8080端口\nfirewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.0.1:toport=8080 \n```\n1. 当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。\n2. 端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。\n","source":"_posts/firewall_cmd.md","raw":"---\ntitle: CentOS7中使用firewall-cmd控制端口和端口转发\ndate: 2016-11-17 21:16\ntags:\n  - 防火墙\n  - firewall-cmd\n  - Linux\n---\n\n# 0X00 firewalld 守护进程\n`firewall-cmd`命令需要`firewalld`进程处于运行状态。我们可以使用`systemctl status/start/stop/restart firewalld`来控制这个守护进程。`firewalld`进程为防火墙提供服务。\n\n当我们修改了某些配置之后（尤其是配置文件的修改），firewall并不会立即生效。可以通过两种方式来激活最新配置`systemctl restart firewalld`和`firewall-cmd --reload`两种方式，前一种是重启firewalld服务，建议使用后一种“重载配置文件”。重载配置文件之后不会断掉正在连接的tcp会话，而重启服务则会断开tcp会话。\n\n# 0X01 控制端口/服务\n可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放http服务就是开放了80端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp还是udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。\n```bash\nfirewall-cmd --add-service=mysql\t\t# 开放mysql端口\nfirewall-cmd --remove-service=http\t\t# 阻止http端口\nfirewall-cmd --list-services\t\t\t# 查看开放的服务\n\nfirewall-cmd --add-port=3306/tcp\t\t# 开放通过tcp访问3306\nfirewall-cmd --remove-port=80tcp\t\t# 阻止通过tcp访问3306\nfirewall-cmd --add-port=233/udp\t\t\t# 开放通过udp访问233\nfirewall-cmd --list-ports\t\t\t\t# 查看开放的端口\n```\n\n# 0X02 伪装IP\n防火墙可以实现伪装IP的功能，下面的端口转发就会用到这个功能。\n```bash\nfirewall-cmd --query-masquerade # 检查是否允许伪装IP\nfirewall-cmd --add-masquerade   # 允许防火墙伪装IP\nfirewall-cmd --remove-masquerade# 禁止防火墙伪装IP\n```\n\n\n# 0X03 端口转发\n端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定ip的话就默认为本机，如果指定了ip却没指定端口，则默认使用来源端口。\n如果配置好端口转发之后不能用，可以检查下面两个问题：\n1. 比如我将80端口转发至8080端口，首先检查本地的80端口和目标的8080端口是否开放监听了\n2. 其次检查是否允许伪装IP，没允许的话要开启伪装IP\n\n```bash\n# 将80端口的流量转发至8080\nfirewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080\n\n# 将80端口的流量转发至\nfirewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.1.0.1192.168.0.1\n\n# 将80端口的流量转发至192.168.0.1的8080端口\nfirewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.0.1:toport=8080 \n```\n1. 当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。\n2. 端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。\n","slug":"firewall_cmd","published":1,"updated":"2017-09-02T14:39:50.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdt0008hnlpa5047go7","content":"<h1 id=\"0X00-firewalld-守护进程\"><a href=\"#0X00-firewalld-守护进程\" class=\"headerlink\" title=\"0X00 firewalld 守护进程\"></a>0X00 firewalld 守护进程</h1><p><code>firewall-cmd</code>命令需要<code>firewalld</code>进程处于运行状态。我们可以使用<code>systemctl status/start/stop/restart firewalld</code>来控制这个守护进程。<code>firewalld</code>进程为防火墙提供服务。</p>\n<p>当我们修改了某些配置之后（尤其是配置文件的修改），firewall并不会立即生效。可以通过两种方式来激活最新配置<code>systemctl restart firewalld</code>和<code>firewall-cmd --reload</code>两种方式，前一种是重启firewalld服务，建议使用后一种“重载配置文件”。重载配置文件之后不会断掉正在连接的tcp会话，而重启服务则会断开tcp会话。</p>\n<h1 id=\"0X01-控制端口-服务\"><a href=\"#0X01-控制端口-服务\" class=\"headerlink\" title=\"0X01 控制端口/服务\"></a>0X01 控制端口/服务</h1><p>可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放http服务就是开放了80端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp还是udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">firewall-cmd --add-service=mysql\t\t<span class=\"comment\"># 开放mysql端口</span></div><div class=\"line\">firewall-cmd --remove-service=http\t\t<span class=\"comment\"># 阻止http端口</span></div><div class=\"line\">firewall-cmd --list-services\t\t\t<span class=\"comment\"># 查看开放的服务</span></div><div class=\"line\"></div><div class=\"line\">firewall-cmd --add-port=3306/tcp\t\t<span class=\"comment\"># 开放通过tcp访问3306</span></div><div class=\"line\">firewall-cmd --remove-port=80tcp\t\t<span class=\"comment\"># 阻止通过tcp访问3306</span></div><div class=\"line\">firewall-cmd --add-port=233/udp\t\t\t<span class=\"comment\"># 开放通过udp访问233</span></div><div class=\"line\">firewall-cmd --list-ports\t\t\t\t<span class=\"comment\"># 查看开放的端口</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-伪装IP\"><a href=\"#0X02-伪装IP\" class=\"headerlink\" title=\"0X02 伪装IP\"></a>0X02 伪装IP</h1><p>防火墙可以实现伪装IP的功能，下面的端口转发就会用到这个功能。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">firewall-cmd --query-masquerade <span class=\"comment\"># 检查是否允许伪装IP</span></div><div class=\"line\">firewall-cmd --add-masquerade   <span class=\"comment\"># 允许防火墙伪装IP</span></div><div class=\"line\">firewall-cmd --remove-masquerade<span class=\"comment\"># 禁止防火墙伪装IP</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-端口转发\"><a href=\"#0X03-端口转发\" class=\"headerlink\" title=\"0X03 端口转发\"></a>0X03 端口转发</h1><p>端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定ip的话就默认为本机，如果指定了ip却没指定端口，则默认使用来源端口。<br>如果配置好端口转发之后不能用，可以检查下面两个问题：</p>\n<ol>\n<li>比如我将80端口转发至8080端口，首先检查本地的80端口和目标的8080端口是否开放监听了</li>\n<li>其次检查是否允许伪装IP，没允许的话要开启伪装IP</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将80端口的流量转发至8080</span></div><div class=\"line\">firewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将80端口的流量转发至</span></div><div class=\"line\">firewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.1.0.1192.168.0.1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将80端口的流量转发至192.168.0.1的8080端口</span></div><div class=\"line\">firewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.0.1:toport=8080</div></pre></td></tr></table></figure>\n<ol>\n<li>当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。</li>\n<li>端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-firewalld-守护进程\"><a href=\"#0X00-firewalld-守护进程\" class=\"headerlink\" title=\"0X00 firewalld 守护进程\"></a>0X00 firewalld 守护进程</h1><p><code>firewall-cmd</code>命令需要<code>firewalld</code>进程处于运行状态。我们可以使用<code>systemctl status/start/stop/restart firewalld</code>来控制这个守护进程。<code>firewalld</code>进程为防火墙提供服务。</p>\n<p>当我们修改了某些配置之后（尤其是配置文件的修改），firewall并不会立即生效。可以通过两种方式来激活最新配置<code>systemctl restart firewalld</code>和<code>firewall-cmd --reload</code>两种方式，前一种是重启firewalld服务，建议使用后一种“重载配置文件”。重载配置文件之后不会断掉正在连接的tcp会话，而重启服务则会断开tcp会话。</p>\n<h1 id=\"0X01-控制端口-服务\"><a href=\"#0X01-控制端口-服务\" class=\"headerlink\" title=\"0X01 控制端口/服务\"></a>0X01 控制端口/服务</h1><p>可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放http服务就是开放了80端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp还是udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">firewall-cmd --add-service=mysql\t\t<span class=\"comment\"># 开放mysql端口</span></div><div class=\"line\">firewall-cmd --remove-service=http\t\t<span class=\"comment\"># 阻止http端口</span></div><div class=\"line\">firewall-cmd --list-services\t\t\t<span class=\"comment\"># 查看开放的服务</span></div><div class=\"line\"></div><div class=\"line\">firewall-cmd --add-port=3306/tcp\t\t<span class=\"comment\"># 开放通过tcp访问3306</span></div><div class=\"line\">firewall-cmd --remove-port=80tcp\t\t<span class=\"comment\"># 阻止通过tcp访问3306</span></div><div class=\"line\">firewall-cmd --add-port=233/udp\t\t\t<span class=\"comment\"># 开放通过udp访问233</span></div><div class=\"line\">firewall-cmd --list-ports\t\t\t\t<span class=\"comment\"># 查看开放的端口</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-伪装IP\"><a href=\"#0X02-伪装IP\" class=\"headerlink\" title=\"0X02 伪装IP\"></a>0X02 伪装IP</h1><p>防火墙可以实现伪装IP的功能，下面的端口转发就会用到这个功能。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">firewall-cmd --query-masquerade <span class=\"comment\"># 检查是否允许伪装IP</span></div><div class=\"line\">firewall-cmd --add-masquerade   <span class=\"comment\"># 允许防火墙伪装IP</span></div><div class=\"line\">firewall-cmd --remove-masquerade<span class=\"comment\"># 禁止防火墙伪装IP</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-端口转发\"><a href=\"#0X03-端口转发\" class=\"headerlink\" title=\"0X03 端口转发\"></a>0X03 端口转发</h1><p>端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定ip的话就默认为本机，如果指定了ip却没指定端口，则默认使用来源端口。<br>如果配置好端口转发之后不能用，可以检查下面两个问题：</p>\n<ol>\n<li>比如我将80端口转发至8080端口，首先检查本地的80端口和目标的8080端口是否开放监听了</li>\n<li>其次检查是否允许伪装IP，没允许的话要开启伪装IP</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将80端口的流量转发至8080</span></div><div class=\"line\">firewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将80端口的流量转发至</span></div><div class=\"line\">firewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.1.0.1192.168.0.1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将80端口的流量转发至192.168.0.1的8080端口</span></div><div class=\"line\">firewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.0.1:toport=8080</div></pre></td></tr></table></figure>\n<ol>\n<li>当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。</li>\n<li>端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。</li>\n</ol>\n"},{"title":"C语言 推箱子 gcc编译通过","date":"2015-10-19T04:12:00.000Z","_content":"\n\n# 0X00 编译环境\nUbuntu 14.04 + GNU/gcc\n如果要在Windows下编译的话，*可能*需要注释掉16-18的编译预处理，还*可能*要注释掉getch()的函数声明及定义，最后在加上conio.h的头文件。\n\n# 0X01 遇到的问题\nWindows中能使用getch()函数，这个函数是以输入流的方式输入。（简单地说就是按下去一个按键就能有反应，而不用点击回车）。但是在Linux环境下没有这个函数也没有connio.h的头文件。但是每次按一下还要按回车还是挺逆天的。不过我在网上找到了替代品（感谢*幽鬼*）\n>http://my.oschina.net/yougui/blog/111345\n\n# 0X02 代码实现\n```c\n/*******************************************************************\n * Project name     : push the boxs\n * Create date      : 2015.10.17\n * Last modify date : 2015.10.19\n * Auther name      : mouse_ts\n * E-mail address   : michaelhaozi@hotmail.com\n * Description      : this is game, you control a boy push the boxs \n * to the destination. but you can't push the stone and two boxs.\n * if you'r box touch the wall , you can't pull it.\n * ****************************************************************/\n\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <termios.h>//using getch()\n#include <unistd.h>\n#include <assert.h>\n\n//this is constant\n#define TRUE   1\n#define FALSE  0\n#define MAX    10\n#define WALL   6\n#define PLAYER 7\n#define BOX    8\n#define BLANK  5\n#define DES    9\n#define W      'w'\n#define A      'a'\n#define S      's'\n#define D      'd'\n\n//this is game map\nint map[MAX][MAX];\nint ok = 0;\n\n//player\nstruct player\n{\n    int x;\n    int y;\n}player;\n\n//boxs\nstruct box\n{\n    int x;\n    int y;\n}box_1, box_2, box_3;\n\n//des\nstruct des\n{\n    int x;\n    int y;\n}des_1, des_2, des_3;\n\n//statement function\nvoid initMap();         //init the map\nvoid initPlayer();      //init the player\nvoid initBox();         //init the boxs\nvoid initDes();         //init the des\nvoid printMap();        //print the map\nvoid setMap();          //set the player, boxs, des\nchar getch();           //getch()\nvoid goUP();            //go up\nvoid goDown();          //go down\nvoid goLeft();          //go left\nvoid goRight();         //go right\nint  computingSuccess();//computing how many box seccessd\n\nint main()\n{\n    char ch;\n\n    system(\"clear\");\n\n    //init the game\n    initMap();\n    initPlayer();\n    initBox();\n    setMap();\n    printMap();\n\n    //control the boy\n    while (ch = getch())\n    {\n        switch(ch)//where is the boy move\n        {\n            case W:\n                goUP();\n                break;\n            case A:\n                goLeft();\n                break;\n            case S:\n                goDown();\n                break;\n            case D:\n                goRight();\n                break;\n            defualt:\n                printf (\"You should press w, a, s, d to control the boy to move\\n\");\n        }\n        setMap();\n        system(\"clear\");\n        printMap();\n\n        if (computingSuccess() == 3)\n            break;\n        else\n            continue;\n    }\n    system(\"clear\");\n    printf (\"\\n\\n\\n\\n\\n\\n\\n             You win the game!\\n\");\n    getch();\n    system(\"clear\");\n    return 0;\n}\n\n//getch()   by.YouGui   http://my.oschina.net/yougui/blog/111345\nchar getch()\n{\n    int c = 0;\n    struct termios org_opts, new_opts;\n    int res = 0;\n    res = tcgetattr(STDIN_FILENO, &org_opts);\n    assert(res == 0);\n    memcpy(&new_opts, &org_opts, sizeof(new_opts));\n    new_opts.c_lflag &= ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL | ECHOPRT | ECHOKE | ICRNL);\n    tcsetattr(STDIN_FILENO, TCSANOW, &new_opts);\n    c = getchar();\n    res = tcsetattr(STDIN_FILENO, TCSANOW, &org_opts);\n    assert(res == 0);\n    return c;\n}\n\n//init this map\nvoid initMap()\n{\n    int i, j;\n\n    for (i = 0; i < MAX; i++)\n    {\n        for (j = 0; j < MAX; j++)\n        {\n            map[i][j] = WALL;\n        }\n    }\n    for (i = 2; i < 8; i++)\n    {\n        map[i][2] = BLANK;\n        map[i][3] = BLANK;\n        map[i][5] = BLANK;\n        map[i][6] = BLANK;\n        map[i][7] = BLANK;\n    }\n    map[5][4] = BLANK;\n\n    initDes();\n}\n\n//print map\nvoid printMap()\n{\n    printf (\"This is a game !\\n\");\n\n    int i, j;\n    for (i = 0; i < MAX; i++)\n    {\n        for (j = 0; j < MAX; j++)\n        {\n            if (map[i][j] == WALL)\n                printf (\" # \");\n            else if (map[i][j] == BOX)\n                printf (\" @ \");\n            else if (map[i][j] == PLAYER)\n                printf (\" X \");\n            else if (map[i][j] == BLANK)\n                printf (\"   \");\n            else if (map[i][j] == DES)\n                printf (\" O \");\n        }\n        printf (\"\\n\");\n    }\n}\n\n//init the player\nvoid initPlayer()\n{\n    player.x = 2;\n    player.y = 2;\n}\n\n//init the boxs\nvoid initBox()\n{\n    box_1.x = 3;\n    box_1.y = 6;\n\n    box_2.x = 4;\n    box_2.y = 3;\n\n    box_3.x = 6;\n    box_3.y = 3;\n}\n\n//init the des\nvoid initDes()\n{\n    des_1.x = 5;\n    des_1.y = 7;\n\n    des_2.x = 6;\n    des_2.y = 7;\n\n    des_3.x = 7;\n    des_3.y = 7;\n}\n\n//set map\nvoid setMap()\n{\n    int i, j;\n\n    //set blank\n    for (i = 2; i < 8; i++)\n    {\n        map[i][2] = BLANK;\n        map[i][3] = BLANK;\n        map[i][5] = BLANK;\n        map[i][6] = BLANK;\n        map[i][7] = BLANK;\n    }\n    map[5][4] = BLANK;\n\n\n    //set des\n    map[des_1.x][des_1.y] = DES;\n    map[des_2.x][des_2.y] = DES;\n    map[des_3.x][des_3.y] = DES;\n\n    //set player\n    map[player.x][player.y] = PLAYER;\n\n    //set box\n    map[box_1.x][box_1.y] = BOX;\n    map[box_2.x][box_2.y] = BOX;\n    map[box_3.x][box_3.y] = BOX;\n}\n\n//computing the success move the box to the des\nint computingSuccess()\n{\n    int num = 0;\n    if (map[des_1.x][des_1.y] == BOX)\n        num++;\n    if (map[des_2.x][des_2.y] == BOX)\n        num++;\n    if (map[des_3.x][des_3.y] == BOX)\n        num++;\n    return num;\n}\n\n/*\n * after this is control your boy to move up down left and right\n * all of the  functions to control the boy to move\n */\n\n//control the boy go up\nvoid goUP()\n{\n    if (map[player.x - 1][player.y] == BLANK ||\n        map[player.x - 1][player.y] == DES)\n    {\n        player.x--;\n        return ;\n    }\n    if (player.x - 1 == box_1.x && player.y == box_1.y &&\n        map[box_1.x - 1][box_1.y] == BLANK ||\n        player.x - 1 == box_1.x && player.y == box_1.y &&\n        map[box_1.x - 1][box_1.y] == DES)\n    {\n        box_1.x--;\n        player.x--;\n        return ;\n    }\n    else if (player.x - 1 == box_2.x && player.y == box_2.y &&\n             map[box_2.x - 1][box_2.y] == BLANK ||\n             player.x - 1 == box_2.x && player.y == box_2.y &&\n             map[box_2.x - 1][box_2.y] == DES)\n    {\n        box_2.x--;\n        player.x--;\n        return ;\n    }\n    else if (player.x - 1 == box_3.x && player.y == box_3.y &&\n             map[box_3.x - 1][box_3.y] == BLANK ||\n             player.x - 1 == box_3.x && player.y == box_3.y &&\n             map[box_3.x - 1][box_3.y] == DES)\n    {\n        box_3.x--;\n        player.x--;\n        return ;\n    }\n}\n\n//control the boy go down\nvoid goDown()\n{\n    if (map[player.x + 1][player.y] == BLANK ||\n        map[player.x + 1][player.y] == DES)\n        player.x++;\n    if (player.x + 1 == box_1.x && player.y == box_1.y &&\n        map[box_1.x + 1][box_1.y] == BLANK ||\n        player.x + 1 == box_1.x && player.y == box_1.y &&\n        map[box_1.x + 1][box_1.y] == DES)\n    {\n        box_1.x++;\n        player.x++;\n        return ;\n    }\n    else if (player.x + 1 == box_2.x && player.y == box_2.y &&\n             map[box_2.x + 1][box_2.y] == BLANK ||\n             player.x + 1 == box_2.x && player.y == box_2.y &&\n             map[box_2.x + 1][box_2.y] == DES)\n    {\n        box_2.x++;\n        player.x++;\n        return ;\n    }\n    else if (player.x + 1 == box_3.x && player.y == box_3.y &&\n             map[box_3.x + 1][box_3.y] == BLANK ||\n             player.x + 1 == box_3.x && player.y == box_3.y &&\n             map[box_3.x + 1][box_3.y] == DES)\n    {\n        box_3.x++;\n        player.x++;\n        return ;\n    }\n}\n\n//control the boy go left\nvoid goLeft()\n{\n    if (map[player.x][player.y - 1] == BLANK ||\n        map[player.x][player.y - 1] == DES)\n        player.y--;\n    if (player.x == box_1.x && player.y - 1 == box_1.y &&\n        map[box_1.x][box_1.y - 1] == BLANK ||\n        player.x == box_1.x && player.y - 1 == box_1.y &&\n        map[box_1.x][box_1.y - 1] == DES)\n    {\n        box_1.y--;\n        player.y--;\n        return ;\n    }\n    else if (player.x == box_2.x && player.y - 1 == box_2.y &&\n             map[box_2.x][box_2.y - 1] == BLANK ||\n             player.x == box_2.x && player.y - 1 == box_2.y &&\n             map[box_2.x][box_2.y - 1] == DES)\n    {\n        box_2.y--;\n        player.y--;\n        return ;\n    }\n    else if (player.x == box_3.x && player.y - 1 == box_3.y &&\n             map[box_3.x][box_3.y - 1] == BLANK ||\n             player.x == box_3.x && player.y - 1 == box_3.y &&\n             map[box_3.x][box_3.y - 1] == DES)\n    {\n        box_3.y--;\n        player.y--;\n        return ;\n    }\n}\n\n//control the boy go right\nvoid goRight()\n{\n    if (map[player.x][player.y + 1] == BLANK ||\n        map[player.x][player.y + 1] == DES)\n        player.y++;\n    if (player.x == box_1.x && player.y + 1 == box_1.y &&\n        map[box_1.x][box_1.y + 1] == BLANK ||\n        player.x == box_1.x && player.y + 1 == box_1.y &&\n        map[box_1.x][box_1.y + 1] == DES)\n    {\n        box_1.y++;\n        player.y++;\n        return ;\n    }\n    else if (player.x == box_2.x && player.y + 1 == box_2.y &&\n             map[box_2.x][box_2.y + 1] == BLANK ||\n             player.x == box_2.x && player.y + 1 == box_2.y &&\n             map[box_2.x][box_2.y + 1] == DES)\n    {\n        box_2.y++;\n        player.y++;\n        return ;\n    }\n    else if (player.x == box_3.x && player.y + 1 == box_3.y &&\n             map[box_3.x][box_3.y + 1] == BLANK ||\n             player.x == box_3.x && player.y + 1 == box_3.y &&\n             map[box_3.x][box_3.y + 1] == DES)\n    {\n        box_3.y++;\n        player.y++;\n        return ;\n    }\n}\n```\n","source":"_posts/c_push_box.md","raw":"---\ntitle: C语言 推箱子 gcc编译通过\ndate: 2015-10-19 12:12\n---\n\n\n# 0X00 编译环境\nUbuntu 14.04 + GNU/gcc\n如果要在Windows下编译的话，*可能*需要注释掉16-18的编译预处理，还*可能*要注释掉getch()的函数声明及定义，最后在加上conio.h的头文件。\n\n# 0X01 遇到的问题\nWindows中能使用getch()函数，这个函数是以输入流的方式输入。（简单地说就是按下去一个按键就能有反应，而不用点击回车）。但是在Linux环境下没有这个函数也没有connio.h的头文件。但是每次按一下还要按回车还是挺逆天的。不过我在网上找到了替代品（感谢*幽鬼*）\n>http://my.oschina.net/yougui/blog/111345\n\n# 0X02 代码实现\n```c\n/*******************************************************************\n * Project name     : push the boxs\n * Create date      : 2015.10.17\n * Last modify date : 2015.10.19\n * Auther name      : mouse_ts\n * E-mail address   : michaelhaozi@hotmail.com\n * Description      : this is game, you control a boy push the boxs \n * to the destination. but you can't push the stone and two boxs.\n * if you'r box touch the wall , you can't pull it.\n * ****************************************************************/\n\n#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <termios.h>//using getch()\n#include <unistd.h>\n#include <assert.h>\n\n//this is constant\n#define TRUE   1\n#define FALSE  0\n#define MAX    10\n#define WALL   6\n#define PLAYER 7\n#define BOX    8\n#define BLANK  5\n#define DES    9\n#define W      'w'\n#define A      'a'\n#define S      's'\n#define D      'd'\n\n//this is game map\nint map[MAX][MAX];\nint ok = 0;\n\n//player\nstruct player\n{\n    int x;\n    int y;\n}player;\n\n//boxs\nstruct box\n{\n    int x;\n    int y;\n}box_1, box_2, box_3;\n\n//des\nstruct des\n{\n    int x;\n    int y;\n}des_1, des_2, des_3;\n\n//statement function\nvoid initMap();         //init the map\nvoid initPlayer();      //init the player\nvoid initBox();         //init the boxs\nvoid initDes();         //init the des\nvoid printMap();        //print the map\nvoid setMap();          //set the player, boxs, des\nchar getch();           //getch()\nvoid goUP();            //go up\nvoid goDown();          //go down\nvoid goLeft();          //go left\nvoid goRight();         //go right\nint  computingSuccess();//computing how many box seccessd\n\nint main()\n{\n    char ch;\n\n    system(\"clear\");\n\n    //init the game\n    initMap();\n    initPlayer();\n    initBox();\n    setMap();\n    printMap();\n\n    //control the boy\n    while (ch = getch())\n    {\n        switch(ch)//where is the boy move\n        {\n            case W:\n                goUP();\n                break;\n            case A:\n                goLeft();\n                break;\n            case S:\n                goDown();\n                break;\n            case D:\n                goRight();\n                break;\n            defualt:\n                printf (\"You should press w, a, s, d to control the boy to move\\n\");\n        }\n        setMap();\n        system(\"clear\");\n        printMap();\n\n        if (computingSuccess() == 3)\n            break;\n        else\n            continue;\n    }\n    system(\"clear\");\n    printf (\"\\n\\n\\n\\n\\n\\n\\n             You win the game!\\n\");\n    getch();\n    system(\"clear\");\n    return 0;\n}\n\n//getch()   by.YouGui   http://my.oschina.net/yougui/blog/111345\nchar getch()\n{\n    int c = 0;\n    struct termios org_opts, new_opts;\n    int res = 0;\n    res = tcgetattr(STDIN_FILENO, &org_opts);\n    assert(res == 0);\n    memcpy(&new_opts, &org_opts, sizeof(new_opts));\n    new_opts.c_lflag &= ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL | ECHOPRT | ECHOKE | ICRNL);\n    tcsetattr(STDIN_FILENO, TCSANOW, &new_opts);\n    c = getchar();\n    res = tcsetattr(STDIN_FILENO, TCSANOW, &org_opts);\n    assert(res == 0);\n    return c;\n}\n\n//init this map\nvoid initMap()\n{\n    int i, j;\n\n    for (i = 0; i < MAX; i++)\n    {\n        for (j = 0; j < MAX; j++)\n        {\n            map[i][j] = WALL;\n        }\n    }\n    for (i = 2; i < 8; i++)\n    {\n        map[i][2] = BLANK;\n        map[i][3] = BLANK;\n        map[i][5] = BLANK;\n        map[i][6] = BLANK;\n        map[i][7] = BLANK;\n    }\n    map[5][4] = BLANK;\n\n    initDes();\n}\n\n//print map\nvoid printMap()\n{\n    printf (\"This is a game !\\n\");\n\n    int i, j;\n    for (i = 0; i < MAX; i++)\n    {\n        for (j = 0; j < MAX; j++)\n        {\n            if (map[i][j] == WALL)\n                printf (\" # \");\n            else if (map[i][j] == BOX)\n                printf (\" @ \");\n            else if (map[i][j] == PLAYER)\n                printf (\" X \");\n            else if (map[i][j] == BLANK)\n                printf (\"   \");\n            else if (map[i][j] == DES)\n                printf (\" O \");\n        }\n        printf (\"\\n\");\n    }\n}\n\n//init the player\nvoid initPlayer()\n{\n    player.x = 2;\n    player.y = 2;\n}\n\n//init the boxs\nvoid initBox()\n{\n    box_1.x = 3;\n    box_1.y = 6;\n\n    box_2.x = 4;\n    box_2.y = 3;\n\n    box_3.x = 6;\n    box_3.y = 3;\n}\n\n//init the des\nvoid initDes()\n{\n    des_1.x = 5;\n    des_1.y = 7;\n\n    des_2.x = 6;\n    des_2.y = 7;\n\n    des_3.x = 7;\n    des_3.y = 7;\n}\n\n//set map\nvoid setMap()\n{\n    int i, j;\n\n    //set blank\n    for (i = 2; i < 8; i++)\n    {\n        map[i][2] = BLANK;\n        map[i][3] = BLANK;\n        map[i][5] = BLANK;\n        map[i][6] = BLANK;\n        map[i][7] = BLANK;\n    }\n    map[5][4] = BLANK;\n\n\n    //set des\n    map[des_1.x][des_1.y] = DES;\n    map[des_2.x][des_2.y] = DES;\n    map[des_3.x][des_3.y] = DES;\n\n    //set player\n    map[player.x][player.y] = PLAYER;\n\n    //set box\n    map[box_1.x][box_1.y] = BOX;\n    map[box_2.x][box_2.y] = BOX;\n    map[box_3.x][box_3.y] = BOX;\n}\n\n//computing the success move the box to the des\nint computingSuccess()\n{\n    int num = 0;\n    if (map[des_1.x][des_1.y] == BOX)\n        num++;\n    if (map[des_2.x][des_2.y] == BOX)\n        num++;\n    if (map[des_3.x][des_3.y] == BOX)\n        num++;\n    return num;\n}\n\n/*\n * after this is control your boy to move up down left and right\n * all of the  functions to control the boy to move\n */\n\n//control the boy go up\nvoid goUP()\n{\n    if (map[player.x - 1][player.y] == BLANK ||\n        map[player.x - 1][player.y] == DES)\n    {\n        player.x--;\n        return ;\n    }\n    if (player.x - 1 == box_1.x && player.y == box_1.y &&\n        map[box_1.x - 1][box_1.y] == BLANK ||\n        player.x - 1 == box_1.x && player.y == box_1.y &&\n        map[box_1.x - 1][box_1.y] == DES)\n    {\n        box_1.x--;\n        player.x--;\n        return ;\n    }\n    else if (player.x - 1 == box_2.x && player.y == box_2.y &&\n             map[box_2.x - 1][box_2.y] == BLANK ||\n             player.x - 1 == box_2.x && player.y == box_2.y &&\n             map[box_2.x - 1][box_2.y] == DES)\n    {\n        box_2.x--;\n        player.x--;\n        return ;\n    }\n    else if (player.x - 1 == box_3.x && player.y == box_3.y &&\n             map[box_3.x - 1][box_3.y] == BLANK ||\n             player.x - 1 == box_3.x && player.y == box_3.y &&\n             map[box_3.x - 1][box_3.y] == DES)\n    {\n        box_3.x--;\n        player.x--;\n        return ;\n    }\n}\n\n//control the boy go down\nvoid goDown()\n{\n    if (map[player.x + 1][player.y] == BLANK ||\n        map[player.x + 1][player.y] == DES)\n        player.x++;\n    if (player.x + 1 == box_1.x && player.y == box_1.y &&\n        map[box_1.x + 1][box_1.y] == BLANK ||\n        player.x + 1 == box_1.x && player.y == box_1.y &&\n        map[box_1.x + 1][box_1.y] == DES)\n    {\n        box_1.x++;\n        player.x++;\n        return ;\n    }\n    else if (player.x + 1 == box_2.x && player.y == box_2.y &&\n             map[box_2.x + 1][box_2.y] == BLANK ||\n             player.x + 1 == box_2.x && player.y == box_2.y &&\n             map[box_2.x + 1][box_2.y] == DES)\n    {\n        box_2.x++;\n        player.x++;\n        return ;\n    }\n    else if (player.x + 1 == box_3.x && player.y == box_3.y &&\n             map[box_3.x + 1][box_3.y] == BLANK ||\n             player.x + 1 == box_3.x && player.y == box_3.y &&\n             map[box_3.x + 1][box_3.y] == DES)\n    {\n        box_3.x++;\n        player.x++;\n        return ;\n    }\n}\n\n//control the boy go left\nvoid goLeft()\n{\n    if (map[player.x][player.y - 1] == BLANK ||\n        map[player.x][player.y - 1] == DES)\n        player.y--;\n    if (player.x == box_1.x && player.y - 1 == box_1.y &&\n        map[box_1.x][box_1.y - 1] == BLANK ||\n        player.x == box_1.x && player.y - 1 == box_1.y &&\n        map[box_1.x][box_1.y - 1] == DES)\n    {\n        box_1.y--;\n        player.y--;\n        return ;\n    }\n    else if (player.x == box_2.x && player.y - 1 == box_2.y &&\n             map[box_2.x][box_2.y - 1] == BLANK ||\n             player.x == box_2.x && player.y - 1 == box_2.y &&\n             map[box_2.x][box_2.y - 1] == DES)\n    {\n        box_2.y--;\n        player.y--;\n        return ;\n    }\n    else if (player.x == box_3.x && player.y - 1 == box_3.y &&\n             map[box_3.x][box_3.y - 1] == BLANK ||\n             player.x == box_3.x && player.y - 1 == box_3.y &&\n             map[box_3.x][box_3.y - 1] == DES)\n    {\n        box_3.y--;\n        player.y--;\n        return ;\n    }\n}\n\n//control the boy go right\nvoid goRight()\n{\n    if (map[player.x][player.y + 1] == BLANK ||\n        map[player.x][player.y + 1] == DES)\n        player.y++;\n    if (player.x == box_1.x && player.y + 1 == box_1.y &&\n        map[box_1.x][box_1.y + 1] == BLANK ||\n        player.x == box_1.x && player.y + 1 == box_1.y &&\n        map[box_1.x][box_1.y + 1] == DES)\n    {\n        box_1.y++;\n        player.y++;\n        return ;\n    }\n    else if (player.x == box_2.x && player.y + 1 == box_2.y &&\n             map[box_2.x][box_2.y + 1] == BLANK ||\n             player.x == box_2.x && player.y + 1 == box_2.y &&\n             map[box_2.x][box_2.y + 1] == DES)\n    {\n        box_2.y++;\n        player.y++;\n        return ;\n    }\n    else if (player.x == box_3.x && player.y + 1 == box_3.y &&\n             map[box_3.x][box_3.y + 1] == BLANK ||\n             player.x == box_3.x && player.y + 1 == box_3.y &&\n             map[box_3.x][box_3.y + 1] == DES)\n    {\n        box_3.y++;\n        player.y++;\n        return ;\n    }\n}\n```\n","slug":"c_push_box","published":1,"updated":"2017-09-02T14:02:04.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdu000ahnlppc7q3ab6","content":"<h1 id=\"0X00-编译环境\"><a href=\"#0X00-编译环境\" class=\"headerlink\" title=\"0X00 编译环境\"></a>0X00 编译环境</h1><p>Ubuntu 14.04 + GNU/gcc<br>如果要在Windows下编译的话，<em>可能</em>需要注释掉16-18的编译预处理，还<em>可能</em>要注释掉getch()的函数声明及定义，最后在加上conio.h的头文件。</p>\n<h1 id=\"0X01-遇到的问题\"><a href=\"#0X01-遇到的问题\" class=\"headerlink\" title=\"0X01 遇到的问题\"></a>0X01 遇到的问题</h1><p>Windows中能使用getch()函数，这个函数是以输入流的方式输入。（简单地说就是按下去一个按键就能有反应，而不用点击回车）。但是在Linux环境下没有这个函数也没有connio.h的头文件。但是每次按一下还要按回车还是挺逆天的。不过我在网上找到了替代品（感谢<em>幽鬼</em>）</p>\n<blockquote>\n<p><a href=\"http://my.oschina.net/yougui/blog/111345\" target=\"_blank\" rel=\"external\">http://my.oschina.net/yougui/blog/111345</a></p>\n</blockquote>\n<h1 id=\"0X02-代码实现\"><a href=\"#0X02-代码实现\" class=\"headerlink\" title=\"0X02 代码实现\"></a>0X02 代码实现</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*******************************************************************</span></div><div class=\"line\"><span class=\"comment\"> * Project name     : push the boxs</span></div><div class=\"line\"><span class=\"comment\"> * Create date      : 2015.10.17</span></div><div class=\"line\"><span class=\"comment\"> * Last modify date : 2015.10.19</span></div><div class=\"line\"><span class=\"comment\"> * Auther name      : mouse_ts</span></div><div class=\"line\"><span class=\"comment\"> * E-mail address   : michaelhaozi@hotmail.com</span></div><div class=\"line\"><span class=\"comment\"> * Description      : this is game, you control a boy push the boxs </span></div><div class=\"line\"><span class=\"comment\"> * to the destination. but you can't push the stone and two boxs.</span></div><div class=\"line\"><span class=\"comment\"> * if you'r box touch the wall , you can't pull it.</span></div><div class=\"line\"><span class=\"comment\"> * ****************************************************************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;termios.h&gt;//using getch()</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//this is constant</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TRUE   1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FALSE  0</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX    10</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WALL   6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLAYER 7</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BOX    8</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BLANK  5</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DES    9</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> W      <span class=\"meta-string\">'w'</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> A      <span class=\"meta-string\">'a'</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S      <span class=\"meta-string\">'s'</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D      <span class=\"meta-string\">'d'</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//this is game map</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">map</span>[MAX][MAX];</div><div class=\"line\"><span class=\"keyword\">int</span> ok = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//player</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">player</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> y;</div><div class=\"line\">&#125;player;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//boxs</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">box</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> y;</div><div class=\"line\">&#125;box_1, box_2, box_3;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//des</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">des</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> y;</div><div class=\"line\">&#125;des_1, des_2, des_3;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//statement function</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//init the map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initPlayer</span><span class=\"params\">()</span></span>;      <span class=\"comment\">//init the player</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initBox</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//init the boxs</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initDes</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//init the des</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMap</span><span class=\"params\">()</span></span>;        <span class=\"comment\">//print the map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMap</span><span class=\"params\">()</span></span>;          <span class=\"comment\">//set the player, boxs, des</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>;           <span class=\"comment\">//getch()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goUP</span><span class=\"params\">()</span></span>;            <span class=\"comment\">//go up</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goDown</span><span class=\"params\">()</span></span>;          <span class=\"comment\">//go down</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goLeft</span><span class=\"params\">()</span></span>;          <span class=\"comment\">//go left</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goRight</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//go right</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">computingSuccess</span><span class=\"params\">()</span></span>;<span class=\"comment\">//computing how many box seccessd</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch;</div><div class=\"line\"></div><div class=\"line\">    system(<span class=\"string\">\"clear\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//init the game</span></div><div class=\"line\">    initMap();</div><div class=\"line\">    initPlayer();</div><div class=\"line\">    initBox();</div><div class=\"line\">    setMap();</div><div class=\"line\">    printMap();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//control the boy</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (ch = getch())</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span>(ch)<span class=\"comment\">//where is the boy move</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> W:</div><div class=\"line\">                goUP();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> A:</div><div class=\"line\">                goLeft();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> S:</div><div class=\"line\">                goDown();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> D:</div><div class=\"line\">                goRight();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            defualt:</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\"You should press w, a, s, d to control the boy to move\\n\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        setMap();</div><div class=\"line\">        system(<span class=\"string\">\"clear\"</span>);</div><div class=\"line\">        printMap();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (computingSuccess() == <span class=\"number\">3</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    system(<span class=\"string\">\"clear\"</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">\"\\n\\n\\n\\n\\n\\n\\n             You win the game!\\n\"</span>);</div><div class=\"line\">    getch();</div><div class=\"line\">    system(<span class=\"string\">\"clear\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//getch()   by.YouGui   http://my.oschina.net/yougui/blog/111345</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">termios</span> <span class=\"title\">org_opts</span>, <span class=\"title\">new_opts</span>;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    res = tcgetattr(STDIN_FILENO, &amp;org_opts);</div><div class=\"line\">    assert(res == <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;new_opts, &amp;org_opts, <span class=\"keyword\">sizeof</span>(new_opts));</div><div class=\"line\">    new_opts.c_lflag &amp;= ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL | ECHOPRT | ECHOKE | ICRNL);</div><div class=\"line\">    tcsetattr(STDIN_FILENO, TCSANOW, &amp;new_opts);</div><div class=\"line\">    c = getchar();</div><div class=\"line\">    res = tcsetattr(STDIN_FILENO, TCSANOW, &amp;org_opts);</div><div class=\"line\">    assert(res == <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//init this map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; MAX; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; MAX; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">map</span>[i][j] = WALL;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">8</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">2</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">3</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">5</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">6</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">7</span>] = BLANK;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">map</span>[<span class=\"number\">5</span>][<span class=\"number\">4</span>] = BLANK;</div><div class=\"line\"></div><div class=\"line\">    initDes();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//print map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMap</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">\"This is a game !\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; MAX; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; MAX; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == WALL)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\" # \"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == BOX)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\" @ \"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == PLAYER)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\" X \"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == BLANK)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\"   \"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == DES)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\" O \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span> (<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//init the player</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initPlayer</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    player.x = <span class=\"number\">2</span>;</div><div class=\"line\">    player.y = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//init the boxs</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initBox</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    box_1.x = <span class=\"number\">3</span>;</div><div class=\"line\">    box_1.y = <span class=\"number\">6</span>;</div><div class=\"line\"></div><div class=\"line\">    box_2.x = <span class=\"number\">4</span>;</div><div class=\"line\">    box_2.y = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\">    box_3.x = <span class=\"number\">6</span>;</div><div class=\"line\">    box_3.y = <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//init the des</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initDes</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    des_1.x = <span class=\"number\">5</span>;</div><div class=\"line\">    des_1.y = <span class=\"number\">7</span>;</div><div class=\"line\"></div><div class=\"line\">    des_2.x = <span class=\"number\">6</span>;</div><div class=\"line\">    des_2.y = <span class=\"number\">7</span>;</div><div class=\"line\"></div><div class=\"line\">    des_3.x = <span class=\"number\">7</span>;</div><div class=\"line\">    des_3.y = <span class=\"number\">7</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//set map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMap</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set blank</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">8</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">2</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">3</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">5</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">6</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">7</span>] = BLANK;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">map</span>[<span class=\"number\">5</span>][<span class=\"number\">4</span>] = BLANK;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set des</span></div><div class=\"line\">    <span class=\"built_in\">map</span>[des_1.x][des_1.y] = DES;</div><div class=\"line\">    <span class=\"built_in\">map</span>[des_2.x][des_2.y] = DES;</div><div class=\"line\">    <span class=\"built_in\">map</span>[des_3.x][des_3.y] = DES;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set player</span></div><div class=\"line\">    <span class=\"built_in\">map</span>[player.x][player.y] = PLAYER;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set box</span></div><div class=\"line\">    <span class=\"built_in\">map</span>[box_1.x][box_1.y] = BOX;</div><div class=\"line\">    <span class=\"built_in\">map</span>[box_2.x][box_2.y] = BOX;</div><div class=\"line\">    <span class=\"built_in\">map</span>[box_3.x][box_3.y] = BOX;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//computing the success move the box to the des</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">computingSuccess</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[des_1.x][des_1.y] == BOX)</div><div class=\"line\">        num++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[des_2.x][des_2.y] == BOX)</div><div class=\"line\">        num++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[des_3.x][des_3.y] == BOX)</div><div class=\"line\">        num++;</div><div class=\"line\">    <span class=\"keyword\">return</span> num;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * after this is control your boy to move up down left and right</span></div><div class=\"line\"><span class=\"comment\"> * all of the  functions to control the boy to move</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//control the boy go up</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goUP</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[player.x - <span class=\"number\">1</span>][player.y] == BLANK ||</div><div class=\"line\">        <span class=\"built_in\">map</span>[player.x - <span class=\"number\">1</span>][player.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        player.x--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (player.x - <span class=\"number\">1</span> == box_1.x &amp;&amp; player.y == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x - <span class=\"number\">1</span>][box_1.y] == BLANK ||</div><div class=\"line\">        player.x - <span class=\"number\">1</span> == box_1.x &amp;&amp; player.y == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x - <span class=\"number\">1</span>][box_1.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_1.x--;</div><div class=\"line\">        player.x--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x - <span class=\"number\">1</span> == box_2.x &amp;&amp; player.y == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x - <span class=\"number\">1</span>][box_2.y] == BLANK ||</div><div class=\"line\">             player.x - <span class=\"number\">1</span> == box_2.x &amp;&amp; player.y == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x - <span class=\"number\">1</span>][box_2.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_2.x--;</div><div class=\"line\">        player.x--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x - <span class=\"number\">1</span> == box_3.x &amp;&amp; player.y == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x - <span class=\"number\">1</span>][box_3.y] == BLANK ||</div><div class=\"line\">             player.x - <span class=\"number\">1</span> == box_3.x &amp;&amp; player.y == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x - <span class=\"number\">1</span>][box_3.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_3.x--;</div><div class=\"line\">        player.x--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//control the boy go down</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goDown</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[player.x + <span class=\"number\">1</span>][player.y] == BLANK ||</div><div class=\"line\">        <span class=\"built_in\">map</span>[player.x + <span class=\"number\">1</span>][player.y] == DES)</div><div class=\"line\">        player.x++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (player.x + <span class=\"number\">1</span> == box_1.x &amp;&amp; player.y == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x + <span class=\"number\">1</span>][box_1.y] == BLANK ||</div><div class=\"line\">        player.x + <span class=\"number\">1</span> == box_1.x &amp;&amp; player.y == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x + <span class=\"number\">1</span>][box_1.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_1.x++;</div><div class=\"line\">        player.x++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x + <span class=\"number\">1</span> == box_2.x &amp;&amp; player.y == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x + <span class=\"number\">1</span>][box_2.y] == BLANK ||</div><div class=\"line\">             player.x + <span class=\"number\">1</span> == box_2.x &amp;&amp; player.y == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x + <span class=\"number\">1</span>][box_2.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_2.x++;</div><div class=\"line\">        player.x++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x + <span class=\"number\">1</span> == box_3.x &amp;&amp; player.y == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x + <span class=\"number\">1</span>][box_3.y] == BLANK ||</div><div class=\"line\">             player.x + <span class=\"number\">1</span> == box_3.x &amp;&amp; player.y == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x + <span class=\"number\">1</span>][box_3.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_3.x++;</div><div class=\"line\">        player.x++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//control the boy go left</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goLeft</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[player.x][player.y - <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">        <span class=\"built_in\">map</span>[player.x][player.y - <span class=\"number\">1</span>] == DES)</div><div class=\"line\">        player.y--;</div><div class=\"line\">    <span class=\"keyword\">if</span> (player.x == box_1.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x][box_1.y - <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">        player.x == box_1.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x][box_1.y - <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_1.y--;</div><div class=\"line\">        player.y--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x == box_2.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x][box_2.y - <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">             player.x == box_2.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x][box_2.y - <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_2.y--;</div><div class=\"line\">        player.y--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x == box_3.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x][box_3.y - <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">             player.x == box_3.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x][box_3.y - <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_3.y--;</div><div class=\"line\">        player.y--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//control the boy go right</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goRight</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[player.x][player.y + <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">        <span class=\"built_in\">map</span>[player.x][player.y + <span class=\"number\">1</span>] == DES)</div><div class=\"line\">        player.y++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (player.x == box_1.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x][box_1.y + <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">        player.x == box_1.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x][box_1.y + <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_1.y++;</div><div class=\"line\">        player.y++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x == box_2.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x][box_2.y + <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">             player.x == box_2.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x][box_2.y + <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_2.y++;</div><div class=\"line\">        player.y++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x == box_3.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x][box_3.y + <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">             player.x == box_3.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x][box_3.y + <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_3.y++;</div><div class=\"line\">        player.y++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-编译环境\"><a href=\"#0X00-编译环境\" class=\"headerlink\" title=\"0X00 编译环境\"></a>0X00 编译环境</h1><p>Ubuntu 14.04 + GNU/gcc<br>如果要在Windows下编译的话，<em>可能</em>需要注释掉16-18的编译预处理，还<em>可能</em>要注释掉getch()的函数声明及定义，最后在加上conio.h的头文件。</p>\n<h1 id=\"0X01-遇到的问题\"><a href=\"#0X01-遇到的问题\" class=\"headerlink\" title=\"0X01 遇到的问题\"></a>0X01 遇到的问题</h1><p>Windows中能使用getch()函数，这个函数是以输入流的方式输入。（简单地说就是按下去一个按键就能有反应，而不用点击回车）。但是在Linux环境下没有这个函数也没有connio.h的头文件。但是每次按一下还要按回车还是挺逆天的。不过我在网上找到了替代品（感谢<em>幽鬼</em>）</p>\n<blockquote>\n<p><a href=\"http://my.oschina.net/yougui/blog/111345\" target=\"_blank\" rel=\"external\">http://my.oschina.net/yougui/blog/111345</a></p>\n</blockquote>\n<h1 id=\"0X02-代码实现\"><a href=\"#0X02-代码实现\" class=\"headerlink\" title=\"0X02 代码实现\"></a>0X02 代码实现</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div><div class=\"line\">371</div><div class=\"line\">372</div><div class=\"line\">373</div><div class=\"line\">374</div><div class=\"line\">375</div><div class=\"line\">376</div><div class=\"line\">377</div><div class=\"line\">378</div><div class=\"line\">379</div><div class=\"line\">380</div><div class=\"line\">381</div><div class=\"line\">382</div><div class=\"line\">383</div><div class=\"line\">384</div><div class=\"line\">385</div><div class=\"line\">386</div><div class=\"line\">387</div><div class=\"line\">388</div><div class=\"line\">389</div><div class=\"line\">390</div><div class=\"line\">391</div><div class=\"line\">392</div><div class=\"line\">393</div><div class=\"line\">394</div><div class=\"line\">395</div><div class=\"line\">396</div><div class=\"line\">397</div><div class=\"line\">398</div><div class=\"line\">399</div><div class=\"line\">400</div><div class=\"line\">401</div><div class=\"line\">402</div><div class=\"line\">403</div><div class=\"line\">404</div><div class=\"line\">405</div><div class=\"line\">406</div><div class=\"line\">407</div><div class=\"line\">408</div><div class=\"line\">409</div><div class=\"line\">410</div><div class=\"line\">411</div><div class=\"line\">412</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*******************************************************************</span></div><div class=\"line\"><span class=\"comment\"> * Project name     : push the boxs</span></div><div class=\"line\"><span class=\"comment\"> * Create date      : 2015.10.17</span></div><div class=\"line\"><span class=\"comment\"> * Last modify date : 2015.10.19</span></div><div class=\"line\"><span class=\"comment\"> * Auther name      : mouse_ts</span></div><div class=\"line\"><span class=\"comment\"> * E-mail address   : michaelhaozi@hotmail.com</span></div><div class=\"line\"><span class=\"comment\"> * Description      : this is game, you control a boy push the boxs </span></div><div class=\"line\"><span class=\"comment\"> * to the destination. but you can't push the stone and two boxs.</span></div><div class=\"line\"><span class=\"comment\"> * if you'r box touch the wall , you can't pull it.</span></div><div class=\"line\"><span class=\"comment\"> * ****************************************************************/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;termios.h&gt;//using getch()</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//this is constant</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TRUE   1</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FALSE  0</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX    10</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WALL   6</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PLAYER 7</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BOX    8</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BLANK  5</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DES    9</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> W      <span class=\"meta-string\">'w'</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> A      <span class=\"meta-string\">'a'</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> S      <span class=\"meta-string\">'s'</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> D      <span class=\"meta-string\">'d'</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//this is game map</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">map</span>[MAX][MAX];</div><div class=\"line\"><span class=\"keyword\">int</span> ok = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//player</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">player</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> y;</div><div class=\"line\">&#125;player;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//boxs</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">box</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> y;</div><div class=\"line\">&#125;box_1, box_2, box_3;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//des</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">des</span></span></div><div class=\"line\"><span class=\"class\">&#123;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">int</span> y;</div><div class=\"line\">&#125;des_1, des_2, des_3;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//statement function</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//init the map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initPlayer</span><span class=\"params\">()</span></span>;      <span class=\"comment\">//init the player</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initBox</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//init the boxs</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initDes</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//init the des</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMap</span><span class=\"params\">()</span></span>;        <span class=\"comment\">//print the map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMap</span><span class=\"params\">()</span></span>;          <span class=\"comment\">//set the player, boxs, des</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span>;           <span class=\"comment\">//getch()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goUP</span><span class=\"params\">()</span></span>;            <span class=\"comment\">//go up</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goDown</span><span class=\"params\">()</span></span>;          <span class=\"comment\">//go down</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goLeft</span><span class=\"params\">()</span></span>;          <span class=\"comment\">//go left</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goRight</span><span class=\"params\">()</span></span>;         <span class=\"comment\">//go right</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">computingSuccess</span><span class=\"params\">()</span></span>;<span class=\"comment\">//computing how many box seccessd</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> ch;</div><div class=\"line\"></div><div class=\"line\">    system(<span class=\"string\">\"clear\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//init the game</span></div><div class=\"line\">    initMap();</div><div class=\"line\">    initPlayer();</div><div class=\"line\">    initBox();</div><div class=\"line\">    setMap();</div><div class=\"line\">    printMap();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//control the boy</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (ch = getch())</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span>(ch)<span class=\"comment\">//where is the boy move</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> W:</div><div class=\"line\">                goUP();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> A:</div><div class=\"line\">                goLeft();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> S:</div><div class=\"line\">                goDown();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> D:</div><div class=\"line\">                goRight();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            defualt:</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\"You should press w, a, s, d to control the boy to move\\n\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        setMap();</div><div class=\"line\">        system(<span class=\"string\">\"clear\"</span>);</div><div class=\"line\">        printMap();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (computingSuccess() == <span class=\"number\">3</span>)</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    system(<span class=\"string\">\"clear\"</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">\"\\n\\n\\n\\n\\n\\n\\n             You win the game!\\n\"</span>);</div><div class=\"line\">    getch();</div><div class=\"line\">    system(<span class=\"string\">\"clear\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//getch()   by.YouGui   http://my.oschina.net/yougui/blog/111345</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getch</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">termios</span> <span class=\"title\">org_opts</span>, <span class=\"title\">new_opts</span>;</span></div><div class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</div><div class=\"line\">    res = tcgetattr(STDIN_FILENO, &amp;org_opts);</div><div class=\"line\">    assert(res == <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">memcpy</span>(&amp;new_opts, &amp;org_opts, <span class=\"keyword\">sizeof</span>(new_opts));</div><div class=\"line\">    new_opts.c_lflag &amp;= ~(ICANON | ECHO | ECHOE | ECHOK | ECHONL | ECHOPRT | ECHOKE | ICRNL);</div><div class=\"line\">    tcsetattr(STDIN_FILENO, TCSANOW, &amp;new_opts);</div><div class=\"line\">    c = getchar();</div><div class=\"line\">    res = tcsetattr(STDIN_FILENO, TCSANOW, &amp;org_opts);</div><div class=\"line\">    assert(res == <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//init this map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; MAX; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; MAX; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">map</span>[i][j] = WALL;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">8</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">2</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">3</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">5</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">6</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">7</span>] = BLANK;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">map</span>[<span class=\"number\">5</span>][<span class=\"number\">4</span>] = BLANK;</div><div class=\"line\"></div><div class=\"line\">    initDes();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//print map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printMap</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">\"This is a game !\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; MAX; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; MAX; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == WALL)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\" # \"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == BOX)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\" @ \"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == PLAYER)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\" X \"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == BLANK)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\"   \"</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i][j] == DES)</div><div class=\"line\">                <span class=\"built_in\">printf</span> (<span class=\"string\">\" O \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span> (<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//init the player</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initPlayer</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    player.x = <span class=\"number\">2</span>;</div><div class=\"line\">    player.y = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//init the boxs</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initBox</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    box_1.x = <span class=\"number\">3</span>;</div><div class=\"line\">    box_1.y = <span class=\"number\">6</span>;</div><div class=\"line\"></div><div class=\"line\">    box_2.x = <span class=\"number\">4</span>;</div><div class=\"line\">    box_2.y = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\">    box_3.x = <span class=\"number\">6</span>;</div><div class=\"line\">    box_3.y = <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//init the des</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initDes</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    des_1.x = <span class=\"number\">5</span>;</div><div class=\"line\">    des_1.y = <span class=\"number\">7</span>;</div><div class=\"line\"></div><div class=\"line\">    des_2.x = <span class=\"number\">6</span>;</div><div class=\"line\">    des_2.y = <span class=\"number\">7</span>;</div><div class=\"line\"></div><div class=\"line\">    des_3.x = <span class=\"number\">7</span>;</div><div class=\"line\">    des_3.y = <span class=\"number\">7</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//set map</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMap</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set blank</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">2</span>; i &lt; <span class=\"number\">8</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">2</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">3</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">5</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">6</span>] = BLANK;</div><div class=\"line\">        <span class=\"built_in\">map</span>[i][<span class=\"number\">7</span>] = BLANK;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">map</span>[<span class=\"number\">5</span>][<span class=\"number\">4</span>] = BLANK;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set des</span></div><div class=\"line\">    <span class=\"built_in\">map</span>[des_1.x][des_1.y] = DES;</div><div class=\"line\">    <span class=\"built_in\">map</span>[des_2.x][des_2.y] = DES;</div><div class=\"line\">    <span class=\"built_in\">map</span>[des_3.x][des_3.y] = DES;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set player</span></div><div class=\"line\">    <span class=\"built_in\">map</span>[player.x][player.y] = PLAYER;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//set box</span></div><div class=\"line\">    <span class=\"built_in\">map</span>[box_1.x][box_1.y] = BOX;</div><div class=\"line\">    <span class=\"built_in\">map</span>[box_2.x][box_2.y] = BOX;</div><div class=\"line\">    <span class=\"built_in\">map</span>[box_3.x][box_3.y] = BOX;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//computing the success move the box to the des</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">computingSuccess</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[des_1.x][des_1.y] == BOX)</div><div class=\"line\">        num++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[des_2.x][des_2.y] == BOX)</div><div class=\"line\">        num++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[des_3.x][des_3.y] == BOX)</div><div class=\"line\">        num++;</div><div class=\"line\">    <span class=\"keyword\">return</span> num;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * after this is control your boy to move up down left and right</span></div><div class=\"line\"><span class=\"comment\"> * all of the  functions to control the boy to move</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//control the boy go up</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goUP</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[player.x - <span class=\"number\">1</span>][player.y] == BLANK ||</div><div class=\"line\">        <span class=\"built_in\">map</span>[player.x - <span class=\"number\">1</span>][player.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        player.x--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (player.x - <span class=\"number\">1</span> == box_1.x &amp;&amp; player.y == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x - <span class=\"number\">1</span>][box_1.y] == BLANK ||</div><div class=\"line\">        player.x - <span class=\"number\">1</span> == box_1.x &amp;&amp; player.y == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x - <span class=\"number\">1</span>][box_1.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_1.x--;</div><div class=\"line\">        player.x--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x - <span class=\"number\">1</span> == box_2.x &amp;&amp; player.y == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x - <span class=\"number\">1</span>][box_2.y] == BLANK ||</div><div class=\"line\">             player.x - <span class=\"number\">1</span> == box_2.x &amp;&amp; player.y == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x - <span class=\"number\">1</span>][box_2.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_2.x--;</div><div class=\"line\">        player.x--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x - <span class=\"number\">1</span> == box_3.x &amp;&amp; player.y == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x - <span class=\"number\">1</span>][box_3.y] == BLANK ||</div><div class=\"line\">             player.x - <span class=\"number\">1</span> == box_3.x &amp;&amp; player.y == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x - <span class=\"number\">1</span>][box_3.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_3.x--;</div><div class=\"line\">        player.x--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//control the boy go down</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goDown</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[player.x + <span class=\"number\">1</span>][player.y] == BLANK ||</div><div class=\"line\">        <span class=\"built_in\">map</span>[player.x + <span class=\"number\">1</span>][player.y] == DES)</div><div class=\"line\">        player.x++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (player.x + <span class=\"number\">1</span> == box_1.x &amp;&amp; player.y == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x + <span class=\"number\">1</span>][box_1.y] == BLANK ||</div><div class=\"line\">        player.x + <span class=\"number\">1</span> == box_1.x &amp;&amp; player.y == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x + <span class=\"number\">1</span>][box_1.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_1.x++;</div><div class=\"line\">        player.x++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x + <span class=\"number\">1</span> == box_2.x &amp;&amp; player.y == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x + <span class=\"number\">1</span>][box_2.y] == BLANK ||</div><div class=\"line\">             player.x + <span class=\"number\">1</span> == box_2.x &amp;&amp; player.y == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x + <span class=\"number\">1</span>][box_2.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_2.x++;</div><div class=\"line\">        player.x++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x + <span class=\"number\">1</span> == box_3.x &amp;&amp; player.y == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x + <span class=\"number\">1</span>][box_3.y] == BLANK ||</div><div class=\"line\">             player.x + <span class=\"number\">1</span> == box_3.x &amp;&amp; player.y == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x + <span class=\"number\">1</span>][box_3.y] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_3.x++;</div><div class=\"line\">        player.x++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//control the boy go left</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goLeft</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[player.x][player.y - <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">        <span class=\"built_in\">map</span>[player.x][player.y - <span class=\"number\">1</span>] == DES)</div><div class=\"line\">        player.y--;</div><div class=\"line\">    <span class=\"keyword\">if</span> (player.x == box_1.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x][box_1.y - <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">        player.x == box_1.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x][box_1.y - <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_1.y--;</div><div class=\"line\">        player.y--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x == box_2.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x][box_2.y - <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">             player.x == box_2.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x][box_2.y - <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_2.y--;</div><div class=\"line\">        player.y--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x == box_3.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x][box_3.y - <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">             player.x == box_3.x &amp;&amp; player.y - <span class=\"number\">1</span> == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x][box_3.y - <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_3.y--;</div><div class=\"line\">        player.y--;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//control the boy go right</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">goRight</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[player.x][player.y + <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">        <span class=\"built_in\">map</span>[player.x][player.y + <span class=\"number\">1</span>] == DES)</div><div class=\"line\">        player.y++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (player.x == box_1.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x][box_1.y + <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">        player.x == box_1.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_1.y &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">map</span>[box_1.x][box_1.y + <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_1.y++;</div><div class=\"line\">        player.y++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x == box_2.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x][box_2.y + <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">             player.x == box_2.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_2.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_2.x][box_2.y + <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_2.y++;</div><div class=\"line\">        player.y++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (player.x == box_3.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x][box_3.y + <span class=\"number\">1</span>] == BLANK ||</div><div class=\"line\">             player.x == box_3.x &amp;&amp; player.y + <span class=\"number\">1</span> == box_3.y &amp;&amp;</div><div class=\"line\">             <span class=\"built_in\">map</span>[box_3.x][box_3.y + <span class=\"number\">1</span>] == DES)</div><div class=\"line\">    &#123;</div><div class=\"line\">        box_3.y++;</div><div class=\"line\">        player.y++;</div><div class=\"line\">        <span class=\"keyword\">return</span> ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"浅析HDFS","date":"2017-03-06T12:18:00.000Z","_content":"\n# 0X00 HDFS的设计\nHDFS作为GFS的开源实现，和GFS是高度一致的。在HDFS中有着下面的优点\n1. 对超大文件支持良好，由于其分布式实现，可以存储超大文件，甚至单个文件大小可以超过集群中任意一台机器的磁盘大小\n2. 采用流式数据访问，一次写入、多次读取是最高效的访问模式。因为Hadoop作为一个大数据处理平台，并没有频繁的写入操作，只是在需要的时候一次将大量的数据写入然后在对这些数据进行读操作\n3. Hadoop并不需要运行在昂贵且高可靠的硬件之上，单个节点可能性能可靠性都参差不齐，但是由于其高可靠性的设计，使之能在遇到节点故障时继续运行且不让用户察觉到明显的终端\n\n但是HDFS也不是适用于各种场景，一下的几种场景就不适\n1. 低时间延迟的数据访问，因为HDFS是以时间延迟为代价针对高数据吞吐量优化的，所以HDFS不适用与低延迟的数据访问\n2. 大量的小文件，因为Namenode的设计是将文件系统的元数据存储在内存中的，所以理论上HDFS中的文件最大数量受限于Namenode的内存容量，因此大量的小文件会占用Namenode大量的内存\n3. HDFS目前不支持有多个写入者的操作，也不支持修改文件系统中的文件\n\n# 0X01 数据块的设计\n我们知道在传统的文件系统中就是分块的，寻址开销与分块的大小成负相关，磁盘利用率与分块大小成负相关。且HDFS的设计就是用来处理大文件的，所以将块设计的很大，默认为64MB且好多时候采用的是128MB的设置。\n\n在HDFS中的块设计和传统文件系统有些不同，在传统文件系统中假设一个块为4kb，如果一个文件只有1kb则仍然会占用4kb的空间，但是在HDFS中一个小于块大小的文件并不会占据整个块的空间。\n\n![HDFS架构](https://blog.just666.cn/usr/uploads/hdfs_arch.png)\n\n# 0X02 Namenode和Datanode\nHDFS中有两种节点，Namenode和Datanode。\n\n其中Namenode管理文件系统的命名空间，他维护着文件系统树和整棵树内所有的文件和目录。\n\n其中的Datanode负责存储并检索数据块，且定期向Namenode发送存储的块的列表。\n\n# 0X03 Namenode容错机制\nNamenode有两种常用的容错机制，第一种是实时将自己的操作和文件同步到NFS上，且是原子操作所以NFS上会有和Namenode完全相同的文件。另一种方式是运行一个辅助的Namenode，定期通过编辑日志合并命名空间镜像。\n\n# 0X04 联邦HDFS\n毕竟HDFS是为处理海量数据诞生的，所以避免不了海量的集群来搭建HDFS，但是前面也说过因为设计的问题导致一个拥有大量文件的集群会对Namenode的内存造成严峻的考验，这时候可以使用联邦HDFS来解决。在联邦环境下可以配置多个Namenode，每个Namenode负责维护一个命名空间卷。也就相当于每个Namenode负责一个目录树中的子目录，这样就可以保证在HDFS中有大量文件的时候也不会对Namenode造成太大的威胁。\n\n# 0X05 高可用性\n虽然Namenode有了备份但是还是存在Namenode的单点问题，也就是说当Namenode出现故障之后依旧会对HDFS整个文件系统造成影响，虽然有备份但是还是要等到有下一台Namenode节点上线之后才会运行，所以当时运行的MapReduce等程序依然会终止。针对这种问题Hadoop在2.x中做出了适当的处理。可以配置一对活动-备用的Namenode用于做热备份。\n1. Namenode之间可以共享编辑日志，且使用高可用的方式实现共享存储\n2. Datanode需要同时向两个Namenode发送数据块处理报告，因为要保持两个Namenode完全相同\n\n在这样的配置之下当活动的Namenode故障以后备用的Namenode可以在几十秒内实现任务接管。且在备用的Namenode也失效的情况下还可以通过配置来指定另一台备用Namenode用于做冷启动。\n","source":"_posts/hdfs_simple.md","raw":"---\ntitle: 浅析HDFS\ndate: 2017-03-06 20:18\ntags:\n  - HDFS\n  - 大数据\n  - Hadoop\n  - 文件系统\n---\n\n# 0X00 HDFS的设计\nHDFS作为GFS的开源实现，和GFS是高度一致的。在HDFS中有着下面的优点\n1. 对超大文件支持良好，由于其分布式实现，可以存储超大文件，甚至单个文件大小可以超过集群中任意一台机器的磁盘大小\n2. 采用流式数据访问，一次写入、多次读取是最高效的访问模式。因为Hadoop作为一个大数据处理平台，并没有频繁的写入操作，只是在需要的时候一次将大量的数据写入然后在对这些数据进行读操作\n3. Hadoop并不需要运行在昂贵且高可靠的硬件之上，单个节点可能性能可靠性都参差不齐，但是由于其高可靠性的设计，使之能在遇到节点故障时继续运行且不让用户察觉到明显的终端\n\n但是HDFS也不是适用于各种场景，一下的几种场景就不适\n1. 低时间延迟的数据访问，因为HDFS是以时间延迟为代价针对高数据吞吐量优化的，所以HDFS不适用与低延迟的数据访问\n2. 大量的小文件，因为Namenode的设计是将文件系统的元数据存储在内存中的，所以理论上HDFS中的文件最大数量受限于Namenode的内存容量，因此大量的小文件会占用Namenode大量的内存\n3. HDFS目前不支持有多个写入者的操作，也不支持修改文件系统中的文件\n\n# 0X01 数据块的设计\n我们知道在传统的文件系统中就是分块的，寻址开销与分块的大小成负相关，磁盘利用率与分块大小成负相关。且HDFS的设计就是用来处理大文件的，所以将块设计的很大，默认为64MB且好多时候采用的是128MB的设置。\n\n在HDFS中的块设计和传统文件系统有些不同，在传统文件系统中假设一个块为4kb，如果一个文件只有1kb则仍然会占用4kb的空间，但是在HDFS中一个小于块大小的文件并不会占据整个块的空间。\n\n![HDFS架构](https://blog.just666.cn/usr/uploads/hdfs_arch.png)\n\n# 0X02 Namenode和Datanode\nHDFS中有两种节点，Namenode和Datanode。\n\n其中Namenode管理文件系统的命名空间，他维护着文件系统树和整棵树内所有的文件和目录。\n\n其中的Datanode负责存储并检索数据块，且定期向Namenode发送存储的块的列表。\n\n# 0X03 Namenode容错机制\nNamenode有两种常用的容错机制，第一种是实时将自己的操作和文件同步到NFS上，且是原子操作所以NFS上会有和Namenode完全相同的文件。另一种方式是运行一个辅助的Namenode，定期通过编辑日志合并命名空间镜像。\n\n# 0X04 联邦HDFS\n毕竟HDFS是为处理海量数据诞生的，所以避免不了海量的集群来搭建HDFS，但是前面也说过因为设计的问题导致一个拥有大量文件的集群会对Namenode的内存造成严峻的考验，这时候可以使用联邦HDFS来解决。在联邦环境下可以配置多个Namenode，每个Namenode负责维护一个命名空间卷。也就相当于每个Namenode负责一个目录树中的子目录，这样就可以保证在HDFS中有大量文件的时候也不会对Namenode造成太大的威胁。\n\n# 0X05 高可用性\n虽然Namenode有了备份但是还是存在Namenode的单点问题，也就是说当Namenode出现故障之后依旧会对HDFS整个文件系统造成影响，虽然有备份但是还是要等到有下一台Namenode节点上线之后才会运行，所以当时运行的MapReduce等程序依然会终止。针对这种问题Hadoop在2.x中做出了适当的处理。可以配置一对活动-备用的Namenode用于做热备份。\n1. Namenode之间可以共享编辑日志，且使用高可用的方式实现共享存储\n2. Datanode需要同时向两个Namenode发送数据块处理报告，因为要保持两个Namenode完全相同\n\n在这样的配置之下当活动的Namenode故障以后备用的Namenode可以在几十秒内实现任务接管。且在备用的Namenode也失效的情况下还可以通过配置来指定另一台备用Namenode用于做冷启动。\n","slug":"hdfs_simple","published":1,"updated":"2017-09-02T14:40:47.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdv000chnlpek2ko13p","content":"<h1 id=\"0X00-HDFS的设计\"><a href=\"#0X00-HDFS的设计\" class=\"headerlink\" title=\"0X00 HDFS的设计\"></a>0X00 HDFS的设计</h1><p>HDFS作为GFS的开源实现，和GFS是高度一致的。在HDFS中有着下面的优点</p>\n<ol>\n<li>对超大文件支持良好，由于其分布式实现，可以存储超大文件，甚至单个文件大小可以超过集群中任意一台机器的磁盘大小</li>\n<li>采用流式数据访问，一次写入、多次读取是最高效的访问模式。因为Hadoop作为一个大数据处理平台，并没有频繁的写入操作，只是在需要的时候一次将大量的数据写入然后在对这些数据进行读操作</li>\n<li>Hadoop并不需要运行在昂贵且高可靠的硬件之上，单个节点可能性能可靠性都参差不齐，但是由于其高可靠性的设计，使之能在遇到节点故障时继续运行且不让用户察觉到明显的终端</li>\n</ol>\n<p>但是HDFS也不是适用于各种场景，一下的几种场景就不适</p>\n<ol>\n<li>低时间延迟的数据访问，因为HDFS是以时间延迟为代价针对高数据吞吐量优化的，所以HDFS不适用与低延迟的数据访问</li>\n<li>大量的小文件，因为Namenode的设计是将文件系统的元数据存储在内存中的，所以理论上HDFS中的文件最大数量受限于Namenode的内存容量，因此大量的小文件会占用Namenode大量的内存</li>\n<li>HDFS目前不支持有多个写入者的操作，也不支持修改文件系统中的文件</li>\n</ol>\n<h1 id=\"0X01-数据块的设计\"><a href=\"#0X01-数据块的设计\" class=\"headerlink\" title=\"0X01 数据块的设计\"></a>0X01 数据块的设计</h1><p>我们知道在传统的文件系统中就是分块的，寻址开销与分块的大小成负相关，磁盘利用率与分块大小成负相关。且HDFS的设计就是用来处理大文件的，所以将块设计的很大，默认为64MB且好多时候采用的是128MB的设置。</p>\n<p>在HDFS中的块设计和传统文件系统有些不同，在传统文件系统中假设一个块为4kb，如果一个文件只有1kb则仍然会占用4kb的空间，但是在HDFS中一个小于块大小的文件并不会占据整个块的空间。</p>\n<p><img src=\"https://blog.just666.cn/usr/uploads/hdfs_arch.png\" alt=\"HDFS架构\"></p>\n<h1 id=\"0X02-Namenode和Datanode\"><a href=\"#0X02-Namenode和Datanode\" class=\"headerlink\" title=\"0X02 Namenode和Datanode\"></a>0X02 Namenode和Datanode</h1><p>HDFS中有两种节点，Namenode和Datanode。</p>\n<p>其中Namenode管理文件系统的命名空间，他维护着文件系统树和整棵树内所有的文件和目录。</p>\n<p>其中的Datanode负责存储并检索数据块，且定期向Namenode发送存储的块的列表。</p>\n<h1 id=\"0X03-Namenode容错机制\"><a href=\"#0X03-Namenode容错机制\" class=\"headerlink\" title=\"0X03 Namenode容错机制\"></a>0X03 Namenode容错机制</h1><p>Namenode有两种常用的容错机制，第一种是实时将自己的操作和文件同步到NFS上，且是原子操作所以NFS上会有和Namenode完全相同的文件。另一种方式是运行一个辅助的Namenode，定期通过编辑日志合并命名空间镜像。</p>\n<h1 id=\"0X04-联邦HDFS\"><a href=\"#0X04-联邦HDFS\" class=\"headerlink\" title=\"0X04 联邦HDFS\"></a>0X04 联邦HDFS</h1><p>毕竟HDFS是为处理海量数据诞生的，所以避免不了海量的集群来搭建HDFS，但是前面也说过因为设计的问题导致一个拥有大量文件的集群会对Namenode的内存造成严峻的考验，这时候可以使用联邦HDFS来解决。在联邦环境下可以配置多个Namenode，每个Namenode负责维护一个命名空间卷。也就相当于每个Namenode负责一个目录树中的子目录，这样就可以保证在HDFS中有大量文件的时候也不会对Namenode造成太大的威胁。</p>\n<h1 id=\"0X05-高可用性\"><a href=\"#0X05-高可用性\" class=\"headerlink\" title=\"0X05 高可用性\"></a>0X05 高可用性</h1><p>虽然Namenode有了备份但是还是存在Namenode的单点问题，也就是说当Namenode出现故障之后依旧会对HDFS整个文件系统造成影响，虽然有备份但是还是要等到有下一台Namenode节点上线之后才会运行，所以当时运行的MapReduce等程序依然会终止。针对这种问题Hadoop在2.x中做出了适当的处理。可以配置一对活动-备用的Namenode用于做热备份。</p>\n<ol>\n<li>Namenode之间可以共享编辑日志，且使用高可用的方式实现共享存储</li>\n<li>Datanode需要同时向两个Namenode发送数据块处理报告，因为要保持两个Namenode完全相同</li>\n</ol>\n<p>在这样的配置之下当活动的Namenode故障以后备用的Namenode可以在几十秒内实现任务接管。且在备用的Namenode也失效的情况下还可以通过配置来指定另一台备用Namenode用于做冷启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-HDFS的设计\"><a href=\"#0X00-HDFS的设计\" class=\"headerlink\" title=\"0X00 HDFS的设计\"></a>0X00 HDFS的设计</h1><p>HDFS作为GFS的开源实现，和GFS是高度一致的。在HDFS中有着下面的优点</p>\n<ol>\n<li>对超大文件支持良好，由于其分布式实现，可以存储超大文件，甚至单个文件大小可以超过集群中任意一台机器的磁盘大小</li>\n<li>采用流式数据访问，一次写入、多次读取是最高效的访问模式。因为Hadoop作为一个大数据处理平台，并没有频繁的写入操作，只是在需要的时候一次将大量的数据写入然后在对这些数据进行读操作</li>\n<li>Hadoop并不需要运行在昂贵且高可靠的硬件之上，单个节点可能性能可靠性都参差不齐，但是由于其高可靠性的设计，使之能在遇到节点故障时继续运行且不让用户察觉到明显的终端</li>\n</ol>\n<p>但是HDFS也不是适用于各种场景，一下的几种场景就不适</p>\n<ol>\n<li>低时间延迟的数据访问，因为HDFS是以时间延迟为代价针对高数据吞吐量优化的，所以HDFS不适用与低延迟的数据访问</li>\n<li>大量的小文件，因为Namenode的设计是将文件系统的元数据存储在内存中的，所以理论上HDFS中的文件最大数量受限于Namenode的内存容量，因此大量的小文件会占用Namenode大量的内存</li>\n<li>HDFS目前不支持有多个写入者的操作，也不支持修改文件系统中的文件</li>\n</ol>\n<h1 id=\"0X01-数据块的设计\"><a href=\"#0X01-数据块的设计\" class=\"headerlink\" title=\"0X01 数据块的设计\"></a>0X01 数据块的设计</h1><p>我们知道在传统的文件系统中就是分块的，寻址开销与分块的大小成负相关，磁盘利用率与分块大小成负相关。且HDFS的设计就是用来处理大文件的，所以将块设计的很大，默认为64MB且好多时候采用的是128MB的设置。</p>\n<p>在HDFS中的块设计和传统文件系统有些不同，在传统文件系统中假设一个块为4kb，如果一个文件只有1kb则仍然会占用4kb的空间，但是在HDFS中一个小于块大小的文件并不会占据整个块的空间。</p>\n<p><img src=\"https://blog.just666.cn/usr/uploads/hdfs_arch.png\" alt=\"HDFS架构\"></p>\n<h1 id=\"0X02-Namenode和Datanode\"><a href=\"#0X02-Namenode和Datanode\" class=\"headerlink\" title=\"0X02 Namenode和Datanode\"></a>0X02 Namenode和Datanode</h1><p>HDFS中有两种节点，Namenode和Datanode。</p>\n<p>其中Namenode管理文件系统的命名空间，他维护着文件系统树和整棵树内所有的文件和目录。</p>\n<p>其中的Datanode负责存储并检索数据块，且定期向Namenode发送存储的块的列表。</p>\n<h1 id=\"0X03-Namenode容错机制\"><a href=\"#0X03-Namenode容错机制\" class=\"headerlink\" title=\"0X03 Namenode容错机制\"></a>0X03 Namenode容错机制</h1><p>Namenode有两种常用的容错机制，第一种是实时将自己的操作和文件同步到NFS上，且是原子操作所以NFS上会有和Namenode完全相同的文件。另一种方式是运行一个辅助的Namenode，定期通过编辑日志合并命名空间镜像。</p>\n<h1 id=\"0X04-联邦HDFS\"><a href=\"#0X04-联邦HDFS\" class=\"headerlink\" title=\"0X04 联邦HDFS\"></a>0X04 联邦HDFS</h1><p>毕竟HDFS是为处理海量数据诞生的，所以避免不了海量的集群来搭建HDFS，但是前面也说过因为设计的问题导致一个拥有大量文件的集群会对Namenode的内存造成严峻的考验，这时候可以使用联邦HDFS来解决。在联邦环境下可以配置多个Namenode，每个Namenode负责维护一个命名空间卷。也就相当于每个Namenode负责一个目录树中的子目录，这样就可以保证在HDFS中有大量文件的时候也不会对Namenode造成太大的威胁。</p>\n<h1 id=\"0X05-高可用性\"><a href=\"#0X05-高可用性\" class=\"headerlink\" title=\"0X05 高可用性\"></a>0X05 高可用性</h1><p>虽然Namenode有了备份但是还是存在Namenode的单点问题，也就是说当Namenode出现故障之后依旧会对HDFS整个文件系统造成影响，虽然有备份但是还是要等到有下一台Namenode节点上线之后才会运行，所以当时运行的MapReduce等程序依然会终止。针对这种问题Hadoop在2.x中做出了适当的处理。可以配置一对活动-备用的Namenode用于做热备份。</p>\n<ol>\n<li>Namenode之间可以共享编辑日志，且使用高可用的方式实现共享存储</li>\n<li>Datanode需要同时向两个Namenode发送数据块处理报告，因为要保持两个Namenode完全相同</li>\n</ol>\n<p>在这样的配置之下当活动的Namenode故障以后备用的Namenode可以在几十秒内实现任务接管。且在备用的Namenode也失效的情况下还可以通过配置来指定另一台备用Namenode用于做冷启动。</p>\n"},{"title":"Java 抽象类和接口 理解抽象类和接口","date":"2015-11-21T15:59:00.000Z","_content":"\n\n# 0X00抽象类&接口简介\n抽象类\n\n\tabstract 抽象修饰符——抽象就是为了让子类集成的，并不能直接实现一个对象\n    抽象类中所有抽象方法都要在子类中实现\n    拥有抽象方法的类必须声明为抽象类\n    抽象类可以有非抽象的方法\n\n接口\n\n\tinterface 接口修饰符——接口是为了让类实现的\n    变量默认是public static final并且不能改变\n    方法默认是public abstract并且不能改变\n    接口不实现方法\n\n# 0X01抽象类和接口的区别\n\t抽象类可以实现方法细节，接口不能\n\t抽象类的变量可以是各种类型的，接口不能\n\t抽象类可以有静态代码块和静态方法，接口不能\n\t一个类可以实现多个接口，而只能继承自一个抽象类\n\t继承可以理解成“是不是”，接口可以理解成“有没有”\n\n# 0X02举个例子\n\n有一个接口CanFly\n```java\npublic interface CanFly {\n\n    public abstract void fly();\n\n}\n```\n\n有一个抽象类Bird\n```java\npublic abstract class Bird {\n\n    int age;\n\n    void eat(){\n        System.out.println(\"I can eat insect~\");\n    }\n\n}\n```\n\n有一个Sparrow类继承自Bird\n```java\npublic class Sparrow extends Bird implements CanFly{\n\n    public void fly(){\n        System.out.println(\"I can fly\");\n    }\n\n}\n```\n\n有一个抽象类Airplane\n```java\npublic abstract class Airplane {\n\n    double price;//价格\n\n    void Crash(){   //坠毁\n        System.out.println(\"This airplane is crashed!\");\n    }\n\n}\n```\n\n有一个Jian_10类继承自Airplane\n```java\npublic class Jian_10 extends Airplane implements CanFly{\n\n    public void fly(){\n        System.out.println(\"I can fly\");\n    }\n\n}\n```\n\n有一个包含主方法的类来测试\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        Jian_10 A_0 = new Jian_10();//实例化A_0号战机\n        Sparrow xiaoMing = new Sparrow();//没错，这只麻雀叫小明\n\n        //我们都能飞\n        A_0.fly();\n        xiaoMing.fly();\n\n        //小明吃饭了\n        xiaoMing.eat();\n\n        //战机坠毁了\n        A_0.Crash();\n    }\n\n}\n```\n\n运行结果是这样的\n```\nI can fly\nI can fly\nI can eat insect~\nThis airplane is crashed!\n```\n\n# 0X03粗略解释\n大概是这么回事：\nAirplane和Bird是两个抽象类，Jian_10和Sparrow分别继承自他们，所以子类可以直接调用父类的方法。且Jian_10和Sparrow还有接口CanFly 。然后Jian_10和Sparrow实现了接口CanFly中声明的fly方法（必须实现）。\n如果以后想要修改Airplane和Bird两个父类的方法的时候，比如我不想让Bird吃东西了或者Airplane不会坠毁了，就只需要修改Airplane和Bird中相应的方法。\n>一个类只能继承自一个类&抽象类，但是可以实现多个接口\n\n\n比如，Airplane和Bird有很多相同的方法，但是实现不尽相同，我们就可以把这些方法放到一个接口中。\n","source":"_posts/java_class_interface.md","raw":"---\ntitle: Java 抽象类和接口 理解抽象类和接口\ndate: 2015-11-21 23:59\ntags:\n  - Java\n  - 面向对象\n---\n\n\n# 0X00抽象类&接口简介\n抽象类\n\n\tabstract 抽象修饰符——抽象就是为了让子类集成的，并不能直接实现一个对象\n    抽象类中所有抽象方法都要在子类中实现\n    拥有抽象方法的类必须声明为抽象类\n    抽象类可以有非抽象的方法\n\n接口\n\n\tinterface 接口修饰符——接口是为了让类实现的\n    变量默认是public static final并且不能改变\n    方法默认是public abstract并且不能改变\n    接口不实现方法\n\n# 0X01抽象类和接口的区别\n\t抽象类可以实现方法细节，接口不能\n\t抽象类的变量可以是各种类型的，接口不能\n\t抽象类可以有静态代码块和静态方法，接口不能\n\t一个类可以实现多个接口，而只能继承自一个抽象类\n\t继承可以理解成“是不是”，接口可以理解成“有没有”\n\n# 0X02举个例子\n\n有一个接口CanFly\n```java\npublic interface CanFly {\n\n    public abstract void fly();\n\n}\n```\n\n有一个抽象类Bird\n```java\npublic abstract class Bird {\n\n    int age;\n\n    void eat(){\n        System.out.println(\"I can eat insect~\");\n    }\n\n}\n```\n\n有一个Sparrow类继承自Bird\n```java\npublic class Sparrow extends Bird implements CanFly{\n\n    public void fly(){\n        System.out.println(\"I can fly\");\n    }\n\n}\n```\n\n有一个抽象类Airplane\n```java\npublic abstract class Airplane {\n\n    double price;//价格\n\n    void Crash(){   //坠毁\n        System.out.println(\"This airplane is crashed!\");\n    }\n\n}\n```\n\n有一个Jian_10类继承自Airplane\n```java\npublic class Jian_10 extends Airplane implements CanFly{\n\n    public void fly(){\n        System.out.println(\"I can fly\");\n    }\n\n}\n```\n\n有一个包含主方法的类来测试\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        Jian_10 A_0 = new Jian_10();//实例化A_0号战机\n        Sparrow xiaoMing = new Sparrow();//没错，这只麻雀叫小明\n\n        //我们都能飞\n        A_0.fly();\n        xiaoMing.fly();\n\n        //小明吃饭了\n        xiaoMing.eat();\n\n        //战机坠毁了\n        A_0.Crash();\n    }\n\n}\n```\n\n运行结果是这样的\n```\nI can fly\nI can fly\nI can eat insect~\nThis airplane is crashed!\n```\n\n# 0X03粗略解释\n大概是这么回事：\nAirplane和Bird是两个抽象类，Jian_10和Sparrow分别继承自他们，所以子类可以直接调用父类的方法。且Jian_10和Sparrow还有接口CanFly 。然后Jian_10和Sparrow实现了接口CanFly中声明的fly方法（必须实现）。\n如果以后想要修改Airplane和Bird两个父类的方法的时候，比如我不想让Bird吃东西了或者Airplane不会坠毁了，就只需要修改Airplane和Bird中相应的方法。\n>一个类只能继承自一个类&抽象类，但是可以实现多个接口\n\n\n比如，Airplane和Bird有很多相同的方法，但是实现不尽相同，我们就可以把这些方法放到一个接口中。\n","slug":"java_class_interface","published":1,"updated":"2017-09-02T14:41:09.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdw000dhnlpcy7j3vwy","content":"<h1 id=\"0X00抽象类-amp-接口简介\"><a href=\"#0X00抽象类-amp-接口简介\" class=\"headerlink\" title=\"0X00抽象类&amp;接口简介\"></a>0X00抽象类&amp;接口简介</h1><p>抽象类</p>\n<pre><code>abstract 抽象修饰符——抽象就是为了让子类集成的，并不能直接实现一个对象\n抽象类中所有抽象方法都要在子类中实现\n拥有抽象方法的类必须声明为抽象类\n抽象类可以有非抽象的方法\n</code></pre><p>接口</p>\n<pre><code>interface 接口修饰符——接口是为了让类实现的\n变量默认是public static final并且不能改变\n方法默认是public abstract并且不能改变\n接口不实现方法\n</code></pre><h1 id=\"0X01抽象类和接口的区别\"><a href=\"#0X01抽象类和接口的区别\" class=\"headerlink\" title=\"0X01抽象类和接口的区别\"></a>0X01抽象类和接口的区别</h1><pre><code>抽象类可以实现方法细节，接口不能\n抽象类的变量可以是各种类型的，接口不能\n抽象类可以有静态代码块和静态方法，接口不能\n一个类可以实现多个接口，而只能继承自一个抽象类\n继承可以理解成“是不是”，接口可以理解成“有没有”\n</code></pre><h1 id=\"0X02举个例子\"><a href=\"#0X02举个例子\" class=\"headerlink\" title=\"0X02举个例子\"></a>0X02举个例子</h1><p>有一个接口CanFly<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CanFly</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个抽象类Bird<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"I can eat insect~\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个Sparrow类继承自Bird<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sparrow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span> <span class=\"keyword\">implements</span> <span class=\"title\">CanFly</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"I can fly\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个抽象类Airplane<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Airplane</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> price;<span class=\"comment\">//价格</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Crash</span><span class=\"params\">()</span></span>&#123;   <span class=\"comment\">//坠毁</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"This airplane is crashed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个Jian_10类继承自Airplane<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jian_10</span> <span class=\"keyword\">extends</span> <span class=\"title\">Airplane</span> <span class=\"keyword\">implements</span> <span class=\"title\">CanFly</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"I can fly\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个包含主方法的类来测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Jian_10 A_0 = <span class=\"keyword\">new</span> Jian_10();<span class=\"comment\">//实例化A_0号战机</span></div><div class=\"line\">        Sparrow xiaoMing = <span class=\"keyword\">new</span> Sparrow();<span class=\"comment\">//没错，这只麻雀叫小明</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//我们都能飞</span></div><div class=\"line\">        A_0.fly();</div><div class=\"line\">        xiaoMing.fly();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//小明吃饭了</span></div><div class=\"line\">        xiaoMing.eat();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//战机坠毁了</span></div><div class=\"line\">        A_0.Crash();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">I can fly</div><div class=\"line\">I can fly</div><div class=\"line\">I can eat insect~</div><div class=\"line\">This airplane is crashed!</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03粗略解释\"><a href=\"#0X03粗略解释\" class=\"headerlink\" title=\"0X03粗略解释\"></a>0X03粗略解释</h1><p>大概是这么回事：<br>Airplane和Bird是两个抽象类，Jian_10和Sparrow分别继承自他们，所以子类可以直接调用父类的方法。且Jian_10和Sparrow还有接口CanFly 。然后Jian_10和Sparrow实现了接口CanFly中声明的fly方法（必须实现）。<br>如果以后想要修改Airplane和Bird两个父类的方法的时候，比如我不想让Bird吃东西了或者Airplane不会坠毁了，就只需要修改Airplane和Bird中相应的方法。</p>\n<blockquote>\n<p>一个类只能继承自一个类&amp;抽象类，但是可以实现多个接口</p>\n</blockquote>\n<p>比如，Airplane和Bird有很多相同的方法，但是实现不尽相同，我们就可以把这些方法放到一个接口中。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00抽象类-amp-接口简介\"><a href=\"#0X00抽象类-amp-接口简介\" class=\"headerlink\" title=\"0X00抽象类&amp;接口简介\"></a>0X00抽象类&amp;接口简介</h1><p>抽象类</p>\n<pre><code>abstract 抽象修饰符——抽象就是为了让子类集成的，并不能直接实现一个对象\n抽象类中所有抽象方法都要在子类中实现\n拥有抽象方法的类必须声明为抽象类\n抽象类可以有非抽象的方法\n</code></pre><p>接口</p>\n<pre><code>interface 接口修饰符——接口是为了让类实现的\n变量默认是public static final并且不能改变\n方法默认是public abstract并且不能改变\n接口不实现方法\n</code></pre><h1 id=\"0X01抽象类和接口的区别\"><a href=\"#0X01抽象类和接口的区别\" class=\"headerlink\" title=\"0X01抽象类和接口的区别\"></a>0X01抽象类和接口的区别</h1><pre><code>抽象类可以实现方法细节，接口不能\n抽象类的变量可以是各种类型的，接口不能\n抽象类可以有静态代码块和静态方法，接口不能\n一个类可以实现多个接口，而只能继承自一个抽象类\n继承可以理解成“是不是”，接口可以理解成“有没有”\n</code></pre><h1 id=\"0X02举个例子\"><a href=\"#0X02举个例子\" class=\"headerlink\" title=\"0X02举个例子\"></a>0X02举个例子</h1><p>有一个接口CanFly<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CanFly</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个抽象类Bird<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"I can eat insect~\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个Sparrow类继承自Bird<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sparrow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span> <span class=\"keyword\">implements</span> <span class=\"title\">CanFly</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"I can fly\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个抽象类Airplane<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Airplane</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> price;<span class=\"comment\">//价格</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Crash</span><span class=\"params\">()</span></span>&#123;   <span class=\"comment\">//坠毁</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"This airplane is crashed!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个Jian_10类继承自Airplane<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jian_10</span> <span class=\"keyword\">extends</span> <span class=\"title\">Airplane</span> <span class=\"keyword\">implements</span> <span class=\"title\">CanFly</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"I can fly\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个包含主方法的类来测试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Jian_10 A_0 = <span class=\"keyword\">new</span> Jian_10();<span class=\"comment\">//实例化A_0号战机</span></div><div class=\"line\">        Sparrow xiaoMing = <span class=\"keyword\">new</span> Sparrow();<span class=\"comment\">//没错，这只麻雀叫小明</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//我们都能飞</span></div><div class=\"line\">        A_0.fly();</div><div class=\"line\">        xiaoMing.fly();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//小明吃饭了</span></div><div class=\"line\">        xiaoMing.eat();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//战机坠毁了</span></div><div class=\"line\">        A_0.Crash();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行结果是这样的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">I can fly</div><div class=\"line\">I can fly</div><div class=\"line\">I can eat insect~</div><div class=\"line\">This airplane is crashed!</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03粗略解释\"><a href=\"#0X03粗略解释\" class=\"headerlink\" title=\"0X03粗略解释\"></a>0X03粗略解释</h1><p>大概是这么回事：<br>Airplane和Bird是两个抽象类，Jian_10和Sparrow分别继承自他们，所以子类可以直接调用父类的方法。且Jian_10和Sparrow还有接口CanFly 。然后Jian_10和Sparrow实现了接口CanFly中声明的fly方法（必须实现）。<br>如果以后想要修改Airplane和Bird两个父类的方法的时候，比如我不想让Bird吃东西了或者Airplane不会坠毁了，就只需要修改Airplane和Bird中相应的方法。</p>\n<blockquote>\n<p>一个类只能继承自一个类&amp;抽象类，但是可以实现多个接口</p>\n</blockquote>\n<p>比如，Airplane和Bird有很多相同的方法，但是实现不尽相同，我们就可以把这些方法放到一个接口中。</p>\n"},{"title":"Java使用MD5和BASE64","date":"2016-07-17T15:00:00.000Z","_content":"\n# 0X00 简介\n最近经常要在代码中使用到BASE64编码和MD5加密，所以把笔记贴在这里方便自己查找。\n在配置postfix邮件服务器的时候发现，收到的邮件正文都是使用BASE64编码过的，所以才了解了一下这种编码。\nMD5则是加密常用手段。虽说MD5细究不算加密算法，但是可以用作加密。\n\n# 0X01 BASE64编码\n>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。  -----------维基百科\n\n代码需要 `import sun.misc.BASE64Encoder;`\n```java\npublic static String encodeing(String str){\n\tbyte[] b = null;\n    String s = null;\n    try{\n        b = str.getBytes(\"utf-8\");\n    }catch (Exception e){\n        e.printStackTrace();\n    }\n    if (b != null){\n        s = new BASE64Encoder().encode(b);\n    }\n    return s;\n}\n```\n\n# 0X02 BASE64解码\n代码需要`import sun.misc.BASE64Decoder;`\n```java\npublic static String decoding(String str){\n        byte[] b = null;\n        String result = null;\n        if (str != null){\n            BASE64Decoder decoder = new BASE64Decoder();\n            try{\n                b = decoder.decodeBuffer(str);\n                result = new String(b, \"utf-8\");\n            }catch (Exception e){\n                e.printStackTrace();\n            }\n        }\n        return result;\n    }\n```\n\n# 0X03 MD5加密\n>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由罗纳德·李维斯特设计，于1992年公开，用以替换MD4算法。这套算法的程序在 RFC 1321 中被加以规范。\n将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。\n1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-1。2004年，证实MD5算法无法防止碰撞，因此无法适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。     -----------维基百科\n\n虽说MD5已经被证明不安全，不过用作实验性的登陆验证还是没有问题的。（其实好多好多网站的密码都是MD5的，不信可以去社工库里看看）\n\n代码需要`import java.security.MessageDigest;`\n\n```java\n public static String getMd5(String text){\n        try{\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte b[] = md.digest();\n            int i;\n            StringBuffer buf = new StringBuffer(\"\");\n            for (int offset = 0; offset < b.length; offset++){\n                i = b[offset];\n                if (i < 0){\n                    i += 256;\n                }\n                if (i < 16){\n                    buf.append(\"0\");\n                }\n                buf.append(Integer.toHexString(i));\n            }\n            return buf.toString();                      // 32位加密\n            //return buf.toString().substring(8, 24);   // 16位加密\n        }catch (Exception e){\n            e.printStackTrace();\n            return null;\n        }\n    }\n```\n","source":"_posts/java_md5_base64.md","raw":"---\ntitle: Java使用MD5和BASE64\ndate: 2016-07-17 23:00\ntags:\n  - MD5\n  - BASE64\n  - 加密\n  - 解密\n  - 编码\n  - 解码\n---\n\n# 0X00 简介\n最近经常要在代码中使用到BASE64编码和MD5加密，所以把笔记贴在这里方便自己查找。\n在配置postfix邮件服务器的时候发现，收到的邮件正文都是使用BASE64编码过的，所以才了解了一下这种编码。\nMD5则是加密常用手段。虽说MD5细究不算加密算法，但是可以用作加密。\n\n# 0X01 BASE64编码\n>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。  -----------维基百科\n\n代码需要 `import sun.misc.BASE64Encoder;`\n```java\npublic static String encodeing(String str){\n\tbyte[] b = null;\n    String s = null;\n    try{\n        b = str.getBytes(\"utf-8\");\n    }catch (Exception e){\n        e.printStackTrace();\n    }\n    if (b != null){\n        s = new BASE64Encoder().encode(b);\n    }\n    return s;\n}\n```\n\n# 0X02 BASE64解码\n代码需要`import sun.misc.BASE64Decoder;`\n```java\npublic static String decoding(String str){\n        byte[] b = null;\n        String result = null;\n        if (str != null){\n            BASE64Decoder decoder = new BASE64Decoder();\n            try{\n                b = decoder.decodeBuffer(str);\n                result = new String(b, \"utf-8\");\n            }catch (Exception e){\n                e.printStackTrace();\n            }\n        }\n        return result;\n    }\n```\n\n# 0X03 MD5加密\n>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由罗纳德·李维斯特设计，于1992年公开，用以替换MD4算法。这套算法的程序在 RFC 1321 中被加以规范。\n将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。\n1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-1。2004年，证实MD5算法无法防止碰撞，因此无法适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。     -----------维基百科\n\n虽说MD5已经被证明不安全，不过用作实验性的登陆验证还是没有问题的。（其实好多好多网站的密码都是MD5的，不信可以去社工库里看看）\n\n代码需要`import java.security.MessageDigest;`\n\n```java\n public static String getMd5(String text){\n        try{\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte b[] = md.digest();\n            int i;\n            StringBuffer buf = new StringBuffer(\"\");\n            for (int offset = 0; offset < b.length; offset++){\n                i = b[offset];\n                if (i < 0){\n                    i += 256;\n                }\n                if (i < 16){\n                    buf.append(\"0\");\n                }\n                buf.append(Integer.toHexString(i));\n            }\n            return buf.toString();                      // 32位加密\n            //return buf.toString().substring(8, 24);   // 16位加密\n        }catch (Exception e){\n            e.printStackTrace();\n            return null;\n        }\n    }\n```\n","slug":"java_md5_base64","published":1,"updated":"2017-09-02T14:41:32.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdx000fhnlpbacn27th","content":"<h1 id=\"0X00-简介\"><a href=\"#0X00-简介\" class=\"headerlink\" title=\"0X00 简介\"></a>0X00 简介</h1><p>最近经常要在代码中使用到BASE64编码和MD5加密，所以把笔记贴在这里方便自己查找。<br>在配置postfix邮件服务器的时候发现，收到的邮件正文都是使用BASE64编码过的，所以才了解了一下这种编码。<br>MD5则是加密常用手段。虽说MD5细究不算加密算法，但是可以用作加密。</p>\n<h1 id=\"0X01-BASE64编码\"><a href=\"#0X01-BASE64编码\" class=\"headerlink\" title=\"0X01 BASE64编码\"></a>0X01 BASE64编码</h1><blockquote>\n<p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。  ———–维基百科</p>\n</blockquote>\n<p>代码需要 <code>import sun.misc.BASE64Encoder;</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encodeing</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">null</span>;</div><div class=\"line\">    String s = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        b = str.getBytes(<span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (b != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        s = <span class=\"keyword\">new</span> BASE64Encoder().encode(b);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> s;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-BASE64解码\"><a href=\"#0X02-BASE64解码\" class=\"headerlink\" title=\"0X02 BASE64解码\"></a>0X02 BASE64解码</h1><p>代码需要<code>import sun.misc.BASE64Decoder;</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decoding</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">null</span>;</div><div class=\"line\">        String result = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            BASE64Decoder decoder = <span class=\"keyword\">new</span> BASE64Decoder();</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                b = decoder.decodeBuffer(str);</div><div class=\"line\">                result = <span class=\"keyword\">new</span> String(b, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-MD5加密\"><a href=\"#0X03-MD5加密\" class=\"headerlink\" title=\"0X03 MD5加密\"></a>0X03 MD5加密</h1><blockquote>\n<p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由罗纳德·李维斯特设计，于1992年公开，用以替换MD4算法。这套算法的程序在 RFC 1321 中被加以规范。<br>将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。<br>1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-1。2004年，证实MD5算法无法防止碰撞，因此无法适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。     ———–维基百科</p>\n</blockquote>\n<p>虽说MD5已经被证明不安全，不过用作实验性的登陆验证还是没有问题的。（其实好多好多网站的密码都是MD5的，不信可以去社工库里看看）</p>\n<p>代码需要<code>import java.security.MessageDigest;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMd5</span><span class=\"params\">(String text)</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">           MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</div><div class=\"line\">           md.update(text.getBytes());</div><div class=\"line\">           <span class=\"keyword\">byte</span> b[] = md.digest();</div><div class=\"line\">           <span class=\"keyword\">int</span> i;</div><div class=\"line\">           StringBuffer buf = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"\"</span>);</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>; offset &lt; b.length; offset++)&#123;</div><div class=\"line\">               i = b[offset];</div><div class=\"line\">               <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                   i += <span class=\"number\">256</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">16</span>)&#123;</div><div class=\"line\">                   buf.append(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">               &#125;</div><div class=\"line\">               buf.append(Integer.toHexString(i));</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> buf.toString();                      <span class=\"comment\">// 32位加密</span></div><div class=\"line\">           <span class=\"comment\">//return buf.toString().substring(8, 24);   // 16位加密</span></div><div class=\"line\">       &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-简介\"><a href=\"#0X00-简介\" class=\"headerlink\" title=\"0X00 简介\"></a>0X00 简介</h1><p>最近经常要在代码中使用到BASE64编码和MD5加密，所以把笔记贴在这里方便自己查找。<br>在配置postfix邮件服务器的时候发现，收到的邮件正文都是使用BASE64编码过的，所以才了解了一下这种编码。<br>MD5则是加密常用手段。虽说MD5细究不算加密算法，但是可以用作加密。</p>\n<h1 id=\"0X01-BASE64编码\"><a href=\"#0X01-BASE64编码\" class=\"headerlink\" title=\"0X01 BASE64编码\"></a>0X01 BASE64编码</h1><blockquote>\n<p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。一些如uuencode的其他编码方法，和之后binhex的版本使用不同的64字符集来代表6个二进制数字，但是它们不叫Base64。  ———–维基百科</p>\n</blockquote>\n<p>代码需要 <code>import sun.misc.BASE64Encoder;</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encodeing</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">null</span>;</div><div class=\"line\">    String s = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        b = str.getBytes(<span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (b != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        s = <span class=\"keyword\">new</span> BASE64Encoder().encode(b);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> s;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-BASE64解码\"><a href=\"#0X02-BASE64解码\" class=\"headerlink\" title=\"0X02 BASE64解码\"></a>0X02 BASE64解码</h1><p>代码需要<code>import sun.misc.BASE64Decoder;</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">decoding</span><span class=\"params\">(String str)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">null</span>;</div><div class=\"line\">        String result = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            BASE64Decoder decoder = <span class=\"keyword\">new</span> BASE64Decoder();</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                b = decoder.decodeBuffer(str);</div><div class=\"line\">                result = <span class=\"keyword\">new</span> String(b, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-MD5加密\"><a href=\"#0X03-MD5加密\" class=\"headerlink\" title=\"0X03 MD5加密\"></a>0X03 MD5加密</h1><blockquote>\n<p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由罗纳德·李维斯特设计，于1992年公开，用以替换MD4算法。这套算法的程序在 RFC 1321 中被加以规范。<br>将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。<br>1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-1。2004年，证实MD5算法无法防止碰撞，因此无法适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。     ———–维基百科</p>\n</blockquote>\n<p>虽说MD5已经被证明不安全，不过用作实验性的登陆验证还是没有问题的。（其实好多好多网站的密码都是MD5的，不信可以去社工库里看看）</p>\n<p>代码需要<code>import java.security.MessageDigest;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getMd5</span><span class=\"params\">(String text)</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">           MessageDigest md = MessageDigest.getInstance(<span class=\"string\">\"MD5\"</span>);</div><div class=\"line\">           md.update(text.getBytes());</div><div class=\"line\">           <span class=\"keyword\">byte</span> b[] = md.digest();</div><div class=\"line\">           <span class=\"keyword\">int</span> i;</div><div class=\"line\">           StringBuffer buf = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"\"</span>);</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>; offset &lt; b.length; offset++)&#123;</div><div class=\"line\">               i = b[offset];</div><div class=\"line\">               <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                   i += <span class=\"number\">256</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">16</span>)&#123;</div><div class=\"line\">                   buf.append(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">               &#125;</div><div class=\"line\">               buf.append(Integer.toHexString(i));</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> buf.toString();                      <span class=\"comment\">// 32位加密</span></div><div class=\"line\">           <span class=\"comment\">//return buf.toString().substring(8, 24);   // 16位加密</span></div><div class=\"line\">       &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n"},{"title":"使用Flask设计实现一套API【成绩管理系统】","date":"2017-06-03T07:37:00.000Z","_content":"\n# 0X00 什么是REST风格的API\n众所周知http协议有`GET/PUT/POST/PATCH/DELETE`等众多方法，还能在提交请求和发送响应的时候携带数据。REST风格的API就是使用了这些HTTP特性的API。针对一个URL可以有多种动词(方法)来表示不同的操作。\n更多详细的内容可以点击查看阮一峰的博客：[理解RESTful架构](http://www.ruanyifeng.com/blog/2011/09/restful.html)\n\n# 0X01 怎么选用HTTP动词\n常见的动词有这五种，可以对应自己的需求选用\n\n| 动词 | 类似的SQL关键字 | 功能 |\n| ---- |: ---- :|: ---- :|\n| GET | SELECT | 获取资源 |\n| POST | CREATE | 创建资源 |\n| PUT | UPDATE | 更新资源（需要提供改变后的完整资源） |\n| PATCH | UPDATE | 更新资源（需要提供改变的属性） |\n| DELETE | DELETE | 删除资源 |\n\n# 0X02 设计URL\nREST风格的API因为可以用HTTP的动词，所以URL中是不带有动词的，如果我要获取某个学生的信息应该是`[GET] http://api.example.com/student/id=12345678900`。HTTP动词理论上是能满足各种情况下的需求的，所以URL中只应该出现名词而不应该出现动词。这里用阮一峰举的例子来说明一下\n\n| 动词 | 路径 | 功能 |\n| --|--- |\n| GET | /zoos | 列出所有动物园 |\n| POST | /zoos | 新建一个动物园 |\n| GET | /zoos/ID | 获取某个指定动物园的信息 |\n| PUT | /zoos/ID | 更新某个指定动物园的信息（提供该动物园的全部信息） |\n| PATCH | /zoos/ID | 更新某个指定动物园的信息（提供该动物园的部分信息） |\n| DELETE | /zoos/ID | 删除某个动物园 |\n| GET | /zoos/ID/animals | 列出某个指定动物园的所有动物 |\n| DELETE | /zoos/ID/animals/ID | 删除某个指定动物园的指定动物 |\n\n\n# 0X03 状态码\n\n状态码是HTTP中的一大优势，一个响应可以只靠状态码来判请求结果。这些是常见的状态码，自己设计API的时候要严格按照规范来设计状态码，可以提高代码和API的可读性和可理解性。\n\n| 状态码 | 信息 | 请求类型 | 含义 |\n| ------|------|----------|---- |\n| 200 | OK | [GET] | 服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 |\n| 201 | CREATED | [POST/PUT/PATCH] | 用户新建或修改数据成功。 |\n| 202 | Accepted | [*] | 表示一个请求已经进入后台排队（异步任务）。 |\n| 204 | NO CONTENT | [DELETE] | 用户删除数据成功。 |\n| 400 | INVALID REQUEST | [POST/PUT/PATCH] | 用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 |\n| 401 | Unauthorized | [*] | 表示用户没有权限（令牌、用户名、密码错误）。 |\n| 403 | Forbidden | [*] | 表示用户得到授权（与401错误相对），但是访问是被禁止的。 |\n| 404 | NOT FOUND | [*] | 用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 |\n| 406 | Not Acceptable | [GET] | 用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 |\n| 410 | Gone | [GET] | 用户请求的资源被永久删除，且不会再得到的。 |\n| 422 | Unprocesable entity | [POST/PUT/PATCH] | 当创建一个对象时，发生一个验证错误。 |\n| 500 | INTERNAL SERVER ERROR | [*] | 服务器发生错误，用户将无法判断发出的请求是否成功。 |\n\n# 0X04 如何用Python实现\nPython有大量第三方库可以实现REST风格的API，我这里选用的是相对轻量化的一个 [Flask](http://flask.pocoo.org/)。安装这个库最简单的方式还是用pip，根据环境变量的不同可能具体命令有所不同，在我的Linux上是用`pip3 install flask`就可以直接安装好的。\n安装好后进入Python的交互式界面输入`import flask`如果没有出现`Import Error`就是安装好了。\n\n# 0X05创建数据库和表\n现在可以开始设计API了。既然是成绩管理系统，那么首先就要创建一个数据库，我这里的数据库是用的MariaDB。\n\n| 列名 | 类型 | 含义 | 键 |\n| ---|------|--|--- |\n| id | int | 编号 | 主键 |\n| name | varchar(10) | 学生姓名| |\n| number | char(11) | 学号 |  |\n| python | float | Py成绩 | |\n| cpp | float | c++成绩 | |\n| os | float | 操作系统成绩 | |\n| network | float | 计算机网络成绩 | |\n| total | float | 总分 | |\n| ave | float | 平均分 | |\n\n\n# 0X06 创建Py脚本\n```python\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n# 从这里指定路径、方法、返回数据\n@app.route('/', methods=['GET'])\ndef index():\n    return '<h1>hello,world</h1>'\n\n\nwith app.test_request_context():\n    app.run()\n```\n这段代码写好之后运行起来会在本地监听5000端口(默认的)，然后当你用浏览器访问`http://localhost:5000/`的时候就像你返回`<h1>hello,world</h1>`，在浏览器页面下看到的就是一行大号的hello,world。因为在浏览器的地址栏输入URL按回车之后就是向那个URL发送了GET请求，也就正好调用了`index()`方法。\n\n这里先将与API无关的代码填好，下面开始正式完成各项功能。其实也就是连接了数据库而已\n```python\nfrom flask import Flask, request\nimport json\nimport pymysql\n\napp = Flask(__name__)\ndatabase = pymysql.connect(\"db_host\", \"db_username\", \"db_password\", \"db_name\")\ncursor = database.cursor()\n\n@app.route('/', methods=['GET'])\ndef index():\n    return '<h1>hello,world</h1>'\n\n\nwith app.test_request_context():\n    app.run()\n```\n\n# 0X07 实现一个构造返回Json数据的方法\n首先我们选择使用Json来作为数据传输格式，因为Json相对XML来说更轻量一点，现在也更流行。规定客户端每次请求会后服务器都会返回下面这样类型的Json数据\n```json\n{\n\t\"time\": \"unix_time\",\n    “e_msg\": \"error_message\",\n    \"search_list\": {\n    \t\"item0\": {\n        \t\"name\": \"name\",\n            \"number\": \"number\",\n            \"python\": \"marks\",\n            \"os\": \"marks\",\n            \"network\": \"marks\",\n            \"cpp\": \"marks\",\n            \"total\": \"marks\",\n            \"ave\": \"ave\"\n        },\"item1\" : {\n        \t\"name\": \"name\",\n            \"number\": \"number\",\n            \"python\": \"marks\",\n            \"os\": \"marks\",\n            \"network\": \"marks\",\n            \"cpp\": \"marks\",\n            \"total\": \"marks\",\n            \"ave\": \"ave\"\n        }\n    }\n}\n```\n\nAPI提供增删查改功能，增删改只通过状态码就可以判断执行结果，只有查询的时候才会需要从响应中获取数据。\n\n\n# 0X08 增加一条新的数据\n添加一条新数据按照标准应该使用动词`POST`，根据URL中只有名词不用动词只有名词的标准，隧将URL设计成`http://localhost/student`，再依据标准添加版本号上去，变成`http://localhost/v1/student`。\n具体功能代码实现如下，\n```python\n@app.route('/v1/student', methods=['POST']) # 路径为/v1/student，方法为POST\ndef add_student():\n    data = request.get_data().decode('utf-8')   # 将客户端传来的数据解码\n    json_data = json.loads(data)    # 将数据转为Json\n\n    # 从Json中获取数据\n    name = json_data['name']\n    number = str(json_data['number'])\n    python = json_data['python']\n    cpp = json_data['cpp']\n    os = json_data['os']\n    network = json_data['network']\n\n    # 计算总分平均分\n    total = python + cpp + os + network\n    ave = total / 4\n\n    # 查询数据库中是否有该学生的信息\n    sql = \"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    count = cursor.fetchall()[0][0]\n    database.commit()\n    if count >= 1:  # 该学生信息已经存在，返回400错误\n        return build_json(e_msg=\"student early exist\"), 400\n\n    # 向数据库中插入数据\n    sql = \"INSERT INTO student.marks (name, number, python, os, network, cpp, total, ave)\" \\\n          \"VALUES (\\\"%s\\\", \\\"%s\\\", %s, %s, %s, %s, %s, %s)\" % (name, number, python, os,\n                                                               network, cpp, total, ave)\n    cursor.execute(sql)\n    database.commit()\n\n    # 请求成功，返回201状态码\n    return build_json(), 201\n```\n\n# 0X09 删除已经存在的数据\n根据标准，将API设计成`DELETE`方法，URL为`http://localhost/v1/student/number=<number>`\n第一行的`number=<number>`可以将url中符合这种规范的匹配出来，配合方法定义时的参数，可以直接将url参数传入到方法体中。\n```python\n@app.route('/v1/student/number=<number>', methods=['DELETE'])  # 路径为/v1/student, 方法为DELETE\ndef delete_student(number):\n    if not number.isdigit():    # 判断number是否合法\n        return build_json(e_msg=\"number should be digit\"), 403\n    sql = \"DELETE FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    database.commit()\n    return build_json(), 204\n```\n\n# 0X0A 查询学生成绩\n根据标准，将API设计成`GET`方法，URL为`http://localhost/v1/student/sort_by=<sort_by>`。提供了`python/cpp/network/os/total/ave`排序方式，（其实是数据库实现的）。\n```python\n@app.route('/v1/student/sort_by=<sort_by>', methods=['GET'])\ndef show_student(sort_by):\n    # 判断排序的key是否正确\n    if sort_by not in ['python', 'cpp', 'os', 'network', 'total', 'ave']:\n        return build_json(e_msg=\"sort_by key not found\"), 404\n\n    # 构建查询SQL\n    sql = \"SELECT name, number, python, cpp, os, network, total, ave FROM student.marks ORDER BY %s DESC\" % sort_by\n    cursor.execute(sql)\n    database.commit()\n    res = cursor.fetchall() # 获取查询结果\n    \n    # 构建查询结果Json\n    res_list = {}\n    count = 0\n    for i in res:\n        res_list['item' + str(count)] = {\n            'name': i[0],\n            'number': i[1],\n            'python': i[2],\n            'cpp': i[3],\n            'os': i[4],\n            'network': i[5],\n            'total': i[6],\n            'ave': [i[7]]\n        }\n        count += 1\n    return build_json(search_list=res_list), 200\n```\n\n# 0X0B 修改学生成绩\n修改学生成绩和添加成绩几乎是一样的操作，只有这么几点是不太一样的。添加信息时如果学号已经存在了那就不能再添加了，而修改的时候是如果学号不存在才错误；添加和修改的SQL不同。就没有别的区别了。\n``` python\n@app.route('/v1/student', methods=['PUT'])\ndef modify_student():\n    data = request.get_data().decode('utf-8')\n    json_data = json.loads(data)\n\n    # 从Json中获取数据\n    name = json_data['name']\n    number = str(json_data['number'])\n    python = json_data['python']\n    cpp = json_data['cpp']\n    os = json_data['os']\n    network = json_data['network']\n\n    # 查询数据库中是否有该学生的信息\n    sql = \"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    count = cursor.fetchall()[0][0]\n    database.commit()\n    if count < 1:  # 该学生信息不存在，返回404错误\n        return build_json(e_msg=\"student not found\"), 404\n\n    # 计算总分平均分\n    total = python + cpp + os + network\n    ave = total / 4\n\n    # 向数据库中插入数据\n    sql = \"UPDATE student.marks SET name=\\\"%s\\\", python=%s, cpp=%s, os=%s, network=%s, total=%s, ave=%s WHERE number=\\\"%s\\\"\" % (name, python, cpp, os, network, total, ave, number)\n    cursor.execute(sql)\n    database.commit()\n\n    # 请求成功，返回201状态码\n    return build_json(), 201\n```\n# 0X0C 搞定所有API\n现在就搞定了所有的API编写。现在我把所有代码贴上来，注意这段代码是用于Python3的。如果需要测试的话可以用Python自带的`requests`模块或者[Postman软件](https://www.getpostman.com)来测试该API。\n\n* 声明：代码最后一行的`app.run()`方法，现在是只在本地监听的。可以改成`app.run('0.0.0.0')`就对外部监听了。\n\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/3 11:34\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : 演示Python_API\n\nfrom flask import Flask, request\nimport json\nimport pymysql\nimport time\n\napp = Flask(__name__)\ndatabase = pymysql.connect(\"115.29.52.14\", \"shawn\", \"zhangHAO8\", \"student\")\ncursor = database.cursor()\n\ndef build_json(search_list=None, e_msg=None) -> str:\n    json_data = {'time': time.time(), 'search_list': search_list, 'e_msg': e_msg}\n    return json.dumps(json_data)\n\n@app.route('/', methods=['GET'])\ndef index():\n    return '<h1>hello,world</h1>'\n\n@app.route('/v1/student', methods=['POST']) # 路径为/v1/student，方法为POST\ndef add_student():\n    data = request.get_data().decode('utf-8')   # 将客户端传来的数据解码\n    json_data = json.loads(data)    # 将数据转为Json\n\n    # 从Json中获取数据\n    name = json_data['name']\n    number = str(json_data['number'])\n    python = json_data['python']\n    cpp = json_data['cpp']\n    os = json_data['os']\n    network = json_data['network']\n\n    # 计算总分平均分\n    total = python + cpp + os + network\n    ave = total / 4\n\n    # 查询数据库中是否有该学生的信息\n    sql = \"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    count = cursor.fetchall()[0][0]\n    database.commit()\n    if count >= 1:  # 该学生信息已经存在，返回400错误\n        return build_json(e_msg=\"student early exist\"), 400\n\n    # 向数据库中插入数据\n    sql = \"INSERT INTO student.marks (name, number, python, os, network, cpp, total, ave)\" \\\n          \"VALUES (\\\"%s\\\", \\\"%s\\\", %s, %s, %s, %s, %s, %s)\" % (name, number, python, os,\n                                                               network, cpp, total, ave)\n    cursor.execute(sql)\n    database.commit()\n\n    # 请求成功，返回201状态码\n    return build_json(), 201\n\n@app.route('/v1/student/number=<number>', methods=['DELETE'])  # 路径为/v1/student, 方法为DELETE\ndef delete_student(number):\n    if not number.isdigit():    # 判断number是否合法\n        return build_json(e_msg=\"number should be digit\"), 403\n    sql = \"DELETE FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    database.commit()\n    return build_json(), 204\n\n@app.route('/v1/student/sort_by=<sort_by>', methods=['GET'])\ndef show_student(sort_by):\n    # 判断排序的key是否正确\n    if sort_by not in ['python', 'cpp', 'os', 'network', 'total', 'ave']:\n        return build_json(e_msg=\"sort_by key not found\"), 404\n\n    # 构建查询SQL\n    sql = \"SELECT name, number, python, cpp, os, network, total, ave FROM student.marks ORDER BY %s DESC\" % sort_by\n    cursor.execute(sql)\n    database.commit()\n    res = cursor.fetchall()  # 获取查询结果\n\n    # 构建查询结果Json\n    res_list = {}\n    count = 0\n    for i in res:\n        res_list['item' + str(count)] = {\n            'name': i[0],\n            'number': i[1],\n            'python': i[2],\n            'cpp': i[3],\n            'os': i[4],\n            'network': i[5],\n            'total': i[6],\n            'ave': [i[7]]\n        }\n        count += 1\n    return build_json(search_list=res_list), 200\n\n@app.route('/v1/student', methods=['PUT'])\ndef modify_student():\n    data = request.get_data().decode('utf-8')\n    json_data = json.loads(data)\n\n    # 从Json中获取数据\n    name = json_data['name']\n    number = str(json_data['number'])\n    python = json_data['python']\n    cpp = json_data['cpp']\n    os = json_data['os']\n    network = json_data['network']\n\n    # 查询数据库中是否有该学生的信息\n    sql = \"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    count = cursor.fetchall()[0][0]\n    database.commit()\n    if count < 1:  # 该学生信息不存在，返回404错误\n        return build_json(e_msg=\"student not found\"), 404\n\n    # 计算总分平均分\n    total = python + cpp + os + network\n    ave = total / 4\n\n    # 向数据库中插入数据\n    sql = \"UPDATE student.marks SET name=\\\"%s\\\", python=%s, cpp=%s, os=%s, network=%s, total=%s, ave=%s WHERE number=\\\"%s\\\"\" \\\n          % (name, python, cpp, os, network, total, ave, number)\n    cursor.execute(sql)\n    database.commit()\n\n    # 请求成功，返回201状态码\n    return build_json(), 201\n\nwith app.test_request_context():\n    app.run()\n```\n\n\n\n","source":"_posts/flask_build_api.md","raw":"---\ntitle: 使用Flask设计实现一套API【成绩管理系统】\ndate: 2017-06-03 15:37\ntags:\n  - flask\n  - Python\n  - API\n---\n\n# 0X00 什么是REST风格的API\n众所周知http协议有`GET/PUT/POST/PATCH/DELETE`等众多方法，还能在提交请求和发送响应的时候携带数据。REST风格的API就是使用了这些HTTP特性的API。针对一个URL可以有多种动词(方法)来表示不同的操作。\n更多详细的内容可以点击查看阮一峰的博客：[理解RESTful架构](http://www.ruanyifeng.com/blog/2011/09/restful.html)\n\n# 0X01 怎么选用HTTP动词\n常见的动词有这五种，可以对应自己的需求选用\n\n| 动词 | 类似的SQL关键字 | 功能 |\n| ---- |: ---- :|: ---- :|\n| GET | SELECT | 获取资源 |\n| POST | CREATE | 创建资源 |\n| PUT | UPDATE | 更新资源（需要提供改变后的完整资源） |\n| PATCH | UPDATE | 更新资源（需要提供改变的属性） |\n| DELETE | DELETE | 删除资源 |\n\n# 0X02 设计URL\nREST风格的API因为可以用HTTP的动词，所以URL中是不带有动词的，如果我要获取某个学生的信息应该是`[GET] http://api.example.com/student/id=12345678900`。HTTP动词理论上是能满足各种情况下的需求的，所以URL中只应该出现名词而不应该出现动词。这里用阮一峰举的例子来说明一下\n\n| 动词 | 路径 | 功能 |\n| --|--- |\n| GET | /zoos | 列出所有动物园 |\n| POST | /zoos | 新建一个动物园 |\n| GET | /zoos/ID | 获取某个指定动物园的信息 |\n| PUT | /zoos/ID | 更新某个指定动物园的信息（提供该动物园的全部信息） |\n| PATCH | /zoos/ID | 更新某个指定动物园的信息（提供该动物园的部分信息） |\n| DELETE | /zoos/ID | 删除某个动物园 |\n| GET | /zoos/ID/animals | 列出某个指定动物园的所有动物 |\n| DELETE | /zoos/ID/animals/ID | 删除某个指定动物园的指定动物 |\n\n\n# 0X03 状态码\n\n状态码是HTTP中的一大优势，一个响应可以只靠状态码来判请求结果。这些是常见的状态码，自己设计API的时候要严格按照规范来设计状态码，可以提高代码和API的可读性和可理解性。\n\n| 状态码 | 信息 | 请求类型 | 含义 |\n| ------|------|----------|---- |\n| 200 | OK | [GET] | 服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 |\n| 201 | CREATED | [POST/PUT/PATCH] | 用户新建或修改数据成功。 |\n| 202 | Accepted | [*] | 表示一个请求已经进入后台排队（异步任务）。 |\n| 204 | NO CONTENT | [DELETE] | 用户删除数据成功。 |\n| 400 | INVALID REQUEST | [POST/PUT/PATCH] | 用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 |\n| 401 | Unauthorized | [*] | 表示用户没有权限（令牌、用户名、密码错误）。 |\n| 403 | Forbidden | [*] | 表示用户得到授权（与401错误相对），但是访问是被禁止的。 |\n| 404 | NOT FOUND | [*] | 用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 |\n| 406 | Not Acceptable | [GET] | 用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 |\n| 410 | Gone | [GET] | 用户请求的资源被永久删除，且不会再得到的。 |\n| 422 | Unprocesable entity | [POST/PUT/PATCH] | 当创建一个对象时，发生一个验证错误。 |\n| 500 | INTERNAL SERVER ERROR | [*] | 服务器发生错误，用户将无法判断发出的请求是否成功。 |\n\n# 0X04 如何用Python实现\nPython有大量第三方库可以实现REST风格的API，我这里选用的是相对轻量化的一个 [Flask](http://flask.pocoo.org/)。安装这个库最简单的方式还是用pip，根据环境变量的不同可能具体命令有所不同，在我的Linux上是用`pip3 install flask`就可以直接安装好的。\n安装好后进入Python的交互式界面输入`import flask`如果没有出现`Import Error`就是安装好了。\n\n# 0X05创建数据库和表\n现在可以开始设计API了。既然是成绩管理系统，那么首先就要创建一个数据库，我这里的数据库是用的MariaDB。\n\n| 列名 | 类型 | 含义 | 键 |\n| ---|------|--|--- |\n| id | int | 编号 | 主键 |\n| name | varchar(10) | 学生姓名| |\n| number | char(11) | 学号 |  |\n| python | float | Py成绩 | |\n| cpp | float | c++成绩 | |\n| os | float | 操作系统成绩 | |\n| network | float | 计算机网络成绩 | |\n| total | float | 总分 | |\n| ave | float | 平均分 | |\n\n\n# 0X06 创建Py脚本\n```python\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n# 从这里指定路径、方法、返回数据\n@app.route('/', methods=['GET'])\ndef index():\n    return '<h1>hello,world</h1>'\n\n\nwith app.test_request_context():\n    app.run()\n```\n这段代码写好之后运行起来会在本地监听5000端口(默认的)，然后当你用浏览器访问`http://localhost:5000/`的时候就像你返回`<h1>hello,world</h1>`，在浏览器页面下看到的就是一行大号的hello,world。因为在浏览器的地址栏输入URL按回车之后就是向那个URL发送了GET请求，也就正好调用了`index()`方法。\n\n这里先将与API无关的代码填好，下面开始正式完成各项功能。其实也就是连接了数据库而已\n```python\nfrom flask import Flask, request\nimport json\nimport pymysql\n\napp = Flask(__name__)\ndatabase = pymysql.connect(\"db_host\", \"db_username\", \"db_password\", \"db_name\")\ncursor = database.cursor()\n\n@app.route('/', methods=['GET'])\ndef index():\n    return '<h1>hello,world</h1>'\n\n\nwith app.test_request_context():\n    app.run()\n```\n\n# 0X07 实现一个构造返回Json数据的方法\n首先我们选择使用Json来作为数据传输格式，因为Json相对XML来说更轻量一点，现在也更流行。规定客户端每次请求会后服务器都会返回下面这样类型的Json数据\n```json\n{\n\t\"time\": \"unix_time\",\n    “e_msg\": \"error_message\",\n    \"search_list\": {\n    \t\"item0\": {\n        \t\"name\": \"name\",\n            \"number\": \"number\",\n            \"python\": \"marks\",\n            \"os\": \"marks\",\n            \"network\": \"marks\",\n            \"cpp\": \"marks\",\n            \"total\": \"marks\",\n            \"ave\": \"ave\"\n        },\"item1\" : {\n        \t\"name\": \"name\",\n            \"number\": \"number\",\n            \"python\": \"marks\",\n            \"os\": \"marks\",\n            \"network\": \"marks\",\n            \"cpp\": \"marks\",\n            \"total\": \"marks\",\n            \"ave\": \"ave\"\n        }\n    }\n}\n```\n\nAPI提供增删查改功能，增删改只通过状态码就可以判断执行结果，只有查询的时候才会需要从响应中获取数据。\n\n\n# 0X08 增加一条新的数据\n添加一条新数据按照标准应该使用动词`POST`，根据URL中只有名词不用动词只有名词的标准，隧将URL设计成`http://localhost/student`，再依据标准添加版本号上去，变成`http://localhost/v1/student`。\n具体功能代码实现如下，\n```python\n@app.route('/v1/student', methods=['POST']) # 路径为/v1/student，方法为POST\ndef add_student():\n    data = request.get_data().decode('utf-8')   # 将客户端传来的数据解码\n    json_data = json.loads(data)    # 将数据转为Json\n\n    # 从Json中获取数据\n    name = json_data['name']\n    number = str(json_data['number'])\n    python = json_data['python']\n    cpp = json_data['cpp']\n    os = json_data['os']\n    network = json_data['network']\n\n    # 计算总分平均分\n    total = python + cpp + os + network\n    ave = total / 4\n\n    # 查询数据库中是否有该学生的信息\n    sql = \"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    count = cursor.fetchall()[0][0]\n    database.commit()\n    if count >= 1:  # 该学生信息已经存在，返回400错误\n        return build_json(e_msg=\"student early exist\"), 400\n\n    # 向数据库中插入数据\n    sql = \"INSERT INTO student.marks (name, number, python, os, network, cpp, total, ave)\" \\\n          \"VALUES (\\\"%s\\\", \\\"%s\\\", %s, %s, %s, %s, %s, %s)\" % (name, number, python, os,\n                                                               network, cpp, total, ave)\n    cursor.execute(sql)\n    database.commit()\n\n    # 请求成功，返回201状态码\n    return build_json(), 201\n```\n\n# 0X09 删除已经存在的数据\n根据标准，将API设计成`DELETE`方法，URL为`http://localhost/v1/student/number=<number>`\n第一行的`number=<number>`可以将url中符合这种规范的匹配出来，配合方法定义时的参数，可以直接将url参数传入到方法体中。\n```python\n@app.route('/v1/student/number=<number>', methods=['DELETE'])  # 路径为/v1/student, 方法为DELETE\ndef delete_student(number):\n    if not number.isdigit():    # 判断number是否合法\n        return build_json(e_msg=\"number should be digit\"), 403\n    sql = \"DELETE FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    database.commit()\n    return build_json(), 204\n```\n\n# 0X0A 查询学生成绩\n根据标准，将API设计成`GET`方法，URL为`http://localhost/v1/student/sort_by=<sort_by>`。提供了`python/cpp/network/os/total/ave`排序方式，（其实是数据库实现的）。\n```python\n@app.route('/v1/student/sort_by=<sort_by>', methods=['GET'])\ndef show_student(sort_by):\n    # 判断排序的key是否正确\n    if sort_by not in ['python', 'cpp', 'os', 'network', 'total', 'ave']:\n        return build_json(e_msg=\"sort_by key not found\"), 404\n\n    # 构建查询SQL\n    sql = \"SELECT name, number, python, cpp, os, network, total, ave FROM student.marks ORDER BY %s DESC\" % sort_by\n    cursor.execute(sql)\n    database.commit()\n    res = cursor.fetchall() # 获取查询结果\n    \n    # 构建查询结果Json\n    res_list = {}\n    count = 0\n    for i in res:\n        res_list['item' + str(count)] = {\n            'name': i[0],\n            'number': i[1],\n            'python': i[2],\n            'cpp': i[3],\n            'os': i[4],\n            'network': i[5],\n            'total': i[6],\n            'ave': [i[7]]\n        }\n        count += 1\n    return build_json(search_list=res_list), 200\n```\n\n# 0X0B 修改学生成绩\n修改学生成绩和添加成绩几乎是一样的操作，只有这么几点是不太一样的。添加信息时如果学号已经存在了那就不能再添加了，而修改的时候是如果学号不存在才错误；添加和修改的SQL不同。就没有别的区别了。\n``` python\n@app.route('/v1/student', methods=['PUT'])\ndef modify_student():\n    data = request.get_data().decode('utf-8')\n    json_data = json.loads(data)\n\n    # 从Json中获取数据\n    name = json_data['name']\n    number = str(json_data['number'])\n    python = json_data['python']\n    cpp = json_data['cpp']\n    os = json_data['os']\n    network = json_data['network']\n\n    # 查询数据库中是否有该学生的信息\n    sql = \"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    count = cursor.fetchall()[0][0]\n    database.commit()\n    if count < 1:  # 该学生信息不存在，返回404错误\n        return build_json(e_msg=\"student not found\"), 404\n\n    # 计算总分平均分\n    total = python + cpp + os + network\n    ave = total / 4\n\n    # 向数据库中插入数据\n    sql = \"UPDATE student.marks SET name=\\\"%s\\\", python=%s, cpp=%s, os=%s, network=%s, total=%s, ave=%s WHERE number=\\\"%s\\\"\" % (name, python, cpp, os, network, total, ave, number)\n    cursor.execute(sql)\n    database.commit()\n\n    # 请求成功，返回201状态码\n    return build_json(), 201\n```\n# 0X0C 搞定所有API\n现在就搞定了所有的API编写。现在我把所有代码贴上来，注意这段代码是用于Python3的。如果需要测试的话可以用Python自带的`requests`模块或者[Postman软件](https://www.getpostman.com)来测试该API。\n\n* 声明：代码最后一行的`app.run()`方法，现在是只在本地监听的。可以改成`app.run('0.0.0.0')`就对外部监听了。\n\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/3 11:34\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : 演示Python_API\n\nfrom flask import Flask, request\nimport json\nimport pymysql\nimport time\n\napp = Flask(__name__)\ndatabase = pymysql.connect(\"115.29.52.14\", \"shawn\", \"zhangHAO8\", \"student\")\ncursor = database.cursor()\n\ndef build_json(search_list=None, e_msg=None) -> str:\n    json_data = {'time': time.time(), 'search_list': search_list, 'e_msg': e_msg}\n    return json.dumps(json_data)\n\n@app.route('/', methods=['GET'])\ndef index():\n    return '<h1>hello,world</h1>'\n\n@app.route('/v1/student', methods=['POST']) # 路径为/v1/student，方法为POST\ndef add_student():\n    data = request.get_data().decode('utf-8')   # 将客户端传来的数据解码\n    json_data = json.loads(data)    # 将数据转为Json\n\n    # 从Json中获取数据\n    name = json_data['name']\n    number = str(json_data['number'])\n    python = json_data['python']\n    cpp = json_data['cpp']\n    os = json_data['os']\n    network = json_data['network']\n\n    # 计算总分平均分\n    total = python + cpp + os + network\n    ave = total / 4\n\n    # 查询数据库中是否有该学生的信息\n    sql = \"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    count = cursor.fetchall()[0][0]\n    database.commit()\n    if count >= 1:  # 该学生信息已经存在，返回400错误\n        return build_json(e_msg=\"student early exist\"), 400\n\n    # 向数据库中插入数据\n    sql = \"INSERT INTO student.marks (name, number, python, os, network, cpp, total, ave)\" \\\n          \"VALUES (\\\"%s\\\", \\\"%s\\\", %s, %s, %s, %s, %s, %s)\" % (name, number, python, os,\n                                                               network, cpp, total, ave)\n    cursor.execute(sql)\n    database.commit()\n\n    # 请求成功，返回201状态码\n    return build_json(), 201\n\n@app.route('/v1/student/number=<number>', methods=['DELETE'])  # 路径为/v1/student, 方法为DELETE\ndef delete_student(number):\n    if not number.isdigit():    # 判断number是否合法\n        return build_json(e_msg=\"number should be digit\"), 403\n    sql = \"DELETE FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    database.commit()\n    return build_json(), 204\n\n@app.route('/v1/student/sort_by=<sort_by>', methods=['GET'])\ndef show_student(sort_by):\n    # 判断排序的key是否正确\n    if sort_by not in ['python', 'cpp', 'os', 'network', 'total', 'ave']:\n        return build_json(e_msg=\"sort_by key not found\"), 404\n\n    # 构建查询SQL\n    sql = \"SELECT name, number, python, cpp, os, network, total, ave FROM student.marks ORDER BY %s DESC\" % sort_by\n    cursor.execute(sql)\n    database.commit()\n    res = cursor.fetchall()  # 获取查询结果\n\n    # 构建查询结果Json\n    res_list = {}\n    count = 0\n    for i in res:\n        res_list['item' + str(count)] = {\n            'name': i[0],\n            'number': i[1],\n            'python': i[2],\n            'cpp': i[3],\n            'os': i[4],\n            'network': i[5],\n            'total': i[6],\n            'ave': [i[7]]\n        }\n        count += 1\n    return build_json(search_list=res_list), 200\n\n@app.route('/v1/student', methods=['PUT'])\ndef modify_student():\n    data = request.get_data().decode('utf-8')\n    json_data = json.loads(data)\n\n    # 从Json中获取数据\n    name = json_data['name']\n    number = str(json_data['number'])\n    python = json_data['python']\n    cpp = json_data['cpp']\n    os = json_data['os']\n    network = json_data['network']\n\n    # 查询数据库中是否有该学生的信息\n    sql = \"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\" % number\n    cursor.execute(sql)\n    count = cursor.fetchall()[0][0]\n    database.commit()\n    if count < 1:  # 该学生信息不存在，返回404错误\n        return build_json(e_msg=\"student not found\"), 404\n\n    # 计算总分平均分\n    total = python + cpp + os + network\n    ave = total / 4\n\n    # 向数据库中插入数据\n    sql = \"UPDATE student.marks SET name=\\\"%s\\\", python=%s, cpp=%s, os=%s, network=%s, total=%s, ave=%s WHERE number=\\\"%s\\\"\" \\\n          % (name, python, cpp, os, network, total, ave, number)\n    cursor.execute(sql)\n    database.commit()\n\n    # 请求成功，返回201状态码\n    return build_json(), 201\n\nwith app.test_request_context():\n    app.run()\n```\n\n\n\n","slug":"flask_build_api","published":1,"updated":"2017-09-02T14:40:23.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdx000ghnlp6izskfu0","content":"<h1 id=\"0X00-什么是REST风格的API\"><a href=\"#0X00-什么是REST风格的API\" class=\"headerlink\" title=\"0X00 什么是REST风格的API\"></a>0X00 什么是REST风格的API</h1><p>众所周知http协议有<code>GET/PUT/POST/PATCH/DELETE</code>等众多方法，还能在提交请求和发送响应的时候携带数据。REST风格的API就是使用了这些HTTP特性的API。针对一个URL可以有多种动词(方法)来表示不同的操作。<br>更多详细的内容可以点击查看阮一峰的博客：<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\" rel=\"external\">理解RESTful架构</a></p>\n<h1 id=\"0X01-怎么选用HTTP动词\"><a href=\"#0X01-怎么选用HTTP动词\" class=\"headerlink\" title=\"0X01 怎么选用HTTP动词\"></a>0X01 怎么选用HTTP动词</h1><p>常见的动词有这五种，可以对应自己的需求选用</p>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>类似的SQL关键字</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>SELECT</td>\n<td>获取资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>CREATE</td>\n<td>创建资源</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>UPDATE</td>\n<td>更新资源（需要提供改变后的完整资源）</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>UPDATE</td>\n<td>更新资源（需要提供改变的属性）</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>DELETE</td>\n<td>删除资源</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0X02-设计URL\"><a href=\"#0X02-设计URL\" class=\"headerlink\" title=\"0X02 设计URL\"></a>0X02 设计URL</h1><p>REST风格的API因为可以用HTTP的动词，所以URL中是不带有动词的，如果我要获取某个学生的信息应该是<code>[GET] http://api.example.com/student/id=12345678900</code>。HTTP动词理论上是能满足各种情况下的需求的，所以URL中只应该出现名词而不应该出现动词。这里用阮一峰举的例子来说明一下</p>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>路径</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>/zoos</td>\n<td>列出所有动物园</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/zoos</td>\n<td>新建一个动物园</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/zoos/ID</td>\n<td>获取某个指定动物园的信息</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>/zoos/ID</td>\n<td>更新某个指定动物园的信息（提供该动物园的全部信息）</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>/zoos/ID</td>\n<td>更新某个指定动物园的信息（提供该动物园的部分信息）</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/zoos/ID</td>\n<td>删除某个动物园</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/zoos/ID/animals</td>\n<td>列出某个指定动物园的所有动物</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/zoos/ID/animals/ID</td>\n<td>删除某个指定动物园的指定动物</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0X03-状态码\"><a href=\"#0X03-状态码\" class=\"headerlink\" title=\"0X03 状态码\"></a>0X03 状态码</h1><p>状态码是HTTP中的一大优势，一个响应可以只靠状态码来判请求结果。这些是常见的状态码，自己设计API的时候要严格按照规范来设计状态码，可以提高代码和API的可读性和可理解性。</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>信息</th>\n<th>请求类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>OK</td>\n<td>[GET]</td>\n<td>服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</td>\n</tr>\n<tr>\n<td>201</td>\n<td>CREATED</td>\n<td>[POST/PUT/PATCH]</td>\n<td>用户新建或修改数据成功。</td>\n</tr>\n<tr>\n<td>202</td>\n<td>Accepted</td>\n<td>[*]</td>\n<td>表示一个请求已经进入后台排队（异步任务）。</td>\n</tr>\n<tr>\n<td>204</td>\n<td>NO CONTENT</td>\n<td>[DELETE]</td>\n<td>用户删除数据成功。</td>\n</tr>\n<tr>\n<td>400</td>\n<td>INVALID REQUEST</td>\n<td>[POST/PUT/PATCH]</td>\n<td>用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unauthorized</td>\n<td>[*]</td>\n<td>表示用户没有权限（令牌、用户名、密码错误）。</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden</td>\n<td>[*]</td>\n<td>表示用户得到授权（与401错误相对），但是访问是被禁止的。</td>\n</tr>\n<tr>\n<td>404</td>\n<td>NOT FOUND</td>\n<td>[*]</td>\n<td>用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</td>\n</tr>\n<tr>\n<td>406</td>\n<td>Not Acceptable</td>\n<td>[GET]</td>\n<td>用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</td>\n</tr>\n<tr>\n<td>410</td>\n<td>Gone</td>\n<td>[GET]</td>\n<td>用户请求的资源被永久删除，且不会再得到的。</td>\n</tr>\n<tr>\n<td>422</td>\n<td>Unprocesable entity</td>\n<td>[POST/PUT/PATCH]</td>\n<td>当创建一个对象时，发生一个验证错误。</td>\n</tr>\n<tr>\n<td>500</td>\n<td>INTERNAL SERVER ERROR</td>\n<td>[*]</td>\n<td>服务器发生错误，用户将无法判断发出的请求是否成功。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0X04-如何用Python实现\"><a href=\"#0X04-如何用Python实现\" class=\"headerlink\" title=\"0X04 如何用Python实现\"></a>0X04 如何用Python实现</h1><p>Python有大量第三方库可以实现REST风格的API，我这里选用的是相对轻量化的一个 <a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"external\">Flask</a>。安装这个库最简单的方式还是用pip，根据环境变量的不同可能具体命令有所不同，在我的Linux上是用<code>pip3 install flask</code>就可以直接安装好的。<br>安装好后进入Python的交互式界面输入<code>import flask</code>如果没有出现<code>Import Error</code>就是安装好了。</p>\n<h1 id=\"0X05创建数据库和表\"><a href=\"#0X05创建数据库和表\" class=\"headerlink\" title=\"0X05创建数据库和表\"></a>0X05创建数据库和表</h1><p>现在可以开始设计API了。既然是成绩管理系统，那么首先就要创建一个数据库，我这里的数据库是用的MariaDB。</p>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>类型</th>\n<th>含义</th>\n<th>键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n<td>编号</td>\n<td>主键</td>\n</tr>\n<tr>\n<td>name</td>\n<td>varchar(10)</td>\n<td>学生姓名</td>\n<td></td>\n</tr>\n<tr>\n<td>number</td>\n<td>char(11)</td>\n<td>学号</td>\n<td></td>\n</tr>\n<tr>\n<td>python</td>\n<td>float</td>\n<td>Py成绩</td>\n<td></td>\n</tr>\n<tr>\n<td>cpp</td>\n<td>float</td>\n<td>c++成绩</td>\n<td></td>\n</tr>\n<tr>\n<td>os</td>\n<td>float</td>\n<td>操作系统成绩</td>\n<td></td>\n</tr>\n<tr>\n<td>network</td>\n<td>float</td>\n<td>计算机网络成绩</td>\n<td></td>\n</tr>\n<tr>\n<td>total</td>\n<td>float</td>\n<td>总分</td>\n<td></td>\n</tr>\n<tr>\n<td>ave</td>\n<td>float</td>\n<td>平均分</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0X06-创建Py脚本\"><a href=\"#0X06-创建Py脚本\" class=\"headerlink\" title=\"0X06 创建Py脚本\"></a>0X06 创建Py脚本</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 从这里指定路径、方法、返回数据</span></div><div class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello,world&lt;/h1&gt;'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> app.test_request_context():</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>这段代码写好之后运行起来会在本地监听5000端口(默认的)，然后当你用浏览器访问<code>http://localhost:5000/</code>的时候就像你返回<code>&lt;h1&gt;hello,world&lt;/h1&gt;</code>，在浏览器页面下看到的就是一行大号的hello,world。因为在浏览器的地址栏输入URL按回车之后就是向那个URL发送了GET请求，也就正好调用了<code>index()</code>方法。</p>\n<p>这里先将与API无关的代码填好，下面开始正式完成各项功能。其实也就是连接了数据库而已<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> pymysql</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\">database = pymysql.connect(<span class=\"string\">\"db_host\"</span>, <span class=\"string\">\"db_username\"</span>, <span class=\"string\">\"db_password\"</span>, <span class=\"string\">\"db_name\"</span>)</div><div class=\"line\">cursor = database.cursor()</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello,world&lt;/h1&gt;'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> app.test_request_context():</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-实现一个构造返回Json数据的方法\"><a href=\"#0X07-实现一个构造返回Json数据的方法\" class=\"headerlink\" title=\"0X07 实现一个构造返回Json数据的方法\"></a>0X07 实现一个构造返回Json数据的方法</h1><p>首先我们选择使用Json来作为数据传输格式，因为Json相对XML来说更轻量一点，现在也更流行。规定客户端每次请求会后服务器都会返回下面这样类型的Json数据<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"time\"</span>: <span class=\"string\">\"unix_time\"</span>,</div><div class=\"line\">    “e_msg\": \"error_message\",</div><div class=\"line\">    \"search_list\": &#123;</div><div class=\"line\">    \t\"item0\": &#123;</div><div class=\"line\">        \t\"name\": \"name\",</div><div class=\"line\">            \"number\": \"number\",</div><div class=\"line\">            \"python\": \"marks\",</div><div class=\"line\">            \"os\": \"marks\",</div><div class=\"line\">            \"network\": \"marks\",</div><div class=\"line\">            \"cpp\": \"marks\",</div><div class=\"line\">            \"total\": \"marks\",</div><div class=\"line\">            \"ave\": \"ave\"</div><div class=\"line\">        &#125;,\"item1\" : &#123;</div><div class=\"line\">        \t\"name\": \"name\",</div><div class=\"line\">            \"number\": \"number\",</div><div class=\"line\">            \"python\": \"marks\",</div><div class=\"line\">            \"os\": \"marks\",</div><div class=\"line\">            \"network\": \"marks\",</div><div class=\"line\">            \"cpp\": \"marks\",</div><div class=\"line\">            \"total\": \"marks\",</div><div class=\"line\">            \"ave\": \"ave\"</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>API提供增删查改功能，增删改只通过状态码就可以判断执行结果，只有查询的时候才会需要从响应中获取数据。</p>\n<h1 id=\"0X08-增加一条新的数据\"><a href=\"#0X08-增加一条新的数据\" class=\"headerlink\" title=\"0X08 增加一条新的数据\"></a>0X08 增加一条新的数据</h1><p>添加一条新数据按照标准应该使用动词<code>POST</code>，根据URL中只有名词不用动词只有名词的标准，隧将URL设计成<code>http://localhost/student</code>，再依据标准添加版本号上去，变成<code>http://localhost/v1/student</code>。<br>具体功能代码实现如下，<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/v1/student', methods=['POST']) # 路径为/v1/student，方法为POST</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = request.get_data().decode(<span class=\"string\">'utf-8'</span>)   <span class=\"comment\"># 将客户端传来的数据解码</span></div><div class=\"line\">    json_data = json.loads(data)    <span class=\"comment\"># 将数据转为Json</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 从Json中获取数据</span></div><div class=\"line\">    name = json_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">    number = str(json_data[<span class=\"string\">'number'</span>])</div><div class=\"line\">    python = json_data[<span class=\"string\">'python'</span>]</div><div class=\"line\">    cpp = json_data[<span class=\"string\">'cpp'</span>]</div><div class=\"line\">    os = json_data[<span class=\"string\">'os'</span>]</div><div class=\"line\">    network = json_data[<span class=\"string\">'network'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 计算总分平均分</span></div><div class=\"line\">    total = python + cpp + os + network</div><div class=\"line\">    ave = total / <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询数据库中是否有该学生的信息</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    count = cursor.fetchall()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">if</span> count &gt;= <span class=\"number\">1</span>:  <span class=\"comment\"># 该学生信息已经存在，返回400错误</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"student early exist\"</span>), <span class=\"number\">400</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 向数据库中插入数据</span></div><div class=\"line\">    sql = <span class=\"string\">\"INSERT INTO student.marks (name, number, python, os, network, cpp, total, ave)\"</span> \\</div><div class=\"line\">          <span class=\"string\">\"VALUES (\\\"%s\\\", \\\"%s\\\", %s, %s, %s, %s, %s, %s)\"</span> % (name, number, python, os,</div><div class=\"line\">                                                               network, cpp, total, ave)</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 请求成功，返回201状态码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">201</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X09-删除已经存在的数据\"><a href=\"#0X09-删除已经存在的数据\" class=\"headerlink\" title=\"0X09 删除已经存在的数据\"></a>0X09 删除已经存在的数据</h1><p>根据标准，将API设计成<code>DELETE</code>方法，URL为<code>http://localhost/v1/student/number=&lt;number&gt;</code><br>第一行的<code>number=&lt;number&gt;</code>可以将url中符合这种规范的匹配出来，配合方法定义时的参数，可以直接将url参数传入到方法体中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/v1/student/number=&lt;number&gt;', methods=['DELETE'])  # 路径为/v1/student, 方法为DELETE</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_student</span><span class=\"params\">(number)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> number.isdigit():    <span class=\"comment\"># 判断number是否合法</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"number should be digit\"</span>), <span class=\"number\">403</span></div><div class=\"line\">    sql = <span class=\"string\">\"DELETE FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">204</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0A-查询学生成绩\"><a href=\"#0X0A-查询学生成绩\" class=\"headerlink\" title=\"0X0A 查询学生成绩\"></a>0X0A 查询学生成绩</h1><p>根据标准，将API设计成<code>GET</code>方法，URL为<code>http://localhost/v1/student/sort_by=&lt;sort_by&gt;</code>。提供了<code>python/cpp/network/os/total/ave</code>排序方式，（其实是数据库实现的）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/v1/student/sort_by=&lt;sort_by&gt;', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_student</span><span class=\"params\">(sort_by)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 判断排序的key是否正确</span></div><div class=\"line\">    <span class=\"keyword\">if</span> sort_by <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">'python'</span>, <span class=\"string\">'cpp'</span>, <span class=\"string\">'os'</span>, <span class=\"string\">'network'</span>, <span class=\"string\">'total'</span>, <span class=\"string\">'ave'</span>]:</div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"sort_by key not found\"</span>), <span class=\"number\">404</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 构建查询SQL</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT name, number, python, cpp, os, network, total, ave FROM student.marks ORDER BY %s DESC\"</span> % sort_by</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\">    res = cursor.fetchall() <span class=\"comment\"># 获取查询结果</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 构建查询结果Json</span></div><div class=\"line\">    res_list = &#123;&#125;</div><div class=\"line\">    count = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">        res_list[<span class=\"string\">'item'</span> + str(count)] = &#123;</div><div class=\"line\">            <span class=\"string\">'name'</span>: i[<span class=\"number\">0</span>],</div><div class=\"line\">            <span class=\"string\">'number'</span>: i[<span class=\"number\">1</span>],</div><div class=\"line\">            <span class=\"string\">'python'</span>: i[<span class=\"number\">2</span>],</div><div class=\"line\">            <span class=\"string\">'cpp'</span>: i[<span class=\"number\">3</span>],</div><div class=\"line\">            <span class=\"string\">'os'</span>: i[<span class=\"number\">4</span>],</div><div class=\"line\">            <span class=\"string\">'network'</span>: i[<span class=\"number\">5</span>],</div><div class=\"line\">            <span class=\"string\">'total'</span>: i[<span class=\"number\">6</span>],</div><div class=\"line\">            <span class=\"string\">'ave'</span>: [i[<span class=\"number\">7</span>]]</div><div class=\"line\">        &#125;</div><div class=\"line\">        count += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(search_list=res_list), <span class=\"number\">200</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0B-修改学生成绩\"><a href=\"#0X0B-修改学生成绩\" class=\"headerlink\" title=\"0X0B 修改学生成绩\"></a>0X0B 修改学生成绩</h1><p>修改学生成绩和添加成绩几乎是一样的操作，只有这么几点是不太一样的。添加信息时如果学号已经存在了那就不能再添加了，而修改的时候是如果学号不存在才错误；添加和修改的SQL不同。就没有别的区别了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/v1/student', methods=['PUT'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = request.get_data().decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">    json_data = json.loads(data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 从Json中获取数据</span></div><div class=\"line\">    name = json_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">    number = str(json_data[<span class=\"string\">'number'</span>])</div><div class=\"line\">    python = json_data[<span class=\"string\">'python'</span>]</div><div class=\"line\">    cpp = json_data[<span class=\"string\">'cpp'</span>]</div><div class=\"line\">    os = json_data[<span class=\"string\">'os'</span>]</div><div class=\"line\">    network = json_data[<span class=\"string\">'network'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询数据库中是否有该学生的信息</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    count = cursor.fetchall()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">if</span> count &lt; <span class=\"number\">1</span>:  <span class=\"comment\"># 该学生信息不存在，返回404错误</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"student not found\"</span>), <span class=\"number\">404</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 计算总分平均分</span></div><div class=\"line\">    total = python + cpp + os + network</div><div class=\"line\">    ave = total / <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 向数据库中插入数据</span></div><div class=\"line\">    sql = <span class=\"string\">\"UPDATE student.marks SET name=\\\"%s\\\", python=%s, cpp=%s, os=%s, network=%s, total=%s, ave=%s WHERE number=\\\"%s\\\"\"</span> % (name, python, cpp, os, network, total, ave, number)</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 请求成功，返回201状态码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">201</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0C-搞定所有API\"><a href=\"#0X0C-搞定所有API\" class=\"headerlink\" title=\"0X0C 搞定所有API\"></a>0X0C 搞定所有API</h1><p>现在就搞定了所有的API编写。现在我把所有代码贴上来，注意这段代码是用于Python3的。如果需要测试的话可以用Python自带的<code>requests</code>模块或者<a href=\"https://www.getpostman.com\" target=\"_blank\" rel=\"external\">Postman软件</a>来测试该API。</p>\n<ul>\n<li>声明：代码最后一行的<code>app.run()</code>方法，现在是只在本地监听的。可以改成<code>app.run(&#39;0.0.0.0&#39;)</code>就对外部监听了。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/3 11:34</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : 演示Python_API</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> pymysql</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\">database = pymysql.connect(<span class=\"string\">\"115.29.52.14\"</span>, <span class=\"string\">\"shawn\"</span>, <span class=\"string\">\"zhangHAO8\"</span>, <span class=\"string\">\"student\"</span>)</div><div class=\"line\">cursor = database.cursor()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_json</span><span class=\"params\">(search_list=None, e_msg=None)</span> -&gt; str:</span></div><div class=\"line\">    json_data = &#123;<span class=\"string\">'time'</span>: time.time(), <span class=\"string\">'search_list'</span>: search_list, <span class=\"string\">'e_msg'</span>: e_msg&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> json.dumps(json_data)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello,world&lt;/h1&gt;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/v1/student', methods=['POST']) # 路径为/v1/student，方法为POST</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = request.get_data().decode(<span class=\"string\">'utf-8'</span>)   <span class=\"comment\"># 将客户端传来的数据解码</span></div><div class=\"line\">    json_data = json.loads(data)    <span class=\"comment\"># 将数据转为Json</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 从Json中获取数据</span></div><div class=\"line\">    name = json_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">    number = str(json_data[<span class=\"string\">'number'</span>])</div><div class=\"line\">    python = json_data[<span class=\"string\">'python'</span>]</div><div class=\"line\">    cpp = json_data[<span class=\"string\">'cpp'</span>]</div><div class=\"line\">    os = json_data[<span class=\"string\">'os'</span>]</div><div class=\"line\">    network = json_data[<span class=\"string\">'network'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 计算总分平均分</span></div><div class=\"line\">    total = python + cpp + os + network</div><div class=\"line\">    ave = total / <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询数据库中是否有该学生的信息</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    count = cursor.fetchall()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">if</span> count &gt;= <span class=\"number\">1</span>:  <span class=\"comment\"># 该学生信息已经存在，返回400错误</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"student early exist\"</span>), <span class=\"number\">400</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 向数据库中插入数据</span></div><div class=\"line\">    sql = <span class=\"string\">\"INSERT INTO student.marks (name, number, python, os, network, cpp, total, ave)\"</span> \\</div><div class=\"line\">          <span class=\"string\">\"VALUES (\\\"%s\\\", \\\"%s\\\", %s, %s, %s, %s, %s, %s)\"</span> % (name, number, python, os,</div><div class=\"line\">                                                               network, cpp, total, ave)</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 请求成功，返回201状态码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">201</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/v1/student/number=&lt;number&gt;', methods=['DELETE'])  # 路径为/v1/student, 方法为DELETE</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_student</span><span class=\"params\">(number)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> number.isdigit():    <span class=\"comment\"># 判断number是否合法</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"number should be digit\"</span>), <span class=\"number\">403</span></div><div class=\"line\">    sql = <span class=\"string\">\"DELETE FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">204</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/v1/student/sort_by=&lt;sort_by&gt;', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_student</span><span class=\"params\">(sort_by)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 判断排序的key是否正确</span></div><div class=\"line\">    <span class=\"keyword\">if</span> sort_by <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">'python'</span>, <span class=\"string\">'cpp'</span>, <span class=\"string\">'os'</span>, <span class=\"string\">'network'</span>, <span class=\"string\">'total'</span>, <span class=\"string\">'ave'</span>]:</div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"sort_by key not found\"</span>), <span class=\"number\">404</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 构建查询SQL</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT name, number, python, cpp, os, network, total, ave FROM student.marks ORDER BY %s DESC\"</span> % sort_by</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\">    res = cursor.fetchall()  <span class=\"comment\"># 获取查询结果</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 构建查询结果Json</span></div><div class=\"line\">    res_list = &#123;&#125;</div><div class=\"line\">    count = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">        res_list[<span class=\"string\">'item'</span> + str(count)] = &#123;</div><div class=\"line\">            <span class=\"string\">'name'</span>: i[<span class=\"number\">0</span>],</div><div class=\"line\">            <span class=\"string\">'number'</span>: i[<span class=\"number\">1</span>],</div><div class=\"line\">            <span class=\"string\">'python'</span>: i[<span class=\"number\">2</span>],</div><div class=\"line\">            <span class=\"string\">'cpp'</span>: i[<span class=\"number\">3</span>],</div><div class=\"line\">            <span class=\"string\">'os'</span>: i[<span class=\"number\">4</span>],</div><div class=\"line\">            <span class=\"string\">'network'</span>: i[<span class=\"number\">5</span>],</div><div class=\"line\">            <span class=\"string\">'total'</span>: i[<span class=\"number\">6</span>],</div><div class=\"line\">            <span class=\"string\">'ave'</span>: [i[<span class=\"number\">7</span>]]</div><div class=\"line\">        &#125;</div><div class=\"line\">        count += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(search_list=res_list), <span class=\"number\">200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/v1/student', methods=['PUT'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = request.get_data().decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">    json_data = json.loads(data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 从Json中获取数据</span></div><div class=\"line\">    name = json_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">    number = str(json_data[<span class=\"string\">'number'</span>])</div><div class=\"line\">    python = json_data[<span class=\"string\">'python'</span>]</div><div class=\"line\">    cpp = json_data[<span class=\"string\">'cpp'</span>]</div><div class=\"line\">    os = json_data[<span class=\"string\">'os'</span>]</div><div class=\"line\">    network = json_data[<span class=\"string\">'network'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询数据库中是否有该学生的信息</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    count = cursor.fetchall()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">if</span> count &lt; <span class=\"number\">1</span>:  <span class=\"comment\"># 该学生信息不存在，返回404错误</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"student not found\"</span>), <span class=\"number\">404</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 计算总分平均分</span></div><div class=\"line\">    total = python + cpp + os + network</div><div class=\"line\">    ave = total / <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 向数据库中插入数据</span></div><div class=\"line\">    sql = <span class=\"string\">\"UPDATE student.marks SET name=\\\"%s\\\", python=%s, cpp=%s, os=%s, network=%s, total=%s, ave=%s WHERE number=\\\"%s\\\"\"</span> \\</div><div class=\"line\">          % (name, python, cpp, os, network, total, ave, number)</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 请求成功，返回201状态码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">201</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> app.test_request_context():</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-什么是REST风格的API\"><a href=\"#0X00-什么是REST风格的API\" class=\"headerlink\" title=\"0X00 什么是REST风格的API\"></a>0X00 什么是REST风格的API</h1><p>众所周知http协议有<code>GET/PUT/POST/PATCH/DELETE</code>等众多方法，还能在提交请求和发送响应的时候携带数据。REST风格的API就是使用了这些HTTP特性的API。针对一个URL可以有多种动词(方法)来表示不同的操作。<br>更多详细的内容可以点击查看阮一峰的博客：<a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\" target=\"_blank\" rel=\"external\">理解RESTful架构</a></p>\n<h1 id=\"0X01-怎么选用HTTP动词\"><a href=\"#0X01-怎么选用HTTP动词\" class=\"headerlink\" title=\"0X01 怎么选用HTTP动词\"></a>0X01 怎么选用HTTP动词</h1><p>常见的动词有这五种，可以对应自己的需求选用</p>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>类似的SQL关键字</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>SELECT</td>\n<td>获取资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>CREATE</td>\n<td>创建资源</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>UPDATE</td>\n<td>更新资源（需要提供改变后的完整资源）</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>UPDATE</td>\n<td>更新资源（需要提供改变的属性）</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>DELETE</td>\n<td>删除资源</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0X02-设计URL\"><a href=\"#0X02-设计URL\" class=\"headerlink\" title=\"0X02 设计URL\"></a>0X02 设计URL</h1><p>REST风格的API因为可以用HTTP的动词，所以URL中是不带有动词的，如果我要获取某个学生的信息应该是<code>[GET] http://api.example.com/student/id=12345678900</code>。HTTP动词理论上是能满足各种情况下的需求的，所以URL中只应该出现名词而不应该出现动词。这里用阮一峰举的例子来说明一下</p>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>路径</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>/zoos</td>\n<td>列出所有动物园</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>/zoos</td>\n<td>新建一个动物园</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/zoos/ID</td>\n<td>获取某个指定动物园的信息</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>/zoos/ID</td>\n<td>更新某个指定动物园的信息（提供该动物园的全部信息）</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>/zoos/ID</td>\n<td>更新某个指定动物园的信息（提供该动物园的部分信息）</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/zoos/ID</td>\n<td>删除某个动物园</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>/zoos/ID/animals</td>\n<td>列出某个指定动物园的所有动物</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>/zoos/ID/animals/ID</td>\n<td>删除某个指定动物园的指定动物</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0X03-状态码\"><a href=\"#0X03-状态码\" class=\"headerlink\" title=\"0X03 状态码\"></a>0X03 状态码</h1><p>状态码是HTTP中的一大优势，一个响应可以只靠状态码来判请求结果。这些是常见的状态码，自己设计API的时候要严格按照规范来设计状态码，可以提高代码和API的可读性和可理解性。</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>信息</th>\n<th>请求类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>OK</td>\n<td>[GET]</td>\n<td>服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</td>\n</tr>\n<tr>\n<td>201</td>\n<td>CREATED</td>\n<td>[POST/PUT/PATCH]</td>\n<td>用户新建或修改数据成功。</td>\n</tr>\n<tr>\n<td>202</td>\n<td>Accepted</td>\n<td>[*]</td>\n<td>表示一个请求已经进入后台排队（异步任务）。</td>\n</tr>\n<tr>\n<td>204</td>\n<td>NO CONTENT</td>\n<td>[DELETE]</td>\n<td>用户删除数据成功。</td>\n</tr>\n<tr>\n<td>400</td>\n<td>INVALID REQUEST</td>\n<td>[POST/PUT/PATCH]</td>\n<td>用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unauthorized</td>\n<td>[*]</td>\n<td>表示用户没有权限（令牌、用户名、密码错误）。</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden</td>\n<td>[*]</td>\n<td>表示用户得到授权（与401错误相对），但是访问是被禁止的。</td>\n</tr>\n<tr>\n<td>404</td>\n<td>NOT FOUND</td>\n<td>[*]</td>\n<td>用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</td>\n</tr>\n<tr>\n<td>406</td>\n<td>Not Acceptable</td>\n<td>[GET]</td>\n<td>用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</td>\n</tr>\n<tr>\n<td>410</td>\n<td>Gone</td>\n<td>[GET]</td>\n<td>用户请求的资源被永久删除，且不会再得到的。</td>\n</tr>\n<tr>\n<td>422</td>\n<td>Unprocesable entity</td>\n<td>[POST/PUT/PATCH]</td>\n<td>当创建一个对象时，发生一个验证错误。</td>\n</tr>\n<tr>\n<td>500</td>\n<td>INTERNAL SERVER ERROR</td>\n<td>[*]</td>\n<td>服务器发生错误，用户将无法判断发出的请求是否成功。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0X04-如何用Python实现\"><a href=\"#0X04-如何用Python实现\" class=\"headerlink\" title=\"0X04 如何用Python实现\"></a>0X04 如何用Python实现</h1><p>Python有大量第三方库可以实现REST风格的API，我这里选用的是相对轻量化的一个 <a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"external\">Flask</a>。安装这个库最简单的方式还是用pip，根据环境变量的不同可能具体命令有所不同，在我的Linux上是用<code>pip3 install flask</code>就可以直接安装好的。<br>安装好后进入Python的交互式界面输入<code>import flask</code>如果没有出现<code>Import Error</code>就是安装好了。</p>\n<h1 id=\"0X05创建数据库和表\"><a href=\"#0X05创建数据库和表\" class=\"headerlink\" title=\"0X05创建数据库和表\"></a>0X05创建数据库和表</h1><p>现在可以开始设计API了。既然是成绩管理系统，那么首先就要创建一个数据库，我这里的数据库是用的MariaDB。</p>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>类型</th>\n<th>含义</th>\n<th>键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n<td>编号</td>\n<td>主键</td>\n</tr>\n<tr>\n<td>name</td>\n<td>varchar(10)</td>\n<td>学生姓名</td>\n<td></td>\n</tr>\n<tr>\n<td>number</td>\n<td>char(11)</td>\n<td>学号</td>\n<td></td>\n</tr>\n<tr>\n<td>python</td>\n<td>float</td>\n<td>Py成绩</td>\n<td></td>\n</tr>\n<tr>\n<td>cpp</td>\n<td>float</td>\n<td>c++成绩</td>\n<td></td>\n</tr>\n<tr>\n<td>os</td>\n<td>float</td>\n<td>操作系统成绩</td>\n<td></td>\n</tr>\n<tr>\n<td>network</td>\n<td>float</td>\n<td>计算机网络成绩</td>\n<td></td>\n</tr>\n<tr>\n<td>total</td>\n<td>float</td>\n<td>总分</td>\n<td></td>\n</tr>\n<tr>\n<td>ave</td>\n<td>float</td>\n<td>平均分</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0X06-创建Py脚本\"><a href=\"#0X06-创建Py脚本\" class=\"headerlink\" title=\"0X06 创建Py脚本\"></a>0X06 创建Py脚本</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 从这里指定路径、方法、返回数据</span></div><div class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello,world&lt;/h1&gt;'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> app.test_request_context():</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>这段代码写好之后运行起来会在本地监听5000端口(默认的)，然后当你用浏览器访问<code>http://localhost:5000/</code>的时候就像你返回<code>&lt;h1&gt;hello,world&lt;/h1&gt;</code>，在浏览器页面下看到的就是一行大号的hello,world。因为在浏览器的地址栏输入URL按回车之后就是向那个URL发送了GET请求，也就正好调用了<code>index()</code>方法。</p>\n<p>这里先将与API无关的代码填好，下面开始正式完成各项功能。其实也就是连接了数据库而已<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> pymysql</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\">database = pymysql.connect(<span class=\"string\">\"db_host\"</span>, <span class=\"string\">\"db_username\"</span>, <span class=\"string\">\"db_password\"</span>, <span class=\"string\">\"db_name\"</span>)</div><div class=\"line\">cursor = database.cursor()</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello,world&lt;/h1&gt;'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> app.test_request_context():</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-实现一个构造返回Json数据的方法\"><a href=\"#0X07-实现一个构造返回Json数据的方法\" class=\"headerlink\" title=\"0X07 实现一个构造返回Json数据的方法\"></a>0X07 实现一个构造返回Json数据的方法</h1><p>首先我们选择使用Json来作为数据传输格式，因为Json相对XML来说更轻量一点，现在也更流行。规定客户端每次请求会后服务器都会返回下面这样类型的Json数据<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"time\"</span>: <span class=\"string\">\"unix_time\"</span>,</div><div class=\"line\">    “e_msg\": \"error_message\",</div><div class=\"line\">    \"search_list\": &#123;</div><div class=\"line\">    \t\"item0\": &#123;</div><div class=\"line\">        \t\"name\": \"name\",</div><div class=\"line\">            \"number\": \"number\",</div><div class=\"line\">            \"python\": \"marks\",</div><div class=\"line\">            \"os\": \"marks\",</div><div class=\"line\">            \"network\": \"marks\",</div><div class=\"line\">            \"cpp\": \"marks\",</div><div class=\"line\">            \"total\": \"marks\",</div><div class=\"line\">            \"ave\": \"ave\"</div><div class=\"line\">        &#125;,\"item1\" : &#123;</div><div class=\"line\">        \t\"name\": \"name\",</div><div class=\"line\">            \"number\": \"number\",</div><div class=\"line\">            \"python\": \"marks\",</div><div class=\"line\">            \"os\": \"marks\",</div><div class=\"line\">            \"network\": \"marks\",</div><div class=\"line\">            \"cpp\": \"marks\",</div><div class=\"line\">            \"total\": \"marks\",</div><div class=\"line\">            \"ave\": \"ave\"</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>API提供增删查改功能，增删改只通过状态码就可以判断执行结果，只有查询的时候才会需要从响应中获取数据。</p>\n<h1 id=\"0X08-增加一条新的数据\"><a href=\"#0X08-增加一条新的数据\" class=\"headerlink\" title=\"0X08 增加一条新的数据\"></a>0X08 增加一条新的数据</h1><p>添加一条新数据按照标准应该使用动词<code>POST</code>，根据URL中只有名词不用动词只有名词的标准，隧将URL设计成<code>http://localhost/student</code>，再依据标准添加版本号上去，变成<code>http://localhost/v1/student</code>。<br>具体功能代码实现如下，<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/v1/student', methods=['POST']) # 路径为/v1/student，方法为POST</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = request.get_data().decode(<span class=\"string\">'utf-8'</span>)   <span class=\"comment\"># 将客户端传来的数据解码</span></div><div class=\"line\">    json_data = json.loads(data)    <span class=\"comment\"># 将数据转为Json</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 从Json中获取数据</span></div><div class=\"line\">    name = json_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">    number = str(json_data[<span class=\"string\">'number'</span>])</div><div class=\"line\">    python = json_data[<span class=\"string\">'python'</span>]</div><div class=\"line\">    cpp = json_data[<span class=\"string\">'cpp'</span>]</div><div class=\"line\">    os = json_data[<span class=\"string\">'os'</span>]</div><div class=\"line\">    network = json_data[<span class=\"string\">'network'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 计算总分平均分</span></div><div class=\"line\">    total = python + cpp + os + network</div><div class=\"line\">    ave = total / <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询数据库中是否有该学生的信息</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    count = cursor.fetchall()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">if</span> count &gt;= <span class=\"number\">1</span>:  <span class=\"comment\"># 该学生信息已经存在，返回400错误</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"student early exist\"</span>), <span class=\"number\">400</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 向数据库中插入数据</span></div><div class=\"line\">    sql = <span class=\"string\">\"INSERT INTO student.marks (name, number, python, os, network, cpp, total, ave)\"</span> \\</div><div class=\"line\">          <span class=\"string\">\"VALUES (\\\"%s\\\", \\\"%s\\\", %s, %s, %s, %s, %s, %s)\"</span> % (name, number, python, os,</div><div class=\"line\">                                                               network, cpp, total, ave)</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 请求成功，返回201状态码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">201</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X09-删除已经存在的数据\"><a href=\"#0X09-删除已经存在的数据\" class=\"headerlink\" title=\"0X09 删除已经存在的数据\"></a>0X09 删除已经存在的数据</h1><p>根据标准，将API设计成<code>DELETE</code>方法，URL为<code>http://localhost/v1/student/number=&lt;number&gt;</code><br>第一行的<code>number=&lt;number&gt;</code>可以将url中符合这种规范的匹配出来，配合方法定义时的参数，可以直接将url参数传入到方法体中。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/v1/student/number=&lt;number&gt;', methods=['DELETE'])  # 路径为/v1/student, 方法为DELETE</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_student</span><span class=\"params\">(number)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> number.isdigit():    <span class=\"comment\"># 判断number是否合法</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"number should be digit\"</span>), <span class=\"number\">403</span></div><div class=\"line\">    sql = <span class=\"string\">\"DELETE FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">204</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0A-查询学生成绩\"><a href=\"#0X0A-查询学生成绩\" class=\"headerlink\" title=\"0X0A 查询学生成绩\"></a>0X0A 查询学生成绩</h1><p>根据标准，将API设计成<code>GET</code>方法，URL为<code>http://localhost/v1/student/sort_by=&lt;sort_by&gt;</code>。提供了<code>python/cpp/network/os/total/ave</code>排序方式，（其实是数据库实现的）。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/v1/student/sort_by=&lt;sort_by&gt;', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_student</span><span class=\"params\">(sort_by)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 判断排序的key是否正确</span></div><div class=\"line\">    <span class=\"keyword\">if</span> sort_by <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">'python'</span>, <span class=\"string\">'cpp'</span>, <span class=\"string\">'os'</span>, <span class=\"string\">'network'</span>, <span class=\"string\">'total'</span>, <span class=\"string\">'ave'</span>]:</div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"sort_by key not found\"</span>), <span class=\"number\">404</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 构建查询SQL</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT name, number, python, cpp, os, network, total, ave FROM student.marks ORDER BY %s DESC\"</span> % sort_by</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\">    res = cursor.fetchall() <span class=\"comment\"># 获取查询结果</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 构建查询结果Json</span></div><div class=\"line\">    res_list = &#123;&#125;</div><div class=\"line\">    count = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">        res_list[<span class=\"string\">'item'</span> + str(count)] = &#123;</div><div class=\"line\">            <span class=\"string\">'name'</span>: i[<span class=\"number\">0</span>],</div><div class=\"line\">            <span class=\"string\">'number'</span>: i[<span class=\"number\">1</span>],</div><div class=\"line\">            <span class=\"string\">'python'</span>: i[<span class=\"number\">2</span>],</div><div class=\"line\">            <span class=\"string\">'cpp'</span>: i[<span class=\"number\">3</span>],</div><div class=\"line\">            <span class=\"string\">'os'</span>: i[<span class=\"number\">4</span>],</div><div class=\"line\">            <span class=\"string\">'network'</span>: i[<span class=\"number\">5</span>],</div><div class=\"line\">            <span class=\"string\">'total'</span>: i[<span class=\"number\">6</span>],</div><div class=\"line\">            <span class=\"string\">'ave'</span>: [i[<span class=\"number\">7</span>]]</div><div class=\"line\">        &#125;</div><div class=\"line\">        count += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(search_list=res_list), <span class=\"number\">200</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0B-修改学生成绩\"><a href=\"#0X0B-修改学生成绩\" class=\"headerlink\" title=\"0X0B 修改学生成绩\"></a>0X0B 修改学生成绩</h1><p>修改学生成绩和添加成绩几乎是一样的操作，只有这么几点是不太一样的。添加信息时如果学号已经存在了那就不能再添加了，而修改的时候是如果学号不存在才错误；添加和修改的SQL不同。就没有别的区别了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@app.route('/v1/student', methods=['PUT'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = request.get_data().decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">    json_data = json.loads(data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 从Json中获取数据</span></div><div class=\"line\">    name = json_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">    number = str(json_data[<span class=\"string\">'number'</span>])</div><div class=\"line\">    python = json_data[<span class=\"string\">'python'</span>]</div><div class=\"line\">    cpp = json_data[<span class=\"string\">'cpp'</span>]</div><div class=\"line\">    os = json_data[<span class=\"string\">'os'</span>]</div><div class=\"line\">    network = json_data[<span class=\"string\">'network'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询数据库中是否有该学生的信息</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    count = cursor.fetchall()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">if</span> count &lt; <span class=\"number\">1</span>:  <span class=\"comment\"># 该学生信息不存在，返回404错误</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"student not found\"</span>), <span class=\"number\">404</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 计算总分平均分</span></div><div class=\"line\">    total = python + cpp + os + network</div><div class=\"line\">    ave = total / <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 向数据库中插入数据</span></div><div class=\"line\">    sql = <span class=\"string\">\"UPDATE student.marks SET name=\\\"%s\\\", python=%s, cpp=%s, os=%s, network=%s, total=%s, ave=%s WHERE number=\\\"%s\\\"\"</span> % (name, python, cpp, os, network, total, ave, number)</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 请求成功，返回201状态码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">201</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0C-搞定所有API\"><a href=\"#0X0C-搞定所有API\" class=\"headerlink\" title=\"0X0C 搞定所有API\"></a>0X0C 搞定所有API</h1><p>现在就搞定了所有的API编写。现在我把所有代码贴上来，注意这段代码是用于Python3的。如果需要测试的话可以用Python自带的<code>requests</code>模块或者<a href=\"https://www.getpostman.com\" target=\"_blank\" rel=\"external\">Postman软件</a>来测试该API。</p>\n<ul>\n<li>声明：代码最后一行的<code>app.run()</code>方法，现在是只在本地监听的。可以改成<code>app.run(&#39;0.0.0.0&#39;)</code>就对外部监听了。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/3 11:34</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : 演示Python_API</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> pymysql</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\">database = pymysql.connect(<span class=\"string\">\"115.29.52.14\"</span>, <span class=\"string\">\"shawn\"</span>, <span class=\"string\">\"zhangHAO8\"</span>, <span class=\"string\">\"student\"</span>)</div><div class=\"line\">cursor = database.cursor()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_json</span><span class=\"params\">(search_list=None, e_msg=None)</span> -&gt; str:</span></div><div class=\"line\">    json_data = &#123;<span class=\"string\">'time'</span>: time.time(), <span class=\"string\">'search_list'</span>: search_list, <span class=\"string\">'e_msg'</span>: e_msg&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> json.dumps(json_data)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'&lt;h1&gt;hello,world&lt;/h1&gt;'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/v1/student', methods=['POST']) # 路径为/v1/student，方法为POST</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = request.get_data().decode(<span class=\"string\">'utf-8'</span>)   <span class=\"comment\"># 将客户端传来的数据解码</span></div><div class=\"line\">    json_data = json.loads(data)    <span class=\"comment\"># 将数据转为Json</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 从Json中获取数据</span></div><div class=\"line\">    name = json_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">    number = str(json_data[<span class=\"string\">'number'</span>])</div><div class=\"line\">    python = json_data[<span class=\"string\">'python'</span>]</div><div class=\"line\">    cpp = json_data[<span class=\"string\">'cpp'</span>]</div><div class=\"line\">    os = json_data[<span class=\"string\">'os'</span>]</div><div class=\"line\">    network = json_data[<span class=\"string\">'network'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 计算总分平均分</span></div><div class=\"line\">    total = python + cpp + os + network</div><div class=\"line\">    ave = total / <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询数据库中是否有该学生的信息</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    count = cursor.fetchall()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">if</span> count &gt;= <span class=\"number\">1</span>:  <span class=\"comment\"># 该学生信息已经存在，返回400错误</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"student early exist\"</span>), <span class=\"number\">400</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 向数据库中插入数据</span></div><div class=\"line\">    sql = <span class=\"string\">\"INSERT INTO student.marks (name, number, python, os, network, cpp, total, ave)\"</span> \\</div><div class=\"line\">          <span class=\"string\">\"VALUES (\\\"%s\\\", \\\"%s\\\", %s, %s, %s, %s, %s, %s)\"</span> % (name, number, python, os,</div><div class=\"line\">                                                               network, cpp, total, ave)</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 请求成功，返回201状态码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">201</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/v1/student/number=&lt;number&gt;', methods=['DELETE'])  # 路径为/v1/student, 方法为DELETE</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_student</span><span class=\"params\">(number)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> number.isdigit():    <span class=\"comment\"># 判断number是否合法</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"number should be digit\"</span>), <span class=\"number\">403</span></div><div class=\"line\">    sql = <span class=\"string\">\"DELETE FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">204</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/v1/student/sort_by=&lt;sort_by&gt;', methods=['GET'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_student</span><span class=\"params\">(sort_by)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 判断排序的key是否正确</span></div><div class=\"line\">    <span class=\"keyword\">if</span> sort_by <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> [<span class=\"string\">'python'</span>, <span class=\"string\">'cpp'</span>, <span class=\"string\">'os'</span>, <span class=\"string\">'network'</span>, <span class=\"string\">'total'</span>, <span class=\"string\">'ave'</span>]:</div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"sort_by key not found\"</span>), <span class=\"number\">404</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 构建查询SQL</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT name, number, python, cpp, os, network, total, ave FROM student.marks ORDER BY %s DESC\"</span> % sort_by</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\">    res = cursor.fetchall()  <span class=\"comment\"># 获取查询结果</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 构建查询结果Json</span></div><div class=\"line\">    res_list = &#123;&#125;</div><div class=\"line\">    count = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</div><div class=\"line\">        res_list[<span class=\"string\">'item'</span> + str(count)] = &#123;</div><div class=\"line\">            <span class=\"string\">'name'</span>: i[<span class=\"number\">0</span>],</div><div class=\"line\">            <span class=\"string\">'number'</span>: i[<span class=\"number\">1</span>],</div><div class=\"line\">            <span class=\"string\">'python'</span>: i[<span class=\"number\">2</span>],</div><div class=\"line\">            <span class=\"string\">'cpp'</span>: i[<span class=\"number\">3</span>],</div><div class=\"line\">            <span class=\"string\">'os'</span>: i[<span class=\"number\">4</span>],</div><div class=\"line\">            <span class=\"string\">'network'</span>: i[<span class=\"number\">5</span>],</div><div class=\"line\">            <span class=\"string\">'total'</span>: i[<span class=\"number\">6</span>],</div><div class=\"line\">            <span class=\"string\">'ave'</span>: [i[<span class=\"number\">7</span>]]</div><div class=\"line\">        &#125;</div><div class=\"line\">        count += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(search_list=res_list), <span class=\"number\">200</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@app.route('/v1/student', methods=['PUT'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = request.get_data().decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">    json_data = json.loads(data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 从Json中获取数据</span></div><div class=\"line\">    name = json_data[<span class=\"string\">'name'</span>]</div><div class=\"line\">    number = str(json_data[<span class=\"string\">'number'</span>])</div><div class=\"line\">    python = json_data[<span class=\"string\">'python'</span>]</div><div class=\"line\">    cpp = json_data[<span class=\"string\">'cpp'</span>]</div><div class=\"line\">    os = json_data[<span class=\"string\">'os'</span>]</div><div class=\"line\">    network = json_data[<span class=\"string\">'network'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 查询数据库中是否有该学生的信息</span></div><div class=\"line\">    sql = <span class=\"string\">\"SELECT COUNT(*) FROM student.marks WHERE number=\\\"%s\\\"\"</span> % number</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    count = cursor.fetchall()[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">    database.commit()</div><div class=\"line\">    <span class=\"keyword\">if</span> count &lt; <span class=\"number\">1</span>:  <span class=\"comment\"># 该学生信息不存在，返回404错误</span></div><div class=\"line\">        <span class=\"keyword\">return</span> build_json(e_msg=<span class=\"string\">\"student not found\"</span>), <span class=\"number\">404</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 计算总分平均分</span></div><div class=\"line\">    total = python + cpp + os + network</div><div class=\"line\">    ave = total / <span class=\"number\">4</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 向数据库中插入数据</span></div><div class=\"line\">    sql = <span class=\"string\">\"UPDATE student.marks SET name=\\\"%s\\\", python=%s, cpp=%s, os=%s, network=%s, total=%s, ave=%s WHERE number=\\\"%s\\\"\"</span> \\</div><div class=\"line\">          % (name, python, cpp, os, network, total, ave, number)</div><div class=\"line\">    cursor.execute(sql)</div><div class=\"line\">    database.commit()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 请求成功，返回201状态码</span></div><div class=\"line\">    <span class=\"keyword\">return</span> build_json(), <span class=\"number\">201</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> app.test_request_context():</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n"},{"title":"Java中的字符串","date":"2017-02-13T06:48:00.000Z","_content":"\n> String类中每一个看起来会修改String值得方法，实际上都是创建了一个全新的String对象，以包含修改后的字符串内容。而最初的String对象则丝毫未动。   ---《Java编程思想》第13章\n\n# 0X00 String常量池\n如果使用常用的方式定义两个内容完全一样的字符串，那么Java使用常量的方式，也就是说第二个字符串并没有生成一个对象而是引用了之前的字符串，导致他们的本质是一样的，所以当使用`==`判断两个字符串对象是否是同一个对象的时候，会显示是同一个对象。但是如果我们每次声明一个字符串的时候使用`new String()`的方式，则会每次创建一个String对象，两者就不是同一个对象了。\n```Java\npublic class Main {\n    public static void main(String args[]) {\n\t\t// 两个相同的字符串引用自同一处\n        String str1 = \"hello,world\";\n        String str2 = \"hello,world\";\n        System.out.println(str1 == str2);\n\n\t\t// 这两个字符串就是每次生成一个新对象\n        String str3 = new String(\"hello,world\");\n        String str4 = new String(\"hello,world\");\n        System.out.println(str3 == str4);\n    }\n}\n```\n\n# 0X01 StringBuilder\n字符串的拼接在Java中非常方便，但常用的使用`+`来拼接字符串效率很低，在需要拼接的次数不是很多的时候不会影响多少效率，但当需要拼接的字符串数量很多的时候就需要使用`StringBuilder`来拼接。该类中有一个`append()`的方法，就是将一个字符串连接到本对象的字符串后面。下面我们来对比一下这两个拼接方法的速度差异。\n```Java\npublic class Main {\n    public static void main(String args[]) {\n\n        String string = \"hello,world\";\n        long start = new Date().getTime();\n\t\t// 循环连接1W次\n        for (int i = 0; i < 10000; i++){\n            string += \"hello,world\";\n        }\n\n        long middle = new Date().getTime();\n\n        StringBuilder stringBuilder = new StringBuilder(\"hello,world\");\n\t\t// 循环连接1000W次\n        for (int i = 0; i < 10000000; i++){\n            stringBuilder.append(\"hello,world\");\n        }\n        long end = new Date().getTime();\n\n        System.out.println(\"使用+连接耗时: \" + (middle - start));\n        System.out.println(\"使用StringBuilder连接耗时: \" + (end - middle));\n    }\n}\n```\n执行结果如下\n```bash\n使用+连接耗时: 850\n使用StringBuilder连接耗时: 263\n```\n速度差异很明显，使用加号连接只连接一万次就耗时800多毫秒，而使用StringBuilder即使连接一千万次也只需要200多毫秒。\n\n该类中还有其他的方法`insert()指定位置插入` / `replace()分片赋值` / `substring()提取子字符串` / `reverse()翻转字符串` / `toString()返回字符串`\n使用演示\n```Java\npublic class Main {\n    public static void main(String args[]) {\n        StringBuilder stringBuilder = new StringBuilder(\"0123456789\");\n        stringBuilder.insert(5, \"hello,world\");\t// 插入字符串\n        System.out.println(stringBuilder.toString());\n\n        stringBuilder = new StringBuilder(\"0123456789\");\n        stringBuilder.replace(3, 5, \"hello,world\");\t// 分片赋值\n        System.out.println(stringBuilder.toString());\n\n        stringBuilder = new StringBuilder(\"0123456789\");\n        stringBuilder.substring(3, 5);\t// 提取子字符串\n        System.out.println(stringBuilder.toString());\n\n        stringBuilder = new StringBuilder(\"0123456789\");\n        stringBuilder.reverse();\t// 翻转字符串\n        System.out.println(stringBuilder.toString());\n    }\n\n}\n```\n\n# 0X02 String的其他方法\nString类中有很多方法，这里有几个常用的\n```Java\npublic class Main {\n    public static void main(String args[]) {\n        String string;\n        boolean bool;\n\n        string = \"hello,world\";\n        bool = string.equals(\"hello,world\");    // 判断字符串是否相同\n        System.out.println(bool);\n\n        string = \"hello,world\";\n        bool = string.contains(\"hello\");    // 检查字符串中是否有另一个字符串\n        System.out.println(bool);\n\n        string = \"hello,world\";\n        bool = string.startsWith(\"he\"); // 是否以某个字符串开头\n//        bool = string.endsWith(\"ld\"); // 结尾\n        System.out.println(bool);\n\n        string = \"hello,world\";\n        string = string.replace(\"world\", \"java\");   // 字符串搜索替换\n        System.out.println(string);\n\n        string = \"hello,world\";\n        string = string.toUpperCase();  // 全转成大写\n//        string = string.toLowerCase();    // 小写\n        System.out.println(string);\n\n        string = \"  hello,world   \";\n        string = string.trim(); // 去掉字符串两头的空白\n        System.out.println(string);\n        \n    }\n}\n```\n\n# 0X03 String的正则方法\n简单的正则匹配可以直接使用String类中的方法，比如查看字符串是否符合某正则表达式的`matches()`和切割字符串的`split()`。\n```Java\npublic class Main {\n    public static void main(String args[]) {\n        String string = \"java0python00cpp\";\n        System.out.println(string.matches(\"[\\\\w\\\\d]+\"));\t// 检测是否能匹配\n\n        System.out.println();\n\n        String[] strings = string.split(\"\\\\d+\");\t// 按正则表达式分割字符串，返回字符串数组\n        for(int i = 0; i < strings.length; i++){\n            System.out.print(strings[i] + \"  \");\n        }\n    }\n}\n```\n","source":"_posts/java_str.md","raw":"---\ntitle: Java中的字符串\ndate: 2017-02-13 14:48\ntags:\n  - Java\n  - 字符串\n---\n\n> String类中每一个看起来会修改String值得方法，实际上都是创建了一个全新的String对象，以包含修改后的字符串内容。而最初的String对象则丝毫未动。   ---《Java编程思想》第13章\n\n# 0X00 String常量池\n如果使用常用的方式定义两个内容完全一样的字符串，那么Java使用常量的方式，也就是说第二个字符串并没有生成一个对象而是引用了之前的字符串，导致他们的本质是一样的，所以当使用`==`判断两个字符串对象是否是同一个对象的时候，会显示是同一个对象。但是如果我们每次声明一个字符串的时候使用`new String()`的方式，则会每次创建一个String对象，两者就不是同一个对象了。\n```Java\npublic class Main {\n    public static void main(String args[]) {\n\t\t// 两个相同的字符串引用自同一处\n        String str1 = \"hello,world\";\n        String str2 = \"hello,world\";\n        System.out.println(str1 == str2);\n\n\t\t// 这两个字符串就是每次生成一个新对象\n        String str3 = new String(\"hello,world\");\n        String str4 = new String(\"hello,world\");\n        System.out.println(str3 == str4);\n    }\n}\n```\n\n# 0X01 StringBuilder\n字符串的拼接在Java中非常方便，但常用的使用`+`来拼接字符串效率很低，在需要拼接的次数不是很多的时候不会影响多少效率，但当需要拼接的字符串数量很多的时候就需要使用`StringBuilder`来拼接。该类中有一个`append()`的方法，就是将一个字符串连接到本对象的字符串后面。下面我们来对比一下这两个拼接方法的速度差异。\n```Java\npublic class Main {\n    public static void main(String args[]) {\n\n        String string = \"hello,world\";\n        long start = new Date().getTime();\n\t\t// 循环连接1W次\n        for (int i = 0; i < 10000; i++){\n            string += \"hello,world\";\n        }\n\n        long middle = new Date().getTime();\n\n        StringBuilder stringBuilder = new StringBuilder(\"hello,world\");\n\t\t// 循环连接1000W次\n        for (int i = 0; i < 10000000; i++){\n            stringBuilder.append(\"hello,world\");\n        }\n        long end = new Date().getTime();\n\n        System.out.println(\"使用+连接耗时: \" + (middle - start));\n        System.out.println(\"使用StringBuilder连接耗时: \" + (end - middle));\n    }\n}\n```\n执行结果如下\n```bash\n使用+连接耗时: 850\n使用StringBuilder连接耗时: 263\n```\n速度差异很明显，使用加号连接只连接一万次就耗时800多毫秒，而使用StringBuilder即使连接一千万次也只需要200多毫秒。\n\n该类中还有其他的方法`insert()指定位置插入` / `replace()分片赋值` / `substring()提取子字符串` / `reverse()翻转字符串` / `toString()返回字符串`\n使用演示\n```Java\npublic class Main {\n    public static void main(String args[]) {\n        StringBuilder stringBuilder = new StringBuilder(\"0123456789\");\n        stringBuilder.insert(5, \"hello,world\");\t// 插入字符串\n        System.out.println(stringBuilder.toString());\n\n        stringBuilder = new StringBuilder(\"0123456789\");\n        stringBuilder.replace(3, 5, \"hello,world\");\t// 分片赋值\n        System.out.println(stringBuilder.toString());\n\n        stringBuilder = new StringBuilder(\"0123456789\");\n        stringBuilder.substring(3, 5);\t// 提取子字符串\n        System.out.println(stringBuilder.toString());\n\n        stringBuilder = new StringBuilder(\"0123456789\");\n        stringBuilder.reverse();\t// 翻转字符串\n        System.out.println(stringBuilder.toString());\n    }\n\n}\n```\n\n# 0X02 String的其他方法\nString类中有很多方法，这里有几个常用的\n```Java\npublic class Main {\n    public static void main(String args[]) {\n        String string;\n        boolean bool;\n\n        string = \"hello,world\";\n        bool = string.equals(\"hello,world\");    // 判断字符串是否相同\n        System.out.println(bool);\n\n        string = \"hello,world\";\n        bool = string.contains(\"hello\");    // 检查字符串中是否有另一个字符串\n        System.out.println(bool);\n\n        string = \"hello,world\";\n        bool = string.startsWith(\"he\"); // 是否以某个字符串开头\n//        bool = string.endsWith(\"ld\"); // 结尾\n        System.out.println(bool);\n\n        string = \"hello,world\";\n        string = string.replace(\"world\", \"java\");   // 字符串搜索替换\n        System.out.println(string);\n\n        string = \"hello,world\";\n        string = string.toUpperCase();  // 全转成大写\n//        string = string.toLowerCase();    // 小写\n        System.out.println(string);\n\n        string = \"  hello,world   \";\n        string = string.trim(); // 去掉字符串两头的空白\n        System.out.println(string);\n        \n    }\n}\n```\n\n# 0X03 String的正则方法\n简单的正则匹配可以直接使用String类中的方法，比如查看字符串是否符合某正则表达式的`matches()`和切割字符串的`split()`。\n```Java\npublic class Main {\n    public static void main(String args[]) {\n        String string = \"java0python00cpp\";\n        System.out.println(string.matches(\"[\\\\w\\\\d]+\"));\t// 检测是否能匹配\n\n        System.out.println();\n\n        String[] strings = string.split(\"\\\\d+\");\t// 按正则表达式分割字符串，返回字符串数组\n        for(int i = 0; i < strings.length; i++){\n            System.out.print(strings[i] + \"  \");\n        }\n    }\n}\n```\n","slug":"java_str","published":1,"updated":"2017-09-02T14:41:43.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdy000ihnlpx1ochklw","content":"<blockquote>\n<p>String类中每一个看起来会修改String值得方法，实际上都是创建了一个全新的String对象，以包含修改后的字符串内容。而最初的String对象则丝毫未动。   —《Java编程思想》第13章</p>\n</blockquote>\n<h1 id=\"0X00-String常量池\"><a href=\"#0X00-String常量池\" class=\"headerlink\" title=\"0X00 String常量池\"></a>0X00 String常量池</h1><p>如果使用常用的方式定义两个内容完全一样的字符串，那么Java使用常量的方式，也就是说第二个字符串并没有生成一个对象而是引用了之前的字符串，导致他们的本质是一样的，所以当使用<code>==</code>判断两个字符串对象是否是同一个对象的时候，会显示是同一个对象。但是如果我们每次声明一个字符串的时候使用<code>new String()</code>的方式，则会每次创建一个String对象，两者就不是同一个对象了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 两个相同的字符串引用自同一处</span></div><div class=\"line\">        String str1 = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        String str2 = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        System.out.println(str1 == str2);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 这两个字符串就是每次生成一个新对象</span></div><div class=\"line\">        String str3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello,world\"</span>);</div><div class=\"line\">        String str4 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello,world\"</span>);</div><div class=\"line\">        System.out.println(str3 == str4);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X01-StringBuilder\"><a href=\"#0X01-StringBuilder\" class=\"headerlink\" title=\"0X01 StringBuilder\"></a>0X01 StringBuilder</h1><p>字符串的拼接在Java中非常方便，但常用的使用<code>+</code>来拼接字符串效率很低，在需要拼接的次数不是很多的时候不会影响多少效率，但当需要拼接的字符串数量很多的时候就需要使用<code>StringBuilder</code>来拼接。该类中有一个<code>append()</code>的方法，就是将一个字符串连接到本对象的字符串后面。下面我们来对比一下这两个拼接方法的速度差异。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        String string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = <span class=\"keyword\">new</span> Date().getTime();</div><div class=\"line\">\t\t<span class=\"comment\">// 循环连接1W次</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</div><div class=\"line\">            string += <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">long</span> middle = <span class=\"keyword\">new</span> Date().getTime();</div><div class=\"line\"></div><div class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"hello,world\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 循环连接1000W次</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000</span>; i++)&#123;</div><div class=\"line\">            stringBuilder.append(<span class=\"string\">\"hello,world\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = <span class=\"keyword\">new</span> Date().getTime();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"使用+连接耗时: \"</span> + (middle - start));</div><div class=\"line\">        System.out.println(<span class=\"string\">\"使用StringBuilder连接耗时: \"</span> + (end - middle));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行结果如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用+连接耗时: 850</div><div class=\"line\">使用StringBuilder连接耗时: 263</div></pre></td></tr></table></figure></p>\n<p>速度差异很明显，使用加号连接只连接一万次就耗时800多毫秒，而使用StringBuilder即使连接一千万次也只需要200多毫秒。</p>\n<p>该类中还有其他的方法<code>insert()指定位置插入</code> / <code>replace()分片赋值</code> / <code>substring()提取子字符串</code> / <code>reverse()翻转字符串</code> / <code>toString()返回字符串</code><br>使用演示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0123456789\"</span>);</div><div class=\"line\">        stringBuilder.insert(<span class=\"number\">5</span>, <span class=\"string\">\"hello,world\"</span>);\t<span class=\"comment\">// 插入字符串</span></div><div class=\"line\">        System.out.println(stringBuilder.toString());</div><div class=\"line\"></div><div class=\"line\">        stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0123456789\"</span>);</div><div class=\"line\">        stringBuilder.replace(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"string\">\"hello,world\"</span>);\t<span class=\"comment\">// 分片赋值</span></div><div class=\"line\">        System.out.println(stringBuilder.toString());</div><div class=\"line\"></div><div class=\"line\">        stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0123456789\"</span>);</div><div class=\"line\">        stringBuilder.substring(<span class=\"number\">3</span>, <span class=\"number\">5</span>);\t<span class=\"comment\">// 提取子字符串</span></div><div class=\"line\">        System.out.println(stringBuilder.toString());</div><div class=\"line\"></div><div class=\"line\">        stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0123456789\"</span>);</div><div class=\"line\">        stringBuilder.reverse();\t<span class=\"comment\">// 翻转字符串</span></div><div class=\"line\">        System.out.println(stringBuilder.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-String的其他方法\"><a href=\"#0X02-String的其他方法\" class=\"headerlink\" title=\"0X02 String的其他方法\"></a>0X02 String的其他方法</h1><p>String类中有很多方法，这里有几个常用的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        String string;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> bool;</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        bool = string.equals(<span class=\"string\">\"hello,world\"</span>);    <span class=\"comment\">// 判断字符串是否相同</span></div><div class=\"line\">        System.out.println(bool);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        bool = string.contains(<span class=\"string\">\"hello\"</span>);    <span class=\"comment\">// 检查字符串中是否有另一个字符串</span></div><div class=\"line\">        System.out.println(bool);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        bool = string.startsWith(<span class=\"string\">\"he\"</span>); <span class=\"comment\">// 是否以某个字符串开头</span></div><div class=\"line\"><span class=\"comment\">//        bool = string.endsWith(\"ld\"); // 结尾</span></div><div class=\"line\">        System.out.println(bool);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        string = string.replace(<span class=\"string\">\"world\"</span>, <span class=\"string\">\"java\"</span>);   <span class=\"comment\">// 字符串搜索替换</span></div><div class=\"line\">        System.out.println(string);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        string = string.toUpperCase();  <span class=\"comment\">// 全转成大写</span></div><div class=\"line\"><span class=\"comment\">//        string = string.toLowerCase();    // 小写</span></div><div class=\"line\">        System.out.println(string);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"  hello,world   \"</span>;</div><div class=\"line\">        string = string.trim(); <span class=\"comment\">// 去掉字符串两头的空白</span></div><div class=\"line\">        System.out.println(string);</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-String的正则方法\"><a href=\"#0X03-String的正则方法\" class=\"headerlink\" title=\"0X03 String的正则方法\"></a>0X03 String的正则方法</h1><p>简单的正则匹配可以直接使用String类中的方法，比如查看字符串是否符合某正则表达式的<code>matches()</code>和切割字符串的<code>split()</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        String string = <span class=\"string\">\"java0python00cpp\"</span>;</div><div class=\"line\">        System.out.println(string.matches(<span class=\"string\">\"[\\\\w\\\\d]+\"</span>));\t<span class=\"comment\">// 检测是否能匹配</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println();</div><div class=\"line\"></div><div class=\"line\">        String[] strings = string.split(<span class=\"string\">\"\\\\d+\"</span>);\t<span class=\"comment\">// 按正则表达式分割字符串，返回字符串数组</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strings.length; i++)&#123;</div><div class=\"line\">            System.out.print(strings[i] + <span class=\"string\">\"  \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>String类中每一个看起来会修改String值得方法，实际上都是创建了一个全新的String对象，以包含修改后的字符串内容。而最初的String对象则丝毫未动。   —《Java编程思想》第13章</p>\n</blockquote>\n<h1 id=\"0X00-String常量池\"><a href=\"#0X00-String常量池\" class=\"headerlink\" title=\"0X00 String常量池\"></a>0X00 String常量池</h1><p>如果使用常用的方式定义两个内容完全一样的字符串，那么Java使用常量的方式，也就是说第二个字符串并没有生成一个对象而是引用了之前的字符串，导致他们的本质是一样的，所以当使用<code>==</code>判断两个字符串对象是否是同一个对象的时候，会显示是同一个对象。但是如果我们每次声明一个字符串的时候使用<code>new String()</code>的方式，则会每次创建一个String对象，两者就不是同一个对象了。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 两个相同的字符串引用自同一处</span></div><div class=\"line\">        String str1 = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        String str2 = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        System.out.println(str1 == str2);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 这两个字符串就是每次生成一个新对象</span></div><div class=\"line\">        String str3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello,world\"</span>);</div><div class=\"line\">        String str4 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"hello,world\"</span>);</div><div class=\"line\">        System.out.println(str3 == str4);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X01-StringBuilder\"><a href=\"#0X01-StringBuilder\" class=\"headerlink\" title=\"0X01 StringBuilder\"></a>0X01 StringBuilder</h1><p>字符串的拼接在Java中非常方便，但常用的使用<code>+</code>来拼接字符串效率很低，在需要拼接的次数不是很多的时候不会影响多少效率，但当需要拼接的字符串数量很多的时候就需要使用<code>StringBuilder</code>来拼接。该类中有一个<code>append()</code>的方法，就是将一个字符串连接到本对象的字符串后面。下面我们来对比一下这两个拼接方法的速度差异。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        String string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        <span class=\"keyword\">long</span> start = <span class=\"keyword\">new</span> Date().getTime();</div><div class=\"line\">\t\t<span class=\"comment\">// 循环连接1W次</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</div><div class=\"line\">            string += <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">long</span> middle = <span class=\"keyword\">new</span> Date().getTime();</div><div class=\"line\"></div><div class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"hello,world\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 循环连接1000W次</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000000</span>; i++)&#123;</div><div class=\"line\">            stringBuilder.append(<span class=\"string\">\"hello,world\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> end = <span class=\"keyword\">new</span> Date().getTime();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"使用+连接耗时: \"</span> + (middle - start));</div><div class=\"line\">        System.out.println(<span class=\"string\">\"使用StringBuilder连接耗时: \"</span> + (end - middle));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行结果如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用+连接耗时: 850</div><div class=\"line\">使用StringBuilder连接耗时: 263</div></pre></td></tr></table></figure></p>\n<p>速度差异很明显，使用加号连接只连接一万次就耗时800多毫秒，而使用StringBuilder即使连接一千万次也只需要200多毫秒。</p>\n<p>该类中还有其他的方法<code>insert()指定位置插入</code> / <code>replace()分片赋值</code> / <code>substring()提取子字符串</code> / <code>reverse()翻转字符串</code> / <code>toString()返回字符串</code><br>使用演示<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0123456789\"</span>);</div><div class=\"line\">        stringBuilder.insert(<span class=\"number\">5</span>, <span class=\"string\">\"hello,world\"</span>);\t<span class=\"comment\">// 插入字符串</span></div><div class=\"line\">        System.out.println(stringBuilder.toString());</div><div class=\"line\"></div><div class=\"line\">        stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0123456789\"</span>);</div><div class=\"line\">        stringBuilder.replace(<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"string\">\"hello,world\"</span>);\t<span class=\"comment\">// 分片赋值</span></div><div class=\"line\">        System.out.println(stringBuilder.toString());</div><div class=\"line\"></div><div class=\"line\">        stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0123456789\"</span>);</div><div class=\"line\">        stringBuilder.substring(<span class=\"number\">3</span>, <span class=\"number\">5</span>);\t<span class=\"comment\">// 提取子字符串</span></div><div class=\"line\">        System.out.println(stringBuilder.toString());</div><div class=\"line\"></div><div class=\"line\">        stringBuilder = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"0123456789\"</span>);</div><div class=\"line\">        stringBuilder.reverse();\t<span class=\"comment\">// 翻转字符串</span></div><div class=\"line\">        System.out.println(stringBuilder.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-String的其他方法\"><a href=\"#0X02-String的其他方法\" class=\"headerlink\" title=\"0X02 String的其他方法\"></a>0X02 String的其他方法</h1><p>String类中有很多方法，这里有几个常用的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        String string;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> bool;</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        bool = string.equals(<span class=\"string\">\"hello,world\"</span>);    <span class=\"comment\">// 判断字符串是否相同</span></div><div class=\"line\">        System.out.println(bool);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        bool = string.contains(<span class=\"string\">\"hello\"</span>);    <span class=\"comment\">// 检查字符串中是否有另一个字符串</span></div><div class=\"line\">        System.out.println(bool);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        bool = string.startsWith(<span class=\"string\">\"he\"</span>); <span class=\"comment\">// 是否以某个字符串开头</span></div><div class=\"line\"><span class=\"comment\">//        bool = string.endsWith(\"ld\"); // 结尾</span></div><div class=\"line\">        System.out.println(bool);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        string = string.replace(<span class=\"string\">\"world\"</span>, <span class=\"string\">\"java\"</span>);   <span class=\"comment\">// 字符串搜索替换</span></div><div class=\"line\">        System.out.println(string);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"hello,world\"</span>;</div><div class=\"line\">        string = string.toUpperCase();  <span class=\"comment\">// 全转成大写</span></div><div class=\"line\"><span class=\"comment\">//        string = string.toLowerCase();    // 小写</span></div><div class=\"line\">        System.out.println(string);</div><div class=\"line\"></div><div class=\"line\">        string = <span class=\"string\">\"  hello,world   \"</span>;</div><div class=\"line\">        string = string.trim(); <span class=\"comment\">// 去掉字符串两头的空白</span></div><div class=\"line\">        System.out.println(string);</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-String的正则方法\"><a href=\"#0X03-String的正则方法\" class=\"headerlink\" title=\"0X03 String的正则方法\"></a>0X03 String的正则方法</h1><p>简单的正则匹配可以直接使用String类中的方法，比如查看字符串是否符合某正则表达式的<code>matches()</code>和切割字符串的<code>split()</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\">        String string = <span class=\"string\">\"java0python00cpp\"</span>;</div><div class=\"line\">        System.out.println(string.matches(<span class=\"string\">\"[\\\\w\\\\d]+\"</span>));\t<span class=\"comment\">// 检测是否能匹配</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println();</div><div class=\"line\"></div><div class=\"line\">        String[] strings = string.split(<span class=\"string\">\"\\\\d+\"</span>);\t<span class=\"comment\">// 按正则表达式分割字符串，返回字符串数组</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strings.length; i++)&#123;</div><div class=\"line\">            System.out.print(strings[i] + <span class=\"string\">\"  \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Linux权限控制列表 ACL修改","date":"2016-11-02T09:16:00.000Z","_content":"\n\n# 0X00 ACL是什么\nACL的全称是`Access Control List`访问控制列表。在Linux中可以给文件设置权限，`-rwx-rw-rw`这样，但是这里并不能细分，只能分到用户、组、其他用户。如果我想给某个单独的用户设置权限的话是做不到的。所以有了ACL的出现。通过ACL可以给Linux下的文件提供详细的访问控制，比如我们在设置了基本的`rwx`权限之后，可以通过ACL在细分用户对文件的权限。\n\n# 0X01 查看文件的ACL\n使用`getfacl`命令可以查看文件的ACL和详细的权限设置。\n```bash\n[root@iZ28jaak5nnZ ~]# ls -l\ntotal 4\n-rwxr-xr-x 1 root root 1714 Oct 28 22:24 hello.py\n[root@iZ28jaak5nnZ ~]# getfacl hello.py\n# file: hello.py\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\n```\n这里显示了文件名、所属用户、所属组、还有相对应的权限。\n\n# 0X02 创建测试用户/组/文件\n先创建测试用户、测试组、测试文件。创建了`xiaoming`和`xiaohong`两个用户，在`china`组，创建了一个`jack`用户在`usa`组。然后用root用户在`/tmp/`目录下创建了一个acltest目录，用来做测试，因为这个目录是任何人都可以访问的，但是由于是root用户创建的子目录，所以要给这个目录`777`的权限，让其他用户可以在里面测试。现在里面又创建了一些目录和文件，但是全部都是root用户的，文件权限是`644`，目录权限是`755`。\n```bash\n[root@iZ28jaak5nnZ ~]# groupadd china\n[root@iZ28jaak5nnZ ~]# useradd xiaoming -g china\n[root@iZ28jaak5nnZ ~]# useradd xiaohong -g china\n[root@iZ28jaak5nnZ ~]# groupadd usa\n[root@iZ28jaak5nnZ ~]# useradd jack -g usa\n[root@iZ28jaak5nnZ ~]# cd /tmp\n[root@iZ28jaak5nnZ tmp]# mkdir acltest\n[root@iZ28jaak5nnZ tmp]# chmod 777 acltest\n[root@iZ28jaak5nnZ tmp]# cd acltest/\n[root@iZ28jaak5nnZ acltest]# touch file_{1,3}\n[root@iZ28jaak5nnZ acltest]# mkdir dir_{1,3}\n```\n\n# 0X03 设置文件的ACL\n使用`setfacl`命令可以设置文件ACL。这个命令有下面这几个常用参数\n\n## setfacl 各个参数\n* 所谓的后续ACL就是在默认ACL的基础上添加的新的规则。\n\n### -m 设置后续ACL\n对某一个文件/目录设置某一个用户的访问权限， u表示用户 冒号后面是用户名 再一个冒号后面是权限 最后接文件/目录\n`[root@iZ28jaak5nnZ acltest]# setfacl -m u:user_1:rwx file_1`\n\n对某一个文件/目录设置某一个用户组的访问权限，u表示组 冒号后面是组名 再一个冒号后面是权限 最后接文件/目录\n`[root@iZ28jaak5nnZ acltest]# setfacl -m g:group_1:rwx file_1`\n### -x 删除后续ACL\n删除之前添加的ACL项，指定用户或者指定组都是可以的，语法和上面差不多。这里删除的是一条ACL数据，下面说的-b参数是删除所有的ACL数据\n```bash\n[root@iZ28jaak5nnZ acltest]# setfacl -x u:xiaoming file_1\n[root@iZ28jaak5nnZ acltest]# getfacl file_1\n# file: file_1\n# owner: root\n# group: root\nuser::rw-\ngroup::r--\nmask::r--\nother::r--\n```\n\n### -b 删除所有后续ACL\n这里是删除之前创建的所有ACL，包括下面会说的默认ACL\n```bash\n[root@iZ28jaak5nnZ acltest]# getfacl file_1\n# file: file_1\n# owner: root\n# group: root\nuser::rw-\nuser:xiaoming:rwx\nuser:xiaohong:rw-\ngroup::r--\nmask::rwx\nother::r--\n\n[root@iZ28jaak5nnZ acltest]# setfacl -b file_1\n[root@iZ28jaak5nnZ acltest]# getfacl file_1\n# file: file_1\n# owner: root\n# group: root\nuser::rw-\ngroup::r--\nother::r--\n```\n\n### -d 设置默认ACL\n设置默认ACL只能为目录设置，为目录设置了ACL之后里面新建的目录和文件都是使用这个默认的ACL\n```bash\n[root@iZ28jaak5nnZ acltest]# getfacl dir_1\n# file: dir_1\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\n[root@iZ28jaak5nnZ acltest]# setfacl -m d:u:jack:rwx dir_1\t# 设置目录的默认ACL\n[root@iZ28jaak5nnZ acltest]# getfacl dir_1\t# 我们可以看到现在出现了一段默认ACL\n# file: dir_1\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\ndefault:user::rwx\ndefault:user:jack:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n[root@iZ28jaak5nnZ acltest]# cd dir_1\n[root@iZ28jaak5nnZ dir_1]# touch hello\n[root@iZ28jaak5nnZ dir_1]# getfacl hello\t# 新建的文件也使用这些默认设置\n# file: hello\n# owner: root\n# group: root\nuser::rw-\nuser:jack:rwx\t\t\t#effective:rw-\ngroup::r-x\t\t\t#effective:r--\nmask::rw-\nother::r--\n[root@iZ28jaak5nnZ acltest]# setfacl -m u::rwx -d dir_3\t# 设置为每个用户，也可以修改为用户组\n[root@iZ28jaak5nnZ acltest]# getfacl dir_3\n# file: dir_3\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\ndefault:user::rwx\ndefault:group::r-x\ndefault:other::r-x\n```\n\n### -k 删除默认ACL\n这里可以删除之前设置的默认ACL，只限默认ACL\n```bash\n[root@iZ28jaak5nnZ acltest]# getfacl dir_3 # 查看ACL，这里显示有默认的ACL\n# file: dir_3\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\ndefault:user::rwx\ndefault:group::r-x\ndefault:other::r-x\n\n[root@iZ28jaak5nnZ acltest]# setfacl -k dir_3\t# 删除dir_3的默认ACL\n[root@iZ28jaak5nnZ acltest]# getfacl dir_3\n# file: dir_3\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\n```\n\n### -R 递归设置ACL\n给某一个目录设置递归的ACL之后这个目录和这个目录里的文件和子目录全部都会应用这个ACL，也就是说是相当于应用到了这个目录下的所有文件和目录\n```bash\n# 首先创建一下测试用的目录结构\n[root@iZ28jaak5nnZ acltest]# mkdir -p dir1/dir2/dir3\n[root@iZ28jaak5nnZ acltest]# touch dir1/hello.c\n[root@iZ28jaak5nnZ acltest]# touch dir1/dir2/hey.c\n[root@iZ28jaak5nnZ acltest]# setfacl -m u:jack:r -R dir1\t递归设置ACL\n[root@iZ28jaak5nnZ acltest]# getfacl dir1\n# file: dir1\n# owner: root\n# group: root\nuser::rwx\nuser:jack:r--\ngroup::r-x\nmask::r-x\nother::r-x\n[root@iZ28jaak5nnZ acltest]# getfacl dir1/hello.c \n# file: dir1/hello.c\n# owner: root\n# group: root\nuser::rw-\nuser:jack:r--\ngroup::r--\nmask::r--\nother::r--\n```\n","source":"_posts/linux_acl.md","raw":"---\ntitle: Linux权限控制列表 ACL修改\ndate: 2016-11-02 17:16\ntags:\n  - Linux\n  - ACL\n  - 权限\n---\n\n\n# 0X00 ACL是什么\nACL的全称是`Access Control List`访问控制列表。在Linux中可以给文件设置权限，`-rwx-rw-rw`这样，但是这里并不能细分，只能分到用户、组、其他用户。如果我想给某个单独的用户设置权限的话是做不到的。所以有了ACL的出现。通过ACL可以给Linux下的文件提供详细的访问控制，比如我们在设置了基本的`rwx`权限之后，可以通过ACL在细分用户对文件的权限。\n\n# 0X01 查看文件的ACL\n使用`getfacl`命令可以查看文件的ACL和详细的权限设置。\n```bash\n[root@iZ28jaak5nnZ ~]# ls -l\ntotal 4\n-rwxr-xr-x 1 root root 1714 Oct 28 22:24 hello.py\n[root@iZ28jaak5nnZ ~]# getfacl hello.py\n# file: hello.py\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\n```\n这里显示了文件名、所属用户、所属组、还有相对应的权限。\n\n# 0X02 创建测试用户/组/文件\n先创建测试用户、测试组、测试文件。创建了`xiaoming`和`xiaohong`两个用户，在`china`组，创建了一个`jack`用户在`usa`组。然后用root用户在`/tmp/`目录下创建了一个acltest目录，用来做测试，因为这个目录是任何人都可以访问的，但是由于是root用户创建的子目录，所以要给这个目录`777`的权限，让其他用户可以在里面测试。现在里面又创建了一些目录和文件，但是全部都是root用户的，文件权限是`644`，目录权限是`755`。\n```bash\n[root@iZ28jaak5nnZ ~]# groupadd china\n[root@iZ28jaak5nnZ ~]# useradd xiaoming -g china\n[root@iZ28jaak5nnZ ~]# useradd xiaohong -g china\n[root@iZ28jaak5nnZ ~]# groupadd usa\n[root@iZ28jaak5nnZ ~]# useradd jack -g usa\n[root@iZ28jaak5nnZ ~]# cd /tmp\n[root@iZ28jaak5nnZ tmp]# mkdir acltest\n[root@iZ28jaak5nnZ tmp]# chmod 777 acltest\n[root@iZ28jaak5nnZ tmp]# cd acltest/\n[root@iZ28jaak5nnZ acltest]# touch file_{1,3}\n[root@iZ28jaak5nnZ acltest]# mkdir dir_{1,3}\n```\n\n# 0X03 设置文件的ACL\n使用`setfacl`命令可以设置文件ACL。这个命令有下面这几个常用参数\n\n## setfacl 各个参数\n* 所谓的后续ACL就是在默认ACL的基础上添加的新的规则。\n\n### -m 设置后续ACL\n对某一个文件/目录设置某一个用户的访问权限， u表示用户 冒号后面是用户名 再一个冒号后面是权限 最后接文件/目录\n`[root@iZ28jaak5nnZ acltest]# setfacl -m u:user_1:rwx file_1`\n\n对某一个文件/目录设置某一个用户组的访问权限，u表示组 冒号后面是组名 再一个冒号后面是权限 最后接文件/目录\n`[root@iZ28jaak5nnZ acltest]# setfacl -m g:group_1:rwx file_1`\n### -x 删除后续ACL\n删除之前添加的ACL项，指定用户或者指定组都是可以的，语法和上面差不多。这里删除的是一条ACL数据，下面说的-b参数是删除所有的ACL数据\n```bash\n[root@iZ28jaak5nnZ acltest]# setfacl -x u:xiaoming file_1\n[root@iZ28jaak5nnZ acltest]# getfacl file_1\n# file: file_1\n# owner: root\n# group: root\nuser::rw-\ngroup::r--\nmask::r--\nother::r--\n```\n\n### -b 删除所有后续ACL\n这里是删除之前创建的所有ACL，包括下面会说的默认ACL\n```bash\n[root@iZ28jaak5nnZ acltest]# getfacl file_1\n# file: file_1\n# owner: root\n# group: root\nuser::rw-\nuser:xiaoming:rwx\nuser:xiaohong:rw-\ngroup::r--\nmask::rwx\nother::r--\n\n[root@iZ28jaak5nnZ acltest]# setfacl -b file_1\n[root@iZ28jaak5nnZ acltest]# getfacl file_1\n# file: file_1\n# owner: root\n# group: root\nuser::rw-\ngroup::r--\nother::r--\n```\n\n### -d 设置默认ACL\n设置默认ACL只能为目录设置，为目录设置了ACL之后里面新建的目录和文件都是使用这个默认的ACL\n```bash\n[root@iZ28jaak5nnZ acltest]# getfacl dir_1\n# file: dir_1\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\n[root@iZ28jaak5nnZ acltest]# setfacl -m d:u:jack:rwx dir_1\t# 设置目录的默认ACL\n[root@iZ28jaak5nnZ acltest]# getfacl dir_1\t# 我们可以看到现在出现了一段默认ACL\n# file: dir_1\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\ndefault:user::rwx\ndefault:user:jack:rwx\ndefault:group::r-x\ndefault:mask::rwx\ndefault:other::r-x\n[root@iZ28jaak5nnZ acltest]# cd dir_1\n[root@iZ28jaak5nnZ dir_1]# touch hello\n[root@iZ28jaak5nnZ dir_1]# getfacl hello\t# 新建的文件也使用这些默认设置\n# file: hello\n# owner: root\n# group: root\nuser::rw-\nuser:jack:rwx\t\t\t#effective:rw-\ngroup::r-x\t\t\t#effective:r--\nmask::rw-\nother::r--\n[root@iZ28jaak5nnZ acltest]# setfacl -m u::rwx -d dir_3\t# 设置为每个用户，也可以修改为用户组\n[root@iZ28jaak5nnZ acltest]# getfacl dir_3\n# file: dir_3\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\ndefault:user::rwx\ndefault:group::r-x\ndefault:other::r-x\n```\n\n### -k 删除默认ACL\n这里可以删除之前设置的默认ACL，只限默认ACL\n```bash\n[root@iZ28jaak5nnZ acltest]# getfacl dir_3 # 查看ACL，这里显示有默认的ACL\n# file: dir_3\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\ndefault:user::rwx\ndefault:group::r-x\ndefault:other::r-x\n\n[root@iZ28jaak5nnZ acltest]# setfacl -k dir_3\t# 删除dir_3的默认ACL\n[root@iZ28jaak5nnZ acltest]# getfacl dir_3\n# file: dir_3\n# owner: root\n# group: root\nuser::rwx\ngroup::r-x\nother::r-x\n```\n\n### -R 递归设置ACL\n给某一个目录设置递归的ACL之后这个目录和这个目录里的文件和子目录全部都会应用这个ACL，也就是说是相当于应用到了这个目录下的所有文件和目录\n```bash\n# 首先创建一下测试用的目录结构\n[root@iZ28jaak5nnZ acltest]# mkdir -p dir1/dir2/dir3\n[root@iZ28jaak5nnZ acltest]# touch dir1/hello.c\n[root@iZ28jaak5nnZ acltest]# touch dir1/dir2/hey.c\n[root@iZ28jaak5nnZ acltest]# setfacl -m u:jack:r -R dir1\t递归设置ACL\n[root@iZ28jaak5nnZ acltest]# getfacl dir1\n# file: dir1\n# owner: root\n# group: root\nuser::rwx\nuser:jack:r--\ngroup::r-x\nmask::r-x\nother::r-x\n[root@iZ28jaak5nnZ acltest]# getfacl dir1/hello.c \n# file: dir1/hello.c\n# owner: root\n# group: root\nuser::rw-\nuser:jack:r--\ngroup::r--\nmask::r--\nother::r--\n```\n","slug":"linux_acl","published":1,"updated":"2017-09-02T14:41:57.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdz000jhnlp91ldo11o","content":"<h1 id=\"0X00-ACL是什么\"><a href=\"#0X00-ACL是什么\" class=\"headerlink\" title=\"0X00 ACL是什么\"></a>0X00 ACL是什么</h1><p>ACL的全称是<code>Access Control List</code>访问控制列表。在Linux中可以给文件设置权限，<code>-rwx-rw-rw</code>这样，但是这里并不能细分，只能分到用户、组、其他用户。如果我想给某个单独的用户设置权限的话是做不到的。所以有了ACL的出现。通过ACL可以给Linux下的文件提供详细的访问控制，比如我们在设置了基本的<code>rwx</code>权限之后，可以通过ACL在细分用户对文件的权限。</p>\n<h1 id=\"0X01-查看文件的ACL\"><a href=\"#0X01-查看文件的ACL\" class=\"headerlink\" title=\"0X01 查看文件的ACL\"></a>0X01 查看文件的ACL</h1><p>使用<code>getfacl</code>命令可以查看文件的ACL和详细的权限设置。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ls -l</span></div><div class=\"line\">total 4</div><div class=\"line\">-rwxr-xr-x 1 root root 1714 Oct 28 22:24 hello.py</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># getfacl hello.py</span></div><div class=\"line\"><span class=\"comment\"># file: hello.py</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div></pre></td></tr></table></figure></p>\n<p>这里显示了文件名、所属用户、所属组、还有相对应的权限。</p>\n<h1 id=\"0X02-创建测试用户-组-文件\"><a href=\"#0X02-创建测试用户-组-文件\" class=\"headerlink\" title=\"0X02 创建测试用户/组/文件\"></a>0X02 创建测试用户/组/文件</h1><p>先创建测试用户、测试组、测试文件。创建了<code>xiaoming</code>和<code>xiaohong</code>两个用户，在<code>china</code>组，创建了一个<code>jack</code>用户在<code>usa</code>组。然后用root用户在<code>/tmp/</code>目录下创建了一个acltest目录，用来做测试，因为这个目录是任何人都可以访问的，但是由于是root用户创建的子目录，所以要给这个目录<code>777</code>的权限，让其他用户可以在里面测试。现在里面又创建了一些目录和文件，但是全部都是root用户的，文件权限是<code>644</code>，目录权限是<code>755</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># groupadd china</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># useradd xiaoming -g china</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># useradd xiaohong -g china</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># groupadd usa</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># useradd jack -g usa</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># cd /tmp</span></div><div class=\"line\">[root@iZ28jaak5nnZ tmp]<span class=\"comment\"># mkdir acltest</span></div><div class=\"line\">[root@iZ28jaak5nnZ tmp]<span class=\"comment\"># chmod 777 acltest</span></div><div class=\"line\">[root@iZ28jaak5nnZ tmp]<span class=\"comment\"># cd acltest/</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># touch file_&#123;1,3&#125;</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># mkdir dir_&#123;1,3&#125;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-设置文件的ACL\"><a href=\"#0X03-设置文件的ACL\" class=\"headerlink\" title=\"0X03 设置文件的ACL\"></a>0X03 设置文件的ACL</h1><p>使用<code>setfacl</code>命令可以设置文件ACL。这个命令有下面这几个常用参数</p>\n<h2 id=\"setfacl-各个参数\"><a href=\"#setfacl-各个参数\" class=\"headerlink\" title=\"setfacl 各个参数\"></a>setfacl 各个参数</h2><ul>\n<li>所谓的后续ACL就是在默认ACL的基础上添加的新的规则。</li>\n</ul>\n<h3 id=\"m-设置后续ACL\"><a href=\"#m-设置后续ACL\" class=\"headerlink\" title=\"-m 设置后续ACL\"></a>-m 设置后续ACL</h3><p>对某一个文件/目录设置某一个用户的访问权限， u表示用户 冒号后面是用户名 再一个冒号后面是权限 最后接文件/目录<br><code>[root@iZ28jaak5nnZ acltest]# setfacl -m u:user_1:rwx file_1</code></p>\n<p>对某一个文件/目录设置某一个用户组的访问权限，u表示组 冒号后面是组名 再一个冒号后面是权限 最后接文件/目录<br><code>[root@iZ28jaak5nnZ acltest]# setfacl -m g:group_1:rwx file_1</code></p>\n<h3 id=\"x-删除后续ACL\"><a href=\"#x-删除后续ACL\" class=\"headerlink\" title=\"-x 删除后续ACL\"></a>-x 删除后续ACL</h3><p>删除之前添加的ACL项，指定用户或者指定组都是可以的，语法和上面差不多。这里删除的是一条ACL数据，下面说的-b参数是删除所有的ACL数据<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -x u:xiaoming file_1</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl file_1</span></div><div class=\"line\"><span class=\"comment\"># file: file_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">group::r--</div><div class=\"line\">mask::r--</div><div class=\"line\">other::r--</div></pre></td></tr></table></figure></p>\n<h3 id=\"b-删除所有后续ACL\"><a href=\"#b-删除所有后续ACL\" class=\"headerlink\" title=\"-b 删除所有后续ACL\"></a>-b 删除所有后续ACL</h3><p>这里是删除之前创建的所有ACL，包括下面会说的默认ACL<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl file_1</span></div><div class=\"line\"><span class=\"comment\"># file: file_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">user:xiaoming:rwx</div><div class=\"line\">user:xiaohong:rw-</div><div class=\"line\">group::r--</div><div class=\"line\">mask::rwx</div><div class=\"line\">other::r--</div><div class=\"line\"></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -b file_1</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl file_1</span></div><div class=\"line\"><span class=\"comment\"># file: file_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">group::r--</div><div class=\"line\">other::r--</div></pre></td></tr></table></figure></p>\n<h3 id=\"d-设置默认ACL\"><a href=\"#d-设置默认ACL\" class=\"headerlink\" title=\"-d 设置默认ACL\"></a>-d 设置默认ACL</h3><p>设置默认ACL只能为目录设置，为目录设置了ACL之后里面新建的目录和文件都是使用这个默认的ACL<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_1</span></div><div class=\"line\"><span class=\"comment\"># file: dir_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -m d:u:jack:rwx dir_1\t# 设置目录的默认ACL</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_1\t# 我们可以看到现在出现了一段默认ACL</span></div><div class=\"line\"><span class=\"comment\"># file: dir_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">default:user::rwx</div><div class=\"line\">default:user:jack:rwx</div><div class=\"line\">default:group::r-x</div><div class=\"line\">default:mask::rwx</div><div class=\"line\">default:other::r-x</div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># cd dir_1</span></div><div class=\"line\">[root@iZ28jaak5nnZ dir_1]<span class=\"comment\"># touch hello</span></div><div class=\"line\">[root@iZ28jaak5nnZ dir_1]<span class=\"comment\"># getfacl hello\t# 新建的文件也使用这些默认设置</span></div><div class=\"line\"><span class=\"comment\"># file: hello</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">user:jack:rwx\t\t\t<span class=\"comment\">#effective:rw-</span></div><div class=\"line\">group::r-x\t\t\t<span class=\"comment\">#effective:r--</span></div><div class=\"line\">mask::rw-</div><div class=\"line\">other::r--</div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -m u::rwx -d dir_3\t# 设置为每个用户，也可以修改为用户组</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_3</span></div><div class=\"line\"><span class=\"comment\"># file: dir_3</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">default:user::rwx</div><div class=\"line\">default:group::r-x</div><div class=\"line\">default:other::r-x</div></pre></td></tr></table></figure></p>\n<h3 id=\"k-删除默认ACL\"><a href=\"#k-删除默认ACL\" class=\"headerlink\" title=\"-k 删除默认ACL\"></a>-k 删除默认ACL</h3><p>这里可以删除之前设置的默认ACL，只限默认ACL<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_3 # 查看ACL，这里显示有默认的ACL</span></div><div class=\"line\"><span class=\"comment\"># file: dir_3</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">default:user::rwx</div><div class=\"line\">default:group::r-x</div><div class=\"line\">default:other::r-x</div><div class=\"line\"></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -k dir_3\t# 删除dir_3的默认ACL</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_3</span></div><div class=\"line\"><span class=\"comment\"># file: dir_3</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div></pre></td></tr></table></figure></p>\n<h3 id=\"R-递归设置ACL\"><a href=\"#R-递归设置ACL\" class=\"headerlink\" title=\"-R 递归设置ACL\"></a>-R 递归设置ACL</h3><p>给某一个目录设置递归的ACL之后这个目录和这个目录里的文件和子目录全部都会应用这个ACL，也就是说是相当于应用到了这个目录下的所有文件和目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 首先创建一下测试用的目录结构</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># mkdir -p dir1/dir2/dir3</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># touch dir1/hello.c</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># touch dir1/dir2/hey.c</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -m u:jack:r -R dir1\t递归设置ACL</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir1</span></div><div class=\"line\"><span class=\"comment\"># file: dir1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">user:jack:r--</div><div class=\"line\">group::r-x</div><div class=\"line\">mask::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir1/hello.c </span></div><div class=\"line\"><span class=\"comment\"># file: dir1/hello.c</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">user:jack:r--</div><div class=\"line\">group::r--</div><div class=\"line\">mask::r--</div><div class=\"line\">other::r--</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-ACL是什么\"><a href=\"#0X00-ACL是什么\" class=\"headerlink\" title=\"0X00 ACL是什么\"></a>0X00 ACL是什么</h1><p>ACL的全称是<code>Access Control List</code>访问控制列表。在Linux中可以给文件设置权限，<code>-rwx-rw-rw</code>这样，但是这里并不能细分，只能分到用户、组、其他用户。如果我想给某个单独的用户设置权限的话是做不到的。所以有了ACL的出现。通过ACL可以给Linux下的文件提供详细的访问控制，比如我们在设置了基本的<code>rwx</code>权限之后，可以通过ACL在细分用户对文件的权限。</p>\n<h1 id=\"0X01-查看文件的ACL\"><a href=\"#0X01-查看文件的ACL\" class=\"headerlink\" title=\"0X01 查看文件的ACL\"></a>0X01 查看文件的ACL</h1><p>使用<code>getfacl</code>命令可以查看文件的ACL和详细的权限设置。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ls -l</span></div><div class=\"line\">total 4</div><div class=\"line\">-rwxr-xr-x 1 root root 1714 Oct 28 22:24 hello.py</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># getfacl hello.py</span></div><div class=\"line\"><span class=\"comment\"># file: hello.py</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div></pre></td></tr></table></figure></p>\n<p>这里显示了文件名、所属用户、所属组、还有相对应的权限。</p>\n<h1 id=\"0X02-创建测试用户-组-文件\"><a href=\"#0X02-创建测试用户-组-文件\" class=\"headerlink\" title=\"0X02 创建测试用户/组/文件\"></a>0X02 创建测试用户/组/文件</h1><p>先创建测试用户、测试组、测试文件。创建了<code>xiaoming</code>和<code>xiaohong</code>两个用户，在<code>china</code>组，创建了一个<code>jack</code>用户在<code>usa</code>组。然后用root用户在<code>/tmp/</code>目录下创建了一个acltest目录，用来做测试，因为这个目录是任何人都可以访问的，但是由于是root用户创建的子目录，所以要给这个目录<code>777</code>的权限，让其他用户可以在里面测试。现在里面又创建了一些目录和文件，但是全部都是root用户的，文件权限是<code>644</code>，目录权限是<code>755</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># groupadd china</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># useradd xiaoming -g china</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># useradd xiaohong -g china</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># groupadd usa</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># useradd jack -g usa</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># cd /tmp</span></div><div class=\"line\">[root@iZ28jaak5nnZ tmp]<span class=\"comment\"># mkdir acltest</span></div><div class=\"line\">[root@iZ28jaak5nnZ tmp]<span class=\"comment\"># chmod 777 acltest</span></div><div class=\"line\">[root@iZ28jaak5nnZ tmp]<span class=\"comment\"># cd acltest/</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># touch file_&#123;1,3&#125;</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># mkdir dir_&#123;1,3&#125;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-设置文件的ACL\"><a href=\"#0X03-设置文件的ACL\" class=\"headerlink\" title=\"0X03 设置文件的ACL\"></a>0X03 设置文件的ACL</h1><p>使用<code>setfacl</code>命令可以设置文件ACL。这个命令有下面这几个常用参数</p>\n<h2 id=\"setfacl-各个参数\"><a href=\"#setfacl-各个参数\" class=\"headerlink\" title=\"setfacl 各个参数\"></a>setfacl 各个参数</h2><ul>\n<li>所谓的后续ACL就是在默认ACL的基础上添加的新的规则。</li>\n</ul>\n<h3 id=\"m-设置后续ACL\"><a href=\"#m-设置后续ACL\" class=\"headerlink\" title=\"-m 设置后续ACL\"></a>-m 设置后续ACL</h3><p>对某一个文件/目录设置某一个用户的访问权限， u表示用户 冒号后面是用户名 再一个冒号后面是权限 最后接文件/目录<br><code>[root@iZ28jaak5nnZ acltest]# setfacl -m u:user_1:rwx file_1</code></p>\n<p>对某一个文件/目录设置某一个用户组的访问权限，u表示组 冒号后面是组名 再一个冒号后面是权限 最后接文件/目录<br><code>[root@iZ28jaak5nnZ acltest]# setfacl -m g:group_1:rwx file_1</code></p>\n<h3 id=\"x-删除后续ACL\"><a href=\"#x-删除后续ACL\" class=\"headerlink\" title=\"-x 删除后续ACL\"></a>-x 删除后续ACL</h3><p>删除之前添加的ACL项，指定用户或者指定组都是可以的，语法和上面差不多。这里删除的是一条ACL数据，下面说的-b参数是删除所有的ACL数据<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -x u:xiaoming file_1</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl file_1</span></div><div class=\"line\"><span class=\"comment\"># file: file_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">group::r--</div><div class=\"line\">mask::r--</div><div class=\"line\">other::r--</div></pre></td></tr></table></figure></p>\n<h3 id=\"b-删除所有后续ACL\"><a href=\"#b-删除所有后续ACL\" class=\"headerlink\" title=\"-b 删除所有后续ACL\"></a>-b 删除所有后续ACL</h3><p>这里是删除之前创建的所有ACL，包括下面会说的默认ACL<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl file_1</span></div><div class=\"line\"><span class=\"comment\"># file: file_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">user:xiaoming:rwx</div><div class=\"line\">user:xiaohong:rw-</div><div class=\"line\">group::r--</div><div class=\"line\">mask::rwx</div><div class=\"line\">other::r--</div><div class=\"line\"></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -b file_1</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl file_1</span></div><div class=\"line\"><span class=\"comment\"># file: file_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">group::r--</div><div class=\"line\">other::r--</div></pre></td></tr></table></figure></p>\n<h3 id=\"d-设置默认ACL\"><a href=\"#d-设置默认ACL\" class=\"headerlink\" title=\"-d 设置默认ACL\"></a>-d 设置默认ACL</h3><p>设置默认ACL只能为目录设置，为目录设置了ACL之后里面新建的目录和文件都是使用这个默认的ACL<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_1</span></div><div class=\"line\"><span class=\"comment\"># file: dir_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -m d:u:jack:rwx dir_1\t# 设置目录的默认ACL</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_1\t# 我们可以看到现在出现了一段默认ACL</span></div><div class=\"line\"><span class=\"comment\"># file: dir_1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">default:user::rwx</div><div class=\"line\">default:user:jack:rwx</div><div class=\"line\">default:group::r-x</div><div class=\"line\">default:mask::rwx</div><div class=\"line\">default:other::r-x</div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># cd dir_1</span></div><div class=\"line\">[root@iZ28jaak5nnZ dir_1]<span class=\"comment\"># touch hello</span></div><div class=\"line\">[root@iZ28jaak5nnZ dir_1]<span class=\"comment\"># getfacl hello\t# 新建的文件也使用这些默认设置</span></div><div class=\"line\"><span class=\"comment\"># file: hello</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">user:jack:rwx\t\t\t<span class=\"comment\">#effective:rw-</span></div><div class=\"line\">group::r-x\t\t\t<span class=\"comment\">#effective:r--</span></div><div class=\"line\">mask::rw-</div><div class=\"line\">other::r--</div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -m u::rwx -d dir_3\t# 设置为每个用户，也可以修改为用户组</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_3</span></div><div class=\"line\"><span class=\"comment\"># file: dir_3</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">default:user::rwx</div><div class=\"line\">default:group::r-x</div><div class=\"line\">default:other::r-x</div></pre></td></tr></table></figure></p>\n<h3 id=\"k-删除默认ACL\"><a href=\"#k-删除默认ACL\" class=\"headerlink\" title=\"-k 删除默认ACL\"></a>-k 删除默认ACL</h3><p>这里可以删除之前设置的默认ACL，只限默认ACL<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_3 # 查看ACL，这里显示有默认的ACL</span></div><div class=\"line\"><span class=\"comment\"># file: dir_3</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">default:user::rwx</div><div class=\"line\">default:group::r-x</div><div class=\"line\">default:other::r-x</div><div class=\"line\"></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -k dir_3\t# 删除dir_3的默认ACL</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir_3</span></div><div class=\"line\"><span class=\"comment\"># file: dir_3</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">group::r-x</div><div class=\"line\">other::r-x</div></pre></td></tr></table></figure></p>\n<h3 id=\"R-递归设置ACL\"><a href=\"#R-递归设置ACL\" class=\"headerlink\" title=\"-R 递归设置ACL\"></a>-R 递归设置ACL</h3><p>给某一个目录设置递归的ACL之后这个目录和这个目录里的文件和子目录全部都会应用这个ACL，也就是说是相当于应用到了这个目录下的所有文件和目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 首先创建一下测试用的目录结构</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># mkdir -p dir1/dir2/dir3</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># touch dir1/hello.c</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># touch dir1/dir2/hey.c</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># setfacl -m u:jack:r -R dir1\t递归设置ACL</span></div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir1</span></div><div class=\"line\"><span class=\"comment\"># file: dir1</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rwx</div><div class=\"line\">user:jack:r--</div><div class=\"line\">group::r-x</div><div class=\"line\">mask::r-x</div><div class=\"line\">other::r-x</div><div class=\"line\">[root@iZ28jaak5nnZ acltest]<span class=\"comment\"># getfacl dir1/hello.c </span></div><div class=\"line\"><span class=\"comment\"># file: dir1/hello.c</span></div><div class=\"line\"><span class=\"comment\"># owner: root</span></div><div class=\"line\"><span class=\"comment\"># group: root</span></div><div class=\"line\">user::rw-</div><div class=\"line\">user:jack:r--</div><div class=\"line\">group::r--</div><div class=\"line\">mask::r--</div><div class=\"line\">other::r--</div></pre></td></tr></table></figure></p>\n"},{"title":"Linux 中计划任务和周期任务","date":"2016-11-02T14:17:00.000Z","_content":"\n# 0X00 Linux中的计划任务\n我们使用Linux更多的时候是在服务器上，然而我们有的时候就需要让计算机在固定的某个时间做一些事情。比如我们就可能有有如下需求：\n1. 临时有事需要离开电脑，但是一个小时后需要备份某个目录里的文件\n2. 写了个爬虫去抓取某网站的新闻，每隔十分钟就去爬取一次\n3. 周期性的执行某脚本，但放在后台的话退出ssh就会被自动关掉\n4. 其实还有好多这种可能............\n\n在Linux中有两种常见的任务管理，一个是`at`也就是在某时做某事，另一个是`crontab`也就是周期性任务表。使用at可以方便地给Linux设置一个在什么时候做什么事的计划，用crontab可以方便地给Linux设置我要做某事，多久做一次。\n\n# 0X01 使用at命令\n## 检查atd服务是否开启\n`atd`就是at命令的守护进程，系统默认是打开着的，但是也有可能被关掉，在RHEL系中可以使用`systemctl status atd`来查看服务是否已经开启，没有开启的话可以用`systemctl restart atd`来打开服务\n\n## 创建一个计划任务\n先创建一个在今天的`21:09`的任务，任务内容是输出hello,world重定向到/hello文件。然后到时间之后再检查这个文件是否出现了。当我们只指定时分的时候，默认是当天，如果已经过了的时间的话，会默认为次日。\n```bash\n# 一个即日的计划任务\n[root@iZ28jaak5nnZ ~]# date\nWed Nov  2 21:07:07 CST 2016\n[root@iZ28jaak5nnZ ~]# at 21:09\nat> echo \"hello,world\" > /hello\nat> <EOT>\njob 5 at Wed Nov  2 21:09:00 2016\n[root@iZ28jaak5nnZ ~]# date\nWed Nov  2 21:09:10 CST 2016\n[root@iZ28jaak5nnZ ~]# cat /hello\nhello,world\n```\n当我们输入`at 21:09`之后，就进入了at模式，我们在这里输入的命令就是之后将要执行的命令。当输入完命令之后按`Ctrl + D`就可以退出at模式，此时计划任务创建完毕，系统会提示你计划任务的执行时间。\n\n下面还有几个例子\n```bash\n# 一个准确定时的计划任务\n[root@iZ28jaak5nnZ ~]# at 00:00 2016-11-11\t# 在2016光棍节零点输出一个'hey 单身狗'\nat> echo \"hey single dog\"\nat> <EOT>\njob 7 at Fri Nov 11 00:00:00 2016\n\n# 在十分钟后执行\n[root@iZ28jaak5nnZ ~]# at now+10min\nat> echo 'hello single dog'\nat> <EOT>\njob 9 at Wed Nov  2 21:26:00 2016\n\n\n# 在一小时后执行\n[root@iZ28jaak5nnZ ~]# at now+1hour\nat> echo 'hey single dog'\nat> <EOT>\njob 10 at Wed Nov  2 22:16:00 2016\n```\n\n## 查看已有的at\n可以使用`atq`命令来查看存在的at计划任务，注意这里并不一定全都是用户自己创建的，也有的是系统创建的。通过atq查看到之后可以使用`at -c `来查看某个计划任务的具体信息。\n```bash\n[root@iZ28jaak5nnZ ~]# at now+1hour\nat> echo \"hello\"\nat> <EOT>\njob 11 at Wed Nov  2 22:23:00 2016\n[root@iZ28jaak5nnZ ~]# atq\n# 这里输出的第一列就是at的编号，下面查看详细信息就是根据编号查看的\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n9\tWed Nov  2 21:26:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n[root@iZ28jaak5nnZ ~]# at -c 11\n#!/bin/sh\n# atrun uid=0 gid=0\n# mail root 0\numask 22\nXDG_SESSION_ID=669; export XDG_SESSION_ID\n............................... # 这里省略了好多环境变量，重点在下面\nXDG_RUNTIME_DIR=/run/user/0; export XDG_RUNTIME_DIR\ncd /root || {\n\t echo 'Execution directory inaccessible' >&2\n\t exit 1\n}\n${SHELL:-/bin/sh} << 'marcinDELIMITER0e9efce8'\t# 这里是执行的命令\necho \"hello\"\n\nmarcinDELIMITER0e9efce8\n```\n\n## 删除一个at\n使用一个`atrm`命令可以指定at号删除特定的at计划任务。\n```bash\n[root@iZ28jaak5nnZ ~]# at now+1hour\nat> echo 'hello'\nat> <EOT>\njob 12 at Wed Nov  2 22:27:00 2016\n[root@iZ28jaak5nnZ ~]# atq\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n12\tWed Nov  2 22:27:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n[root@iZ28jaak5nnZ ~]# atm 12\n-bash: atm: command not found\n[root@iZ28jaak5nnZ ~]# atrm 12\n[root@iZ28jaak5nnZ ~]# atq\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n\n```bash\n[root@iZ28jaak5nnZ ~]# at now+1hour\nat> echo 'hello'\nat> <EOT>\njob 12 at Wed Nov  2 22:27:00 2016\n[root@iZ28jaak5nnZ ~]# atq\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n12\tWed Nov  2 22:27:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n[root@iZ28jaak5nnZ ~]# atrm 12\n[root@iZ28jaak5nnZ ~]# atq\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n```\n\n# 0X02 使用crontab命令\n* 这里的配置分成六段\n\n分---时---日---月---周---命令\n\n## 创建周期任务\n使用任何一个用户登陆到系统之后，就可以执行`crontab -e`就进入了vi的编辑器模式，然后我们来编辑这个文件就可以创建/修改周期任务了。\n```bash\n15  10 1 10 * echo 'hello' > /tmp/hello\t\t# 在每个10月1号10点15分执行命令\n15  10 1 *  * echo 'hello' > /tmp/hello\t\t# 在每个1号10点15分执行命令\n15  10 * *  * echo 'hello' > /tmp/hello\t\t# 在每个10点15分执行命令\n15  *  * *  * echo 'hello' > /tmp/hello\t\t# 在每个15分执行命令\n*/3 *  * *  * echo 'hello' > /tmp/hello\t\t# 每3分钟执行命令\n```\n退出保存之后就可以按照这个时间来执行命令了。\n\n## 查看周期任务\n使用`crontab -l`查看该用户的周期任务\n```bash\n[root@iZ28jaak5nnZ ~]# crontab -l\n15  10 1 10 * echo 'hello' > /tmp/hello\n15  10 1 *  * echo 'hello' > /tmp/hello\n15  10 * *  * echo 'hello' > /tmp/hello\n15  *  * *  * echo 'hello' > /tmp/hello\n*/3 *  * *  * echo 'hello' > /tmp/hello\n```\n\n## 删除周期任务\n可以使用`crontab -r`删除当前用户所有的周期任务。\n\n## 管理周期任务\n每个用户都可以使用`crontab -e`来管理自己的周期任务，然而root用户可以使用`crontab -u`来管理其他用户的周期任务。只要加一个-u选项即可，参数后面接上要管理的用户就可以了。然后还是和上面的操作一样，只是多了一个这个参数而已。\n","source":"_posts/linux_crontab.md","raw":"---\ntitle: Linux 中计划任务和周期任务\ndate: 2016-11-02 22:17\ntags:\n  - Linux\n  - Crontab\n  - 计划任务\n---\n\n# 0X00 Linux中的计划任务\n我们使用Linux更多的时候是在服务器上，然而我们有的时候就需要让计算机在固定的某个时间做一些事情。比如我们就可能有有如下需求：\n1. 临时有事需要离开电脑，但是一个小时后需要备份某个目录里的文件\n2. 写了个爬虫去抓取某网站的新闻，每隔十分钟就去爬取一次\n3. 周期性的执行某脚本，但放在后台的话退出ssh就会被自动关掉\n4. 其实还有好多这种可能............\n\n在Linux中有两种常见的任务管理，一个是`at`也就是在某时做某事，另一个是`crontab`也就是周期性任务表。使用at可以方便地给Linux设置一个在什么时候做什么事的计划，用crontab可以方便地给Linux设置我要做某事，多久做一次。\n\n# 0X01 使用at命令\n## 检查atd服务是否开启\n`atd`就是at命令的守护进程，系统默认是打开着的，但是也有可能被关掉，在RHEL系中可以使用`systemctl status atd`来查看服务是否已经开启，没有开启的话可以用`systemctl restart atd`来打开服务\n\n## 创建一个计划任务\n先创建一个在今天的`21:09`的任务，任务内容是输出hello,world重定向到/hello文件。然后到时间之后再检查这个文件是否出现了。当我们只指定时分的时候，默认是当天，如果已经过了的时间的话，会默认为次日。\n```bash\n# 一个即日的计划任务\n[root@iZ28jaak5nnZ ~]# date\nWed Nov  2 21:07:07 CST 2016\n[root@iZ28jaak5nnZ ~]# at 21:09\nat> echo \"hello,world\" > /hello\nat> <EOT>\njob 5 at Wed Nov  2 21:09:00 2016\n[root@iZ28jaak5nnZ ~]# date\nWed Nov  2 21:09:10 CST 2016\n[root@iZ28jaak5nnZ ~]# cat /hello\nhello,world\n```\n当我们输入`at 21:09`之后，就进入了at模式，我们在这里输入的命令就是之后将要执行的命令。当输入完命令之后按`Ctrl + D`就可以退出at模式，此时计划任务创建完毕，系统会提示你计划任务的执行时间。\n\n下面还有几个例子\n```bash\n# 一个准确定时的计划任务\n[root@iZ28jaak5nnZ ~]# at 00:00 2016-11-11\t# 在2016光棍节零点输出一个'hey 单身狗'\nat> echo \"hey single dog\"\nat> <EOT>\njob 7 at Fri Nov 11 00:00:00 2016\n\n# 在十分钟后执行\n[root@iZ28jaak5nnZ ~]# at now+10min\nat> echo 'hello single dog'\nat> <EOT>\njob 9 at Wed Nov  2 21:26:00 2016\n\n\n# 在一小时后执行\n[root@iZ28jaak5nnZ ~]# at now+1hour\nat> echo 'hey single dog'\nat> <EOT>\njob 10 at Wed Nov  2 22:16:00 2016\n```\n\n## 查看已有的at\n可以使用`atq`命令来查看存在的at计划任务，注意这里并不一定全都是用户自己创建的，也有的是系统创建的。通过atq查看到之后可以使用`at -c `来查看某个计划任务的具体信息。\n```bash\n[root@iZ28jaak5nnZ ~]# at now+1hour\nat> echo \"hello\"\nat> <EOT>\njob 11 at Wed Nov  2 22:23:00 2016\n[root@iZ28jaak5nnZ ~]# atq\n# 这里输出的第一列就是at的编号，下面查看详细信息就是根据编号查看的\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n9\tWed Nov  2 21:26:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n[root@iZ28jaak5nnZ ~]# at -c 11\n#!/bin/sh\n# atrun uid=0 gid=0\n# mail root 0\numask 22\nXDG_SESSION_ID=669; export XDG_SESSION_ID\n............................... # 这里省略了好多环境变量，重点在下面\nXDG_RUNTIME_DIR=/run/user/0; export XDG_RUNTIME_DIR\ncd /root || {\n\t echo 'Execution directory inaccessible' >&2\n\t exit 1\n}\n${SHELL:-/bin/sh} << 'marcinDELIMITER0e9efce8'\t# 这里是执行的命令\necho \"hello\"\n\nmarcinDELIMITER0e9efce8\n```\n\n## 删除一个at\n使用一个`atrm`命令可以指定at号删除特定的at计划任务。\n```bash\n[root@iZ28jaak5nnZ ~]# at now+1hour\nat> echo 'hello'\nat> <EOT>\njob 12 at Wed Nov  2 22:27:00 2016\n[root@iZ28jaak5nnZ ~]# atq\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n12\tWed Nov  2 22:27:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n[root@iZ28jaak5nnZ ~]# atm 12\n-bash: atm: command not found\n[root@iZ28jaak5nnZ ~]# atrm 12\n[root@iZ28jaak5nnZ ~]# atq\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n\n```bash\n[root@iZ28jaak5nnZ ~]# at now+1hour\nat> echo 'hello'\nat> <EOT>\njob 12 at Wed Nov  2 22:27:00 2016\n[root@iZ28jaak5nnZ ~]# atq\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n12\tWed Nov  2 22:27:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n[root@iZ28jaak5nnZ ~]# atrm 12\n[root@iZ28jaak5nnZ ~]# atq\n7\tFri Nov 11 00:00:00 2016 a root\n6\tThu Nov  3 03:00:00 2016 a root\n10\tWed Nov  2 22:16:00 2016 a root\n11\tWed Nov  2 22:23:00 2016 a root\n1\tWed Nov  2 21:52:00 2016 a root\n```\n\n# 0X02 使用crontab命令\n* 这里的配置分成六段\n\n分---时---日---月---周---命令\n\n## 创建周期任务\n使用任何一个用户登陆到系统之后，就可以执行`crontab -e`就进入了vi的编辑器模式，然后我们来编辑这个文件就可以创建/修改周期任务了。\n```bash\n15  10 1 10 * echo 'hello' > /tmp/hello\t\t# 在每个10月1号10点15分执行命令\n15  10 1 *  * echo 'hello' > /tmp/hello\t\t# 在每个1号10点15分执行命令\n15  10 * *  * echo 'hello' > /tmp/hello\t\t# 在每个10点15分执行命令\n15  *  * *  * echo 'hello' > /tmp/hello\t\t# 在每个15分执行命令\n*/3 *  * *  * echo 'hello' > /tmp/hello\t\t# 每3分钟执行命令\n```\n退出保存之后就可以按照这个时间来执行命令了。\n\n## 查看周期任务\n使用`crontab -l`查看该用户的周期任务\n```bash\n[root@iZ28jaak5nnZ ~]# crontab -l\n15  10 1 10 * echo 'hello' > /tmp/hello\n15  10 1 *  * echo 'hello' > /tmp/hello\n15  10 * *  * echo 'hello' > /tmp/hello\n15  *  * *  * echo 'hello' > /tmp/hello\n*/3 *  * *  * echo 'hello' > /tmp/hello\n```\n\n## 删除周期任务\n可以使用`crontab -r`删除当前用户所有的周期任务。\n\n## 管理周期任务\n每个用户都可以使用`crontab -e`来管理自己的周期任务，然而root用户可以使用`crontab -u`来管理其他用户的周期任务。只要加一个-u选项即可，参数后面接上要管理的用户就可以了。然后还是和上面的操作一样，只是多了一个这个参数而已。\n","slug":"linux_crontab","published":1,"updated":"2017-09-02T14:42:13.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmdz000lhnlp3ps0yxzv","content":"<h1 id=\"0X00-Linux中的计划任务\"><a href=\"#0X00-Linux中的计划任务\" class=\"headerlink\" title=\"0X00 Linux中的计划任务\"></a>0X00 Linux中的计划任务</h1><p>我们使用Linux更多的时候是在服务器上，然而我们有的时候就需要让计算机在固定的某个时间做一些事情。比如我们就可能有有如下需求：</p>\n<ol>\n<li>临时有事需要离开电脑，但是一个小时后需要备份某个目录里的文件</li>\n<li>写了个爬虫去抓取某网站的新闻，每隔十分钟就去爬取一次</li>\n<li>周期性的执行某脚本，但放在后台的话退出ssh就会被自动关掉</li>\n<li>其实还有好多这种可能…………</li>\n</ol>\n<p>在Linux中有两种常见的任务管理，一个是<code>at</code>也就是在某时做某事，另一个是<code>crontab</code>也就是周期性任务表。使用at可以方便地给Linux设置一个在什么时候做什么事的计划，用crontab可以方便地给Linux设置我要做某事，多久做一次。</p>\n<h1 id=\"0X01-使用at命令\"><a href=\"#0X01-使用at命令\" class=\"headerlink\" title=\"0X01 使用at命令\"></a>0X01 使用at命令</h1><h2 id=\"检查atd服务是否开启\"><a href=\"#检查atd服务是否开启\" class=\"headerlink\" title=\"检查atd服务是否开启\"></a>检查atd服务是否开启</h2><p><code>atd</code>就是at命令的守护进程，系统默认是打开着的，但是也有可能被关掉，在RHEL系中可以使用<code>systemctl status atd</code>来查看服务是否已经开启，没有开启的话可以用<code>systemctl restart atd</code>来打开服务</p>\n<h2 id=\"创建一个计划任务\"><a href=\"#创建一个计划任务\" class=\"headerlink\" title=\"创建一个计划任务\"></a>创建一个计划任务</h2><p>先创建一个在今天的<code>21:09</code>的任务，任务内容是输出hello,world重定向到/hello文件。然后到时间之后再检查这个文件是否出现了。当我们只指定时分的时候，默认是当天，如果已经过了的时间的话，会默认为次日。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 一个即日的计划任务</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># date</span></div><div class=\"line\">Wed Nov  2 21:07:07 CST 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at 21:09</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span> &gt; /hello</div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 5 at Wed Nov  2 21:09:00 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># date</span></div><div class=\"line\">Wed Nov  2 21:09:10 CST 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># cat /hello</span></div><div class=\"line\">hello,world</div></pre></td></tr></table></figure></p>\n<p>当我们输入<code>at 21:09</code>之后，就进入了at模式，我们在这里输入的命令就是之后将要执行的命令。当输入完命令之后按<code>Ctrl + D</code>就可以退出at模式，此时计划任务创建完毕，系统会提示你计划任务的执行时间。</p>\n<p>下面还有几个例子<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 一个准确定时的计划任务</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at 00:00 2016-11-11\t# 在2016光棍节零点输出一个'hey 单身狗'</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"hey single dog\"</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 7 at Fri Nov 11 00:00:00 2016</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在十分钟后执行</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+10min</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">'hello single dog'</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 9 at Wed Nov  2 21:26:00 2016</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在一小时后执行</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+1hour</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">'hey single dog'</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 10 at Wed Nov  2 22:16:00 2016</div></pre></td></tr></table></figure></p>\n<h2 id=\"查看已有的at\"><a href=\"#查看已有的at\" class=\"headerlink\" title=\"查看已有的at\"></a>查看已有的at</h2><p>可以使用<code>atq</code>命令来查看存在的at计划任务，注意这里并不一定全都是用户自己创建的，也有的是系统创建的。通过atq查看到之后可以使用<code>at -c</code>来查看某个计划任务的具体信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+1hour</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"hello\"</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 11 at Wed Nov  2 22:23:00 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\"><span class=\"comment\"># 这里输出的第一列就是at的编号，下面查看详细信息就是根据编号查看的</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">9\tWed Nov  2 21:26:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at -c 11</span></div><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"comment\"># atrun uid=0 gid=0</span></div><div class=\"line\"><span class=\"comment\"># mail root 0</span></div><div class=\"line\"><span class=\"built_in\">umask</span> 22</div><div class=\"line\">XDG_SESSION_ID=669; <span class=\"built_in\">export</span> XDG_SESSION_ID</div><div class=\"line\">............................... <span class=\"comment\"># 这里省略了好多环境变量，重点在下面</span></div><div class=\"line\">XDG_RUNTIME_DIR=/run/user/0; <span class=\"built_in\">export</span> XDG_RUNTIME_DIR</div><div class=\"line\"><span class=\"built_in\">cd</span> /root || &#123;</div><div class=\"line\">\t <span class=\"built_in\">echo</span> <span class=\"string\">'Execution directory inaccessible'</span> &gt;&amp;2</div><div class=\"line\">\t <span class=\"built_in\">exit</span> 1</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">$&#123;SHELL:-/bin/sh&#125;</span> &lt;&lt; <span class=\"string\">'marcinDELIMITER0e9efce8'</span>\t<span class=\"comment\"># 这里是执行的命令</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello\"</span></div><div class=\"line\"></div><div class=\"line\">marcinDELIMITER0e9efce8</div></pre></td></tr></table></figure></p>\n<h2 id=\"删除一个at\"><a href=\"#删除一个at\" class=\"headerlink\" title=\"删除一个at\"></a>删除一个at</h2><p>使用一个<code>atrm</code>命令可以指定at号删除特定的at计划任务。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+1hour</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 12 at Wed Nov  2 22:27:00 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">12\tWed Nov  2 22:27:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atm 12</span></div><div class=\"line\">-bash: atm: <span class=\"built_in\">command</span> not found</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atrm 12</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div><div class=\"line\"></div><div class=\"line\">```bash</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+1hour</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 12 at Wed Nov  2 22:27:00 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">12\tWed Nov  2 22:27:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atrm 12</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-使用crontab命令\"><a href=\"#0X02-使用crontab命令\" class=\"headerlink\" title=\"0X02 使用crontab命令\"></a>0X02 使用crontab命令</h1><ul>\n<li>这里的配置分成六段</li>\n</ul>\n<p>分—时—日—月—周—命令</p>\n<h2 id=\"创建周期任务\"><a href=\"#创建周期任务\" class=\"headerlink\" title=\"创建周期任务\"></a>创建周期任务</h2><p>使用任何一个用户登陆到系统之后，就可以执行<code>crontab -e</code>就进入了vi的编辑器模式，然后我们来编辑这个文件就可以创建/修改周期任务了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">15  10 1 10 * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 在每个10月1号10点15分执行命令</span></div><div class=\"line\">15  10 1 *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 在每个1号10点15分执行命令</span></div><div class=\"line\">15  10 * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 在每个10点15分执行命令</span></div><div class=\"line\">15  *  * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 在每个15分执行命令</span></div><div class=\"line\">*/3 *  * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 每3分钟执行命令</span></div></pre></td></tr></table></figure></p>\n<p>退出保存之后就可以按照这个时间来执行命令了。</p>\n<h2 id=\"查看周期任务\"><a href=\"#查看周期任务\" class=\"headerlink\" title=\"查看周期任务\"></a>查看周期任务</h2><p>使用<code>crontab -l</code>查看该用户的周期任务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># crontab -l</span></div><div class=\"line\">15  10 1 10 * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div><div class=\"line\">15  10 1 *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div><div class=\"line\">15  10 * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div><div class=\"line\">15  *  * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div><div class=\"line\">*/3 *  * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div></pre></td></tr></table></figure></p>\n<h2 id=\"删除周期任务\"><a href=\"#删除周期任务\" class=\"headerlink\" title=\"删除周期任务\"></a>删除周期任务</h2><p>可以使用<code>crontab -r</code>删除当前用户所有的周期任务。</p>\n<h2 id=\"管理周期任务\"><a href=\"#管理周期任务\" class=\"headerlink\" title=\"管理周期任务\"></a>管理周期任务</h2><p>每个用户都可以使用<code>crontab -e</code>来管理自己的周期任务，然而root用户可以使用<code>crontab -u</code>来管理其他用户的周期任务。只要加一个-u选项即可，参数后面接上要管理的用户就可以了。然后还是和上面的操作一样，只是多了一个这个参数而已。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-Linux中的计划任务\"><a href=\"#0X00-Linux中的计划任务\" class=\"headerlink\" title=\"0X00 Linux中的计划任务\"></a>0X00 Linux中的计划任务</h1><p>我们使用Linux更多的时候是在服务器上，然而我们有的时候就需要让计算机在固定的某个时间做一些事情。比如我们就可能有有如下需求：</p>\n<ol>\n<li>临时有事需要离开电脑，但是一个小时后需要备份某个目录里的文件</li>\n<li>写了个爬虫去抓取某网站的新闻，每隔十分钟就去爬取一次</li>\n<li>周期性的执行某脚本，但放在后台的话退出ssh就会被自动关掉</li>\n<li>其实还有好多这种可能…………</li>\n</ol>\n<p>在Linux中有两种常见的任务管理，一个是<code>at</code>也就是在某时做某事，另一个是<code>crontab</code>也就是周期性任务表。使用at可以方便地给Linux设置一个在什么时候做什么事的计划，用crontab可以方便地给Linux设置我要做某事，多久做一次。</p>\n<h1 id=\"0X01-使用at命令\"><a href=\"#0X01-使用at命令\" class=\"headerlink\" title=\"0X01 使用at命令\"></a>0X01 使用at命令</h1><h2 id=\"检查atd服务是否开启\"><a href=\"#检查atd服务是否开启\" class=\"headerlink\" title=\"检查atd服务是否开启\"></a>检查atd服务是否开启</h2><p><code>atd</code>就是at命令的守护进程，系统默认是打开着的，但是也有可能被关掉，在RHEL系中可以使用<code>systemctl status atd</code>来查看服务是否已经开启，没有开启的话可以用<code>systemctl restart atd</code>来打开服务</p>\n<h2 id=\"创建一个计划任务\"><a href=\"#创建一个计划任务\" class=\"headerlink\" title=\"创建一个计划任务\"></a>创建一个计划任务</h2><p>先创建一个在今天的<code>21:09</code>的任务，任务内容是输出hello,world重定向到/hello文件。然后到时间之后再检查这个文件是否出现了。当我们只指定时分的时候，默认是当天，如果已经过了的时间的话，会默认为次日。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 一个即日的计划任务</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># date</span></div><div class=\"line\">Wed Nov  2 21:07:07 CST 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at 21:09</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span> &gt; /hello</div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 5 at Wed Nov  2 21:09:00 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># date</span></div><div class=\"line\">Wed Nov  2 21:09:10 CST 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># cat /hello</span></div><div class=\"line\">hello,world</div></pre></td></tr></table></figure></p>\n<p>当我们输入<code>at 21:09</code>之后，就进入了at模式，我们在这里输入的命令就是之后将要执行的命令。当输入完命令之后按<code>Ctrl + D</code>就可以退出at模式，此时计划任务创建完毕，系统会提示你计划任务的执行时间。</p>\n<p>下面还有几个例子<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 一个准确定时的计划任务</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at 00:00 2016-11-11\t# 在2016光棍节零点输出一个'hey 单身狗'</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"hey single dog\"</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 7 at Fri Nov 11 00:00:00 2016</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在十分钟后执行</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+10min</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">'hello single dog'</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 9 at Wed Nov  2 21:26:00 2016</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 在一小时后执行</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+1hour</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">'hey single dog'</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 10 at Wed Nov  2 22:16:00 2016</div></pre></td></tr></table></figure></p>\n<h2 id=\"查看已有的at\"><a href=\"#查看已有的at\" class=\"headerlink\" title=\"查看已有的at\"></a>查看已有的at</h2><p>可以使用<code>atq</code>命令来查看存在的at计划任务，注意这里并不一定全都是用户自己创建的，也有的是系统创建的。通过atq查看到之后可以使用<code>at -c</code>来查看某个计划任务的具体信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+1hour</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">\"hello\"</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 11 at Wed Nov  2 22:23:00 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\"><span class=\"comment\"># 这里输出的第一列就是at的编号，下面查看详细信息就是根据编号查看的</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">9\tWed Nov  2 21:26:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at -c 11</span></div><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"comment\"># atrun uid=0 gid=0</span></div><div class=\"line\"><span class=\"comment\"># mail root 0</span></div><div class=\"line\"><span class=\"built_in\">umask</span> 22</div><div class=\"line\">XDG_SESSION_ID=669; <span class=\"built_in\">export</span> XDG_SESSION_ID</div><div class=\"line\">............................... <span class=\"comment\"># 这里省略了好多环境变量，重点在下面</span></div><div class=\"line\">XDG_RUNTIME_DIR=/run/user/0; <span class=\"built_in\">export</span> XDG_RUNTIME_DIR</div><div class=\"line\"><span class=\"built_in\">cd</span> /root || &#123;</div><div class=\"line\">\t <span class=\"built_in\">echo</span> <span class=\"string\">'Execution directory inaccessible'</span> &gt;&amp;2</div><div class=\"line\">\t <span class=\"built_in\">exit</span> 1</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">$&#123;SHELL:-/bin/sh&#125;</span> &lt;&lt; <span class=\"string\">'marcinDELIMITER0e9efce8'</span>\t<span class=\"comment\"># 这里是执行的命令</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello\"</span></div><div class=\"line\"></div><div class=\"line\">marcinDELIMITER0e9efce8</div></pre></td></tr></table></figure></p>\n<h2 id=\"删除一个at\"><a href=\"#删除一个at\" class=\"headerlink\" title=\"删除一个at\"></a>删除一个at</h2><p>使用一个<code>atrm</code>命令可以指定at号删除特定的at计划任务。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+1hour</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 12 at Wed Nov  2 22:27:00 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">12\tWed Nov  2 22:27:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atm 12</span></div><div class=\"line\">-bash: atm: <span class=\"built_in\">command</span> not found</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atrm 12</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div><div class=\"line\"></div><div class=\"line\">```bash</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># at now+1hour</span></div><div class=\"line\">at&gt; <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span></div><div class=\"line\">at&gt; &lt;EOT&gt;</div><div class=\"line\">job 12 at Wed Nov  2 22:27:00 2016</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">12\tWed Nov  2 22:27:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atrm 12</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># atq</span></div><div class=\"line\">7\tFri Nov 11 00:00:00 2016 a root</div><div class=\"line\">6\tThu Nov  3 03:00:00 2016 a root</div><div class=\"line\">10\tWed Nov  2 22:16:00 2016 a root</div><div class=\"line\">11\tWed Nov  2 22:23:00 2016 a root</div><div class=\"line\">1\tWed Nov  2 21:52:00 2016 a root</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-使用crontab命令\"><a href=\"#0X02-使用crontab命令\" class=\"headerlink\" title=\"0X02 使用crontab命令\"></a>0X02 使用crontab命令</h1><ul>\n<li>这里的配置分成六段</li>\n</ul>\n<p>分—时—日—月—周—命令</p>\n<h2 id=\"创建周期任务\"><a href=\"#创建周期任务\" class=\"headerlink\" title=\"创建周期任务\"></a>创建周期任务</h2><p>使用任何一个用户登陆到系统之后，就可以执行<code>crontab -e</code>就进入了vi的编辑器模式，然后我们来编辑这个文件就可以创建/修改周期任务了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">15  10 1 10 * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 在每个10月1号10点15分执行命令</span></div><div class=\"line\">15  10 1 *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 在每个1号10点15分执行命令</span></div><div class=\"line\">15  10 * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 在每个10点15分执行命令</span></div><div class=\"line\">15  *  * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 在每个15分执行命令</span></div><div class=\"line\">*/3 *  * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello\t\t<span class=\"comment\"># 每3分钟执行命令</span></div></pre></td></tr></table></figure></p>\n<p>退出保存之后就可以按照这个时间来执行命令了。</p>\n<h2 id=\"查看周期任务\"><a href=\"#查看周期任务\" class=\"headerlink\" title=\"查看周期任务\"></a>查看周期任务</h2><p>使用<code>crontab -l</code>查看该用户的周期任务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># crontab -l</span></div><div class=\"line\">15  10 1 10 * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div><div class=\"line\">15  10 1 *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div><div class=\"line\">15  10 * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div><div class=\"line\">15  *  * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div><div class=\"line\">*/3 *  * *  * <span class=\"built_in\">echo</span> <span class=\"string\">'hello'</span> &gt; /tmp/hello</div></pre></td></tr></table></figure></p>\n<h2 id=\"删除周期任务\"><a href=\"#删除周期任务\" class=\"headerlink\" title=\"删除周期任务\"></a>删除周期任务</h2><p>可以使用<code>crontab -r</code>删除当前用户所有的周期任务。</p>\n<h2 id=\"管理周期任务\"><a href=\"#管理周期任务\" class=\"headerlink\" title=\"管理周期任务\"></a>管理周期任务</h2><p>每个用户都可以使用<code>crontab -e</code>来管理自己的周期任务，然而root用户可以使用<code>crontab -u</code>来管理其他用户的周期任务。只要加一个-u选项即可，参数后面接上要管理的用户就可以了。然后还是和上面的操作一样，只是多了一个这个参数而已。</p>\n"},{"title":"Linux配置DHCP服务器 简明教程","date":"2016-05-12T00:08:00.000Z","_content":"\n# DHCP介绍\n## 功能简介\nDHCP是一个基于UDP的工作在应用层的协议，用来自动分配IP地址。\n应用实例：一个办公室有十个人，每个人每天上下班都要带着自己的笔记本，所以每次都要手动配置IP地址，这样简直就不是计算机该干的事情是吧。。所以DHCP应运而生，它能够根据服务端的配置给连接到网络的客户机自动分配IP地址。\n\n## 提供的服务\n1.提供IP地址和子网掩码\n2.提供IP地址对应的网络地址和广播地址\n3.默认网关地址\n4.DNS服务器地址\n\n## 通俗的解释\n你们寝室里有六个人（对应到客户机），每个人都需要用床（对应到IP地址）睡觉，所以每个人回到寝室都会需要一张床。这样的话每个人每次回到寝室的时候都需要宿管（对应到网络管理员）都需要给他分配一个床位，这样就很麻烦。\n现在有一个“动态床位分配系统”（对应到DHCP服务器），你们每个人回到寝室的时候都会收到一张纸条，纸条上写了你可以使用哪个床位，这就简单多了。\n再然后可能小明（对应到一个特定的客户机）有洁癖，他需要一个固定的床位（对应到一个需要固定IP的设备，比如打印机或者提供某些服务的服务器）。所以“动态床位分配系统”可以添加一条规则“叫小明的人来了就分配给他三号床位”，就解决了这个问题。\n\n## 租约时间\nDHCP分配给客户的IP是以**租约**形式分配的。当客户接入到网络中，DHCP便会分配一个IP给客户机，当租约时间到的时候如果客户机还在使用这个IP那么就可以续约，继续使用当前IP而不是从新分配一个。\n\n# 在CentOS 7.x 下搭建DHCP服务\n## 0X00 安装DHCP服务\n使用yum、rpm、源码等方式进行安装\n```bash\nyum install dhcpd\n```\n\n## 0X01 配置服务器网络服务\n首先我们要将本地的网络配置成静态地址，并重启网络服务\n```bash\nvim /etc/sysconfig/network-scripts/enp0s3\n```\n这里的`enp0s3`是我的网卡，你需要将这里修改成你的网卡，另外在CentOS 7.x 以前的版本中，使用的是`ethx`的命名方式。\n修改如下选项\n```bash\nBOOTPROTO=static #之前很有可能是dhcp，现在我们修改它为静态\nONBOOT=yes\t\t #以前可能是no，改为yes、就是打开网络服务的时候启动这个网卡\nIPADDR=192.168.233.1 #配置文件中可能没有这个，没有的话就自己添加这行\n# 这里的IP地址可以自定义，不过最后一位最好是1，这样便于识别\n```\n\n然后重启网络服务，如果配置文件没有错误的话，就可以正常启动了\n```bash\nsystemctl restart network.service\n```\n\n这时候我们检查一下IP是不是已经变成我们设置的静态IP了\n```bash\nifconfig enp0s3\n```\n\n## 0X02 配置DHCP服务\n配置文件在这里\n```bash\nvim /etc/dhcp/dhcpd.conf\n```\n打开之后会有三行注释，我们初次学习配置的时候可以先不管它，只有服务真的跑起来并生效了我们才会进一步学习是吧。\n\n在配置文件最后添加如下内容\n```bash\n#设置DHCP于DNS服务器的动态信息更新模式。初学时完全可以不理这个选项，但是全局设置中一定要有这个选项，否则DHCP服务不能成功启动。\nddns-update-style interim;\n\n#下面开始分配子网，网段是192.168.233.0 子网掩码是 255.255.255.0\n#不能理解网段和子网掩码的可以去网上查一下。简单的说网段规定了分配IP的段（分配哪一段IP给客户机），子网掩码规定了网段的大小\nsubnet 192.168.233.0 netmask 255.255.255.0 {\n\trange 192.168.233.100 192.168.233.199; #分配给客户机的IP从192.168.233.100开始到192.168.233.199\n    option routers 192.168.233.2; #设置网关\n    default-lease-time 600; #默认租约时间\n    max-lease-time 7200; #最大租约时间\n}\n```\n\n## 0X03 给特定客户分配特定地址\n上面也说过，如果同一网络内有需要固定IP的设备，我们也可以通过DHCP来给他分配固定的IP。（就比如说那个有洁癖的同学）\n首先要说一下DHCP识别主机的方式：\nDHCP通过接入客户的网卡的MAC地址来判断客户，所以如果你的机器有两块网卡，并且两块网卡同时接入了网络，那么DHCP就会认为有两个设备接入了网络，并给你的机器分配两个IP\n>MAC地址并不是“苹果地址”。。。\n>MAC地址是“物理地址”，每块网卡在出厂的时候都会有一个全球独一无二的MAC地址，MAC地址是一个48位2进制的数字，通常表达为六段两位十六进制。\n\n下面我们继续修改DHCP配置文件，在刚才的配置后面追加下面的内容\n```bash\nhost Client_C { #有一个主机，叫Client_C\n\thardware ethernet 08:00:27:5e:04:27; #MAC地址是08:...:27的网卡\n    fixed-address 192.168.233.123;\t\t #分配给它192.168.233.123的IP\n}\n```\n这样配置的话，不管何时，只要这个CLient_C接入到了这个网络中，那么它获取的IP就是固定的这一个，并不会变\n然后重启一下DHCP服务就好了\n```bash\nsystemctl restart dhcpd.service\n```\n\n# 好了，至此DHCP的基础配置就搞定了\n","source":"_posts/linux_dhcp_server.md","raw":"---\ntitle: Linux配置DHCP服务器 简明教程\ndate: 2016-05-12 08:08\ntags:\n  - Linux\n  - DHCP\n  - 服务配置\n---\n\n# DHCP介绍\n## 功能简介\nDHCP是一个基于UDP的工作在应用层的协议，用来自动分配IP地址。\n应用实例：一个办公室有十个人，每个人每天上下班都要带着自己的笔记本，所以每次都要手动配置IP地址，这样简直就不是计算机该干的事情是吧。。所以DHCP应运而生，它能够根据服务端的配置给连接到网络的客户机自动分配IP地址。\n\n## 提供的服务\n1.提供IP地址和子网掩码\n2.提供IP地址对应的网络地址和广播地址\n3.默认网关地址\n4.DNS服务器地址\n\n## 通俗的解释\n你们寝室里有六个人（对应到客户机），每个人都需要用床（对应到IP地址）睡觉，所以每个人回到寝室都会需要一张床。这样的话每个人每次回到寝室的时候都需要宿管（对应到网络管理员）都需要给他分配一个床位，这样就很麻烦。\n现在有一个“动态床位分配系统”（对应到DHCP服务器），你们每个人回到寝室的时候都会收到一张纸条，纸条上写了你可以使用哪个床位，这就简单多了。\n再然后可能小明（对应到一个特定的客户机）有洁癖，他需要一个固定的床位（对应到一个需要固定IP的设备，比如打印机或者提供某些服务的服务器）。所以“动态床位分配系统”可以添加一条规则“叫小明的人来了就分配给他三号床位”，就解决了这个问题。\n\n## 租约时间\nDHCP分配给客户的IP是以**租约**形式分配的。当客户接入到网络中，DHCP便会分配一个IP给客户机，当租约时间到的时候如果客户机还在使用这个IP那么就可以续约，继续使用当前IP而不是从新分配一个。\n\n# 在CentOS 7.x 下搭建DHCP服务\n## 0X00 安装DHCP服务\n使用yum、rpm、源码等方式进行安装\n```bash\nyum install dhcpd\n```\n\n## 0X01 配置服务器网络服务\n首先我们要将本地的网络配置成静态地址，并重启网络服务\n```bash\nvim /etc/sysconfig/network-scripts/enp0s3\n```\n这里的`enp0s3`是我的网卡，你需要将这里修改成你的网卡，另外在CentOS 7.x 以前的版本中，使用的是`ethx`的命名方式。\n修改如下选项\n```bash\nBOOTPROTO=static #之前很有可能是dhcp，现在我们修改它为静态\nONBOOT=yes\t\t #以前可能是no，改为yes、就是打开网络服务的时候启动这个网卡\nIPADDR=192.168.233.1 #配置文件中可能没有这个，没有的话就自己添加这行\n# 这里的IP地址可以自定义，不过最后一位最好是1，这样便于识别\n```\n\n然后重启网络服务，如果配置文件没有错误的话，就可以正常启动了\n```bash\nsystemctl restart network.service\n```\n\n这时候我们检查一下IP是不是已经变成我们设置的静态IP了\n```bash\nifconfig enp0s3\n```\n\n## 0X02 配置DHCP服务\n配置文件在这里\n```bash\nvim /etc/dhcp/dhcpd.conf\n```\n打开之后会有三行注释，我们初次学习配置的时候可以先不管它，只有服务真的跑起来并生效了我们才会进一步学习是吧。\n\n在配置文件最后添加如下内容\n```bash\n#设置DHCP于DNS服务器的动态信息更新模式。初学时完全可以不理这个选项，但是全局设置中一定要有这个选项，否则DHCP服务不能成功启动。\nddns-update-style interim;\n\n#下面开始分配子网，网段是192.168.233.0 子网掩码是 255.255.255.0\n#不能理解网段和子网掩码的可以去网上查一下。简单的说网段规定了分配IP的段（分配哪一段IP给客户机），子网掩码规定了网段的大小\nsubnet 192.168.233.0 netmask 255.255.255.0 {\n\trange 192.168.233.100 192.168.233.199; #分配给客户机的IP从192.168.233.100开始到192.168.233.199\n    option routers 192.168.233.2; #设置网关\n    default-lease-time 600; #默认租约时间\n    max-lease-time 7200; #最大租约时间\n}\n```\n\n## 0X03 给特定客户分配特定地址\n上面也说过，如果同一网络内有需要固定IP的设备，我们也可以通过DHCP来给他分配固定的IP。（就比如说那个有洁癖的同学）\n首先要说一下DHCP识别主机的方式：\nDHCP通过接入客户的网卡的MAC地址来判断客户，所以如果你的机器有两块网卡，并且两块网卡同时接入了网络，那么DHCP就会认为有两个设备接入了网络，并给你的机器分配两个IP\n>MAC地址并不是“苹果地址”。。。\n>MAC地址是“物理地址”，每块网卡在出厂的时候都会有一个全球独一无二的MAC地址，MAC地址是一个48位2进制的数字，通常表达为六段两位十六进制。\n\n下面我们继续修改DHCP配置文件，在刚才的配置后面追加下面的内容\n```bash\nhost Client_C { #有一个主机，叫Client_C\n\thardware ethernet 08:00:27:5e:04:27; #MAC地址是08:...:27的网卡\n    fixed-address 192.168.233.123;\t\t #分配给它192.168.233.123的IP\n}\n```\n这样配置的话，不管何时，只要这个CLient_C接入到了这个网络中，那么它获取的IP就是固定的这一个，并不会变\n然后重启一下DHCP服务就好了\n```bash\nsystemctl restart dhcpd.service\n```\n\n# 好了，至此DHCP的基础配置就搞定了\n","slug":"linux_dhcp_server","published":1,"updated":"2017-09-02T14:42:27.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme0000nhnlpofsltmpo","content":"<h1 id=\"DHCP介绍\"><a href=\"#DHCP介绍\" class=\"headerlink\" title=\"DHCP介绍\"></a>DHCP介绍</h1><h2 id=\"功能简介\"><a href=\"#功能简介\" class=\"headerlink\" title=\"功能简介\"></a>功能简介</h2><p>DHCP是一个基于UDP的工作在应用层的协议，用来自动分配IP地址。<br>应用实例：一个办公室有十个人，每个人每天上下班都要带着自己的笔记本，所以每次都要手动配置IP地址，这样简直就不是计算机该干的事情是吧。。所以DHCP应运而生，它能够根据服务端的配置给连接到网络的客户机自动分配IP地址。</p>\n<h2 id=\"提供的服务\"><a href=\"#提供的服务\" class=\"headerlink\" title=\"提供的服务\"></a>提供的服务</h2><p>1.提供IP地址和子网掩码<br>2.提供IP地址对应的网络地址和广播地址<br>3.默认网关地址<br>4.DNS服务器地址</p>\n<h2 id=\"通俗的解释\"><a href=\"#通俗的解释\" class=\"headerlink\" title=\"通俗的解释\"></a>通俗的解释</h2><p>你们寝室里有六个人（对应到客户机），每个人都需要用床（对应到IP地址）睡觉，所以每个人回到寝室都会需要一张床。这样的话每个人每次回到寝室的时候都需要宿管（对应到网络管理员）都需要给他分配一个床位，这样就很麻烦。<br>现在有一个“动态床位分配系统”（对应到DHCP服务器），你们每个人回到寝室的时候都会收到一张纸条，纸条上写了你可以使用哪个床位，这就简单多了。<br>再然后可能小明（对应到一个特定的客户机）有洁癖，他需要一个固定的床位（对应到一个需要固定IP的设备，比如打印机或者提供某些服务的服务器）。所以“动态床位分配系统”可以添加一条规则“叫小明的人来了就分配给他三号床位”，就解决了这个问题。</p>\n<h2 id=\"租约时间\"><a href=\"#租约时间\" class=\"headerlink\" title=\"租约时间\"></a>租约时间</h2><p>DHCP分配给客户的IP是以<strong>租约</strong>形式分配的。当客户接入到网络中，DHCP便会分配一个IP给客户机，当租约时间到的时候如果客户机还在使用这个IP那么就可以续约，继续使用当前IP而不是从新分配一个。</p>\n<h1 id=\"在CentOS-7-x-下搭建DHCP服务\"><a href=\"#在CentOS-7-x-下搭建DHCP服务\" class=\"headerlink\" title=\"在CentOS 7.x 下搭建DHCP服务\"></a>在CentOS 7.x 下搭建DHCP服务</h1><h2 id=\"0X00-安装DHCP服务\"><a href=\"#0X00-安装DHCP服务\" class=\"headerlink\" title=\"0X00 安装DHCP服务\"></a>0X00 安装DHCP服务</h2><p>使用yum、rpm、源码等方式进行安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install dhcpd</div></pre></td></tr></table></figure></p>\n<h2 id=\"0X01-配置服务器网络服务\"><a href=\"#0X01-配置服务器网络服务\" class=\"headerlink\" title=\"0X01 配置服务器网络服务\"></a>0X01 配置服务器网络服务</h2><p>首先我们要将本地的网络配置成静态地址，并重启网络服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysconfig/network-scripts/enp0s3</div></pre></td></tr></table></figure></p>\n<p>这里的<code>enp0s3</code>是我的网卡，你需要将这里修改成你的网卡，另外在CentOS 7.x 以前的版本中，使用的是<code>ethx</code>的命名方式。<br>修改如下选项<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">BOOTPROTO=static <span class=\"comment\">#之前很有可能是dhcp，现在我们修改它为静态</span></div><div class=\"line\">ONBOOT=yes\t\t <span class=\"comment\">#以前可能是no，改为yes、就是打开网络服务的时候启动这个网卡</span></div><div class=\"line\">IPADDR=192.168.233.1 <span class=\"comment\">#配置文件中可能没有这个，没有的话就自己添加这行</span></div><div class=\"line\"><span class=\"comment\"># 这里的IP地址可以自定义，不过最后一位最好是1，这样便于识别</span></div></pre></td></tr></table></figure></p>\n<p>然后重启网络服务，如果配置文件没有错误的话，就可以正常启动了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart network.service</div></pre></td></tr></table></figure></p>\n<p>这时候我们检查一下IP是不是已经变成我们设置的静态IP了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig enp0s3</div></pre></td></tr></table></figure></p>\n<h2 id=\"0X02-配置DHCP服务\"><a href=\"#0X02-配置DHCP服务\" class=\"headerlink\" title=\"0X02 配置DHCP服务\"></a>0X02 配置DHCP服务</h2><p>配置文件在这里<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/dhcp/dhcpd.conf</div></pre></td></tr></table></figure></p>\n<p>打开之后会有三行注释，我们初次学习配置的时候可以先不管它，只有服务真的跑起来并生效了我们才会进一步学习是吧。</p>\n<p>在配置文件最后添加如下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#设置DHCP于DNS服务器的动态信息更新模式。初学时完全可以不理这个选项，但是全局设置中一定要有这个选项，否则DHCP服务不能成功启动。</span></div><div class=\"line\">ddns-update-style interim;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#下面开始分配子网，网段是192.168.233.0 子网掩码是 255.255.255.0</span></div><div class=\"line\"><span class=\"comment\">#不能理解网段和子网掩码的可以去网上查一下。简单的说网段规定了分配IP的段（分配哪一段IP给客户机），子网掩码规定了网段的大小</span></div><div class=\"line\">subnet 192.168.233.0 netmask 255.255.255.0 &#123;</div><div class=\"line\">\trange 192.168.233.100 192.168.233.199; <span class=\"comment\">#分配给客户机的IP从192.168.233.100开始到192.168.233.199</span></div><div class=\"line\">    option routers 192.168.233.2; <span class=\"comment\">#设置网关</span></div><div class=\"line\">    default-lease-time 600; <span class=\"comment\">#默认租约时间</span></div><div class=\"line\">    max-lease-time 7200; <span class=\"comment\">#最大租约时间</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"0X03-给特定客户分配特定地址\"><a href=\"#0X03-给特定客户分配特定地址\" class=\"headerlink\" title=\"0X03 给特定客户分配特定地址\"></a>0X03 给特定客户分配特定地址</h2><p>上面也说过，如果同一网络内有需要固定IP的设备，我们也可以通过DHCP来给他分配固定的IP。（就比如说那个有洁癖的同学）<br>首先要说一下DHCP识别主机的方式：<br>DHCP通过接入客户的网卡的MAC地址来判断客户，所以如果你的机器有两块网卡，并且两块网卡同时接入了网络，那么DHCP就会认为有两个设备接入了网络，并给你的机器分配两个IP</p>\n<blockquote>\n<p>MAC地址并不是“苹果地址”。。。<br>MAC地址是“物理地址”，每块网卡在出厂的时候都会有一个全球独一无二的MAC地址，MAC地址是一个48位2进制的数字，通常表达为六段两位十六进制。</p>\n</blockquote>\n<p>下面我们继续修改DHCP配置文件，在刚才的配置后面追加下面的内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">host Client_C &#123; <span class=\"comment\">#有一个主机，叫Client_C</span></div><div class=\"line\">\thardware ethernet 08:00:27:5e:04:27; <span class=\"comment\">#MAC地址是08:...:27的网卡</span></div><div class=\"line\">    fixed-address 192.168.233.123;\t\t <span class=\"comment\">#分配给它192.168.233.123的IP</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样配置的话，不管何时，只要这个CLient_C接入到了这个网络中，那么它获取的IP就是固定的这一个，并不会变<br>然后重启一下DHCP服务就好了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart dhcpd.service</div></pre></td></tr></table></figure></p>\n<h1 id=\"好了，至此DHCP的基础配置就搞定了\"><a href=\"#好了，至此DHCP的基础配置就搞定了\" class=\"headerlink\" title=\"好了，至此DHCP的基础配置就搞定了\"></a>好了，至此DHCP的基础配置就搞定了</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"DHCP介绍\"><a href=\"#DHCP介绍\" class=\"headerlink\" title=\"DHCP介绍\"></a>DHCP介绍</h1><h2 id=\"功能简介\"><a href=\"#功能简介\" class=\"headerlink\" title=\"功能简介\"></a>功能简介</h2><p>DHCP是一个基于UDP的工作在应用层的协议，用来自动分配IP地址。<br>应用实例：一个办公室有十个人，每个人每天上下班都要带着自己的笔记本，所以每次都要手动配置IP地址，这样简直就不是计算机该干的事情是吧。。所以DHCP应运而生，它能够根据服务端的配置给连接到网络的客户机自动分配IP地址。</p>\n<h2 id=\"提供的服务\"><a href=\"#提供的服务\" class=\"headerlink\" title=\"提供的服务\"></a>提供的服务</h2><p>1.提供IP地址和子网掩码<br>2.提供IP地址对应的网络地址和广播地址<br>3.默认网关地址<br>4.DNS服务器地址</p>\n<h2 id=\"通俗的解释\"><a href=\"#通俗的解释\" class=\"headerlink\" title=\"通俗的解释\"></a>通俗的解释</h2><p>你们寝室里有六个人（对应到客户机），每个人都需要用床（对应到IP地址）睡觉，所以每个人回到寝室都会需要一张床。这样的话每个人每次回到寝室的时候都需要宿管（对应到网络管理员）都需要给他分配一个床位，这样就很麻烦。<br>现在有一个“动态床位分配系统”（对应到DHCP服务器），你们每个人回到寝室的时候都会收到一张纸条，纸条上写了你可以使用哪个床位，这就简单多了。<br>再然后可能小明（对应到一个特定的客户机）有洁癖，他需要一个固定的床位（对应到一个需要固定IP的设备，比如打印机或者提供某些服务的服务器）。所以“动态床位分配系统”可以添加一条规则“叫小明的人来了就分配给他三号床位”，就解决了这个问题。</p>\n<h2 id=\"租约时间\"><a href=\"#租约时间\" class=\"headerlink\" title=\"租约时间\"></a>租约时间</h2><p>DHCP分配给客户的IP是以<strong>租约</strong>形式分配的。当客户接入到网络中，DHCP便会分配一个IP给客户机，当租约时间到的时候如果客户机还在使用这个IP那么就可以续约，继续使用当前IP而不是从新分配一个。</p>\n<h1 id=\"在CentOS-7-x-下搭建DHCP服务\"><a href=\"#在CentOS-7-x-下搭建DHCP服务\" class=\"headerlink\" title=\"在CentOS 7.x 下搭建DHCP服务\"></a>在CentOS 7.x 下搭建DHCP服务</h1><h2 id=\"0X00-安装DHCP服务\"><a href=\"#0X00-安装DHCP服务\" class=\"headerlink\" title=\"0X00 安装DHCP服务\"></a>0X00 安装DHCP服务</h2><p>使用yum、rpm、源码等方式进行安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install dhcpd</div></pre></td></tr></table></figure></p>\n<h2 id=\"0X01-配置服务器网络服务\"><a href=\"#0X01-配置服务器网络服务\" class=\"headerlink\" title=\"0X01 配置服务器网络服务\"></a>0X01 配置服务器网络服务</h2><p>首先我们要将本地的网络配置成静态地址，并重启网络服务<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/sysconfig/network-scripts/enp0s3</div></pre></td></tr></table></figure></p>\n<p>这里的<code>enp0s3</code>是我的网卡，你需要将这里修改成你的网卡，另外在CentOS 7.x 以前的版本中，使用的是<code>ethx</code>的命名方式。<br>修改如下选项<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">BOOTPROTO=static <span class=\"comment\">#之前很有可能是dhcp，现在我们修改它为静态</span></div><div class=\"line\">ONBOOT=yes\t\t <span class=\"comment\">#以前可能是no，改为yes、就是打开网络服务的时候启动这个网卡</span></div><div class=\"line\">IPADDR=192.168.233.1 <span class=\"comment\">#配置文件中可能没有这个，没有的话就自己添加这行</span></div><div class=\"line\"><span class=\"comment\"># 这里的IP地址可以自定义，不过最后一位最好是1，这样便于识别</span></div></pre></td></tr></table></figure></p>\n<p>然后重启网络服务，如果配置文件没有错误的话，就可以正常启动了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart network.service</div></pre></td></tr></table></figure></p>\n<p>这时候我们检查一下IP是不是已经变成我们设置的静态IP了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig enp0s3</div></pre></td></tr></table></figure></p>\n<h2 id=\"0X02-配置DHCP服务\"><a href=\"#0X02-配置DHCP服务\" class=\"headerlink\" title=\"0X02 配置DHCP服务\"></a>0X02 配置DHCP服务</h2><p>配置文件在这里<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/dhcp/dhcpd.conf</div></pre></td></tr></table></figure></p>\n<p>打开之后会有三行注释，我们初次学习配置的时候可以先不管它，只有服务真的跑起来并生效了我们才会进一步学习是吧。</p>\n<p>在配置文件最后添加如下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#设置DHCP于DNS服务器的动态信息更新模式。初学时完全可以不理这个选项，但是全局设置中一定要有这个选项，否则DHCP服务不能成功启动。</span></div><div class=\"line\">ddns-update-style interim;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#下面开始分配子网，网段是192.168.233.0 子网掩码是 255.255.255.0</span></div><div class=\"line\"><span class=\"comment\">#不能理解网段和子网掩码的可以去网上查一下。简单的说网段规定了分配IP的段（分配哪一段IP给客户机），子网掩码规定了网段的大小</span></div><div class=\"line\">subnet 192.168.233.0 netmask 255.255.255.0 &#123;</div><div class=\"line\">\trange 192.168.233.100 192.168.233.199; <span class=\"comment\">#分配给客户机的IP从192.168.233.100开始到192.168.233.199</span></div><div class=\"line\">    option routers 192.168.233.2; <span class=\"comment\">#设置网关</span></div><div class=\"line\">    default-lease-time 600; <span class=\"comment\">#默认租约时间</span></div><div class=\"line\">    max-lease-time 7200; <span class=\"comment\">#最大租约时间</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"0X03-给特定客户分配特定地址\"><a href=\"#0X03-给特定客户分配特定地址\" class=\"headerlink\" title=\"0X03 给特定客户分配特定地址\"></a>0X03 给特定客户分配特定地址</h2><p>上面也说过，如果同一网络内有需要固定IP的设备，我们也可以通过DHCP来给他分配固定的IP。（就比如说那个有洁癖的同学）<br>首先要说一下DHCP识别主机的方式：<br>DHCP通过接入客户的网卡的MAC地址来判断客户，所以如果你的机器有两块网卡，并且两块网卡同时接入了网络，那么DHCP就会认为有两个设备接入了网络，并给你的机器分配两个IP</p>\n<blockquote>\n<p>MAC地址并不是“苹果地址”。。。<br>MAC地址是“物理地址”，每块网卡在出厂的时候都会有一个全球独一无二的MAC地址，MAC地址是一个48位2进制的数字，通常表达为六段两位十六进制。</p>\n</blockquote>\n<p>下面我们继续修改DHCP配置文件，在刚才的配置后面追加下面的内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">host Client_C &#123; <span class=\"comment\">#有一个主机，叫Client_C</span></div><div class=\"line\">\thardware ethernet 08:00:27:5e:04:27; <span class=\"comment\">#MAC地址是08:...:27的网卡</span></div><div class=\"line\">    fixed-address 192.168.233.123;\t\t <span class=\"comment\">#分配给它192.168.233.123的IP</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样配置的话，不管何时，只要这个CLient_C接入到了这个网络中，那么它获取的IP就是固定的这一个，并不会变<br>然后重启一下DHCP服务就好了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl restart dhcpd.service</div></pre></td></tr></table></figure></p>\n<h1 id=\"好了，至此DHCP的基础配置就搞定了\"><a href=\"#好了，至此DHCP的基础配置就搞定了\" class=\"headerlink\" title=\"好了，至此DHCP的基础配置就搞定了\"></a>好了，至此DHCP的基础配置就搞定了</h1>"},{"title":"Linux 目录结构 理解Linux目录树","date":"2015-06-09T00:30:00.000Z","_content":"\n# 0X00 Linux文件目录结构\n　　我们在Windows环境下的文件目录结构大概是几个盘符，C盘D盘E盘...但是在Linux下是树状图（其实Windows内部也是树状图）。Linux下一个主要目录是`/`根目录，其他所有目录都在根目录下，其他的磁盘或者分区也都挂载在根目录下。\n\n　　挂载：比如我的`/media/shawn/new_disk`是一个空的目录，那我就可以把一个分区挂载到这个目录下，就相当于你挂了一个瓶子在某个树杈上，这样你在瓶子（分区）装的文件就只占用你的瓶子（分区）空间，并不会占据树上的空间。\n\n```\n            |------------- bin     是binary的简写，保存可执行文件，此处的都二进制文件所有用户都有执行权限\n            |------------- boot    引导目录，负责引导启动系统。目录中的vmlinux是内核文件\n            |------------- dev     是Device的简写，保存设备文件。Uinux哲学中“一切皆文件”，设备被抽象成文件\n            |------------- home    用户的主目录，每个用户默认在此有一个自己的主目录。root用户的主目录在根目录下`/root`\n            |------------- lib     保存库文件\n            |------------- media   挂载驱动器（U盘或者磁盘分区等），并不是所有发行版本都有这个文件夹\n            |------------- mnt     和media的功能几乎完全一致，该目录所有发行版本都有\n           / ------------- opt     是option的简写，用来安装各种大型软件\n/   ------\n           \\\n            |------------- proc    是process的简写，不是一个真实存在的目录，可以查看目录的信息判断。用来保存系统实时信息，各个进程的和内存信息\n            |------------- sbin    是super binary的简写，保存可执行文件，此处的文件是只有超级管理员可以使用的\n            |------------- selinux 保存SELinux的相关内容（SELinux是美国国安局开发的安全系统，开源并整合到了Linux内核中）\n            |------------- sys     保存系统底层信息，硬件信息\n            |------------- temp    临时目录，系统会自动删除清理\n            |------------- usr     应用软件的默认安装位置\n            |------------- var     是variable的简写，用来保存经常变动的文件比如日志信息和邮件等\n```\n\n# 0X01 Proc文件介绍\n```\ncpuconf    CPU的实时信息\nmemconf    内存的实时信息\niomem      I/O信息\ninterrupts 中断信息\nuptime     启动时间\nacpi       电源信息\n凌乱的数字   可以理解成每个目录都是一个进程，目录里是进程的相关信息\n```\n","source":"_posts/linux_dirtree.md","raw":"---\ntitle: Linux 目录结构 理解Linux目录树\ndate: 2015-06-09 08:30\ntags:\n  - Linux\n  - 目录树\n---\n\n# 0X00 Linux文件目录结构\n　　我们在Windows环境下的文件目录结构大概是几个盘符，C盘D盘E盘...但是在Linux下是树状图（其实Windows内部也是树状图）。Linux下一个主要目录是`/`根目录，其他所有目录都在根目录下，其他的磁盘或者分区也都挂载在根目录下。\n\n　　挂载：比如我的`/media/shawn/new_disk`是一个空的目录，那我就可以把一个分区挂载到这个目录下，就相当于你挂了一个瓶子在某个树杈上，这样你在瓶子（分区）装的文件就只占用你的瓶子（分区）空间，并不会占据树上的空间。\n\n```\n            |------------- bin     是binary的简写，保存可执行文件，此处的都二进制文件所有用户都有执行权限\n            |------------- boot    引导目录，负责引导启动系统。目录中的vmlinux是内核文件\n            |------------- dev     是Device的简写，保存设备文件。Uinux哲学中“一切皆文件”，设备被抽象成文件\n            |------------- home    用户的主目录，每个用户默认在此有一个自己的主目录。root用户的主目录在根目录下`/root`\n            |------------- lib     保存库文件\n            |------------- media   挂载驱动器（U盘或者磁盘分区等），并不是所有发行版本都有这个文件夹\n            |------------- mnt     和media的功能几乎完全一致，该目录所有发行版本都有\n           / ------------- opt     是option的简写，用来安装各种大型软件\n/   ------\n           \\\n            |------------- proc    是process的简写，不是一个真实存在的目录，可以查看目录的信息判断。用来保存系统实时信息，各个进程的和内存信息\n            |------------- sbin    是super binary的简写，保存可执行文件，此处的文件是只有超级管理员可以使用的\n            |------------- selinux 保存SELinux的相关内容（SELinux是美国国安局开发的安全系统，开源并整合到了Linux内核中）\n            |------------- sys     保存系统底层信息，硬件信息\n            |------------- temp    临时目录，系统会自动删除清理\n            |------------- usr     应用软件的默认安装位置\n            |------------- var     是variable的简写，用来保存经常变动的文件比如日志信息和邮件等\n```\n\n# 0X01 Proc文件介绍\n```\ncpuconf    CPU的实时信息\nmemconf    内存的实时信息\niomem      I/O信息\ninterrupts 中断信息\nuptime     启动时间\nacpi       电源信息\n凌乱的数字   可以理解成每个目录都是一个进程，目录里是进程的相关信息\n```\n","slug":"linux_dirtree","published":1,"updated":"2017-09-02T14:42:41.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme0000phnlpxu9jnjj5","content":"<h1 id=\"0X00-Linux文件目录结构\"><a href=\"#0X00-Linux文件目录结构\" class=\"headerlink\" title=\"0X00 Linux文件目录结构\"></a>0X00 Linux文件目录结构</h1><p>　　我们在Windows环境下的文件目录结构大概是几个盘符，C盘D盘E盘…但是在Linux下是树状图（其实Windows内部也是树状图）。Linux下一个主要目录是<code>/</code>根目录，其他所有目录都在根目录下，其他的磁盘或者分区也都挂载在根目录下。</p>\n<p>　　挂载：比如我的<code>/media/shawn/new_disk</code>是一个空的目录，那我就可以把一个分区挂载到这个目录下，就相当于你挂了一个瓶子在某个树杈上，这样你在瓶子（分区）装的文件就只占用你的瓶子（分区）空间，并不会占据树上的空间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">            |------------- bin     是binary的简写，保存可执行文件，此处的都二进制文件所有用户都有执行权限</div><div class=\"line\">            |------------- boot    引导目录，负责引导启动系统。目录中的vmlinux是内核文件</div><div class=\"line\">            |------------- dev     是Device的简写，保存设备文件。Uinux哲学中“一切皆文件”，设备被抽象成文件</div><div class=\"line\">            |------------- home    用户的主目录，每个用户默认在此有一个自己的主目录。root用户的主目录在根目录下`/root`</div><div class=\"line\">            |------------- lib     保存库文件</div><div class=\"line\">            |------------- media   挂载驱动器（U盘或者磁盘分区等），并不是所有发行版本都有这个文件夹</div><div class=\"line\">            |------------- mnt     和media的功能几乎完全一致，该目录所有发行版本都有</div><div class=\"line\">           / ------------- opt     是option的简写，用来安装各种大型软件</div><div class=\"line\">/   ------</div><div class=\"line\">           \\</div><div class=\"line\">            |------------- proc    是process的简写，不是一个真实存在的目录，可以查看目录的信息判断。用来保存系统实时信息，各个进程的和内存信息</div><div class=\"line\">            |------------- sbin    是super binary的简写，保存可执行文件，此处的文件是只有超级管理员可以使用的</div><div class=\"line\">            |------------- selinux 保存SELinux的相关内容（SELinux是美国国安局开发的安全系统，开源并整合到了Linux内核中）</div><div class=\"line\">            |------------- sys     保存系统底层信息，硬件信息</div><div class=\"line\">            |------------- temp    临时目录，系统会自动删除清理</div><div class=\"line\">            |------------- usr     应用软件的默认安装位置</div><div class=\"line\">            |------------- var     是variable的简写，用来保存经常变动的文件比如日志信息和邮件等</div></pre></td></tr></table></figure>\n<h1 id=\"0X01-Proc文件介绍\"><a href=\"#0X01-Proc文件介绍\" class=\"headerlink\" title=\"0X01 Proc文件介绍\"></a>0X01 Proc文件介绍</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cpuconf    CPU的实时信息</div><div class=\"line\">memconf    内存的实时信息</div><div class=\"line\">iomem      I/O信息</div><div class=\"line\">interrupts 中断信息</div><div class=\"line\">uptime     启动时间</div><div class=\"line\">acpi       电源信息</div><div class=\"line\">凌乱的数字   可以理解成每个目录都是一个进程，目录里是进程的相关信息</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-Linux文件目录结构\"><a href=\"#0X00-Linux文件目录结构\" class=\"headerlink\" title=\"0X00 Linux文件目录结构\"></a>0X00 Linux文件目录结构</h1><p>　　我们在Windows环境下的文件目录结构大概是几个盘符，C盘D盘E盘…但是在Linux下是树状图（其实Windows内部也是树状图）。Linux下一个主要目录是<code>/</code>根目录，其他所有目录都在根目录下，其他的磁盘或者分区也都挂载在根目录下。</p>\n<p>　　挂载：比如我的<code>/media/shawn/new_disk</code>是一个空的目录，那我就可以把一个分区挂载到这个目录下，就相当于你挂了一个瓶子在某个树杈上，这样你在瓶子（分区）装的文件就只占用你的瓶子（分区）空间，并不会占据树上的空间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">            |------------- bin     是binary的简写，保存可执行文件，此处的都二进制文件所有用户都有执行权限</div><div class=\"line\">            |------------- boot    引导目录，负责引导启动系统。目录中的vmlinux是内核文件</div><div class=\"line\">            |------------- dev     是Device的简写，保存设备文件。Uinux哲学中“一切皆文件”，设备被抽象成文件</div><div class=\"line\">            |------------- home    用户的主目录，每个用户默认在此有一个自己的主目录。root用户的主目录在根目录下`/root`</div><div class=\"line\">            |------------- lib     保存库文件</div><div class=\"line\">            |------------- media   挂载驱动器（U盘或者磁盘分区等），并不是所有发行版本都有这个文件夹</div><div class=\"line\">            |------------- mnt     和media的功能几乎完全一致，该目录所有发行版本都有</div><div class=\"line\">           / ------------- opt     是option的简写，用来安装各种大型软件</div><div class=\"line\">/   ------</div><div class=\"line\">           \\</div><div class=\"line\">            |------------- proc    是process的简写，不是一个真实存在的目录，可以查看目录的信息判断。用来保存系统实时信息，各个进程的和内存信息</div><div class=\"line\">            |------------- sbin    是super binary的简写，保存可执行文件，此处的文件是只有超级管理员可以使用的</div><div class=\"line\">            |------------- selinux 保存SELinux的相关内容（SELinux是美国国安局开发的安全系统，开源并整合到了Linux内核中）</div><div class=\"line\">            |------------- sys     保存系统底层信息，硬件信息</div><div class=\"line\">            |------------- temp    临时目录，系统会自动删除清理</div><div class=\"line\">            |------------- usr     应用软件的默认安装位置</div><div class=\"line\">            |------------- var     是variable的简写，用来保存经常变动的文件比如日志信息和邮件等</div></pre></td></tr></table></figure>\n<h1 id=\"0X01-Proc文件介绍\"><a href=\"#0X01-Proc文件介绍\" class=\"headerlink\" title=\"0X01 Proc文件介绍\"></a>0X01 Proc文件介绍</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cpuconf    CPU的实时信息</div><div class=\"line\">memconf    内存的实时信息</div><div class=\"line\">iomem      I/O信息</div><div class=\"line\">interrupts 中断信息</div><div class=\"line\">uptime     启动时间</div><div class=\"line\">acpi       电源信息</div><div class=\"line\">凌乱的数字   可以理解成每个目录都是一个进程，目录里是进程的相关信息</div></pre></td></tr></table></figure>\n"},{"title":"Linux 软链接(符号链接)/硬链接 理解Linux链接","date":"2016-05-11T14:15:00.000Z","_content":"\n\n# 0X00 什么是链接文件\nLinux中的链接文件就相当于是Windows中的快捷方式，通过链接文件可以访问到链接指向的源文件。但是Linux下的链接文件和Windows中的快捷方式还是有一定的区别。Linux中有两种链接文件**硬链接**和**软连接**也称为**符号链接**\n在介绍链接文件之前先要介绍一下Linux文件系统中的inode\n>inode是Linux文件系统中文件的唯一定位器，每一个文件都有一个inode，也是唯一的，每一个inode唯一对应一个文件。\n\n还要熟悉一下指针的问题，如果学习过C/C++的话理解起来会很轻松\n>计算机中所有的数据都是保存在磁盘里的，使用的时候会读取到内存中，而磁盘和内存都是一块一块的地方，我们用地址来找到数据的具体存放位置。保存了文件或者数据存放地址的物体（通常是变量）就称为指针。\n>我们在Linux的操作界面看到的文件，都是一个指针，他们指向磁盘的某个具体位置。这样我们每次点开文件的时候，系统就可以在磁盘对应的位置打开我们需要的文件。\n\n# 0X01 硬链接\n**硬链接就是指向磁盘中具体位置的指针。**如果我们创建一个文件，那么就会在磁盘中分配一块位置用来存储这个文件，并且创建一个指针方便我们找到这个文件。然后我们创建一个这个文件的硬链接，就相当于又创建了一个**指向磁盘中存放文件的位置的指针**，所以就算我们删除了之前创建的文件（其实就是一个指针），文件本身也不会被删除，因为还是有一个指针是指向文件存储位置的，所以我们还是可以通过后来创建的硬链接来访问到原来的文件。\n\n# 0X02 软链接——符号链接\n**软连接可以大致理解成指向指针的指针。**如果我们创建一个文件，并且创建了这个文件的一个软连接，那么如果删除了原来的文件，那这个文件就真的找不到了。因为软连接只是指向之前（指向具体文件位置）的指针，所以那个软连接就指向一片空白区域了，以前存在的文件也找不到了。就好像我们在Windows中卸载了一个软件，但是桌面上的快捷方式还可能存在，现在我们打开那个快捷方式是不能访问到软件的，因为已经被我们删除了。\n\n# 0X03 操作演示\n首先我这里有一个```hehe.tar.gz```的文件，我们查看一下它的inode是33515290。然后创建一个硬链接名为```heihei.tar.gz```，再查看这两个文件的inode，发现两个文件的inode是一样的。再创建一个软连接名为```haha.tar.gz```，继续查看文件inode。可以看到系统给```haha.tar.gz```分配了一个新的inode，并且ls的时候有个箭头显示了指向什么文件。\n>ls -i 可以显示文件的inode\n\n![alt text](http://o6sowsew8.bkt.clouddn.com/VirtualBox_CentOS_Study_16_05_2016_20_10_26.png)\n\n# 0X04 软硬链接对比\n\n## 硬链接：\n不分配新的inode\n不可以在不同的文件系统之间链接\n只有root才能创建目录的硬链接\n只能源于存在的文件\n\n## 软链接：\n分配新的inode\n不受文件系统的限制\n指向源文件位置的标识\n可以链向不存在的文件\n\n","source":"_posts/linux_ln.md","raw":"---\ntitle: Linux 软链接(符号链接)/硬链接 理解Linux链接\ndate: 2016-05-11 22:15\ntags:\n  - Linux\n  - 软链接\n  - 硬链接\n  - 链接\n---\n\n\n# 0X00 什么是链接文件\nLinux中的链接文件就相当于是Windows中的快捷方式，通过链接文件可以访问到链接指向的源文件。但是Linux下的链接文件和Windows中的快捷方式还是有一定的区别。Linux中有两种链接文件**硬链接**和**软连接**也称为**符号链接**\n在介绍链接文件之前先要介绍一下Linux文件系统中的inode\n>inode是Linux文件系统中文件的唯一定位器，每一个文件都有一个inode，也是唯一的，每一个inode唯一对应一个文件。\n\n还要熟悉一下指针的问题，如果学习过C/C++的话理解起来会很轻松\n>计算机中所有的数据都是保存在磁盘里的，使用的时候会读取到内存中，而磁盘和内存都是一块一块的地方，我们用地址来找到数据的具体存放位置。保存了文件或者数据存放地址的物体（通常是变量）就称为指针。\n>我们在Linux的操作界面看到的文件，都是一个指针，他们指向磁盘的某个具体位置。这样我们每次点开文件的时候，系统就可以在磁盘对应的位置打开我们需要的文件。\n\n# 0X01 硬链接\n**硬链接就是指向磁盘中具体位置的指针。**如果我们创建一个文件，那么就会在磁盘中分配一块位置用来存储这个文件，并且创建一个指针方便我们找到这个文件。然后我们创建一个这个文件的硬链接，就相当于又创建了一个**指向磁盘中存放文件的位置的指针**，所以就算我们删除了之前创建的文件（其实就是一个指针），文件本身也不会被删除，因为还是有一个指针是指向文件存储位置的，所以我们还是可以通过后来创建的硬链接来访问到原来的文件。\n\n# 0X02 软链接——符号链接\n**软连接可以大致理解成指向指针的指针。**如果我们创建一个文件，并且创建了这个文件的一个软连接，那么如果删除了原来的文件，那这个文件就真的找不到了。因为软连接只是指向之前（指向具体文件位置）的指针，所以那个软连接就指向一片空白区域了，以前存在的文件也找不到了。就好像我们在Windows中卸载了一个软件，但是桌面上的快捷方式还可能存在，现在我们打开那个快捷方式是不能访问到软件的，因为已经被我们删除了。\n\n# 0X03 操作演示\n首先我这里有一个```hehe.tar.gz```的文件，我们查看一下它的inode是33515290。然后创建一个硬链接名为```heihei.tar.gz```，再查看这两个文件的inode，发现两个文件的inode是一样的。再创建一个软连接名为```haha.tar.gz```，继续查看文件inode。可以看到系统给```haha.tar.gz```分配了一个新的inode，并且ls的时候有个箭头显示了指向什么文件。\n>ls -i 可以显示文件的inode\n\n![alt text](http://o6sowsew8.bkt.clouddn.com/VirtualBox_CentOS_Study_16_05_2016_20_10_26.png)\n\n# 0X04 软硬链接对比\n\n## 硬链接：\n不分配新的inode\n不可以在不同的文件系统之间链接\n只有root才能创建目录的硬链接\n只能源于存在的文件\n\n## 软链接：\n分配新的inode\n不受文件系统的限制\n指向源文件位置的标识\n可以链向不存在的文件\n\n","slug":"linux_ln","published":1,"updated":"2017-09-02T14:43:08.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme1000shnlpaq0msigc","content":"<h1 id=\"0X00-什么是链接文件\"><a href=\"#0X00-什么是链接文件\" class=\"headerlink\" title=\"0X00 什么是链接文件\"></a>0X00 什么是链接文件</h1><p>Linux中的链接文件就相当于是Windows中的快捷方式，通过链接文件可以访问到链接指向的源文件。但是Linux下的链接文件和Windows中的快捷方式还是有一定的区别。Linux中有两种链接文件<strong>硬链接</strong>和<strong>软连接</strong>也称为<strong>符号链接</strong><br>在介绍链接文件之前先要介绍一下Linux文件系统中的inode</p>\n<blockquote>\n<p>inode是Linux文件系统中文件的唯一定位器，每一个文件都有一个inode，也是唯一的，每一个inode唯一对应一个文件。</p>\n</blockquote>\n<p>还要熟悉一下指针的问题，如果学习过C/C++的话理解起来会很轻松</p>\n<blockquote>\n<p>计算机中所有的数据都是保存在磁盘里的，使用的时候会读取到内存中，而磁盘和内存都是一块一块的地方，我们用地址来找到数据的具体存放位置。保存了文件或者数据存放地址的物体（通常是变量）就称为指针。<br>我们在Linux的操作界面看到的文件，都是一个指针，他们指向磁盘的某个具体位置。这样我们每次点开文件的时候，系统就可以在磁盘对应的位置打开我们需要的文件。</p>\n</blockquote>\n<h1 id=\"0X01-硬链接\"><a href=\"#0X01-硬链接\" class=\"headerlink\" title=\"0X01 硬链接\"></a>0X01 硬链接</h1><p><strong>硬链接就是指向磁盘中具体位置的指针。</strong>如果我们创建一个文件，那么就会在磁盘中分配一块位置用来存储这个文件，并且创建一个指针方便我们找到这个文件。然后我们创建一个这个文件的硬链接，就相当于又创建了一个<strong>指向磁盘中存放文件的位置的指针</strong>，所以就算我们删除了之前创建的文件（其实就是一个指针），文件本身也不会被删除，因为还是有一个指针是指向文件存储位置的，所以我们还是可以通过后来创建的硬链接来访问到原来的文件。</p>\n<h1 id=\"0X02-软链接——符号链接\"><a href=\"#0X02-软链接——符号链接\" class=\"headerlink\" title=\"0X02 软链接——符号链接\"></a>0X02 软链接——符号链接</h1><p><strong>软连接可以大致理解成指向指针的指针。</strong>如果我们创建一个文件，并且创建了这个文件的一个软连接，那么如果删除了原来的文件，那这个文件就真的找不到了。因为软连接只是指向之前（指向具体文件位置）的指针，所以那个软连接就指向一片空白区域了，以前存在的文件也找不到了。就好像我们在Windows中卸载了一个软件，但是桌面上的快捷方式还可能存在，现在我们打开那个快捷方式是不能访问到软件的，因为已经被我们删除了。</p>\n<h1 id=\"0X03-操作演示\"><a href=\"#0X03-操作演示\" class=\"headerlink\" title=\"0X03 操作演示\"></a>0X03 操作演示</h1><p>首先我这里有一个<code>hehe.tar.gz</code>的文件，我们查看一下它的inode是33515290。然后创建一个硬链接名为<code>heihei.tar.gz</code>，再查看这两个文件的inode，发现两个文件的inode是一样的。再创建一个软连接名为<code>haha.tar.gz</code>，继续查看文件inode。可以看到系统给<code>haha.tar.gz</code>分配了一个新的inode，并且ls的时候有个箭头显示了指向什么文件。</p>\n<blockquote>\n<p>ls -i 可以显示文件的inode</p>\n</blockquote>\n<p><img src=\"http://o6sowsew8.bkt.clouddn.com/VirtualBox_CentOS_Study_16_05_2016_20_10_26.png\" alt=\"alt text\"></p>\n<h1 id=\"0X04-软硬链接对比\"><a href=\"#0X04-软硬链接对比\" class=\"headerlink\" title=\"0X04 软硬链接对比\"></a>0X04 软硬链接对比</h1><h2 id=\"硬链接：\"><a href=\"#硬链接：\" class=\"headerlink\" title=\"硬链接：\"></a>硬链接：</h2><p>不分配新的inode<br>不可以在不同的文件系统之间链接<br>只有root才能创建目录的硬链接<br>只能源于存在的文件</p>\n<h2 id=\"软链接：\"><a href=\"#软链接：\" class=\"headerlink\" title=\"软链接：\"></a>软链接：</h2><p>分配新的inode<br>不受文件系统的限制<br>指向源文件位置的标识<br>可以链向不存在的文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-什么是链接文件\"><a href=\"#0X00-什么是链接文件\" class=\"headerlink\" title=\"0X00 什么是链接文件\"></a>0X00 什么是链接文件</h1><p>Linux中的链接文件就相当于是Windows中的快捷方式，通过链接文件可以访问到链接指向的源文件。但是Linux下的链接文件和Windows中的快捷方式还是有一定的区别。Linux中有两种链接文件<strong>硬链接</strong>和<strong>软连接</strong>也称为<strong>符号链接</strong><br>在介绍链接文件之前先要介绍一下Linux文件系统中的inode</p>\n<blockquote>\n<p>inode是Linux文件系统中文件的唯一定位器，每一个文件都有一个inode，也是唯一的，每一个inode唯一对应一个文件。</p>\n</blockquote>\n<p>还要熟悉一下指针的问题，如果学习过C/C++的话理解起来会很轻松</p>\n<blockquote>\n<p>计算机中所有的数据都是保存在磁盘里的，使用的时候会读取到内存中，而磁盘和内存都是一块一块的地方，我们用地址来找到数据的具体存放位置。保存了文件或者数据存放地址的物体（通常是变量）就称为指针。<br>我们在Linux的操作界面看到的文件，都是一个指针，他们指向磁盘的某个具体位置。这样我们每次点开文件的时候，系统就可以在磁盘对应的位置打开我们需要的文件。</p>\n</blockquote>\n<h1 id=\"0X01-硬链接\"><a href=\"#0X01-硬链接\" class=\"headerlink\" title=\"0X01 硬链接\"></a>0X01 硬链接</h1><p><strong>硬链接就是指向磁盘中具体位置的指针。</strong>如果我们创建一个文件，那么就会在磁盘中分配一块位置用来存储这个文件，并且创建一个指针方便我们找到这个文件。然后我们创建一个这个文件的硬链接，就相当于又创建了一个<strong>指向磁盘中存放文件的位置的指针</strong>，所以就算我们删除了之前创建的文件（其实就是一个指针），文件本身也不会被删除，因为还是有一个指针是指向文件存储位置的，所以我们还是可以通过后来创建的硬链接来访问到原来的文件。</p>\n<h1 id=\"0X02-软链接——符号链接\"><a href=\"#0X02-软链接——符号链接\" class=\"headerlink\" title=\"0X02 软链接——符号链接\"></a>0X02 软链接——符号链接</h1><p><strong>软连接可以大致理解成指向指针的指针。</strong>如果我们创建一个文件，并且创建了这个文件的一个软连接，那么如果删除了原来的文件，那这个文件就真的找不到了。因为软连接只是指向之前（指向具体文件位置）的指针，所以那个软连接就指向一片空白区域了，以前存在的文件也找不到了。就好像我们在Windows中卸载了一个软件，但是桌面上的快捷方式还可能存在，现在我们打开那个快捷方式是不能访问到软件的，因为已经被我们删除了。</p>\n<h1 id=\"0X03-操作演示\"><a href=\"#0X03-操作演示\" class=\"headerlink\" title=\"0X03 操作演示\"></a>0X03 操作演示</h1><p>首先我这里有一个<code>hehe.tar.gz</code>的文件，我们查看一下它的inode是33515290。然后创建一个硬链接名为<code>heihei.tar.gz</code>，再查看这两个文件的inode，发现两个文件的inode是一样的。再创建一个软连接名为<code>haha.tar.gz</code>，继续查看文件inode。可以看到系统给<code>haha.tar.gz</code>分配了一个新的inode，并且ls的时候有个箭头显示了指向什么文件。</p>\n<blockquote>\n<p>ls -i 可以显示文件的inode</p>\n</blockquote>\n<p><img src=\"http://o6sowsew8.bkt.clouddn.com/VirtualBox_CentOS_Study_16_05_2016_20_10_26.png\" alt=\"alt text\"></p>\n<h1 id=\"0X04-软硬链接对比\"><a href=\"#0X04-软硬链接对比\" class=\"headerlink\" title=\"0X04 软硬链接对比\"></a>0X04 软硬链接对比</h1><h2 id=\"硬链接：\"><a href=\"#硬链接：\" class=\"headerlink\" title=\"硬链接：\"></a>硬链接：</h2><p>不分配新的inode<br>不可以在不同的文件系统之间链接<br>只有root才能创建目录的硬链接<br>只能源于存在的文件</p>\n<h2 id=\"软链接：\"><a href=\"#软链接：\" class=\"headerlink\" title=\"软链接：\"></a>软链接：</h2><p>分配新的inode<br>不受文件系统的限制<br>指向源文件位置的标识<br>可以链向不存在的文件</p>\n"},{"title":"解决Linux下MySQL/MariaDB中文变问号？问题","date":"2016-12-15T11:33:00.000Z","_content":"\n# 0X00 修改配置文件\nMySQL/MariaDB默认并没有采用utf-8编码，所以我们要修改配置文件，以让其使用utf-8。\n`/etc/my.cnf`就是配置文件，打开之后在`[mysqld]`下面加入两行，使其变成\n```config\n[mysqld]\ncharacter_set_server=utf8 \ninit_connect='SET NAMES utf8'\n```\n修改好配置文件之后重启服务\n\n# 0X01 修改数据库的字符集\n在修改配置文件之后新建的数据库默认就是使用utf-8了，但是之前的还不是所以要修改一下。登录到数据库，在命令行界面修改数据库的字符集。\n```sql\nALTER DATABASE `databases_name` COLLATE 'utf8_bin';\n```\n再次重启数据库服务。这样再连接到数据库就解决掉汉字变问号的问题了\n\n# 0X02 推荐两款软件\n大家好多人都在用Navicat，但绝大多数人用的都是盗版软件，这里推荐大家用一些好用的开源软件来替代。\n### 1 HeidiSQL\n1. 一款开源软件\n2. 可以连接MySQL/MariaDB/SQL Server\n3. 官方中文支持\n\n[下载地址：HeidiSQL](http://www.heidisql.com/)\n\n### 2 MySQL Workbench\n1. 一款开源软件\n2. MySQL官方开发\n3. 导出表关系图非常强大\n\n[下载地址：MySQL Workbench](http://www.mysql.com/products/workbench/)\n","source":"_posts/linux_mysql_chinese.md","raw":"---\ntitle: 解决Linux下MySQL/MariaDB中文变问号？问题\ndate: 2016-12-15 19:33\ntags:\n  - Linux\n  - MySQL\n  - MariaDB\n  - 数据库\n  - 编码\n  - 中文\n---\n\n# 0X00 修改配置文件\nMySQL/MariaDB默认并没有采用utf-8编码，所以我们要修改配置文件，以让其使用utf-8。\n`/etc/my.cnf`就是配置文件，打开之后在`[mysqld]`下面加入两行，使其变成\n```config\n[mysqld]\ncharacter_set_server=utf8 \ninit_connect='SET NAMES utf8'\n```\n修改好配置文件之后重启服务\n\n# 0X01 修改数据库的字符集\n在修改配置文件之后新建的数据库默认就是使用utf-8了，但是之前的还不是所以要修改一下。登录到数据库，在命令行界面修改数据库的字符集。\n```sql\nALTER DATABASE `databases_name` COLLATE 'utf8_bin';\n```\n再次重启数据库服务。这样再连接到数据库就解决掉汉字变问号的问题了\n\n# 0X02 推荐两款软件\n大家好多人都在用Navicat，但绝大多数人用的都是盗版软件，这里推荐大家用一些好用的开源软件来替代。\n### 1 HeidiSQL\n1. 一款开源软件\n2. 可以连接MySQL/MariaDB/SQL Server\n3. 官方中文支持\n\n[下载地址：HeidiSQL](http://www.heidisql.com/)\n\n### 2 MySQL Workbench\n1. 一款开源软件\n2. MySQL官方开发\n3. 导出表关系图非常强大\n\n[下载地址：MySQL Workbench](http://www.mysql.com/products/workbench/)\n","slug":"linux_mysql_chinese","published":1,"updated":"2017-09-02T14:44:48.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme2000uhnlpydx6hrtq","content":"<h1 id=\"0X00-修改配置文件\"><a href=\"#0X00-修改配置文件\" class=\"headerlink\" title=\"0X00 修改配置文件\"></a>0X00 修改配置文件</h1><p>MySQL/MariaDB默认并没有采用utf-8编码，所以我们要修改配置文件，以让其使用utf-8。<br><code>/etc/my.cnf</code>就是配置文件，打开之后在<code>[mysqld]</code>下面加入两行，使其变成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">character_set_server=utf8 </div><div class=\"line\">init_connect=&apos;SET NAMES utf8&apos;</div></pre></td></tr></table></figure></p>\n<p>修改好配置文件之后重启服务</p>\n<h1 id=\"0X01-修改数据库的字符集\"><a href=\"#0X01-修改数据库的字符集\" class=\"headerlink\" title=\"0X01 修改数据库的字符集\"></a>0X01 修改数据库的字符集</h1><p>在修改配置文件之后新建的数据库默认就是使用utf-8了，但是之前的还不是所以要修改一下。登录到数据库，在命令行界面修改数据库的字符集。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"string\">`databases_name`</span> <span class=\"keyword\">COLLATE</span> <span class=\"string\">'utf8_bin'</span>;</div></pre></td></tr></table></figure></p>\n<p>再次重启数据库服务。这样再连接到数据库就解决掉汉字变问号的问题了</p>\n<h1 id=\"0X02-推荐两款软件\"><a href=\"#0X02-推荐两款软件\" class=\"headerlink\" title=\"0X02 推荐两款软件\"></a>0X02 推荐两款软件</h1><p>大家好多人都在用Navicat，但绝大多数人用的都是盗版软件，这里推荐大家用一些好用的开源软件来替代。</p>\n<h3 id=\"1-HeidiSQL\"><a href=\"#1-HeidiSQL\" class=\"headerlink\" title=\"1 HeidiSQL\"></a>1 HeidiSQL</h3><ol>\n<li>一款开源软件</li>\n<li>可以连接MySQL/MariaDB/SQL Server</li>\n<li>官方中文支持</li>\n</ol>\n<p><a href=\"http://www.heidisql.com/\" target=\"_blank\" rel=\"external\">下载地址：HeidiSQL</a></p>\n<h3 id=\"2-MySQL-Workbench\"><a href=\"#2-MySQL-Workbench\" class=\"headerlink\" title=\"2 MySQL Workbench\"></a>2 MySQL Workbench</h3><ol>\n<li>一款开源软件</li>\n<li>MySQL官方开发</li>\n<li>导出表关系图非常强大</li>\n</ol>\n<p><a href=\"http://www.mysql.com/products/workbench/\" target=\"_blank\" rel=\"external\">下载地址：MySQL Workbench</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-修改配置文件\"><a href=\"#0X00-修改配置文件\" class=\"headerlink\" title=\"0X00 修改配置文件\"></a>0X00 修改配置文件</h1><p>MySQL/MariaDB默认并没有采用utf-8编码，所以我们要修改配置文件，以让其使用utf-8。<br><code>/etc/my.cnf</code>就是配置文件，打开之后在<code>[mysqld]</code>下面加入两行，使其变成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">character_set_server=utf8 </div><div class=\"line\">init_connect=&apos;SET NAMES utf8&apos;</div></pre></td></tr></table></figure></p>\n<p>修改好配置文件之后重启服务</p>\n<h1 id=\"0X01-修改数据库的字符集\"><a href=\"#0X01-修改数据库的字符集\" class=\"headerlink\" title=\"0X01 修改数据库的字符集\"></a>0X01 修改数据库的字符集</h1><p>在修改配置文件之后新建的数据库默认就是使用utf-8了，但是之前的还不是所以要修改一下。登录到数据库，在命令行界面修改数据库的字符集。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> <span class=\"string\">`databases_name`</span> <span class=\"keyword\">COLLATE</span> <span class=\"string\">'utf8_bin'</span>;</div></pre></td></tr></table></figure></p>\n<p>再次重启数据库服务。这样再连接到数据库就解决掉汉字变问号的问题了</p>\n<h1 id=\"0X02-推荐两款软件\"><a href=\"#0X02-推荐两款软件\" class=\"headerlink\" title=\"0X02 推荐两款软件\"></a>0X02 推荐两款软件</h1><p>大家好多人都在用Navicat，但绝大多数人用的都是盗版软件，这里推荐大家用一些好用的开源软件来替代。</p>\n<h3 id=\"1-HeidiSQL\"><a href=\"#1-HeidiSQL\" class=\"headerlink\" title=\"1 HeidiSQL\"></a>1 HeidiSQL</h3><ol>\n<li>一款开源软件</li>\n<li>可以连接MySQL/MariaDB/SQL Server</li>\n<li>官方中文支持</li>\n</ol>\n<p><a href=\"http://www.heidisql.com/\" target=\"_blank\" rel=\"external\">下载地址：HeidiSQL</a></p>\n<h3 id=\"2-MySQL-Workbench\"><a href=\"#2-MySQL-Workbench\" class=\"headerlink\" title=\"2 MySQL Workbench\"></a>2 MySQL Workbench</h3><ol>\n<li>一款开源软件</li>\n<li>MySQL官方开发</li>\n<li>导出表关系图非常强大</li>\n</ol>\n<p><a href=\"http://www.mysql.com/products/workbench/\" target=\"_blank\" rel=\"external\">下载地址：MySQL Workbench</a></p>\n"},{"title":"Linux的LVM 逻辑卷管理 分区 划分 重划","date":"2016-05-17T15:15:00.000Z","_content":"\n# 0X00 LVM是什么，有什么用\nLVM的全称是Logical Volume Manager（逻辑卷管理）。是Linux下的一种磁盘分区管理机制，方便给分区（逻辑分区）扩容和压缩。最简单的可以理解成原始的磁盘分区管理是单纯的给每个独立的磁盘进行分区，然后对每个分区进行管理，这样的话每次扩容和压缩空间都会很麻烦。LVM就相当于把所有磁盘的分区都揉到一起，揉成一个大磁盘或者说是大分区，然后从大的中分出小的，这样的话扩容和压缩都会变得方便。\n![test](http://o7bn7vqpt.bkt.clouddn.com//article/image/lvm.jpg)\n**版权声明：图片来自<a href=\"https://linux.cn/article-3218-2.html\">Linux.cn</a>**\n\n# 0X01 基础术语解释\n\nPV 是*Physical Volume* **物理卷**---也就是真实的磁盘分区\nVG 是*Volume Group* **卷组**---也就是好多PV组成的一个组\nLV 是*Logical Volume* **逻辑卷**---就是从VG中分出来的分区\nPE 是*Physical Extent* **物理区域**---是PV中最小的存储单元\nLE 是*Logical Extent* **逻辑区域**---是LV中做小的存储单元\n\n# 0X02 测试环境\nV-Box 中的 CentOS 7.x 64bit\n有两块或者以上数量的虚拟磁盘\n磁盘大小在1GB以上\n我这里/dev/sdb和/dev/sdc是刚刚添加的磁盘\nroot用户的~/lvm-mount用来挂载逻辑卷\n使用root登陆(单纯的因为每次sudo太麻烦)\n\n# 0X03 准备分区\n使用fdisk为磁盘分区\n**不会使用fdisk的可以直接按着我说的敲**\n**还是建议学LVM之前掌握最基础的fdisk分区和格式化**\n```bash\nfdisk /dev/sdb # 使用fdisk给/dev/sdb分区\n按n 回车 新建一个分区\n按p 回车 选择新建分区为主分区\n按 回车 选择默认分区号\n按 回车 默认选择开始位置\n输入 +100M 回车 选择使用100M为新分区的大小\n输入 t 回车 设置分区类型\n按 回车 默认选择刚才创建的分区\n输入 8e 设置刚才创建的分区为 LVM 类型\n```\n重复上面的步骤，给/dev/sdb分出来三个区\n\n# 0X04 创建物理卷 PV\n创建物理卷的时候，可以大小不同，也可以是不同磁盘的分区，只要是 8e 类型的分区都是可以创建到物理卷中的，这里只是为了做示范\n```bash\n# 创建\npvcreate /dev/sdb1\npvcreate /dev/sdb2\npvcreate /dev/ddb3\n\n# 检查\npvdisplay\n\n# 删除 (这步不要跟着做)\npvremove /dev/sdb1\n```\n\n# 0X05 准备卷组 VG\n创建一个包括/dev/sdb1 /dev/sdb2 /dev/sdb3 物理卷的卷组\n命名为 volme-group1\n```bash\n# 创建\nvgcreate volume-group1 /dev/sdb1 /dev/sdb2 /dev/sdb3\n\n# 检查\nvgdisplay\n\n# 删除 (这步不要跟着做)\nvgremove volume-group1\n```\n\n# 0X06 创建逻辑卷 LV\n创建逻辑卷的时候要指定名称、大小和所属VG\n```bash\n# 创建\nlvcreate -L 100M -n LV1 volume-group1\n\n# 检查\nlvdisplay\n\n# 格式化 格式化成ext4类型\nmkfs.ext4 /dev/volume-group1/LV1\n\n# 挂载\nmkdir ~/lvm-mount #设置一个挂载点\nmount /dev/volume-group1/LV1 ~/lvm-mount # 挂载\n\n# 删除\nlvremove /dev/volume-group1/LV1\n```\n\n# 0X07 扩展LVM逻辑卷\n调整逻辑卷大小是LVM最重要最有用的功能。\n比如之前创建的100MB的分区不够用了，所以我们需要扩展一下那个分区的大小。虽然LVM很强大，但是扩展的时候还是需要卸载LV\n```bash\n# 卸载LV\numount ~/lvm-mount/\n\n# 调整大小\nlvresize -L 200M /dev/volume-group1/LV1\n\n# 检查磁盘错误（非必须）\ne2fsck -f /dev/volume-group1/LV1\n\n# 扩展文件系统\nresize2fs /dev/volume-group1/LV1\n\n# 验证\nlvdisplay\n```\n\n# 0X08 压缩LVM逻辑卷\n比如你发现有一个分区给了很大，但是完全用不到，那么就可以压缩它的空间，把空余的空间用在有用的地方。\n```bash\n# 同样，先卸载\numount /dev/volume-group1/LV1\n\n# 检查错误\ne2fsck -f /dev/volume-group1/LV1\n\n# 更新文件系统信息\nresize2fs /dev/volume-group1/LV1 100M\n\n# 压缩空间\nlvresize -L 100M /dev/volume-group1/LV1\n```\n这里会弹出警告，告诉你这项操作可能会导致数据丢失，当然，一般是没有问题的\n\n# 0X09 扩展卷组\n有一天服务器的磁盘塞满了，你就新买了一块3TB的硬盘插到了电脑上，那么如何让这个3TB和之前的空间一起工作呢？我们可以把这个磁盘分区然后也放到之前的VG（卷组）中，这样通过之前的扩容功能就可以让新的3TB运用到系统中了。\n\n```bash\n# 先给新磁盘分区（参考0X03步骤）\nfdisk /dev/sdc\n\n# 然后创建PV(物理卷)\npvcreate /dev/sdc1\n\n# 将新PV添加到VG\nvgextend volume-group1 /dev/sdc1\n\n# 验证一下\nvgdisplay\n```\n","source":"_posts/linux_lvm.md","raw":"---\ntitle: Linux的LVM 逻辑卷管理 分区 划分 重划\ndate: 2016-05-17 23:15\ntags:\n  - Linux\n  - LVM\n  - 分区\n  - 格式化\n---\n\n# 0X00 LVM是什么，有什么用\nLVM的全称是Logical Volume Manager（逻辑卷管理）。是Linux下的一种磁盘分区管理机制，方便给分区（逻辑分区）扩容和压缩。最简单的可以理解成原始的磁盘分区管理是单纯的给每个独立的磁盘进行分区，然后对每个分区进行管理，这样的话每次扩容和压缩空间都会很麻烦。LVM就相当于把所有磁盘的分区都揉到一起，揉成一个大磁盘或者说是大分区，然后从大的中分出小的，这样的话扩容和压缩都会变得方便。\n![test](http://o7bn7vqpt.bkt.clouddn.com//article/image/lvm.jpg)\n**版权声明：图片来自<a href=\"https://linux.cn/article-3218-2.html\">Linux.cn</a>**\n\n# 0X01 基础术语解释\n\nPV 是*Physical Volume* **物理卷**---也就是真实的磁盘分区\nVG 是*Volume Group* **卷组**---也就是好多PV组成的一个组\nLV 是*Logical Volume* **逻辑卷**---就是从VG中分出来的分区\nPE 是*Physical Extent* **物理区域**---是PV中最小的存储单元\nLE 是*Logical Extent* **逻辑区域**---是LV中做小的存储单元\n\n# 0X02 测试环境\nV-Box 中的 CentOS 7.x 64bit\n有两块或者以上数量的虚拟磁盘\n磁盘大小在1GB以上\n我这里/dev/sdb和/dev/sdc是刚刚添加的磁盘\nroot用户的~/lvm-mount用来挂载逻辑卷\n使用root登陆(单纯的因为每次sudo太麻烦)\n\n# 0X03 准备分区\n使用fdisk为磁盘分区\n**不会使用fdisk的可以直接按着我说的敲**\n**还是建议学LVM之前掌握最基础的fdisk分区和格式化**\n```bash\nfdisk /dev/sdb # 使用fdisk给/dev/sdb分区\n按n 回车 新建一个分区\n按p 回车 选择新建分区为主分区\n按 回车 选择默认分区号\n按 回车 默认选择开始位置\n输入 +100M 回车 选择使用100M为新分区的大小\n输入 t 回车 设置分区类型\n按 回车 默认选择刚才创建的分区\n输入 8e 设置刚才创建的分区为 LVM 类型\n```\n重复上面的步骤，给/dev/sdb分出来三个区\n\n# 0X04 创建物理卷 PV\n创建物理卷的时候，可以大小不同，也可以是不同磁盘的分区，只要是 8e 类型的分区都是可以创建到物理卷中的，这里只是为了做示范\n```bash\n# 创建\npvcreate /dev/sdb1\npvcreate /dev/sdb2\npvcreate /dev/ddb3\n\n# 检查\npvdisplay\n\n# 删除 (这步不要跟着做)\npvremove /dev/sdb1\n```\n\n# 0X05 准备卷组 VG\n创建一个包括/dev/sdb1 /dev/sdb2 /dev/sdb3 物理卷的卷组\n命名为 volme-group1\n```bash\n# 创建\nvgcreate volume-group1 /dev/sdb1 /dev/sdb2 /dev/sdb3\n\n# 检查\nvgdisplay\n\n# 删除 (这步不要跟着做)\nvgremove volume-group1\n```\n\n# 0X06 创建逻辑卷 LV\n创建逻辑卷的时候要指定名称、大小和所属VG\n```bash\n# 创建\nlvcreate -L 100M -n LV1 volume-group1\n\n# 检查\nlvdisplay\n\n# 格式化 格式化成ext4类型\nmkfs.ext4 /dev/volume-group1/LV1\n\n# 挂载\nmkdir ~/lvm-mount #设置一个挂载点\nmount /dev/volume-group1/LV1 ~/lvm-mount # 挂载\n\n# 删除\nlvremove /dev/volume-group1/LV1\n```\n\n# 0X07 扩展LVM逻辑卷\n调整逻辑卷大小是LVM最重要最有用的功能。\n比如之前创建的100MB的分区不够用了，所以我们需要扩展一下那个分区的大小。虽然LVM很强大，但是扩展的时候还是需要卸载LV\n```bash\n# 卸载LV\numount ~/lvm-mount/\n\n# 调整大小\nlvresize -L 200M /dev/volume-group1/LV1\n\n# 检查磁盘错误（非必须）\ne2fsck -f /dev/volume-group1/LV1\n\n# 扩展文件系统\nresize2fs /dev/volume-group1/LV1\n\n# 验证\nlvdisplay\n```\n\n# 0X08 压缩LVM逻辑卷\n比如你发现有一个分区给了很大，但是完全用不到，那么就可以压缩它的空间，把空余的空间用在有用的地方。\n```bash\n# 同样，先卸载\numount /dev/volume-group1/LV1\n\n# 检查错误\ne2fsck -f /dev/volume-group1/LV1\n\n# 更新文件系统信息\nresize2fs /dev/volume-group1/LV1 100M\n\n# 压缩空间\nlvresize -L 100M /dev/volume-group1/LV1\n```\n这里会弹出警告，告诉你这项操作可能会导致数据丢失，当然，一般是没有问题的\n\n# 0X09 扩展卷组\n有一天服务器的磁盘塞满了，你就新买了一块3TB的硬盘插到了电脑上，那么如何让这个3TB和之前的空间一起工作呢？我们可以把这个磁盘分区然后也放到之前的VG（卷组）中，这样通过之前的扩容功能就可以让新的3TB运用到系统中了。\n\n```bash\n# 先给新磁盘分区（参考0X03步骤）\nfdisk /dev/sdc\n\n# 然后创建PV(物理卷)\npvcreate /dev/sdc1\n\n# 将新PV添加到VG\nvgextend volume-group1 /dev/sdc1\n\n# 验证一下\nvgdisplay\n```\n","slug":"linux_lvm","published":1,"updated":"2017-09-02T14:43:22.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme3000whnlp6p5lml3b","content":"<h1 id=\"0X00-LVM是什么，有什么用\"><a href=\"#0X00-LVM是什么，有什么用\" class=\"headerlink\" title=\"0X00 LVM是什么，有什么用\"></a>0X00 LVM是什么，有什么用</h1><p>LVM的全称是Logical Volume Manager（逻辑卷管理）。是Linux下的一种磁盘分区管理机制，方便给分区（逻辑分区）扩容和压缩。最简单的可以理解成原始的磁盘分区管理是单纯的给每个独立的磁盘进行分区，然后对每个分区进行管理，这样的话每次扩容和压缩空间都会很麻烦。LVM就相当于把所有磁盘的分区都揉到一起，揉成一个大磁盘或者说是大分区，然后从大的中分出小的，这样的话扩容和压缩都会变得方便。<br><img src=\"http://o7bn7vqpt.bkt.clouddn.com//article/image/lvm.jpg\" alt=\"test\"><br><strong>版权声明：图片来自<a href=\"https://linux.cn/article-3218-2.html\" target=\"_blank\" rel=\"external\">Linux.cn</a></strong></p>\n<h1 id=\"0X01-基础术语解释\"><a href=\"#0X01-基础术语解释\" class=\"headerlink\" title=\"0X01 基础术语解释\"></a>0X01 基础术语解释</h1><p>PV 是<em>Physical Volume</em> <strong>物理卷</strong>—也就是真实的磁盘分区<br>VG 是<em>Volume Group</em> <strong>卷组</strong>—也就是好多PV组成的一个组<br>LV 是<em>Logical Volume</em> <strong>逻辑卷</strong>—就是从VG中分出来的分区<br>PE 是<em>Physical Extent</em> <strong>物理区域</strong>—是PV中最小的存储单元<br>LE 是<em>Logical Extent</em> <strong>逻辑区域</strong>—是LV中做小的存储单元</p>\n<h1 id=\"0X02-测试环境\"><a href=\"#0X02-测试环境\" class=\"headerlink\" title=\"0X02 测试环境\"></a>0X02 测试环境</h1><p>V-Box 中的 CentOS 7.x 64bit<br>有两块或者以上数量的虚拟磁盘<br>磁盘大小在1GB以上<br>我这里/dev/sdb和/dev/sdc是刚刚添加的磁盘<br>root用户的~/lvm-mount用来挂载逻辑卷<br>使用root登陆(单纯的因为每次sudo太麻烦)</p>\n<h1 id=\"0X03-准备分区\"><a href=\"#0X03-准备分区\" class=\"headerlink\" title=\"0X03 准备分区\"></a>0X03 准备分区</h1><p>使用fdisk为磁盘分区<br><strong>不会使用fdisk的可以直接按着我说的敲</strong><br><strong>还是建议学LVM之前掌握最基础的fdisk分区和格式化</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk /dev/sdb <span class=\"comment\"># 使用fdisk给/dev/sdb分区</span></div><div class=\"line\">按n 回车 新建一个分区</div><div class=\"line\">按p 回车 选择新建分区为主分区</div><div class=\"line\">按 回车 选择默认分区号</div><div class=\"line\">按 回车 默认选择开始位置</div><div class=\"line\">输入 +100M 回车 选择使用100M为新分区的大小</div><div class=\"line\">输入 t 回车 设置分区类型</div><div class=\"line\">按 回车 默认选择刚才创建的分区</div><div class=\"line\">输入 8e 设置刚才创建的分区为 LVM 类型</div></pre></td></tr></table></figure></p>\n<p>重复上面的步骤，给/dev/sdb分出来三个区</p>\n<h1 id=\"0X04-创建物理卷-PV\"><a href=\"#0X04-创建物理卷-PV\" class=\"headerlink\" title=\"0X04 创建物理卷 PV\"></a>0X04 创建物理卷 PV</h1><p>创建物理卷的时候，可以大小不同，也可以是不同磁盘的分区，只要是 8e 类型的分区都是可以创建到物理卷中的，这里只是为了做示范<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建</span></div><div class=\"line\">pvcreate /dev/sdb1</div><div class=\"line\">pvcreate /dev/sdb2</div><div class=\"line\">pvcreate /dev/ddb3</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查</span></div><div class=\"line\">pvdisplay</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除 (这步不要跟着做)</span></div><div class=\"line\">pvremove /dev/sdb1</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-准备卷组-VG\"><a href=\"#0X05-准备卷组-VG\" class=\"headerlink\" title=\"0X05 准备卷组 VG\"></a>0X05 准备卷组 VG</h1><p>创建一个包括/dev/sdb1 /dev/sdb2 /dev/sdb3 物理卷的卷组<br>命名为 volme-group1<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建</span></div><div class=\"line\">vgcreate volume-group1 /dev/sdb1 /dev/sdb2 /dev/sdb3</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查</span></div><div class=\"line\">vgdisplay</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除 (这步不要跟着做)</span></div><div class=\"line\">vgremove volume-group1</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-创建逻辑卷-LV\"><a href=\"#0X06-创建逻辑卷-LV\" class=\"headerlink\" title=\"0X06 创建逻辑卷 LV\"></a>0X06 创建逻辑卷 LV</h1><p>创建逻辑卷的时候要指定名称、大小和所属VG<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建</span></div><div class=\"line\">lvcreate -L 100M -n LV1 volume-group1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查</span></div><div class=\"line\">lvdisplay</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 格式化 格式化成ext4类型</span></div><div class=\"line\">mkfs.ext4 /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 挂载</span></div><div class=\"line\">mkdir ~/lvm-mount <span class=\"comment\">#设置一个挂载点</span></div><div class=\"line\">mount /dev/volume-group1/LV1 ~/lvm-mount <span class=\"comment\"># 挂载</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除</span></div><div class=\"line\">lvremove /dev/volume-group1/LV1</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-扩展LVM逻辑卷\"><a href=\"#0X07-扩展LVM逻辑卷\" class=\"headerlink\" title=\"0X07 扩展LVM逻辑卷\"></a>0X07 扩展LVM逻辑卷</h1><p>调整逻辑卷大小是LVM最重要最有用的功能。<br>比如之前创建的100MB的分区不够用了，所以我们需要扩展一下那个分区的大小。虽然LVM很强大，但是扩展的时候还是需要卸载LV<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 卸载LV</span></div><div class=\"line\">umount ~/lvm-mount/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 调整大小</span></div><div class=\"line\">lvresize -L 200M /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查磁盘错误（非必须）</span></div><div class=\"line\">e2fsck -f /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 扩展文件系统</span></div><div class=\"line\">resize2fs /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 验证</span></div><div class=\"line\">lvdisplay</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-压缩LVM逻辑卷\"><a href=\"#0X08-压缩LVM逻辑卷\" class=\"headerlink\" title=\"0X08 压缩LVM逻辑卷\"></a>0X08 压缩LVM逻辑卷</h1><p>比如你发现有一个分区给了很大，但是完全用不到，那么就可以压缩它的空间，把空余的空间用在有用的地方。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 同样，先卸载</span></div><div class=\"line\">umount /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查错误</span></div><div class=\"line\">e2fsck -f /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更新文件系统信息</span></div><div class=\"line\">resize2fs /dev/volume-group1/LV1 100M</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 压缩空间</span></div><div class=\"line\">lvresize -L 100M /dev/volume-group1/LV1</div></pre></td></tr></table></figure></p>\n<p>这里会弹出警告，告诉你这项操作可能会导致数据丢失，当然，一般是没有问题的</p>\n<h1 id=\"0X09-扩展卷组\"><a href=\"#0X09-扩展卷组\" class=\"headerlink\" title=\"0X09 扩展卷组\"></a>0X09 扩展卷组</h1><p>有一天服务器的磁盘塞满了，你就新买了一块3TB的硬盘插到了电脑上，那么如何让这个3TB和之前的空间一起工作呢？我们可以把这个磁盘分区然后也放到之前的VG（卷组）中，这样通过之前的扩容功能就可以让新的3TB运用到系统中了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 先给新磁盘分区（参考0X03步骤）</span></div><div class=\"line\">fdisk /dev/sdc</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 然后创建PV(物理卷)</span></div><div class=\"line\">pvcreate /dev/sdc1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将新PV添加到VG</span></div><div class=\"line\">vgextend volume-group1 /dev/sdc1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 验证一下</span></div><div class=\"line\">vgdisplay</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-LVM是什么，有什么用\"><a href=\"#0X00-LVM是什么，有什么用\" class=\"headerlink\" title=\"0X00 LVM是什么，有什么用\"></a>0X00 LVM是什么，有什么用</h1><p>LVM的全称是Logical Volume Manager（逻辑卷管理）。是Linux下的一种磁盘分区管理机制，方便给分区（逻辑分区）扩容和压缩。最简单的可以理解成原始的磁盘分区管理是单纯的给每个独立的磁盘进行分区，然后对每个分区进行管理，这样的话每次扩容和压缩空间都会很麻烦。LVM就相当于把所有磁盘的分区都揉到一起，揉成一个大磁盘或者说是大分区，然后从大的中分出小的，这样的话扩容和压缩都会变得方便。<br><img src=\"http://o7bn7vqpt.bkt.clouddn.com//article/image/lvm.jpg\" alt=\"test\"><br><strong>版权声明：图片来自<a href=\"https://linux.cn/article-3218-2.html\" target=\"_blank\" rel=\"external\">Linux.cn</a></strong></p>\n<h1 id=\"0X01-基础术语解释\"><a href=\"#0X01-基础术语解释\" class=\"headerlink\" title=\"0X01 基础术语解释\"></a>0X01 基础术语解释</h1><p>PV 是<em>Physical Volume</em> <strong>物理卷</strong>—也就是真实的磁盘分区<br>VG 是<em>Volume Group</em> <strong>卷组</strong>—也就是好多PV组成的一个组<br>LV 是<em>Logical Volume</em> <strong>逻辑卷</strong>—就是从VG中分出来的分区<br>PE 是<em>Physical Extent</em> <strong>物理区域</strong>—是PV中最小的存储单元<br>LE 是<em>Logical Extent</em> <strong>逻辑区域</strong>—是LV中做小的存储单元</p>\n<h1 id=\"0X02-测试环境\"><a href=\"#0X02-测试环境\" class=\"headerlink\" title=\"0X02 测试环境\"></a>0X02 测试环境</h1><p>V-Box 中的 CentOS 7.x 64bit<br>有两块或者以上数量的虚拟磁盘<br>磁盘大小在1GB以上<br>我这里/dev/sdb和/dev/sdc是刚刚添加的磁盘<br>root用户的~/lvm-mount用来挂载逻辑卷<br>使用root登陆(单纯的因为每次sudo太麻烦)</p>\n<h1 id=\"0X03-准备分区\"><a href=\"#0X03-准备分区\" class=\"headerlink\" title=\"0X03 准备分区\"></a>0X03 准备分区</h1><p>使用fdisk为磁盘分区<br><strong>不会使用fdisk的可以直接按着我说的敲</strong><br><strong>还是建议学LVM之前掌握最基础的fdisk分区和格式化</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk /dev/sdb <span class=\"comment\"># 使用fdisk给/dev/sdb分区</span></div><div class=\"line\">按n 回车 新建一个分区</div><div class=\"line\">按p 回车 选择新建分区为主分区</div><div class=\"line\">按 回车 选择默认分区号</div><div class=\"line\">按 回车 默认选择开始位置</div><div class=\"line\">输入 +100M 回车 选择使用100M为新分区的大小</div><div class=\"line\">输入 t 回车 设置分区类型</div><div class=\"line\">按 回车 默认选择刚才创建的分区</div><div class=\"line\">输入 8e 设置刚才创建的分区为 LVM 类型</div></pre></td></tr></table></figure></p>\n<p>重复上面的步骤，给/dev/sdb分出来三个区</p>\n<h1 id=\"0X04-创建物理卷-PV\"><a href=\"#0X04-创建物理卷-PV\" class=\"headerlink\" title=\"0X04 创建物理卷 PV\"></a>0X04 创建物理卷 PV</h1><p>创建物理卷的时候，可以大小不同，也可以是不同磁盘的分区，只要是 8e 类型的分区都是可以创建到物理卷中的，这里只是为了做示范<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建</span></div><div class=\"line\">pvcreate /dev/sdb1</div><div class=\"line\">pvcreate /dev/sdb2</div><div class=\"line\">pvcreate /dev/ddb3</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查</span></div><div class=\"line\">pvdisplay</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除 (这步不要跟着做)</span></div><div class=\"line\">pvremove /dev/sdb1</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-准备卷组-VG\"><a href=\"#0X05-准备卷组-VG\" class=\"headerlink\" title=\"0X05 准备卷组 VG\"></a>0X05 准备卷组 VG</h1><p>创建一个包括/dev/sdb1 /dev/sdb2 /dev/sdb3 物理卷的卷组<br>命名为 volme-group1<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建</span></div><div class=\"line\">vgcreate volume-group1 /dev/sdb1 /dev/sdb2 /dev/sdb3</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查</span></div><div class=\"line\">vgdisplay</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除 (这步不要跟着做)</span></div><div class=\"line\">vgremove volume-group1</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-创建逻辑卷-LV\"><a href=\"#0X06-创建逻辑卷-LV\" class=\"headerlink\" title=\"0X06 创建逻辑卷 LV\"></a>0X06 创建逻辑卷 LV</h1><p>创建逻辑卷的时候要指定名称、大小和所属VG<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建</span></div><div class=\"line\">lvcreate -L 100M -n LV1 volume-group1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查</span></div><div class=\"line\">lvdisplay</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 格式化 格式化成ext4类型</span></div><div class=\"line\">mkfs.ext4 /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 挂载</span></div><div class=\"line\">mkdir ~/lvm-mount <span class=\"comment\">#设置一个挂载点</span></div><div class=\"line\">mount /dev/volume-group1/LV1 ~/lvm-mount <span class=\"comment\"># 挂载</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除</span></div><div class=\"line\">lvremove /dev/volume-group1/LV1</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-扩展LVM逻辑卷\"><a href=\"#0X07-扩展LVM逻辑卷\" class=\"headerlink\" title=\"0X07 扩展LVM逻辑卷\"></a>0X07 扩展LVM逻辑卷</h1><p>调整逻辑卷大小是LVM最重要最有用的功能。<br>比如之前创建的100MB的分区不够用了，所以我们需要扩展一下那个分区的大小。虽然LVM很强大，但是扩展的时候还是需要卸载LV<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 卸载LV</span></div><div class=\"line\">umount ~/lvm-mount/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 调整大小</span></div><div class=\"line\">lvresize -L 200M /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查磁盘错误（非必须）</span></div><div class=\"line\">e2fsck -f /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 扩展文件系统</span></div><div class=\"line\">resize2fs /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 验证</span></div><div class=\"line\">lvdisplay</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-压缩LVM逻辑卷\"><a href=\"#0X08-压缩LVM逻辑卷\" class=\"headerlink\" title=\"0X08 压缩LVM逻辑卷\"></a>0X08 压缩LVM逻辑卷</h1><p>比如你发现有一个分区给了很大，但是完全用不到，那么就可以压缩它的空间，把空余的空间用在有用的地方。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 同样，先卸载</span></div><div class=\"line\">umount /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查错误</span></div><div class=\"line\">e2fsck -f /dev/volume-group1/LV1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 更新文件系统信息</span></div><div class=\"line\">resize2fs /dev/volume-group1/LV1 100M</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 压缩空间</span></div><div class=\"line\">lvresize -L 100M /dev/volume-group1/LV1</div></pre></td></tr></table></figure></p>\n<p>这里会弹出警告，告诉你这项操作可能会导致数据丢失，当然，一般是没有问题的</p>\n<h1 id=\"0X09-扩展卷组\"><a href=\"#0X09-扩展卷组\" class=\"headerlink\" title=\"0X09 扩展卷组\"></a>0X09 扩展卷组</h1><p>有一天服务器的磁盘塞满了，你就新买了一块3TB的硬盘插到了电脑上，那么如何让这个3TB和之前的空间一起工作呢？我们可以把这个磁盘分区然后也放到之前的VG（卷组）中，这样通过之前的扩容功能就可以让新的3TB运用到系统中了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 先给新磁盘分区（参考0X03步骤）</span></div><div class=\"line\">fdisk /dev/sdc</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 然后创建PV(物理卷)</span></div><div class=\"line\">pvcreate /dev/sdc1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将新PV添加到VG</span></div><div class=\"line\">vgextend volume-group1 /dev/sdc1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 验证一下</span></div><div class=\"line\">vgdisplay</div></pre></td></tr></table></figure>\n"},{"title":"NFS 网络文件系统 安装 配置 挂载 卸载","date":"2016-06-12T04:13:00.000Z","_content":"\n# 0X00 NFS简介\nNFS的全称是Net-File-System也就是网络文件系统。这和Samba与FTP不同，FTP的主要用途是用来上传和下载文件，Samba的主要功能是共享文件，而NFS的主要功能是用作文件系统。也就是说和NTFS、FAT32、EXT4等是类似的性质。我们可以将这个NFS当做一个磁盘分区挂载到自己的操作系统上，像操作自己的分区一样，甚至可以从NFS启动操作系统。\n\n>实验环境：两台虚拟机CentOS7.x\n>同处在一个内网环境下\n\n# 0X01 安装NFS软件和服务\n```bash\n# 安装软件\nyum install rpcbind\nyum install nfs-utils\n```\n\n# 0X02 创建测试目录并修改权限\n```bash\n# 创建测试用的目录\nmkdir /home/share\n\n# 创建测试用的文件(让文件里有内容，方便后来判断是否搭建成功)\nls / > /home/share/test1\nls /etc/ > /home/share/test2\n\n# 创建挂载点、以后就把NFS挂载到这里\nmkdir /home/test\n\n# 将这个测试目录设置为777的权限\nchmod 777 /home/share\n```\n\n# 0X03 修改配置文件\n配置文件是`/etc/exports`  使用文本编辑器打开配置文件并进行修改\n```bash\n# 添加如下配置  192.168.123.132是客户端IP\n/home/share/ 192.168.123.132(rw, sync) *(ro)\n```\n`/home/share/`表示NFS的路径\n`192.168.123.132(rw, sync)`表示192.168.123.132访问此NFS时使用后面的配置、具有rw权限（读写）、sync同步模式，表示内存中的数据实时写入磁盘\n`*(ro)`表示所有IP访问时使用后面的配置、ro表示read only只读\n>每个路径下面可以接好多个访问项，就是`192.168.123.132(rw, sync)`或者`*(ro)`，使用空格分开\n\n# 0X04 启动服务并检查NFS配置\n```bash\n# 启动服务\nsystemctl start portmap\nsystemctl start nfs\n```\n\n```bash\n# 在客户端检查 192.168.123.123是服务端\nshowmount -e 192.168.123.123\n\n# 如果输出成如下这样就是正确了\nExport List for 192.168.123.123:\n/home/share *\n```\n\n# 0X05 挂载和卸载\n```bash\n# 挂载\nmount -t nfs 192.168.123.123:/home /home/test\n\n# 卸载\numount /home/test\n```\n","source":"_posts/linux_nfs.md","raw":"---\ntitle: NFS 网络文件系统 安装 配置 挂载 卸载\ndate: 2016-06-12 12:13\ntags:\n  - Linux\n  - NFS\n  - 文件系统\n---\n\n# 0X00 NFS简介\nNFS的全称是Net-File-System也就是网络文件系统。这和Samba与FTP不同，FTP的主要用途是用来上传和下载文件，Samba的主要功能是共享文件，而NFS的主要功能是用作文件系统。也就是说和NTFS、FAT32、EXT4等是类似的性质。我们可以将这个NFS当做一个磁盘分区挂载到自己的操作系统上，像操作自己的分区一样，甚至可以从NFS启动操作系统。\n\n>实验环境：两台虚拟机CentOS7.x\n>同处在一个内网环境下\n\n# 0X01 安装NFS软件和服务\n```bash\n# 安装软件\nyum install rpcbind\nyum install nfs-utils\n```\n\n# 0X02 创建测试目录并修改权限\n```bash\n# 创建测试用的目录\nmkdir /home/share\n\n# 创建测试用的文件(让文件里有内容，方便后来判断是否搭建成功)\nls / > /home/share/test1\nls /etc/ > /home/share/test2\n\n# 创建挂载点、以后就把NFS挂载到这里\nmkdir /home/test\n\n# 将这个测试目录设置为777的权限\nchmod 777 /home/share\n```\n\n# 0X03 修改配置文件\n配置文件是`/etc/exports`  使用文本编辑器打开配置文件并进行修改\n```bash\n# 添加如下配置  192.168.123.132是客户端IP\n/home/share/ 192.168.123.132(rw, sync) *(ro)\n```\n`/home/share/`表示NFS的路径\n`192.168.123.132(rw, sync)`表示192.168.123.132访问此NFS时使用后面的配置、具有rw权限（读写）、sync同步模式，表示内存中的数据实时写入磁盘\n`*(ro)`表示所有IP访问时使用后面的配置、ro表示read only只读\n>每个路径下面可以接好多个访问项，就是`192.168.123.132(rw, sync)`或者`*(ro)`，使用空格分开\n\n# 0X04 启动服务并检查NFS配置\n```bash\n# 启动服务\nsystemctl start portmap\nsystemctl start nfs\n```\n\n```bash\n# 在客户端检查 192.168.123.123是服务端\nshowmount -e 192.168.123.123\n\n# 如果输出成如下这样就是正确了\nExport List for 192.168.123.123:\n/home/share *\n```\n\n# 0X05 挂载和卸载\n```bash\n# 挂载\nmount -t nfs 192.168.123.123:/home /home/test\n\n# 卸载\numount /home/test\n```\n","slug":"linux_nfs","published":1,"updated":"2017-09-02T14:45:03.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme3000yhnlppq3gv885","content":"<h1 id=\"0X00-NFS简介\"><a href=\"#0X00-NFS简介\" class=\"headerlink\" title=\"0X00 NFS简介\"></a>0X00 NFS简介</h1><p>NFS的全称是Net-File-System也就是网络文件系统。这和Samba与FTP不同，FTP的主要用途是用来上传和下载文件，Samba的主要功能是共享文件，而NFS的主要功能是用作文件系统。也就是说和NTFS、FAT32、EXT4等是类似的性质。我们可以将这个NFS当做一个磁盘分区挂载到自己的操作系统上，像操作自己的分区一样，甚至可以从NFS启动操作系统。</p>\n<blockquote>\n<p>实验环境：两台虚拟机CentOS7.x<br>同处在一个内网环境下</p>\n</blockquote>\n<h1 id=\"0X01-安装NFS软件和服务\"><a href=\"#0X01-安装NFS软件和服务\" class=\"headerlink\" title=\"0X01 安装NFS软件和服务\"></a>0X01 安装NFS软件和服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装软件</span></div><div class=\"line\">yum install rpcbind</div><div class=\"line\">yum install nfs-utils</div></pre></td></tr></table></figure>\n<h1 id=\"0X02-创建测试目录并修改权限\"><a href=\"#0X02-创建测试目录并修改权限\" class=\"headerlink\" title=\"0X02 创建测试目录并修改权限\"></a>0X02 创建测试目录并修改权限</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建测试用的目录</span></div><div class=\"line\">mkdir /home/share</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建测试用的文件(让文件里有内容，方便后来判断是否搭建成功)</span></div><div class=\"line\">ls / &gt; /home/share/test1</div><div class=\"line\">ls /etc/ &gt; /home/share/test2</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建挂载点、以后就把NFS挂载到这里</span></div><div class=\"line\">mkdir /home/<span class=\"built_in\">test</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将这个测试目录设置为777的权限</span></div><div class=\"line\">chmod 777 /home/share</div></pre></td></tr></table></figure>\n<h1 id=\"0X03-修改配置文件\"><a href=\"#0X03-修改配置文件\" class=\"headerlink\" title=\"0X03 修改配置文件\"></a>0X03 修改配置文件</h1><p>配置文件是<code>/etc/exports</code>  使用文本编辑器打开配置文件并进行修改<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加如下配置  192.168.123.132是客户端IP</span></div><div class=\"line\">/home/share/ 192.168.123.132(rw, sync) *(ro)</div></pre></td></tr></table></figure></p>\n<p><code>/home/share/</code>表示NFS的路径<br><code>192.168.123.132(rw, sync)</code>表示192.168.123.132访问此NFS时使用后面的配置、具有rw权限（读写）、sync同步模式，表示内存中的数据实时写入磁盘<br><code>*(ro)</code>表示所有IP访问时使用后面的配置、ro表示read only只读</p>\n<blockquote>\n<p>每个路径下面可以接好多个访问项，就是<code>192.168.123.132(rw, sync)</code>或者<code>*(ro)</code>，使用空格分开</p>\n</blockquote>\n<h1 id=\"0X04-启动服务并检查NFS配置\"><a href=\"#0X04-启动服务并检查NFS配置\" class=\"headerlink\" title=\"0X04 启动服务并检查NFS配置\"></a>0X04 启动服务并检查NFS配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 启动服务</span></div><div class=\"line\">systemctl start portmap</div><div class=\"line\">systemctl start nfs</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 在客户端检查 192.168.123.123是服务端</span></div><div class=\"line\">showmount -e 192.168.123.123</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果输出成如下这样就是正确了</span></div><div class=\"line\">Export List <span class=\"keyword\">for</span> 192.168.123.123:</div><div class=\"line\">/home/share *</div></pre></td></tr></table></figure>\n<h1 id=\"0X05-挂载和卸载\"><a href=\"#0X05-挂载和卸载\" class=\"headerlink\" title=\"0X05 挂载和卸载\"></a>0X05 挂载和卸载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 挂载</span></div><div class=\"line\">mount -t nfs 192.168.123.123:/home /home/<span class=\"built_in\">test</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 卸载</span></div><div class=\"line\">umount /home/<span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-NFS简介\"><a href=\"#0X00-NFS简介\" class=\"headerlink\" title=\"0X00 NFS简介\"></a>0X00 NFS简介</h1><p>NFS的全称是Net-File-System也就是网络文件系统。这和Samba与FTP不同，FTP的主要用途是用来上传和下载文件，Samba的主要功能是共享文件，而NFS的主要功能是用作文件系统。也就是说和NTFS、FAT32、EXT4等是类似的性质。我们可以将这个NFS当做一个磁盘分区挂载到自己的操作系统上，像操作自己的分区一样，甚至可以从NFS启动操作系统。</p>\n<blockquote>\n<p>实验环境：两台虚拟机CentOS7.x<br>同处在一个内网环境下</p>\n</blockquote>\n<h1 id=\"0X01-安装NFS软件和服务\"><a href=\"#0X01-安装NFS软件和服务\" class=\"headerlink\" title=\"0X01 安装NFS软件和服务\"></a>0X01 安装NFS软件和服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装软件</span></div><div class=\"line\">yum install rpcbind</div><div class=\"line\">yum install nfs-utils</div></pre></td></tr></table></figure>\n<h1 id=\"0X02-创建测试目录并修改权限\"><a href=\"#0X02-创建测试目录并修改权限\" class=\"headerlink\" title=\"0X02 创建测试目录并修改权限\"></a>0X02 创建测试目录并修改权限</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建测试用的目录</span></div><div class=\"line\">mkdir /home/share</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建测试用的文件(让文件里有内容，方便后来判断是否搭建成功)</span></div><div class=\"line\">ls / &gt; /home/share/test1</div><div class=\"line\">ls /etc/ &gt; /home/share/test2</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建挂载点、以后就把NFS挂载到这里</span></div><div class=\"line\">mkdir /home/<span class=\"built_in\">test</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将这个测试目录设置为777的权限</span></div><div class=\"line\">chmod 777 /home/share</div></pre></td></tr></table></figure>\n<h1 id=\"0X03-修改配置文件\"><a href=\"#0X03-修改配置文件\" class=\"headerlink\" title=\"0X03 修改配置文件\"></a>0X03 修改配置文件</h1><p>配置文件是<code>/etc/exports</code>  使用文本编辑器打开配置文件并进行修改<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加如下配置  192.168.123.132是客户端IP</span></div><div class=\"line\">/home/share/ 192.168.123.132(rw, sync) *(ro)</div></pre></td></tr></table></figure></p>\n<p><code>/home/share/</code>表示NFS的路径<br><code>192.168.123.132(rw, sync)</code>表示192.168.123.132访问此NFS时使用后面的配置、具有rw权限（读写）、sync同步模式，表示内存中的数据实时写入磁盘<br><code>*(ro)</code>表示所有IP访问时使用后面的配置、ro表示read only只读</p>\n<blockquote>\n<p>每个路径下面可以接好多个访问项，就是<code>192.168.123.132(rw, sync)</code>或者<code>*(ro)</code>，使用空格分开</p>\n</blockquote>\n<h1 id=\"0X04-启动服务并检查NFS配置\"><a href=\"#0X04-启动服务并检查NFS配置\" class=\"headerlink\" title=\"0X04 启动服务并检查NFS配置\"></a>0X04 启动服务并检查NFS配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 启动服务</span></div><div class=\"line\">systemctl start portmap</div><div class=\"line\">systemctl start nfs</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 在客户端检查 192.168.123.123是服务端</span></div><div class=\"line\">showmount -e 192.168.123.123</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 如果输出成如下这样就是正确了</span></div><div class=\"line\">Export List <span class=\"keyword\">for</span> 192.168.123.123:</div><div class=\"line\">/home/share *</div></pre></td></tr></table></figure>\n<h1 id=\"0X05-挂载和卸载\"><a href=\"#0X05-挂载和卸载\" class=\"headerlink\" title=\"0X05 挂载和卸载\"></a>0X05 挂载和卸载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 挂载</span></div><div class=\"line\">mount -t nfs 192.168.123.123:/home /home/<span class=\"built_in\">test</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 卸载</span></div><div class=\"line\">umount /home/<span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n"},{"title":"Linux下MariaDB/MySql的安装配置、用户管理和备份","date":"2016-11-20T14:17:00.000Z","_content":"\n\n# 0x00  MariaDB的身世\n\n自从MySQL被Oracle收购之后，社区就一直担心MySQL可能会被闭源或者一些其他的原因导致MySQL的支持出现问题。所以现在好多发行版本默认的数据库都从MySQL转移到了Mariadb。而且社区也开始大力支持Mariadb，再加上Mariadb的使用和API和MySQL完全一样，所以这里选择使用Mariadb而不是MySQL。\n>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。\nMariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，10.0.9版起使用XtraDB（名称代号为Aria）来代替MySQL的InnoDB。\nMariaDB由MySQL的创始人麦克尔·维德纽斯主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自麦克尔·维德纽斯的女儿玛丽亚（英语：Maria）的名字。——————————维基百科\n\n# 0X01 安装Mariadb\n\nMariaDB是一组软件，如果只安装一部分的话后期扩展可能会出现问题，所以我们可以一次安装整个软件组\n```bash\n[root@iZ28jaak5nnZ ~]# yum groupinstall mariadb mariadb-client -y\n```\n安装需要一点时间，我们只需要等待安装结束。\n\n# 0X02 打开Mariadb服务并配置防火墙\n启动Mariadb服务。在CentOS7.x中推荐使用systemctl来配置服务的启动方式\n```bash\nsystemctl start mariadb.service\n```\n\n配置防火墙，允许从MariaDB使用的3306端口监听，由于历史遗留问题，这里还是称之为MySql。\n```bash\n[root@iZ28jaak5nnZ ~]# firewall-cmd --add-service=mysql\nsuccess\n[root@iZ28jaak5nnZ ~]# firewall-cmd --list-services\ndhcpv6-client mysql ssh\n```\n\n# 0X03 配置MariaDB的安全性\nMariaDB提供了一个脚本来为新安装的MariaDB提升安全性。但是在使用这个脚本之前必须要先打开MariaDB服务。\n```bash\n[root@iZ28jaak5nnZ ~]# systemctl start mariadb\n[root@iZ28jaak5nnZ ~]# systemctl enable mariadb\nln -s '/usr/lib/systemd/system/mariadb.service' '/etc/systemd/system/multi-user.target.wants/mariadb.service'\n```\n然后运行这个脚本，这个脚本会有几次提示：\n1. 询问当前密码，如果没设置密码就直接回车\n2. 设置root用户的密码\n3. 删除匿名用户(anonymous-user)\n4. 删除可以从外部登陆的root用户\n5. 删除test测试数据库\n6. 重载数据库\n\n```bash\n[root@iZ28jaak5nnZ ~]# mysql_secure_installation \n/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found\n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user.  If you've just installed MariaDB, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\n\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\nSetting the root password ensures that nobody can log into the MariaDB\nroot user without the proper authorisation.\n\nSet root password? [Y/n] y\nNew password: \nRe-enter new password: \nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n```\n\n# 0X04 登陆到MariaDB\n配置好密码和接入点之后就可以登录到MariaDB了。使用mysql命令来登陆MariaDB。\n```bash\n[root@iZ28jaak5nnZ ~]# mysql -h localhost -u root -p\nEnter password: \nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 12\nServer version: 5.5.50-MariaDB MariaDB Server\n\nCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]> \n```\n参数：-h 指定主机， -u 指定用户，　-p 指定密码\n这三个参数都可以省略，当我们省略主机名的时候就默认登录到本地，当省略用户名的时候默认使用root，当省略密码的时候默认没有密码登陆\n\n# 0X05 用户管理\n在MariaDB中有用户的概念和权限的概念。用户名+密码+登陆地点，三个选项唯一确定一个用户，就比如同一个用户名`shawn`在10.13.1.2和在10.13.1.3的登陆密码可以是不同的，这在MariaDB里会分成两条来存储。\n```sql\n创建一个名为shawn的，从localhost登陆的，密码为test的用户\nMariaDB [(none)]> CREATE USER 'shawn'@'localhost' IDENTIFIED BY 'test';\nQuery OK, 0 rows affected (0.00 sec)\n\n创建一个名为shawn_test的，任意地点，密码为6666的用户\nMariaDB [(none)]> CREATE USER 'shawn_test'@'%' IDENTIFIED BY '6666';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n而且在MariaDB中用户和权限是分开的，如果只添加一个用户的话，这个用户是没有任何权限的。\n\n删除用户的话是使用`DROP`命令\n```sql\nMariaDB [(none)]> DROP USER heiheihei@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n# 0X06 权限管理\n登录到MariaDB之后可以给用户添加具体的权限，使用`GRANT`命令。\n```sql\n允许从localhost登陆的shawn对mysql数据库的user表执行查询\nMariaDB [(none)]> GRANT SELECT ON mysql.user to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从localhost登陆的shawn对mysql数据库的user表执行查询和插入\nMariaDB [(none)]> GRANT SELECT, INSERT ON mysql.user to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从localhost登陆的shawn对mysql数据库的user表执行增删查改四种操作\nMariaDB [(none)]> GRANT ALL ON mysql.user to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从localhost登陆的shawn对mysql数据库的所有表执行增删查改四种操作\nMariaDB [(none)]> GRANT ALL ON mysql.* to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从localhost登陆的shawn对所有库的所有表执行增删查改四种操作\nMariaDB [(none)]> GRANT ALL ON *.* to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从任意地点登陆的shawn对所有库的所有表执行增删查改四种操作\nMariaDB [(none)]> GRANT ALL ON *.* to shawn@'%';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n使用`REVOKE`可以删除给定的权限，使用方法和`GRANT`是一样的，只是开头不同而已\n使用`FLUSH PRIVILEGES;`可以刷新权限信息\n使用`SHOW GRANT FOR root@localhost`可以查看某用户的权限信息\n\n# 0X07 数据库备份\nMariaDB有逻辑备份和物理备份两种备份方案，逻辑备份就是可以把表结构数据等导出成sql文件，而物理备份就是直接备份文件。\n逻辑备份比较慢，因为要将备份的数据全部都查询一遍，但是可以不下线备份；物理备份比较快，但是需要下线备份。这里说的是逻辑备份.\n```bash\n[root@iZ28jaak5nnZ ~]# mysqldump -u root -h localhost -p --all-databases > backup.sql\nEnter password:\n```\n这里我使用了一个`--all-databases`的参数，是备份所有数据库，可选的参数有下面这几个\n1. `--all-databases`备份所有数据库\n2. `--add-drop-tables`生成的sql中包含drop tables语句，删除以前的table\n3. `--no-data`只生成库和表结构，没有数据\n4. `--lock-all-tables`在备份结束之前，锁定所有表，保证数据完整性\n5. `--add-drop-databases`生成的sql中包含drop database语句，删除以前的database\n\n\n# 0X08 数据库还原\n当我们有了一个备份出来的sql文件之后，可以将这个sql直接导入到数据库。这了的用法和之前登录到MariaDB的方法是一样的，只是将sql文件重定向过去就可以了\n```sql\n[root@iZ28jaak5nnZ ~]# mysql -u root -h localhost -p < backup.sql\nEnter password:\n```\n","source":"_posts/linux_mysql_dump.md","raw":"---\ntitle: Linux下MariaDB/MySql的安装配置、用户管理和备份\ndate: 2016-11-20 22:17\ntags:\n  - Linux\n  - MySQL\n  - MariaDB\n  - 数据库\n  - 用户管理\n  - 服务安装\n  - 数据备份\n---\n\n\n# 0x00  MariaDB的身世\n\n自从MySQL被Oracle收购之后，社区就一直担心MySQL可能会被闭源或者一些其他的原因导致MySQL的支持出现问题。所以现在好多发行版本默认的数据库都从MySQL转移到了Mariadb。而且社区也开始大力支持Mariadb，再加上Mariadb的使用和API和MySQL完全一样，所以这里选择使用Mariadb而不是MySQL。\n>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。\nMariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，10.0.9版起使用XtraDB（名称代号为Aria）来代替MySQL的InnoDB。\nMariaDB由MySQL的创始人麦克尔·维德纽斯主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自麦克尔·维德纽斯的女儿玛丽亚（英语：Maria）的名字。——————————维基百科\n\n# 0X01 安装Mariadb\n\nMariaDB是一组软件，如果只安装一部分的话后期扩展可能会出现问题，所以我们可以一次安装整个软件组\n```bash\n[root@iZ28jaak5nnZ ~]# yum groupinstall mariadb mariadb-client -y\n```\n安装需要一点时间，我们只需要等待安装结束。\n\n# 0X02 打开Mariadb服务并配置防火墙\n启动Mariadb服务。在CentOS7.x中推荐使用systemctl来配置服务的启动方式\n```bash\nsystemctl start mariadb.service\n```\n\n配置防火墙，允许从MariaDB使用的3306端口监听，由于历史遗留问题，这里还是称之为MySql。\n```bash\n[root@iZ28jaak5nnZ ~]# firewall-cmd --add-service=mysql\nsuccess\n[root@iZ28jaak5nnZ ~]# firewall-cmd --list-services\ndhcpv6-client mysql ssh\n```\n\n# 0X03 配置MariaDB的安全性\nMariaDB提供了一个脚本来为新安装的MariaDB提升安全性。但是在使用这个脚本之前必须要先打开MariaDB服务。\n```bash\n[root@iZ28jaak5nnZ ~]# systemctl start mariadb\n[root@iZ28jaak5nnZ ~]# systemctl enable mariadb\nln -s '/usr/lib/systemd/system/mariadb.service' '/etc/systemd/system/multi-user.target.wants/mariadb.service'\n```\n然后运行这个脚本，这个脚本会有几次提示：\n1. 询问当前密码，如果没设置密码就直接回车\n2. 设置root用户的密码\n3. 删除匿名用户(anonymous-user)\n4. 删除可以从外部登陆的root用户\n5. 删除test测试数据库\n6. 重载数据库\n\n```bash\n[root@iZ28jaak5nnZ ~]# mysql_secure_installation \n/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found\n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user.  If you've just installed MariaDB, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\n\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\nSetting the root password ensures that nobody can log into the MariaDB\nroot user without the proper authorisation.\n\nSet root password? [Y/n] y\nNew password: \nRe-enter new password: \nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n```\n\n# 0X04 登陆到MariaDB\n配置好密码和接入点之后就可以登录到MariaDB了。使用mysql命令来登陆MariaDB。\n```bash\n[root@iZ28jaak5nnZ ~]# mysql -h localhost -u root -p\nEnter password: \nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 12\nServer version: 5.5.50-MariaDB MariaDB Server\n\nCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]> \n```\n参数：-h 指定主机， -u 指定用户，　-p 指定密码\n这三个参数都可以省略，当我们省略主机名的时候就默认登录到本地，当省略用户名的时候默认使用root，当省略密码的时候默认没有密码登陆\n\n# 0X05 用户管理\n在MariaDB中有用户的概念和权限的概念。用户名+密码+登陆地点，三个选项唯一确定一个用户，就比如同一个用户名`shawn`在10.13.1.2和在10.13.1.3的登陆密码可以是不同的，这在MariaDB里会分成两条来存储。\n```sql\n创建一个名为shawn的，从localhost登陆的，密码为test的用户\nMariaDB [(none)]> CREATE USER 'shawn'@'localhost' IDENTIFIED BY 'test';\nQuery OK, 0 rows affected (0.00 sec)\n\n创建一个名为shawn_test的，任意地点，密码为6666的用户\nMariaDB [(none)]> CREATE USER 'shawn_test'@'%' IDENTIFIED BY '6666';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n而且在MariaDB中用户和权限是分开的，如果只添加一个用户的话，这个用户是没有任何权限的。\n\n删除用户的话是使用`DROP`命令\n```sql\nMariaDB [(none)]> DROP USER heiheihei@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n# 0X06 权限管理\n登录到MariaDB之后可以给用户添加具体的权限，使用`GRANT`命令。\n```sql\n允许从localhost登陆的shawn对mysql数据库的user表执行查询\nMariaDB [(none)]> GRANT SELECT ON mysql.user to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从localhost登陆的shawn对mysql数据库的user表执行查询和插入\nMariaDB [(none)]> GRANT SELECT, INSERT ON mysql.user to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从localhost登陆的shawn对mysql数据库的user表执行增删查改四种操作\nMariaDB [(none)]> GRANT ALL ON mysql.user to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从localhost登陆的shawn对mysql数据库的所有表执行增删查改四种操作\nMariaDB [(none)]> GRANT ALL ON mysql.* to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从localhost登陆的shawn对所有库的所有表执行增删查改四种操作\nMariaDB [(none)]> GRANT ALL ON *.* to shawn@'localhost';\nQuery OK, 0 rows affected (0.00 sec)\n\n允许从任意地点登陆的shawn对所有库的所有表执行增删查改四种操作\nMariaDB [(none)]> GRANT ALL ON *.* to shawn@'%';\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n使用`REVOKE`可以删除给定的权限，使用方法和`GRANT`是一样的，只是开头不同而已\n使用`FLUSH PRIVILEGES;`可以刷新权限信息\n使用`SHOW GRANT FOR root@localhost`可以查看某用户的权限信息\n\n# 0X07 数据库备份\nMariaDB有逻辑备份和物理备份两种备份方案，逻辑备份就是可以把表结构数据等导出成sql文件，而物理备份就是直接备份文件。\n逻辑备份比较慢，因为要将备份的数据全部都查询一遍，但是可以不下线备份；物理备份比较快，但是需要下线备份。这里说的是逻辑备份.\n```bash\n[root@iZ28jaak5nnZ ~]# mysqldump -u root -h localhost -p --all-databases > backup.sql\nEnter password:\n```\n这里我使用了一个`--all-databases`的参数，是备份所有数据库，可选的参数有下面这几个\n1. `--all-databases`备份所有数据库\n2. `--add-drop-tables`生成的sql中包含drop tables语句，删除以前的table\n3. `--no-data`只生成库和表结构，没有数据\n4. `--lock-all-tables`在备份结束之前，锁定所有表，保证数据完整性\n5. `--add-drop-databases`生成的sql中包含drop database语句，删除以前的database\n\n\n# 0X08 数据库还原\n当我们有了一个备份出来的sql文件之后，可以将这个sql直接导入到数据库。这了的用法和之前登录到MariaDB的方法是一样的，只是将sql文件重定向过去就可以了\n```sql\n[root@iZ28jaak5nnZ ~]# mysql -u root -h localhost -p < backup.sql\nEnter password:\n```\n","slug":"linux_mysql_dump","published":1,"updated":"2017-09-02T14:44:29.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme40011hnlplghw037v","content":"<h1 id=\"0x00-MariaDB的身世\"><a href=\"#0x00-MariaDB的身世\" class=\"headerlink\" title=\"0x00  MariaDB的身世\"></a>0x00  MariaDB的身世</h1><p>自从MySQL被Oracle收购之后，社区就一直担心MySQL可能会被闭源或者一些其他的原因导致MySQL的支持出现问题。所以现在好多发行版本默认的数据库都从MySQL转移到了Mariadb。而且社区也开始大力支持Mariadb，再加上Mariadb的使用和API和MySQL完全一样，所以这里选择使用Mariadb而不是MySQL。</p>\n<blockquote>\n<p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。<br>MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，10.0.9版起使用XtraDB（名称代号为Aria）来代替MySQL的InnoDB。<br>MariaDB由MySQL的创始人麦克尔·维德纽斯主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自麦克尔·维德纽斯的女儿玛丽亚（英语：Maria）的名字。——————————维基百科</p>\n</blockquote>\n<h1 id=\"0X01-安装Mariadb\"><a href=\"#0X01-安装Mariadb\" class=\"headerlink\" title=\"0X01 安装Mariadb\"></a>0X01 安装Mariadb</h1><p>MariaDB是一组软件，如果只安装一部分的话后期扩展可能会出现问题，所以我们可以一次安装整个软件组<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># yum groupinstall mariadb mariadb-client -y</span></div></pre></td></tr></table></figure></p>\n<p>安装需要一点时间，我们只需要等待安装结束。</p>\n<h1 id=\"0X02-打开Mariadb服务并配置防火墙\"><a href=\"#0X02-打开Mariadb服务并配置防火墙\" class=\"headerlink\" title=\"0X02 打开Mariadb服务并配置防火墙\"></a>0X02 打开Mariadb服务并配置防火墙</h1><p>启动Mariadb服务。在CentOS7.x中推荐使用systemctl来配置服务的启动方式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start mariadb.service</div></pre></td></tr></table></figure></p>\n<p>配置防火墙，允许从MariaDB使用的3306端口监听，由于历史遗留问题，这里还是称之为MySql。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># firewall-cmd --add-service=mysql</span></div><div class=\"line\">success</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># firewall-cmd --list-services</span></div><div class=\"line\">dhcpv6-client mysql ssh</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-配置MariaDB的安全性\"><a href=\"#0X03-配置MariaDB的安全性\" class=\"headerlink\" title=\"0X03 配置MariaDB的安全性\"></a>0X03 配置MariaDB的安全性</h1><p>MariaDB提供了一个脚本来为新安装的MariaDB提升安全性。但是在使用这个脚本之前必须要先打开MariaDB服务。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># systemctl start mariadb</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># systemctl enable mariadb</span></div><div class=\"line\">ln -s <span class=\"string\">'/usr/lib/systemd/system/mariadb.service'</span> <span class=\"string\">'/etc/systemd/system/multi-user.target.wants/mariadb.service'</span></div></pre></td></tr></table></figure></p>\n<p>然后运行这个脚本，这个脚本会有几次提示：</p>\n<ol>\n<li>询问当前密码，如果没设置密码就直接回车</li>\n<li>设置root用户的密码</li>\n<li>删除匿名用户(anonymous-user)</li>\n<li>删除可以从外部登陆的root用户</li>\n<li>删除test测试数据库</li>\n<li>重载数据库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># mysql_secure_installation </span></div><div class=\"line\">/usr/bin/mysql_secure_installation: line 379: find_mysql_client: <span class=\"built_in\">command</span> not found</div><div class=\"line\"></div><div class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</div><div class=\"line\">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</div><div class=\"line\"></div><div class=\"line\">In order to <span class=\"built_in\">log</span> into MariaDB to secure it, we<span class=\"string\">'ll need the current</span></div><div class=\"line\"><span class=\"string\">password for the root user.  If you'</span>ve just installed MariaDB, and</div><div class=\"line\">you haven<span class=\"string\">'t set the root password yet, the password will be blank,</span></div><div class=\"line\"><span class=\"string\">so you should just press enter here.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Enter current password for root (enter for none): </span></div><div class=\"line\"><span class=\"string\">OK, successfully used password, moving on...</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Setting the root password ensures that nobody can log into the MariaDB</span></div><div class=\"line\"><span class=\"string\">root user without the proper authorisation.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Set root password? [Y/n] y</span></div><div class=\"line\"><span class=\"string\">New password: </span></div><div class=\"line\"><span class=\"string\">Re-enter new password: </span></div><div class=\"line\"><span class=\"string\">Password updated successfully!</span></div><div class=\"line\"><span class=\"string\">Reloading privilege tables..</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">By default, a MariaDB installation has an anonymous user, allowing anyone</span></div><div class=\"line\"><span class=\"string\">to log into MariaDB without having to have a user account created for</span></div><div class=\"line\"><span class=\"string\">them.  This is intended only for testing, and to make the installation</span></div><div class=\"line\"><span class=\"string\">go a bit smoother.  You should remove them before moving into a</span></div><div class=\"line\"><span class=\"string\">production environment.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Remove anonymous users? [Y/n] y</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Normally, root should only be allowed to connect from '</span>localhost<span class=\"string\">'.  This</span></div><div class=\"line\"><span class=\"string\">ensures that someone cannot guess at the root password from the network.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Disallow root login remotely? [Y/n] y</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">By default, MariaDB comes with a database named '</span><span class=\"built_in\">test</span><span class=\"string\">' that anyone can</span></div><div class=\"line\"><span class=\"string\">access.  This is also intended only for testing, and should be removed</span></div><div class=\"line\"><span class=\"string\">before moving into a production environment.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Remove test database and access to it? [Y/n] y</span></div><div class=\"line\"><span class=\"string\"> - Dropping test database...</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"> - Removing privileges on test database...</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Reloading the privilege tables will ensure that all changes made so far</span></div><div class=\"line\"><span class=\"string\">will take effect immediately.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Reload privilege tables now? [Y/n] y</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div></pre></td></tr></table></figure>\n<h1 id=\"0X04-登陆到MariaDB\"><a href=\"#0X04-登陆到MariaDB\" class=\"headerlink\" title=\"0X04 登陆到MariaDB\"></a>0X04 登陆到MariaDB</h1><p>配置好密码和接入点之后就可以登录到MariaDB了。使用mysql命令来登陆MariaDB。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># mysql -h localhost -u root -p</span></div><div class=\"line\">Enter password: </div><div class=\"line\">Welcome to the MariaDB monitor.  Commands end with ; or \\g.</div><div class=\"line\">Your MariaDB connection id is 12</div><div class=\"line\">Server version: 5.5.50-MariaDB MariaDB Server</div><div class=\"line\"></div><div class=\"line\">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</div><div class=\"line\"></div><div class=\"line\">Type <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</div><div class=\"line\"></div><div class=\"line\">MariaDB [(none)]&gt;</div></pre></td></tr></table></figure></p>\n<p>参数：-h 指定主机， -u 指定用户，　-p 指定密码<br>这三个参数都可以省略，当我们省略主机名的时候就默认登录到本地，当省略用户名的时候默认使用root，当省略密码的时候默认没有密码登陆</p>\n<h1 id=\"0X05-用户管理\"><a href=\"#0X05-用户管理\" class=\"headerlink\" title=\"0X05 用户管理\"></a>0X05 用户管理</h1><p>在MariaDB中有用户的概念和权限的概念。用户名+密码+登陆地点，三个选项唯一确定一个用户，就比如同一个用户名<code>shawn</code>在10.13.1.2和在10.13.1.3的登陆密码可以是不同的，这在MariaDB里会分成两条来存储。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建一个名为shawn的，从localhost登陆的，密码为test的用户</div><div class=\"line\">MariaDB [(none)]&gt; CREATE USER 'shawn'@'localhost' IDENTIFIED BY 'test';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">创建一个名为shawn_test的，任意地点，密码为6666的用户</div><div class=\"line\">MariaDB [(none)]&gt; CREATE USER 'shawn_test'@'%' IDENTIFIED BY '6666';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>而且在MariaDB中用户和权限是分开的，如果只添加一个用户的话，这个用户是没有任何权限的。</p>\n<p>删除用户的话是使用<code>DROP</code>命令<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; DROP USER heiheihei@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-权限管理\"><a href=\"#0X06-权限管理\" class=\"headerlink\" title=\"0X06 权限管理\"></a>0X06 权限管理</h1><p>登录到MariaDB之后可以给用户添加具体的权限，使用<code>GRANT</code>命令。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">允许从localhost登陆的shawn对mysql数据库的user表执行查询</div><div class=\"line\">MariaDB [(none)]&gt; GRANT SELECT ON mysql.user to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从localhost登陆的shawn对mysql数据库的user表执行查询和插入</div><div class=\"line\">MariaDB [(none)]&gt; GRANT SELECT, INSERT ON mysql.user to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从localhost登陆的shawn对mysql数据库的user表执行增删查改四种操作</div><div class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON mysql.user to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从localhost登陆的shawn对mysql数据库的所有表执行增删查改四种操作</div><div class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON mysql.* to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从localhost登陆的shawn对所有库的所有表执行增删查改四种操作</div><div class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON *.* to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从任意地点登陆的shawn对所有库的所有表执行增删查改四种操作</div><div class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON *.* to shawn@'%';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>使用<code>REVOKE</code>可以删除给定的权限，使用方法和<code>GRANT</code>是一样的，只是开头不同而已<br>使用<code>FLUSH PRIVILEGES;</code>可以刷新权限信息<br>使用<code>SHOW GRANT FOR root@localhost</code>可以查看某用户的权限信息</p>\n<h1 id=\"0X07-数据库备份\"><a href=\"#0X07-数据库备份\" class=\"headerlink\" title=\"0X07 数据库备份\"></a>0X07 数据库备份</h1><p>MariaDB有逻辑备份和物理备份两种备份方案，逻辑备份就是可以把表结构数据等导出成sql文件，而物理备份就是直接备份文件。<br>逻辑备份比较慢，因为要将备份的数据全部都查询一遍，但是可以不下线备份；物理备份比较快，但是需要下线备份。这里说的是逻辑备份.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># mysqldump -u root -h localhost -p --all-databases &gt; backup.sql</span></div><div class=\"line\">Enter password:</div></pre></td></tr></table></figure></p>\n<p>这里我使用了一个<code>--all-databases</code>的参数，是备份所有数据库，可选的参数有下面这几个</p>\n<ol>\n<li><code>--all-databases</code>备份所有数据库</li>\n<li><code>--add-drop-tables</code>生成的sql中包含drop tables语句，删除以前的table</li>\n<li><code>--no-data</code>只生成库和表结构，没有数据</li>\n<li><code>--lock-all-tables</code>在备份结束之前，锁定所有表，保证数据完整性</li>\n<li><code>--add-drop-databases</code>生成的sql中包含drop database语句，删除以前的database</li>\n</ol>\n<h1 id=\"0X08-数据库还原\"><a href=\"#0X08-数据库还原\" class=\"headerlink\" title=\"0X08 数据库还原\"></a>0X08 数据库还原</h1><p>当我们有了一个备份出来的sql文件之后，可以将这个sql直接导入到数据库。这了的用法和之前登录到MariaDB的方法是一样的，只是将sql文件重定向过去就可以了<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]# mysql -u root -h localhost -p &lt; backup.sql</div><div class=\"line\">Enter password:</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0x00-MariaDB的身世\"><a href=\"#0x00-MariaDB的身世\" class=\"headerlink\" title=\"0x00  MariaDB的身世\"></a>0x00  MariaDB的身世</h1><p>自从MySQL被Oracle收购之后，社区就一直担心MySQL可能会被闭源或者一些其他的原因导致MySQL的支持出现问题。所以现在好多发行版本默认的数据库都从MySQL转移到了Mariadb。而且社区也开始大力支持Mariadb，再加上Mariadb的使用和API和MySQL完全一样，所以这里选择使用Mariadb而不是MySQL。</p>\n<blockquote>\n<p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。<br>MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。在存储引擎方面，10.0.9版起使用XtraDB（名称代号为Aria）来代替MySQL的InnoDB。<br>MariaDB由MySQL的创始人麦克尔·维德纽斯主导开发，他早前曾以10亿美元的价格，将自己创建的公司MySQL AB卖给了SUN，此后，随着SUN被甲骨文收购，MySQL的所有权也落入Oracle的手中。MariaDB名称来自麦克尔·维德纽斯的女儿玛丽亚（英语：Maria）的名字。——————————维基百科</p>\n</blockquote>\n<h1 id=\"0X01-安装Mariadb\"><a href=\"#0X01-安装Mariadb\" class=\"headerlink\" title=\"0X01 安装Mariadb\"></a>0X01 安装Mariadb</h1><p>MariaDB是一组软件，如果只安装一部分的话后期扩展可能会出现问题，所以我们可以一次安装整个软件组<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># yum groupinstall mariadb mariadb-client -y</span></div></pre></td></tr></table></figure></p>\n<p>安装需要一点时间，我们只需要等待安装结束。</p>\n<h1 id=\"0X02-打开Mariadb服务并配置防火墙\"><a href=\"#0X02-打开Mariadb服务并配置防火墙\" class=\"headerlink\" title=\"0X02 打开Mariadb服务并配置防火墙\"></a>0X02 打开Mariadb服务并配置防火墙</h1><p>启动Mariadb服务。在CentOS7.x中推荐使用systemctl来配置服务的启动方式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start mariadb.service</div></pre></td></tr></table></figure></p>\n<p>配置防火墙，允许从MariaDB使用的3306端口监听，由于历史遗留问题，这里还是称之为MySql。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># firewall-cmd --add-service=mysql</span></div><div class=\"line\">success</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># firewall-cmd --list-services</span></div><div class=\"line\">dhcpv6-client mysql ssh</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-配置MariaDB的安全性\"><a href=\"#0X03-配置MariaDB的安全性\" class=\"headerlink\" title=\"0X03 配置MariaDB的安全性\"></a>0X03 配置MariaDB的安全性</h1><p>MariaDB提供了一个脚本来为新安装的MariaDB提升安全性。但是在使用这个脚本之前必须要先打开MariaDB服务。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># systemctl start mariadb</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># systemctl enable mariadb</span></div><div class=\"line\">ln -s <span class=\"string\">'/usr/lib/systemd/system/mariadb.service'</span> <span class=\"string\">'/etc/systemd/system/multi-user.target.wants/mariadb.service'</span></div></pre></td></tr></table></figure></p>\n<p>然后运行这个脚本，这个脚本会有几次提示：</p>\n<ol>\n<li>询问当前密码，如果没设置密码就直接回车</li>\n<li>设置root用户的密码</li>\n<li>删除匿名用户(anonymous-user)</li>\n<li>删除可以从外部登陆的root用户</li>\n<li>删除test测试数据库</li>\n<li>重载数据库</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># mysql_secure_installation </span></div><div class=\"line\">/usr/bin/mysql_secure_installation: line 379: find_mysql_client: <span class=\"built_in\">command</span> not found</div><div class=\"line\"></div><div class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</div><div class=\"line\">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</div><div class=\"line\"></div><div class=\"line\">In order to <span class=\"built_in\">log</span> into MariaDB to secure it, we<span class=\"string\">'ll need the current</span></div><div class=\"line\"><span class=\"string\">password for the root user.  If you'</span>ve just installed MariaDB, and</div><div class=\"line\">you haven<span class=\"string\">'t set the root password yet, the password will be blank,</span></div><div class=\"line\"><span class=\"string\">so you should just press enter here.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Enter current password for root (enter for none): </span></div><div class=\"line\"><span class=\"string\">OK, successfully used password, moving on...</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Setting the root password ensures that nobody can log into the MariaDB</span></div><div class=\"line\"><span class=\"string\">root user without the proper authorisation.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Set root password? [Y/n] y</span></div><div class=\"line\"><span class=\"string\">New password: </span></div><div class=\"line\"><span class=\"string\">Re-enter new password: </span></div><div class=\"line\"><span class=\"string\">Password updated successfully!</span></div><div class=\"line\"><span class=\"string\">Reloading privilege tables..</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">By default, a MariaDB installation has an anonymous user, allowing anyone</span></div><div class=\"line\"><span class=\"string\">to log into MariaDB without having to have a user account created for</span></div><div class=\"line\"><span class=\"string\">them.  This is intended only for testing, and to make the installation</span></div><div class=\"line\"><span class=\"string\">go a bit smoother.  You should remove them before moving into a</span></div><div class=\"line\"><span class=\"string\">production environment.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Remove anonymous users? [Y/n] y</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Normally, root should only be allowed to connect from '</span>localhost<span class=\"string\">'.  This</span></div><div class=\"line\"><span class=\"string\">ensures that someone cannot guess at the root password from the network.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Disallow root login remotely? [Y/n] y</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">By default, MariaDB comes with a database named '</span><span class=\"built_in\">test</span><span class=\"string\">' that anyone can</span></div><div class=\"line\"><span class=\"string\">access.  This is also intended only for testing, and should be removed</span></div><div class=\"line\"><span class=\"string\">before moving into a production environment.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Remove test database and access to it? [Y/n] y</span></div><div class=\"line\"><span class=\"string\"> - Dropping test database...</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"> - Removing privileges on test database...</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Reloading the privilege tables will ensure that all changes made so far</span></div><div class=\"line\"><span class=\"string\">will take effect immediately.</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">Reload privilege tables now? [Y/n] y</span></div><div class=\"line\"><span class=\"string\"> ... Success!</span></div></pre></td></tr></table></figure>\n<h1 id=\"0X04-登陆到MariaDB\"><a href=\"#0X04-登陆到MariaDB\" class=\"headerlink\" title=\"0X04 登陆到MariaDB\"></a>0X04 登陆到MariaDB</h1><p>配置好密码和接入点之后就可以登录到MariaDB了。使用mysql命令来登陆MariaDB。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># mysql -h localhost -u root -p</span></div><div class=\"line\">Enter password: </div><div class=\"line\">Welcome to the MariaDB monitor.  Commands end with ; or \\g.</div><div class=\"line\">Your MariaDB connection id is 12</div><div class=\"line\">Server version: 5.5.50-MariaDB MariaDB Server</div><div class=\"line\"></div><div class=\"line\">Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.</div><div class=\"line\"></div><div class=\"line\">Type <span class=\"string\">'help;'</span> or <span class=\"string\">'\\h'</span> <span class=\"keyword\">for</span> <span class=\"built_in\">help</span>. Type <span class=\"string\">'\\c'</span> to clear the current input statement.</div><div class=\"line\"></div><div class=\"line\">MariaDB [(none)]&gt;</div></pre></td></tr></table></figure></p>\n<p>参数：-h 指定主机， -u 指定用户，　-p 指定密码<br>这三个参数都可以省略，当我们省略主机名的时候就默认登录到本地，当省略用户名的时候默认使用root，当省略密码的时候默认没有密码登陆</p>\n<h1 id=\"0X05-用户管理\"><a href=\"#0X05-用户管理\" class=\"headerlink\" title=\"0X05 用户管理\"></a>0X05 用户管理</h1><p>在MariaDB中有用户的概念和权限的概念。用户名+密码+登陆地点，三个选项唯一确定一个用户，就比如同一个用户名<code>shawn</code>在10.13.1.2和在10.13.1.3的登陆密码可以是不同的，这在MariaDB里会分成两条来存储。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建一个名为shawn的，从localhost登陆的，密码为test的用户</div><div class=\"line\">MariaDB [(none)]&gt; CREATE USER 'shawn'@'localhost' IDENTIFIED BY 'test';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">创建一个名为shawn_test的，任意地点，密码为6666的用户</div><div class=\"line\">MariaDB [(none)]&gt; CREATE USER 'shawn_test'@'%' IDENTIFIED BY '6666';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>而且在MariaDB中用户和权限是分开的，如果只添加一个用户的话，这个用户是没有任何权限的。</p>\n<p>删除用户的话是使用<code>DROP</code>命令<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; DROP USER heiheihei@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-权限管理\"><a href=\"#0X06-权限管理\" class=\"headerlink\" title=\"0X06 权限管理\"></a>0X06 权限管理</h1><p>登录到MariaDB之后可以给用户添加具体的权限，使用<code>GRANT</code>命令。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">允许从localhost登陆的shawn对mysql数据库的user表执行查询</div><div class=\"line\">MariaDB [(none)]&gt; GRANT SELECT ON mysql.user to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从localhost登陆的shawn对mysql数据库的user表执行查询和插入</div><div class=\"line\">MariaDB [(none)]&gt; GRANT SELECT, INSERT ON mysql.user to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从localhost登陆的shawn对mysql数据库的user表执行增删查改四种操作</div><div class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON mysql.user to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从localhost登陆的shawn对mysql数据库的所有表执行增删查改四种操作</div><div class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON mysql.* to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从localhost登陆的shawn对所有库的所有表执行增删查改四种操作</div><div class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON *.* to shawn@'localhost';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div><div class=\"line\"></div><div class=\"line\">允许从任意地点登陆的shawn对所有库的所有表执行增删查改四种操作</div><div class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON *.* to shawn@'%';</div><div class=\"line\">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></p>\n<p>使用<code>REVOKE</code>可以删除给定的权限，使用方法和<code>GRANT</code>是一样的，只是开头不同而已<br>使用<code>FLUSH PRIVILEGES;</code>可以刷新权限信息<br>使用<code>SHOW GRANT FOR root@localhost</code>可以查看某用户的权限信息</p>\n<h1 id=\"0X07-数据库备份\"><a href=\"#0X07-数据库备份\" class=\"headerlink\" title=\"0X07 数据库备份\"></a>0X07 数据库备份</h1><p>MariaDB有逻辑备份和物理备份两种备份方案，逻辑备份就是可以把表结构数据等导出成sql文件，而物理备份就是直接备份文件。<br>逻辑备份比较慢，因为要将备份的数据全部都查询一遍，但是可以不下线备份；物理备份比较快，但是需要下线备份。这里说的是逻辑备份.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># mysqldump -u root -h localhost -p --all-databases &gt; backup.sql</span></div><div class=\"line\">Enter password:</div></pre></td></tr></table></figure></p>\n<p>这里我使用了一个<code>--all-databases</code>的参数，是备份所有数据库，可选的参数有下面这几个</p>\n<ol>\n<li><code>--all-databases</code>备份所有数据库</li>\n<li><code>--add-drop-tables</code>生成的sql中包含drop tables语句，删除以前的table</li>\n<li><code>--no-data</code>只生成库和表结构，没有数据</li>\n<li><code>--lock-all-tables</code>在备份结束之前，锁定所有表，保证数据完整性</li>\n<li><code>--add-drop-databases</code>生成的sql中包含drop database语句，删除以前的database</li>\n</ol>\n<h1 id=\"0X08-数据库还原\"><a href=\"#0X08-数据库还原\" class=\"headerlink\" title=\"0X08 数据库还原\"></a>0X08 数据库还原</h1><p>当我们有了一个备份出来的sql文件之后，可以将这个sql直接导入到数据库。这了的用法和之前登录到MariaDB的方法是一样的，只是将sql文件重定向过去就可以了<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]# mysql -u root -h localhost -p &lt; backup.sql</div><div class=\"line\">Enter password:</div></pre></td></tr></table></figure></p>\n"},{"title":"Linux交换分区 swap 虚拟内存 理解虚拟内存","date":"2016-05-28T04:00:00.000Z","_content":"\nSWAP分区是Linux的交换分区。交换分区实际存在于磁盘中，不过Linux系统可以将它当作内存使用，当物理真实内存不足的时候交换分区就可以和真实内存进行数据交换。简单地说就是从磁盘里拿出一块空间当作内存的储备区。虽说磁盘被拿来当作内存使用，但是速度还是磁盘的速度。可以想象下面一种日常生活的场景：\n\n> 当你工作的时候一定是把桌洞里的东西拿出来放到桌面上，并且手里拿着一部分东西在操作，然后桌面和桌洞里的东西在不断的交换你手里的东西和桌面上的东西也一直在交换。\n> 可以这么想：你从桌洞里拿出来了一本《5年高考3年模拟——理综》放到桌面上，然后拿起笔开始刷题。后来你又从桌洞里拿出来了一本《5年高考3年模拟——数学》放到桌面上，准备两本一起写（就是这么屌），写一题理综写一题数学。再后来你又想同时写语文，但是你发现你的桌面上已经没有了那么大的空间，就只能把语文放到桌洞里，每次拿出来语文就要把数学或是理综放到桌洞中。\n> 计算机实际上是这样。从磁盘中打开了一个程序（一本书），操作系统就（另一个人）把这个程序运行起来放到内存中（放到桌面上），CPU将（部分）程序加载到寄存器中（拿起笔开始做题）。然后又运行了一个程序，CPU就在这两个程序之间切换（做完一题数学就换一题理综）。再运行一个程序，发现内存不足（桌面不够用了）就将内存和磁盘中的交换分区开始交换（把语文放到桌洞里，每次拿出来语文就要把数学或是理综放到桌洞中）\n\n# 0X00 创建一个分区 || 创建一块文件\n 要想创建swap分区可以有两种分配空间的方式，一种是直接从磁盘中分出来一块用来当做swap分区，然后格式化为swap格式\n```bash\n# 对磁盘sdb进行分区\nfdisk /dev/sdb\n```\n在提示符下输入n 然后会提示p 或 e的选项，P就是主分区，只能创建4个， e就是逻辑分区，不限个数。\n我们创建一个逻辑分区就行。然后会提示新分区的起始扇区，使用默认的就好，直接回车\n接下来是终止扇区，这里支持直接输入扇区号和输入大小两种方式，我们普遍直接输入分区大小\n输入 +512M 按下回车，就是创建一个512M的分区。现在fdisk又回到了开始的提示符，如果之前的操作有错误可以直接输入q退出，如果没有问题就可以输入w保存并退出。\n根据你的命令，就创建了一个名为sdb*的文件，这个文件就是分区文件。\n\n 另一种方式就是创建一个文件，然后将这块文件格式化为swap格式\n```bash\n# 创建一个512M的数据类型文件\ndd if=/dev/zero of=swapfile bs=1024 count=523288\n# if -> input_file输入文件   of -> output_file输出文件   bs -> block_size块大小   count -> 计数\n```\n解释一下特殊文件/dev/zero\n> /dev/zero 这个文件放在Linux存放设备的目录下，如果以他为输出源，输出的全部都是二进制0\n> cat /dev/zero > test  这个命令会生成一个test文件并不断的向该文件中输入二进制0\n\n# 0X01 格式化&&激活&&挂载swap分区\n\n```bash\n# 格式化刚才的文件\n# 根据创建的方式选择命令\nmkswap /dev/sdb*\nmkswap swapfile\n\n# 激活swap分区 相等于挂载\n# 根据创建的方式选择命令\nswapon /dev/sdb*\nswapon swapfile\n```\n\n# 0X02 设置自动挂载\n大家都是懒人，谁想每次开机都手动挂载一次分区呢？所以我们可以一劳永逸，将挂载设为自动\n```bash\n# 打开配置文件\nvim /etc/fstab\n\n# 添加这样一行\n# 根据创建的方式选择命令\n/dev/sdb*          swap     swap     defaults     0     0\n/home/swapfile     swap     swap     defaults     0     0\n```\n下面解释这个配置文件的每一列\n1. 第一列是数据块文件的位置\n2. 第二列是挂载点\n3. 第三列是分区类型\n4. 第四列是挂载参数   通常默认\n5. 第五列是备份选项   0代表不备份 1代表备份  通常为0\n6. 第六列是自检顺序   0代表不自检 1和2代表自检  如果是根分区要设为1，其他分区只能是2   通常为0\n","source":"_posts/linux_swap_virtualmemery.md","raw":"---\ntitle: Linux交换分区 swap 虚拟内存 理解虚拟内存\ndate: 2016-05-28 12:00\ntags:\n  - Linux\n  - swap\n  - 交换分区\n  - 虚拟内存\n  - 操作系统\n---\n\nSWAP分区是Linux的交换分区。交换分区实际存在于磁盘中，不过Linux系统可以将它当作内存使用，当物理真实内存不足的时候交换分区就可以和真实内存进行数据交换。简单地说就是从磁盘里拿出一块空间当作内存的储备区。虽说磁盘被拿来当作内存使用，但是速度还是磁盘的速度。可以想象下面一种日常生活的场景：\n\n> 当你工作的时候一定是把桌洞里的东西拿出来放到桌面上，并且手里拿着一部分东西在操作，然后桌面和桌洞里的东西在不断的交换你手里的东西和桌面上的东西也一直在交换。\n> 可以这么想：你从桌洞里拿出来了一本《5年高考3年模拟——理综》放到桌面上，然后拿起笔开始刷题。后来你又从桌洞里拿出来了一本《5年高考3年模拟——数学》放到桌面上，准备两本一起写（就是这么屌），写一题理综写一题数学。再后来你又想同时写语文，但是你发现你的桌面上已经没有了那么大的空间，就只能把语文放到桌洞里，每次拿出来语文就要把数学或是理综放到桌洞中。\n> 计算机实际上是这样。从磁盘中打开了一个程序（一本书），操作系统就（另一个人）把这个程序运行起来放到内存中（放到桌面上），CPU将（部分）程序加载到寄存器中（拿起笔开始做题）。然后又运行了一个程序，CPU就在这两个程序之间切换（做完一题数学就换一题理综）。再运行一个程序，发现内存不足（桌面不够用了）就将内存和磁盘中的交换分区开始交换（把语文放到桌洞里，每次拿出来语文就要把数学或是理综放到桌洞中）\n\n# 0X00 创建一个分区 || 创建一块文件\n 要想创建swap分区可以有两种分配空间的方式，一种是直接从磁盘中分出来一块用来当做swap分区，然后格式化为swap格式\n```bash\n# 对磁盘sdb进行分区\nfdisk /dev/sdb\n```\n在提示符下输入n 然后会提示p 或 e的选项，P就是主分区，只能创建4个， e就是逻辑分区，不限个数。\n我们创建一个逻辑分区就行。然后会提示新分区的起始扇区，使用默认的就好，直接回车\n接下来是终止扇区，这里支持直接输入扇区号和输入大小两种方式，我们普遍直接输入分区大小\n输入 +512M 按下回车，就是创建一个512M的分区。现在fdisk又回到了开始的提示符，如果之前的操作有错误可以直接输入q退出，如果没有问题就可以输入w保存并退出。\n根据你的命令，就创建了一个名为sdb*的文件，这个文件就是分区文件。\n\n 另一种方式就是创建一个文件，然后将这块文件格式化为swap格式\n```bash\n# 创建一个512M的数据类型文件\ndd if=/dev/zero of=swapfile bs=1024 count=523288\n# if -> input_file输入文件   of -> output_file输出文件   bs -> block_size块大小   count -> 计数\n```\n解释一下特殊文件/dev/zero\n> /dev/zero 这个文件放在Linux存放设备的目录下，如果以他为输出源，输出的全部都是二进制0\n> cat /dev/zero > test  这个命令会生成一个test文件并不断的向该文件中输入二进制0\n\n# 0X01 格式化&&激活&&挂载swap分区\n\n```bash\n# 格式化刚才的文件\n# 根据创建的方式选择命令\nmkswap /dev/sdb*\nmkswap swapfile\n\n# 激活swap分区 相等于挂载\n# 根据创建的方式选择命令\nswapon /dev/sdb*\nswapon swapfile\n```\n\n# 0X02 设置自动挂载\n大家都是懒人，谁想每次开机都手动挂载一次分区呢？所以我们可以一劳永逸，将挂载设为自动\n```bash\n# 打开配置文件\nvim /etc/fstab\n\n# 添加这样一行\n# 根据创建的方式选择命令\n/dev/sdb*          swap     swap     defaults     0     0\n/home/swapfile     swap     swap     defaults     0     0\n```\n下面解释这个配置文件的每一列\n1. 第一列是数据块文件的位置\n2. 第二列是挂载点\n3. 第三列是分区类型\n4. 第四列是挂载参数   通常默认\n5. 第五列是备份选项   0代表不备份 1代表备份  通常为0\n6. 第六列是自检顺序   0代表不自检 1和2代表自检  如果是根分区要设为1，其他分区只能是2   通常为0\n","slug":"linux_swap_virtualmemery","published":1,"updated":"2017-09-02T14:45:53.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme50012hnlpfkcxfs2x","content":"<p>SWAP分区是Linux的交换分区。交换分区实际存在于磁盘中，不过Linux系统可以将它当作内存使用，当物理真实内存不足的时候交换分区就可以和真实内存进行数据交换。简单地说就是从磁盘里拿出一块空间当作内存的储备区。虽说磁盘被拿来当作内存使用，但是速度还是磁盘的速度。可以想象下面一种日常生活的场景：</p>\n<blockquote>\n<p>当你工作的时候一定是把桌洞里的东西拿出来放到桌面上，并且手里拿着一部分东西在操作，然后桌面和桌洞里的东西在不断的交换你手里的东西和桌面上的东西也一直在交换。<br>可以这么想：你从桌洞里拿出来了一本《5年高考3年模拟——理综》放到桌面上，然后拿起笔开始刷题。后来你又从桌洞里拿出来了一本《5年高考3年模拟——数学》放到桌面上，准备两本一起写（就是这么屌），写一题理综写一题数学。再后来你又想同时写语文，但是你发现你的桌面上已经没有了那么大的空间，就只能把语文放到桌洞里，每次拿出来语文就要把数学或是理综放到桌洞中。<br>计算机实际上是这样。从磁盘中打开了一个程序（一本书），操作系统就（另一个人）把这个程序运行起来放到内存中（放到桌面上），CPU将（部分）程序加载到寄存器中（拿起笔开始做题）。然后又运行了一个程序，CPU就在这两个程序之间切换（做完一题数学就换一题理综）。再运行一个程序，发现内存不足（桌面不够用了）就将内存和磁盘中的交换分区开始交换（把语文放到桌洞里，每次拿出来语文就要把数学或是理综放到桌洞中）</p>\n</blockquote>\n<h1 id=\"0X00-创建一个分区-创建一块文件\"><a href=\"#0X00-创建一个分区-创建一块文件\" class=\"headerlink\" title=\"0X00 创建一个分区 || 创建一块文件\"></a>0X00 创建一个分区 || 创建一块文件</h1><p> 要想创建swap分区可以有两种分配空间的方式，一种是直接从磁盘中分出来一块用来当做swap分区，然后格式化为swap格式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 对磁盘sdb进行分区</span></div><div class=\"line\">fdisk /dev/sdb</div></pre></td></tr></table></figure></p>\n<p>在提示符下输入n 然后会提示p 或 e的选项，P就是主分区，只能创建4个， e就是逻辑分区，不限个数。<br>我们创建一个逻辑分区就行。然后会提示新分区的起始扇区，使用默认的就好，直接回车<br>接下来是终止扇区，这里支持直接输入扇区号和输入大小两种方式，我们普遍直接输入分区大小<br>输入 +512M 按下回车，就是创建一个512M的分区。现在fdisk又回到了开始的提示符，如果之前的操作有错误可以直接输入q退出，如果没有问题就可以输入w保存并退出。<br>根据你的命令，就创建了一个名为sdb*的文件，这个文件就是分区文件。</p>\n<p> 另一种方式就是创建一个文件，然后将这块文件格式化为swap格式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建一个512M的数据类型文件</span></div><div class=\"line\">dd <span class=\"keyword\">if</span>=/dev/zero of=swapfile bs=1024 count=523288</div><div class=\"line\"><span class=\"comment\"># if -&gt; input_file输入文件   of -&gt; output_file输出文件   bs -&gt; block_size块大小   count -&gt; 计数</span></div></pre></td></tr></table></figure></p>\n<p>解释一下特殊文件/dev/zero</p>\n<blockquote>\n<p>/dev/zero 这个文件放在Linux存放设备的目录下，如果以他为输出源，输出的全部都是二进制0<br>cat /dev/zero &gt; test  这个命令会生成一个test文件并不断的向该文件中输入二进制0</p>\n</blockquote>\n<h1 id=\"0X01-格式化-amp-amp-激活-amp-amp-挂载swap分区\"><a href=\"#0X01-格式化-amp-amp-激活-amp-amp-挂载swap分区\" class=\"headerlink\" title=\"0X01 格式化&amp;&amp;激活&amp;&amp;挂载swap分区\"></a>0X01 格式化&amp;&amp;激活&amp;&amp;挂载swap分区</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 格式化刚才的文件</span></div><div class=\"line\"><span class=\"comment\"># 根据创建的方式选择命令</span></div><div class=\"line\">mkswap /dev/sdb*</div><div class=\"line\">mkswap swapfile</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 激活swap分区 相等于挂载</span></div><div class=\"line\"><span class=\"comment\"># 根据创建的方式选择命令</span></div><div class=\"line\">swapon /dev/sdb*</div><div class=\"line\">swapon swapfile</div></pre></td></tr></table></figure>\n<h1 id=\"0X02-设置自动挂载\"><a href=\"#0X02-设置自动挂载\" class=\"headerlink\" title=\"0X02 设置自动挂载\"></a>0X02 设置自动挂载</h1><p>大家都是懒人，谁想每次开机都手动挂载一次分区呢？所以我们可以一劳永逸，将挂载设为自动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打开配置文件</span></div><div class=\"line\">vim /etc/fstab</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 添加这样一行</span></div><div class=\"line\"><span class=\"comment\"># 根据创建的方式选择命令</span></div><div class=\"line\">/dev/sdb*          swap     swap     defaults     0     0</div><div class=\"line\">/home/swapfile     swap     swap     defaults     0     0</div></pre></td></tr></table></figure></p>\n<p>下面解释这个配置文件的每一列</p>\n<ol>\n<li>第一列是数据块文件的位置</li>\n<li>第二列是挂载点</li>\n<li>第三列是分区类型</li>\n<li>第四列是挂载参数   通常默认</li>\n<li>第五列是备份选项   0代表不备份 1代表备份  通常为0</li>\n<li>第六列是自检顺序   0代表不自检 1和2代表自检  如果是根分区要设为1，其他分区只能是2   通常为0</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>SWAP分区是Linux的交换分区。交换分区实际存在于磁盘中，不过Linux系统可以将它当作内存使用，当物理真实内存不足的时候交换分区就可以和真实内存进行数据交换。简单地说就是从磁盘里拿出一块空间当作内存的储备区。虽说磁盘被拿来当作内存使用，但是速度还是磁盘的速度。可以想象下面一种日常生活的场景：</p>\n<blockquote>\n<p>当你工作的时候一定是把桌洞里的东西拿出来放到桌面上，并且手里拿着一部分东西在操作，然后桌面和桌洞里的东西在不断的交换你手里的东西和桌面上的东西也一直在交换。<br>可以这么想：你从桌洞里拿出来了一本《5年高考3年模拟——理综》放到桌面上，然后拿起笔开始刷题。后来你又从桌洞里拿出来了一本《5年高考3年模拟——数学》放到桌面上，准备两本一起写（就是这么屌），写一题理综写一题数学。再后来你又想同时写语文，但是你发现你的桌面上已经没有了那么大的空间，就只能把语文放到桌洞里，每次拿出来语文就要把数学或是理综放到桌洞中。<br>计算机实际上是这样。从磁盘中打开了一个程序（一本书），操作系统就（另一个人）把这个程序运行起来放到内存中（放到桌面上），CPU将（部分）程序加载到寄存器中（拿起笔开始做题）。然后又运行了一个程序，CPU就在这两个程序之间切换（做完一题数学就换一题理综）。再运行一个程序，发现内存不足（桌面不够用了）就将内存和磁盘中的交换分区开始交换（把语文放到桌洞里，每次拿出来语文就要把数学或是理综放到桌洞中）</p>\n</blockquote>\n<h1 id=\"0X00-创建一个分区-创建一块文件\"><a href=\"#0X00-创建一个分区-创建一块文件\" class=\"headerlink\" title=\"0X00 创建一个分区 || 创建一块文件\"></a>0X00 创建一个分区 || 创建一块文件</h1><p> 要想创建swap分区可以有两种分配空间的方式，一种是直接从磁盘中分出来一块用来当做swap分区，然后格式化为swap格式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 对磁盘sdb进行分区</span></div><div class=\"line\">fdisk /dev/sdb</div></pre></td></tr></table></figure></p>\n<p>在提示符下输入n 然后会提示p 或 e的选项，P就是主分区，只能创建4个， e就是逻辑分区，不限个数。<br>我们创建一个逻辑分区就行。然后会提示新分区的起始扇区，使用默认的就好，直接回车<br>接下来是终止扇区，这里支持直接输入扇区号和输入大小两种方式，我们普遍直接输入分区大小<br>输入 +512M 按下回车，就是创建一个512M的分区。现在fdisk又回到了开始的提示符，如果之前的操作有错误可以直接输入q退出，如果没有问题就可以输入w保存并退出。<br>根据你的命令，就创建了一个名为sdb*的文件，这个文件就是分区文件。</p>\n<p> 另一种方式就是创建一个文件，然后将这块文件格式化为swap格式<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建一个512M的数据类型文件</span></div><div class=\"line\">dd <span class=\"keyword\">if</span>=/dev/zero of=swapfile bs=1024 count=523288</div><div class=\"line\"><span class=\"comment\"># if -&gt; input_file输入文件   of -&gt; output_file输出文件   bs -&gt; block_size块大小   count -&gt; 计数</span></div></pre></td></tr></table></figure></p>\n<p>解释一下特殊文件/dev/zero</p>\n<blockquote>\n<p>/dev/zero 这个文件放在Linux存放设备的目录下，如果以他为输出源，输出的全部都是二进制0<br>cat /dev/zero &gt; test  这个命令会生成一个test文件并不断的向该文件中输入二进制0</p>\n</blockquote>\n<h1 id=\"0X01-格式化-amp-amp-激活-amp-amp-挂载swap分区\"><a href=\"#0X01-格式化-amp-amp-激活-amp-amp-挂载swap分区\" class=\"headerlink\" title=\"0X01 格式化&amp;&amp;激活&amp;&amp;挂载swap分区\"></a>0X01 格式化&amp;&amp;激活&amp;&amp;挂载swap分区</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 格式化刚才的文件</span></div><div class=\"line\"><span class=\"comment\"># 根据创建的方式选择命令</span></div><div class=\"line\">mkswap /dev/sdb*</div><div class=\"line\">mkswap swapfile</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 激活swap分区 相等于挂载</span></div><div class=\"line\"><span class=\"comment\"># 根据创建的方式选择命令</span></div><div class=\"line\">swapon /dev/sdb*</div><div class=\"line\">swapon swapfile</div></pre></td></tr></table></figure>\n<h1 id=\"0X02-设置自动挂载\"><a href=\"#0X02-设置自动挂载\" class=\"headerlink\" title=\"0X02 设置自动挂载\"></a>0X02 设置自动挂载</h1><p>大家都是懒人，谁想每次开机都手动挂载一次分区呢？所以我们可以一劳永逸，将挂载设为自动<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打开配置文件</span></div><div class=\"line\">vim /etc/fstab</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 添加这样一行</span></div><div class=\"line\"><span class=\"comment\"># 根据创建的方式选择命令</span></div><div class=\"line\">/dev/sdb*          swap     swap     defaults     0     0</div><div class=\"line\">/home/swapfile     swap     swap     defaults     0     0</div></pre></td></tr></table></figure></p>\n<p>下面解释这个配置文件的每一列</p>\n<ol>\n<li>第一列是数据块文件的位置</li>\n<li>第二列是挂载点</li>\n<li>第三列是分区类型</li>\n<li>第四列是挂载参数   通常默认</li>\n<li>第五列是备份选项   0代表不备份 1代表备份  通常为0</li>\n<li>第六列是自检顺序   0代表不自检 1和2代表自检  如果是根分区要设为1，其他分区只能是2   通常为0</li>\n</ol>\n"},{"title":"Mariadb/MySQL 增删查改 数据库操作 建表 建数据库","date":"2016-03-15T09:30:00.000Z","_content":"\n\n首先需要安装好MySQL/Mariadb的服务端和客户端，并且能连接到服务端\n>命令中的大写字母是SQL的关键字，小写字母是自己的相关属性和数据\n\n# 0X00 连接到数据库\n```\n使用mysql连接到127.0.0.1并用root用户登陆，密码等待输入\nmysql -h 127.0.0.1 -u root -p\n```\n\n# 0X01 创建数据库\n```sql\n创建一个名为school的数据库\nCREATE DATABASE school;\n```\n\n# 0X02 建立一个表\n建立一个名为student的表\n索引：\n10个字符长度的name   不能为空\n11个字符长度的number 不能为空\nint类型的age        不能为空\n```sql\nuse school;\n使用school这个数据库\n\nCREATE TABLE student(\nname VARCHAR(10) NOT NULL,\nnumber VARCHAR(11) NOT NULL,\nage INT NOT NULL,\nPRIMARY KEY (number)\n);\n```\n\n# 0X03 查询数据库和表\n```sql\nSHOW DATABASES;\n查看所有数据库\n\nSHOW BALES;\n查看正在使用的数据库中的表\n```\n\n# 0X04 插入数据\n```sql\nINSERT INTO student VALUES('lilei','666',15);\n插入新的数据，按照顺序写\n\nINSERT INTO student (name)VALUES('hanmeimei');\n自定义顺序写入\n```\n\n# 0X05 查询数据\n```sql\nSELECT name FROM student;\n查询student表中的所有name\n\nSELECT name FROM student WHERE number=0002;\n查询student表中number为0002的name\n\nSELECT name FROM student WHERE age BETWEEN 20 and 30;\n查询student表中age在20到30之间的name\n```\n\n# 0X06 更新数据\n```sql\nUPDATE student SET name='xiaohei' WHERE number='0002';\n把所有number为0002的name更新为xiaohei\n```\n\n# 0X07 删除数据\n```sql\nDELETE FROM student WHERE number='0002'\n删除所有number为0002的数据\n```\n","source":"_posts/mysql_crud.md","raw":"---\ntitle: Mariadb/MySQL 增删查改 数据库操作 建表 建数据库\ndate: 2016-03-15 17:30\ntags:\n  - MySQL\n  - MariaDB\n  - 数据库\n---\n\n\n首先需要安装好MySQL/Mariadb的服务端和客户端，并且能连接到服务端\n>命令中的大写字母是SQL的关键字，小写字母是自己的相关属性和数据\n\n# 0X00 连接到数据库\n```\n使用mysql连接到127.0.0.1并用root用户登陆，密码等待输入\nmysql -h 127.0.0.1 -u root -p\n```\n\n# 0X01 创建数据库\n```sql\n创建一个名为school的数据库\nCREATE DATABASE school;\n```\n\n# 0X02 建立一个表\n建立一个名为student的表\n索引：\n10个字符长度的name   不能为空\n11个字符长度的number 不能为空\nint类型的age        不能为空\n```sql\nuse school;\n使用school这个数据库\n\nCREATE TABLE student(\nname VARCHAR(10) NOT NULL,\nnumber VARCHAR(11) NOT NULL,\nage INT NOT NULL,\nPRIMARY KEY (number)\n);\n```\n\n# 0X03 查询数据库和表\n```sql\nSHOW DATABASES;\n查看所有数据库\n\nSHOW BALES;\n查看正在使用的数据库中的表\n```\n\n# 0X04 插入数据\n```sql\nINSERT INTO student VALUES('lilei','666',15);\n插入新的数据，按照顺序写\n\nINSERT INTO student (name)VALUES('hanmeimei');\n自定义顺序写入\n```\n\n# 0X05 查询数据\n```sql\nSELECT name FROM student;\n查询student表中的所有name\n\nSELECT name FROM student WHERE number=0002;\n查询student表中number为0002的name\n\nSELECT name FROM student WHERE age BETWEEN 20 and 30;\n查询student表中age在20到30之间的name\n```\n\n# 0X06 更新数据\n```sql\nUPDATE student SET name='xiaohei' WHERE number='0002';\n把所有number为0002的name更新为xiaohei\n```\n\n# 0X07 删除数据\n```sql\nDELETE FROM student WHERE number='0002'\n删除所有number为0002的数据\n```\n","slug":"mysql_crud","published":1,"updated":"2017-09-02T14:46:11.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme50014hnlpk9i8d6ez","content":"<p>首先需要安装好MySQL/Mariadb的服务端和客户端，并且能连接到服务端</p>\n<blockquote>\n<p>命令中的大写字母是SQL的关键字，小写字母是自己的相关属性和数据</p>\n</blockquote>\n<h1 id=\"0X00-连接到数据库\"><a href=\"#0X00-连接到数据库\" class=\"headerlink\" title=\"0X00 连接到数据库\"></a>0X00 连接到数据库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用mysql连接到127.0.0.1并用root用户登陆，密码等待输入</div><div class=\"line\">mysql -h 127.0.0.1 -u root -p</div></pre></td></tr></table></figure>\n<h1 id=\"0X01-创建数据库\"><a href=\"#0X01-创建数据库\" class=\"headerlink\" title=\"0X01 创建数据库\"></a>0X01 创建数据库</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建一个名为school的数据库</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> school;</div></pre></td></tr></table></figure>\n<h1 id=\"0X02-建立一个表\"><a href=\"#0X02-建立一个表\" class=\"headerlink\" title=\"0X02 建立一个表\"></a>0X02 建立一个表</h1><p>建立一个名为student的表<br>索引：<br>10个字符长度的name   不能为空<br>11个字符长度的number 不能为空<br>int类型的age        不能为空<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> school;</div><div class=\"line\">使用school这个数据库</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student(</div><div class=\"line\"><span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\"><span class=\"built_in\">number</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">age <span class=\"built_in\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-查询数据库和表\"><a href=\"#0X03-查询数据库和表\" class=\"headerlink\" title=\"0X03 查询数据库和表\"></a>0X03 查询数据库和表</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">DATABASES</span>;</div><div class=\"line\">查看所有数据库</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SHOW</span> BALES;</div><div class=\"line\">查看正在使用的数据库中的表</div></pre></td></tr></table></figure>\n<h1 id=\"0X04-插入数据\"><a href=\"#0X04-插入数据\" class=\"headerlink\" title=\"0X04 插入数据\"></a>0X04 插入数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student <span class=\"keyword\">VALUES</span>(<span class=\"string\">'lilei'</span>,<span class=\"string\">'666'</span>,<span class=\"number\">15</span>);</div><div class=\"line\">插入新的数据，按照顺序写</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student (<span class=\"keyword\">name</span>)<span class=\"keyword\">VALUES</span>(<span class=\"string\">'hanmeimei'</span>);</div><div class=\"line\">自定义顺序写入</div></pre></td></tr></table></figure>\n<h1 id=\"0X05-查询数据\"><a href=\"#0X05-查询数据\" class=\"headerlink\" title=\"0X05 查询数据\"></a>0X05 查询数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> student;</div><div class=\"line\">查询student表中的所有name</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> <span class=\"built_in\">number</span>=<span class=\"number\">0002</span>;</div><div class=\"line\">查询student表中number为0002的name</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> age <span class=\"keyword\">BETWEEN</span> <span class=\"number\">20</span> <span class=\"keyword\">and</span> <span class=\"number\">30</span>;</div><div class=\"line\">查询student表中age在20到30之间的name</div></pre></td></tr></table></figure>\n<h1 id=\"0X06-更新数据\"><a href=\"#0X06-更新数据\" class=\"headerlink\" title=\"0X06 更新数据\"></a>0X06 更新数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">UPDATE</span> student <span class=\"keyword\">SET</span> <span class=\"keyword\">name</span>=<span class=\"string\">'xiaohei'</span> <span class=\"keyword\">WHERE</span> <span class=\"built_in\">number</span>=<span class=\"string\">'0002'</span>;</div><div class=\"line\">把所有number为0002的name更新为xiaohei</div></pre></td></tr></table></figure>\n<h1 id=\"0X07-删除数据\"><a href=\"#0X07-删除数据\" class=\"headerlink\" title=\"0X07 删除数据\"></a>0X07 删除数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> <span class=\"built_in\">number</span>=<span class=\"string\">'0002'</span></div><div class=\"line\">删除所有<span class=\"built_in\">number</span>为<span class=\"number\">0002</span>的数据</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>首先需要安装好MySQL/Mariadb的服务端和客户端，并且能连接到服务端</p>\n<blockquote>\n<p>命令中的大写字母是SQL的关键字，小写字母是自己的相关属性和数据</p>\n</blockquote>\n<h1 id=\"0X00-连接到数据库\"><a href=\"#0X00-连接到数据库\" class=\"headerlink\" title=\"0X00 连接到数据库\"></a>0X00 连接到数据库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用mysql连接到127.0.0.1并用root用户登陆，密码等待输入</div><div class=\"line\">mysql -h 127.0.0.1 -u root -p</div></pre></td></tr></table></figure>\n<h1 id=\"0X01-创建数据库\"><a href=\"#0X01-创建数据库\" class=\"headerlink\" title=\"0X01 创建数据库\"></a>0X01 创建数据库</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">创建一个名为school的数据库</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> school;</div></pre></td></tr></table></figure>\n<h1 id=\"0X02-建立一个表\"><a href=\"#0X02-建立一个表\" class=\"headerlink\" title=\"0X02 建立一个表\"></a>0X02 建立一个表</h1><p>建立一个名为student的表<br>索引：<br>10个字符长度的name   不能为空<br>11个字符长度的number 不能为空<br>int类型的age        不能为空<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> school;</div><div class=\"line\">使用school这个数据库</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student(</div><div class=\"line\"><span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\"><span class=\"built_in\">number</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">age <span class=\"built_in\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</div><div class=\"line\">PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"built_in\">number</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-查询数据库和表\"><a href=\"#0X03-查询数据库和表\" class=\"headerlink\" title=\"0X03 查询数据库和表\"></a>0X03 查询数据库和表</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">DATABASES</span>;</div><div class=\"line\">查看所有数据库</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SHOW</span> BALES;</div><div class=\"line\">查看正在使用的数据库中的表</div></pre></td></tr></table></figure>\n<h1 id=\"0X04-插入数据\"><a href=\"#0X04-插入数据\" class=\"headerlink\" title=\"0X04 插入数据\"></a>0X04 插入数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student <span class=\"keyword\">VALUES</span>(<span class=\"string\">'lilei'</span>,<span class=\"string\">'666'</span>,<span class=\"number\">15</span>);</div><div class=\"line\">插入新的数据，按照顺序写</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> student (<span class=\"keyword\">name</span>)<span class=\"keyword\">VALUES</span>(<span class=\"string\">'hanmeimei'</span>);</div><div class=\"line\">自定义顺序写入</div></pre></td></tr></table></figure>\n<h1 id=\"0X05-查询数据\"><a href=\"#0X05-查询数据\" class=\"headerlink\" title=\"0X05 查询数据\"></a>0X05 查询数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> student;</div><div class=\"line\">查询student表中的所有name</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> <span class=\"built_in\">number</span>=<span class=\"number\">0002</span>;</div><div class=\"line\">查询student表中number为0002的name</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">name</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> age <span class=\"keyword\">BETWEEN</span> <span class=\"number\">20</span> <span class=\"keyword\">and</span> <span class=\"number\">30</span>;</div><div class=\"line\">查询student表中age在20到30之间的name</div></pre></td></tr></table></figure>\n<h1 id=\"0X06-更新数据\"><a href=\"#0X06-更新数据\" class=\"headerlink\" title=\"0X06 更新数据\"></a>0X06 更新数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">UPDATE</span> student <span class=\"keyword\">SET</span> <span class=\"keyword\">name</span>=<span class=\"string\">'xiaohei'</span> <span class=\"keyword\">WHERE</span> <span class=\"built_in\">number</span>=<span class=\"string\">'0002'</span>;</div><div class=\"line\">把所有number为0002的name更新为xiaohei</div></pre></td></tr></table></figure>\n<h1 id=\"0X07-删除数据\"><a href=\"#0X07-删除数据\" class=\"headerlink\" title=\"0X07 删除数据\"></a>0X07 删除数据</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> student <span class=\"keyword\">WHERE</span> <span class=\"built_in\">number</span>=<span class=\"string\">'0002'</span></div><div class=\"line\">删除所有<span class=\"built_in\">number</span>为<span class=\"number\">0002</span>的数据</div></pre></td></tr></table></figure>\n"},{"title":"使用nmcli和ip命令配置CentOS/RHEL的网络","date":"2016-10-28T09:42:00.000Z","_content":"\n# 0X00 查看网络配置文件\n在CentOS中网络是以配置文件的形式存在系统里的，在`/etc/sysconfig/network-scripts/`目录下，一般情况下网卡的配置文件都在这里了，以`ifcfg-`就是配置文件了，打开配置文件看一下。下面注释一下关键的配置项\n```config\nTYPE=Ethernet\t# 网络类型\nBOOTPROTO=static\t# 协议取值，常见的是static和dhcp\nIPADDR=10.13.7.33\t# 给网卡ip赋值\nNETMASK=255.255.255.0\t# 给网卡子网掩码赋值\nDEFROUTE=yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPV6_FAILURE_FATAL=no\nNAME=enp0s8\nUSERCTL=no\t# 是否允许非root用户控制\nUUID=4c967913-c4c9-4961-ae03-de7865f144d0\t# 网卡的唯一标识码\nDEVICE=enp0s8\t# 设备名\nONBOOT=no\t# 是否在开机时激活\n```\n但是一般不建议直接使用编辑器修改网络配置文件，因为这样容易出现一些语法错误和逻辑错误，所以建议使用命令行来管理配置网络，虽然本质上都是去修改配置文件。但是使用命令行去管理网络，命令都是确保配置没有问题才会写入到文件，所以会更加安全。包括下面介绍的`ip`和`nmcli`命令，都是通过修改配置文件来完成功能的。\n\n# 0X01 ifconfig 命令\n这个命令在CentOS7中已经不建议使用了，不过由于之前的版本都是在用这个命令，还是说一下。`ifconfig`是`interface configuration`的缩写，也就是接口配置。\n## 查看网络\n直接输入这个命令就可以看到现在启动着的所有网络。也可以接上某个特定的网卡来查看单独的信息`ifconfig enp0s3`\n```bash\n[root@localhost ~]# ifconfig\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 0  (Local Loopback)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```\n如果想查看包括已经关闭了的网络时，使用`ifconfig -a`就可以了\n> 最后的那个lo是回环网络，暂时不用管\n\n## 开关网络\n`ifconfig`还可以开关网络，命令后面接`interface name`也就是网卡名，然后接上`up/down`就可以开关网络了\n```bash\n[root@localhost ~]# ifconfig enp0s8 down\t# 关闭网络\n[root@localhost ~]# ifconfig\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 0  (Local Loopback)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n[root@localhost ~]# ifconfig enp0s8 up\t# 打开网络\n[root@localhost ~]# ifconfig\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 123.123.123.2  netmask 255.255.255.128  broadcast 123.123.123.1\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 0  (Local Loopback)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n```\n\n## 配置网络\n`ifconfig`命令可以在不重启的情况下开关网络接口，修改IP、掩码、网关等信息。\n```bash\n[root@localhost ~]# ifconfig enp0s8\t# 查看ep0s8的网卡信息\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n[root@localhost ~]# ifconfig enp0s8 123.233.233.123\t# 修改ip为123.233.233.123\n[root@localhost ~]# ifconfig enp0s8\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 123.233.233.123  netmask 255.0.0.0  broadcast 123.255.255.255\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n[root@localhost ~]# ifconfig enp0s8 netmask 255.255.255.0\t# 修改子网掩码为255.255.255.0\n[root@localhost ~]# ifconfig enp0s8\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 123.233.233.123  netmask 255.255.255.0  broadcast 123.233.233.255\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n[root@localhost ~]# ifconfig enp0s8 123.123.123.2 netmask 255.255.255.128\t# 当然也可以把这些写成一行\n[root@localhost ~]# ifconfig enp0s8\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 123.123.123.2  netmask 255.255.255.128  broadcast 123.123.123.\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```\n\n# 0X02 nmtui 简单的类图形管理工具\n在终端中输入`nmtui`就可以打开一个类图形的界面，用这个界面可以更简单得管理配置网络，但是不能做比较细致的配置，而且使用比较简单，所以这里就不多做介绍了，可以自己在终端上打开看看。这个命令的一大优点是可以在ssh远程连接的时候使用，在Windows下的XShell等软件中都可以直接调出。\n\n# 0X03 ip 命令\nip是现在推荐使用的命令，功能比较强大。\n## ip命令管理设备开关\n```bash\n[root@localhost ~]# ip link show enp0s8\t# 这个命令大致相当于 ifconfig enp0s8 查看这个网卡的信息\n3: enp0s8: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000\n    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff\n[root@localhost ~]# ip link set dev enp0s8 up\t# 设置一个device，enp0s8，打开\n[root@localhost ~]# ip link show enp0s8\n3: enp0s8: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000\n    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff\n[root@localhost ~]# ip link set dev enp0s8 down\t# 设置 设备 网卡名 打开/关闭\n[root@localhost ~]# ip link show enp0s8\n3: enp0s8: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000\n    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff\n```\n\n## ip命令修改网卡MAC地址\n```bash\n[root@localhost ~]# ip link set dev enp0s8 address 00:00:ff:bb:aa:22\t# 修改网卡的物理地址，也就是MAC地址\n[root@localhost ~]# ip link show enp0s8\n3: enp0s8: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000\n    link/ether 00:00:ff:bb:aa:22 brd ff:ff:ff:ff:ff:ff\n```\n\n# 0X04 nmcli 管理网络\n`nmcli`是`network manager command line interface`的简写，这个命令可以用来管理配置网络。\n## 查看网络接口状态\n```bash\n[root@localhost ~]# nmcli -p g\n=============================================================\n                    NetworkManager status\n=============================================================\nSTATE      CONNECTIVITY  WIFI-HW  WIFI     WWAN-HW  WWAN    \n-------------------------------------------------------------\nconnected  full          enabled  enabled  enabled  enabled \n```\n\n## 查看修改主机名\n```bash\n[root@localhost ~]# nmcli general hostname\nlocalhost.localdomain\n[root@localhost ~]# nmcli general hostname test\n[root@localhost ~]# nmcli general hostname\ntest\n```\n\n## 查看网络设备\n以前可以用ifconfig来查看网络设备，ip命令也可以查看。可以直接查看所有的，也可以指定某一个设备查看。\n```bash\n[root@localhost ~]# nmcli device show\t# 莎看所有设备\nGENERAL.DEVICE:                         enp0s3\nGENERAL.TYPE:                           ethernet\nGENERAL.HWADDR:                         08:00:27:35:C7:CE\nGENERAL.MTU:                            1500\n.......................\t# 输出太多，就不全放在这里了\nIP6.ADDRESS[1]:                         ::1/128\nIP6.GATEWAY:                 \n[root@localhost ~]# nmcli device show enp0s8\t# 查看指定设备\nGENERAL.DEVICE:                         enp0s8\nGENERAL.TYPE:                           ethernet\nGENERAL.HWADDR:                         08:00:27:79:C4:B1\nGENERAL.MTU:                            1500\nGENERAL.STATE:                          100 (connected)\nGENERAL.CONNECTION:                     enp0s8\nGENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/7\nWIRED-PROPERTIES.CARRIER:               off\nIP4.ADDRESS[1]:                         123.123.123.2/25\nIP4.GATEWAY:                            \nIP6.GATEWAY:          \n```\n\n## 修改网卡配置\n一个设备可以有多个连接，在CentOS7中网络是以连接管理的。虽然每个设备可以有多个连接，但是同时生效的只能有一个。我们可以使用`nmcli connection`查看连接\n```bash\n[root@localhost ~]# nmcli connection show\nNAME    UUID                                  TYPE            DEVICE \nenp0s8  ae99f48d-5f20-4a9c-a487-c4ebafa3f92e  802-3-ethernet  enp0s8 \nenp0s3  2edc4731-888c-4102-8ff5-236ea47eeedb  802-3-ethernet  enp0s3 \n```\n我们可以进行如下操作`nmcli connection add/delete/edit`也就是增删改三个操作。\n每一个连接都有一个名字，我们可以根据名字索引来操作对应到的连接。我们先来删除掉之前配置的网络。\n```bash\n[root@localhost ~]# nmcli connection delete enp0s8 \t# 这样可以删掉之前的连接\nConnection 'enp0s8' (ae99f48d-5f20-4a9c-a487-c4ebafa3f92e) successfully deleted.\n```\n然后添加一个新的连接，名字叫'test_conn'，接口是'enp0s8'，类型是'ethernet'也就是以太网，ip使用v4版本123.123.123.123，子网掩码是24位，ipv4的网关是123.123.123.1\n```bash\n[root@localhost ~]# nmcli connection add con-name 'test_conn' ifname enp0s8 type ethernet ip4 123.123.123.123/24 gw4 123.123.123.1\nConnection 'test_conn' (05c7cd70-a48e-4a12-a0de-9d57724cf0d0) successfully added.\n[root@localhost ~]# nmcli connection show test_conn\n# 这行命令的输出太多了就不展示了。但是我们可以通过这行命令看到自己创建的连接，信息和自己填写的命令相对应。\n```\n修改一个连接可以使用`nmcli connection modify`，下面我们来测试一下修改一个连接\n```bash\n[root@localhost ~]# nmcli connection show test_conn | grep ipv4.dns\t# 使用grep搜索查看dns设置\nipv4.dns:                               \nipv4.dns-search:                        \n[root@localhost ~]# nmcli connection modify test_conn ipv4.dns 8.8.8.8\t# 修改ipv4的dns地址\n[root@localhost ~]# nmcli connection show test_conn | grep ipv4.dns\nipv4.dns:                               8.8.8.8\nipv4.dns-search:     \n```\n","source":"_posts/linux_nmcli_ip.md","raw":"---\ntitle: 使用nmcli和ip命令配置CentOS/RHEL的网络\ndate: 2016-10-28 17:42\ntags:\n  - Linux\n  - nmcli\n  - ip\n  - 网络\n---\n\n# 0X00 查看网络配置文件\n在CentOS中网络是以配置文件的形式存在系统里的，在`/etc/sysconfig/network-scripts/`目录下，一般情况下网卡的配置文件都在这里了，以`ifcfg-`就是配置文件了，打开配置文件看一下。下面注释一下关键的配置项\n```config\nTYPE=Ethernet\t# 网络类型\nBOOTPROTO=static\t# 协议取值，常见的是static和dhcp\nIPADDR=10.13.7.33\t# 给网卡ip赋值\nNETMASK=255.255.255.0\t# 给网卡子网掩码赋值\nDEFROUTE=yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPV6_FAILURE_FATAL=no\nNAME=enp0s8\nUSERCTL=no\t# 是否允许非root用户控制\nUUID=4c967913-c4c9-4961-ae03-de7865f144d0\t# 网卡的唯一标识码\nDEVICE=enp0s8\t# 设备名\nONBOOT=no\t# 是否在开机时激活\n```\n但是一般不建议直接使用编辑器修改网络配置文件，因为这样容易出现一些语法错误和逻辑错误，所以建议使用命令行来管理配置网络，虽然本质上都是去修改配置文件。但是使用命令行去管理网络，命令都是确保配置没有问题才会写入到文件，所以会更加安全。包括下面介绍的`ip`和`nmcli`命令，都是通过修改配置文件来完成功能的。\n\n# 0X01 ifconfig 命令\n这个命令在CentOS7中已经不建议使用了，不过由于之前的版本都是在用这个命令，还是说一下。`ifconfig`是`interface configuration`的缩写，也就是接口配置。\n## 查看网络\n直接输入这个命令就可以看到现在启动着的所有网络。也可以接上某个特定的网卡来查看单独的信息`ifconfig enp0s3`\n```bash\n[root@localhost ~]# ifconfig\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 0  (Local Loopback)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```\n如果想查看包括已经关闭了的网络时，使用`ifconfig -a`就可以了\n> 最后的那个lo是回环网络，暂时不用管\n\n## 开关网络\n`ifconfig`还可以开关网络，命令后面接`interface name`也就是网卡名，然后接上`up/down`就可以开关网络了\n```bash\n[root@localhost ~]# ifconfig enp0s8 down\t# 关闭网络\n[root@localhost ~]# ifconfig\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 0  (Local Loopback)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n[root@localhost ~]# ifconfig enp0s8 up\t# 打开网络\n[root@localhost ~]# ifconfig\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 123.123.123.2  netmask 255.255.255.128  broadcast 123.123.123.1\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 0  (Local Loopback)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n```\n\n## 配置网络\n`ifconfig`命令可以在不重启的情况下开关网络接口，修改IP、掩码、网关等信息。\n```bash\n[root@localhost ~]# ifconfig enp0s8\t# 查看ep0s8的网卡信息\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n[root@localhost ~]# ifconfig enp0s8 123.233.233.123\t# 修改ip为123.233.233.123\n[root@localhost ~]# ifconfig enp0s8\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 123.233.233.123  netmask 255.0.0.0  broadcast 123.255.255.255\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n[root@localhost ~]# ifconfig enp0s8 netmask 255.255.255.0\t# 修改子网掩码为255.255.255.0\n[root@localhost ~]# ifconfig enp0s8\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 123.233.233.123  netmask 255.255.255.0  broadcast 123.233.233.255\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n[root@localhost ~]# ifconfig enp0s8 123.123.123.2 netmask 255.255.255.128\t# 当然也可以把这些写成一行\n[root@localhost ~]# ifconfig enp0s8\nenp0s8: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 123.123.123.2  netmask 255.255.255.128  broadcast 123.123.123.\n        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```\n\n# 0X02 nmtui 简单的类图形管理工具\n在终端中输入`nmtui`就可以打开一个类图形的界面，用这个界面可以更简单得管理配置网络，但是不能做比较细致的配置，而且使用比较简单，所以这里就不多做介绍了，可以自己在终端上打开看看。这个命令的一大优点是可以在ssh远程连接的时候使用，在Windows下的XShell等软件中都可以直接调出。\n\n# 0X03 ip 命令\nip是现在推荐使用的命令，功能比较强大。\n## ip命令管理设备开关\n```bash\n[root@localhost ~]# ip link show enp0s8\t# 这个命令大致相当于 ifconfig enp0s8 查看这个网卡的信息\n3: enp0s8: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000\n    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff\n[root@localhost ~]# ip link set dev enp0s8 up\t# 设置一个device，enp0s8，打开\n[root@localhost ~]# ip link show enp0s8\n3: enp0s8: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000\n    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff\n[root@localhost ~]# ip link set dev enp0s8 down\t# 设置 设备 网卡名 打开/关闭\n[root@localhost ~]# ip link show enp0s8\n3: enp0s8: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000\n    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff\n```\n\n## ip命令修改网卡MAC地址\n```bash\n[root@localhost ~]# ip link set dev enp0s8 address 00:00:ff:bb:aa:22\t# 修改网卡的物理地址，也就是MAC地址\n[root@localhost ~]# ip link show enp0s8\n3: enp0s8: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000\n    link/ether 00:00:ff:bb:aa:22 brd ff:ff:ff:ff:ff:ff\n```\n\n# 0X04 nmcli 管理网络\n`nmcli`是`network manager command line interface`的简写，这个命令可以用来管理配置网络。\n## 查看网络接口状态\n```bash\n[root@localhost ~]# nmcli -p g\n=============================================================\n                    NetworkManager status\n=============================================================\nSTATE      CONNECTIVITY  WIFI-HW  WIFI     WWAN-HW  WWAN    \n-------------------------------------------------------------\nconnected  full          enabled  enabled  enabled  enabled \n```\n\n## 查看修改主机名\n```bash\n[root@localhost ~]# nmcli general hostname\nlocalhost.localdomain\n[root@localhost ~]# nmcli general hostname test\n[root@localhost ~]# nmcli general hostname\ntest\n```\n\n## 查看网络设备\n以前可以用ifconfig来查看网络设备，ip命令也可以查看。可以直接查看所有的，也可以指定某一个设备查看。\n```bash\n[root@localhost ~]# nmcli device show\t# 莎看所有设备\nGENERAL.DEVICE:                         enp0s3\nGENERAL.TYPE:                           ethernet\nGENERAL.HWADDR:                         08:00:27:35:C7:CE\nGENERAL.MTU:                            1500\n.......................\t# 输出太多，就不全放在这里了\nIP6.ADDRESS[1]:                         ::1/128\nIP6.GATEWAY:                 \n[root@localhost ~]# nmcli device show enp0s8\t# 查看指定设备\nGENERAL.DEVICE:                         enp0s8\nGENERAL.TYPE:                           ethernet\nGENERAL.HWADDR:                         08:00:27:79:C4:B1\nGENERAL.MTU:                            1500\nGENERAL.STATE:                          100 (connected)\nGENERAL.CONNECTION:                     enp0s8\nGENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/7\nWIRED-PROPERTIES.CARRIER:               off\nIP4.ADDRESS[1]:                         123.123.123.2/25\nIP4.GATEWAY:                            \nIP6.GATEWAY:          \n```\n\n## 修改网卡配置\n一个设备可以有多个连接，在CentOS7中网络是以连接管理的。虽然每个设备可以有多个连接，但是同时生效的只能有一个。我们可以使用`nmcli connection`查看连接\n```bash\n[root@localhost ~]# nmcli connection show\nNAME    UUID                                  TYPE            DEVICE \nenp0s8  ae99f48d-5f20-4a9c-a487-c4ebafa3f92e  802-3-ethernet  enp0s8 \nenp0s3  2edc4731-888c-4102-8ff5-236ea47eeedb  802-3-ethernet  enp0s3 \n```\n我们可以进行如下操作`nmcli connection add/delete/edit`也就是增删改三个操作。\n每一个连接都有一个名字，我们可以根据名字索引来操作对应到的连接。我们先来删除掉之前配置的网络。\n```bash\n[root@localhost ~]# nmcli connection delete enp0s8 \t# 这样可以删掉之前的连接\nConnection 'enp0s8' (ae99f48d-5f20-4a9c-a487-c4ebafa3f92e) successfully deleted.\n```\n然后添加一个新的连接，名字叫'test_conn'，接口是'enp0s8'，类型是'ethernet'也就是以太网，ip使用v4版本123.123.123.123，子网掩码是24位，ipv4的网关是123.123.123.1\n```bash\n[root@localhost ~]# nmcli connection add con-name 'test_conn' ifname enp0s8 type ethernet ip4 123.123.123.123/24 gw4 123.123.123.1\nConnection 'test_conn' (05c7cd70-a48e-4a12-a0de-9d57724cf0d0) successfully added.\n[root@localhost ~]# nmcli connection show test_conn\n# 这行命令的输出太多了就不展示了。但是我们可以通过这行命令看到自己创建的连接，信息和自己填写的命令相对应。\n```\n修改一个连接可以使用`nmcli connection modify`，下面我们来测试一下修改一个连接\n```bash\n[root@localhost ~]# nmcli connection show test_conn | grep ipv4.dns\t# 使用grep搜索查看dns设置\nipv4.dns:                               \nipv4.dns-search:                        \n[root@localhost ~]# nmcli connection modify test_conn ipv4.dns 8.8.8.8\t# 修改ipv4的dns地址\n[root@localhost ~]# nmcli connection show test_conn | grep ipv4.dns\nipv4.dns:                               8.8.8.8\nipv4.dns-search:     \n```\n","slug":"linux_nmcli_ip","published":1,"updated":"2017-09-02T14:45:28.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme60016hnlpds9tvagi","content":"<h1 id=\"0X00-查看网络配置文件\"><a href=\"#0X00-查看网络配置文件\" class=\"headerlink\" title=\"0X00 查看网络配置文件\"></a>0X00 查看网络配置文件</h1><p>在CentOS中网络是以配置文件的形式存在系统里的，在<code>/etc/sysconfig/network-scripts/</code>目录下，一般情况下网卡的配置文件都在这里了，以<code>ifcfg-</code>就是配置文件了，打开配置文件看一下。下面注释一下关键的配置项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">TYPE=Ethernet\t# 网络类型</div><div class=\"line\">BOOTPROTO=static\t# 协议取值，常见的是static和dhcp</div><div class=\"line\">IPADDR=10.13.7.33\t# 给网卡ip赋值</div><div class=\"line\">NETMASK=255.255.255.0\t# 给网卡子网掩码赋值</div><div class=\"line\">DEFROUTE=yes</div><div class=\"line\">PEERDNS=yes</div><div class=\"line\">PEERROUTES=yes</div><div class=\"line\">IPV4_FAILURE_FATAL=no</div><div class=\"line\">IPV6INIT=yes</div><div class=\"line\">IPV6_AUTOCONF=yes</div><div class=\"line\">IPV6_DEFROUTE=yes</div><div class=\"line\">IPV6_PEERDNS=yes</div><div class=\"line\">IPV6_PEERROUTES=yes</div><div class=\"line\">IPV6_FAILURE_FATAL=no</div><div class=\"line\">NAME=enp0s8</div><div class=\"line\">USERCTL=no\t# 是否允许非root用户控制</div><div class=\"line\">UUID=4c967913-c4c9-4961-ae03-de7865f144d0\t# 网卡的唯一标识码</div><div class=\"line\">DEVICE=enp0s8\t# 设备名</div><div class=\"line\">ONBOOT=no\t# 是否在开机时激活</div></pre></td></tr></table></figure></p>\n<p>但是一般不建议直接使用编辑器修改网络配置文件，因为这样容易出现一些语法错误和逻辑错误，所以建议使用命令行来管理配置网络，虽然本质上都是去修改配置文件。但是使用命令行去管理网络，命令都是确保配置没有问题才会写入到文件，所以会更加安全。包括下面介绍的<code>ip</code>和<code>nmcli</code>命令，都是通过修改配置文件来完成功能的。</p>\n<h1 id=\"0X01-ifconfig-命令\"><a href=\"#0X01-ifconfig-命令\" class=\"headerlink\" title=\"0X01 ifconfig 命令\"></a>0X01 ifconfig 命令</h1><p>这个命令在CentOS7中已经不建议使用了，不过由于之前的版本都是在用这个命令，还是说一下。<code>ifconfig</code>是<code>interface configuration</code>的缩写，也就是接口配置。</p>\n<h2 id=\"查看网络\"><a href=\"#查看网络\" class=\"headerlink\" title=\"查看网络\"></a>查看网络</h2><p>直接输入这个命令就可以看到现在启动着的所有网络。也可以接上某个特定的网卡来查看单独的信息<code>ifconfig enp0s3</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</div><div class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class=\"line\">        loop  txqueuelen 0  (Local Loopback)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure></p>\n<p>如果想查看包括已经关闭了的网络时，使用<code>ifconfig -a</code>就可以了</p>\n<blockquote>\n<p>最后的那个lo是回环网络，暂时不用管</p>\n</blockquote>\n<h2 id=\"开关网络\"><a href=\"#开关网络\" class=\"headerlink\" title=\"开关网络\"></a>开关网络</h2><p><code>ifconfig</code>还可以开关网络，命令后面接<code>interface name</code>也就是网卡名，然后接上<code>up/down</code>就可以开关网络了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 down\t# 关闭网络</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig</span></div><div class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</div><div class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class=\"line\">        loop  txqueuelen 0  (Local Loopback)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 up\t# 打开网络</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        inet 123.123.123.2  netmask 255.255.255.128  broadcast 123.123.123.1</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</div><div class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class=\"line\">        loop  txqueuelen 0  (Local Loopback)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置网络\"><a href=\"#配置网络\" class=\"headerlink\" title=\"配置网络\"></a>配置网络</h2><p><code>ifconfig</code>命令可以在不重启的情况下开关网络接口，修改IP、掩码、网关等信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8\t# 查看ep0s8的网卡信息</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 123.233.233.123\t# 修改ip为123.233.233.123</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        inet 123.233.233.123  netmask 255.0.0.0  broadcast 123.255.255.255</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 netmask 255.255.255.0\t# 修改子网掩码为255.255.255.0</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        inet 123.233.233.123  netmask 255.255.255.0  broadcast 123.233.233.255</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 123.123.123.2 netmask 255.255.255.128\t# 当然也可以把这些写成一行</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        inet 123.123.123.2  netmask 255.255.255.128  broadcast 123.123.123.</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-nmtui-简单的类图形管理工具\"><a href=\"#0X02-nmtui-简单的类图形管理工具\" class=\"headerlink\" title=\"0X02 nmtui 简单的类图形管理工具\"></a>0X02 nmtui 简单的类图形管理工具</h1><p>在终端中输入<code>nmtui</code>就可以打开一个类图形的界面，用这个界面可以更简单得管理配置网络，但是不能做比较细致的配置，而且使用比较简单，所以这里就不多做介绍了，可以自己在终端上打开看看。这个命令的一大优点是可以在ssh远程连接的时候使用，在Windows下的XShell等软件中都可以直接调出。</p>\n<h1 id=\"0X03-ip-命令\"><a href=\"#0X03-ip-命令\" class=\"headerlink\" title=\"0X03 ip 命令\"></a>0X03 ip 命令</h1><p>ip是现在推荐使用的命令，功能比较强大。</p>\n<h2 id=\"ip命令管理设备开关\"><a href=\"#ip命令管理设备开关\" class=\"headerlink\" title=\"ip命令管理设备开关\"></a>ip命令管理设备开关</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link show enp0s8\t# 这个命令大致相当于 ifconfig enp0s8 查看这个网卡的信息</span></div><div class=\"line\">3: enp0s8: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000</div><div class=\"line\">    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link set dev enp0s8 up\t# 设置一个device，enp0s8，打开</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link show enp0s8</span></div><div class=\"line\">3: enp0s8: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000</div><div class=\"line\">    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link set dev enp0s8 down\t# 设置 设备 网卡名 打开/关闭</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link show enp0s8</span></div><div class=\"line\">3: enp0s8: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000</div><div class=\"line\">    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff</div></pre></td></tr></table></figure>\n<h2 id=\"ip命令修改网卡MAC地址\"><a href=\"#ip命令修改网卡MAC地址\" class=\"headerlink\" title=\"ip命令修改网卡MAC地址\"></a>ip命令修改网卡MAC地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link set dev enp0s8 address 00:00:ff:bb:aa:22\t# 修改网卡的物理地址，也就是MAC地址</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link show enp0s8</span></div><div class=\"line\">3: enp0s8: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000</div><div class=\"line\">    link/ether 00:00:ff:bb:aa:22 brd ff:ff:ff:ff:ff:ff</div></pre></td></tr></table></figure>\n<h1 id=\"0X04-nmcli-管理网络\"><a href=\"#0X04-nmcli-管理网络\" class=\"headerlink\" title=\"0X04 nmcli 管理网络\"></a>0X04 nmcli 管理网络</h1><p><code>nmcli</code>是<code>network manager command line interface</code>的简写，这个命令可以用来管理配置网络。</p>\n<h2 id=\"查看网络接口状态\"><a href=\"#查看网络接口状态\" class=\"headerlink\" title=\"查看网络接口状态\"></a>查看网络接口状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli -p g</span></div><div class=\"line\">=============================================================</div><div class=\"line\">                    NetworkManager status</div><div class=\"line\">=============================================================</div><div class=\"line\">STATE      CONNECTIVITY  WIFI-HW  WIFI     WWAN-HW  WWAN    </div><div class=\"line\">-------------------------------------------------------------</div><div class=\"line\">connected  full          enabled  enabled  enabled  enabled</div></pre></td></tr></table></figure>\n<h2 id=\"查看修改主机名\"><a href=\"#查看修改主机名\" class=\"headerlink\" title=\"查看修改主机名\"></a>查看修改主机名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli general hostname</span></div><div class=\"line\">localhost.localdomain</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli general hostname test</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli general hostname</span></div><div class=\"line\"><span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h2 id=\"查看网络设备\"><a href=\"#查看网络设备\" class=\"headerlink\" title=\"查看网络设备\"></a>查看网络设备</h2><p>以前可以用ifconfig来查看网络设备，ip命令也可以查看。可以直接查看所有的，也可以指定某一个设备查看。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli device show\t# 莎看所有设备</span></div><div class=\"line\">GENERAL.DEVICE:                         enp0s3</div><div class=\"line\">GENERAL.TYPE:                           ethernet</div><div class=\"line\">GENERAL.HWADDR:                         08:00:27:35:C7:CE</div><div class=\"line\">GENERAL.MTU:                            1500</div><div class=\"line\">.......................\t<span class=\"comment\"># 输出太多，就不全放在这里了</span></div><div class=\"line\">IP6.ADDRESS[1]:                         ::1/128</div><div class=\"line\">IP6.GATEWAY:                 </div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli device show enp0s8\t# 查看指定设备</span></div><div class=\"line\">GENERAL.DEVICE:                         enp0s8</div><div class=\"line\">GENERAL.TYPE:                           ethernet</div><div class=\"line\">GENERAL.HWADDR:                         08:00:27:79:C4:B1</div><div class=\"line\">GENERAL.MTU:                            1500</div><div class=\"line\">GENERAL.STATE:                          100 (connected)</div><div class=\"line\">GENERAL.CONNECTION:                     enp0s8</div><div class=\"line\">GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/7</div><div class=\"line\">WIRED-PROPERTIES.CARRIER:               off</div><div class=\"line\">IP4.ADDRESS[1]:                         123.123.123.2/25</div><div class=\"line\">IP4.GATEWAY:                            </div><div class=\"line\">IP6.GATEWAY:</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改网卡配置\"><a href=\"#修改网卡配置\" class=\"headerlink\" title=\"修改网卡配置\"></a>修改网卡配置</h2><p>一个设备可以有多个连接，在CentOS7中网络是以连接管理的。虽然每个设备可以有多个连接，但是同时生效的只能有一个。我们可以使用<code>nmcli connection</code>查看连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection show</span></div><div class=\"line\">NAME    UUID                                  TYPE            DEVICE </div><div class=\"line\">enp0s8  ae99f48d-5f20-4a9c-a487-c4ebafa3f92e  802-3-ethernet  enp0s8 </div><div class=\"line\">enp0s3  2edc4731-888c-4102-8ff5-236ea47eeedb  802-3-ethernet  enp0s3</div></pre></td></tr></table></figure></p>\n<p>我们可以进行如下操作<code>nmcli connection add/delete/edit</code>也就是增删改三个操作。<br>每一个连接都有一个名字，我们可以根据名字索引来操作对应到的连接。我们先来删除掉之前配置的网络。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection delete enp0s8 \t# 这样可以删掉之前的连接</span></div><div class=\"line\">Connection <span class=\"string\">'enp0s8'</span> (ae99f48d-5f20-4a9c-a487-c4ebafa3f92e) successfully deleted.</div></pre></td></tr></table></figure></p>\n<p>然后添加一个新的连接，名字叫’test_conn’，接口是’enp0s8’，类型是’ethernet’也就是以太网，ip使用v4版本123.123.123.123，子网掩码是24位，ipv4的网关是123.123.123.1<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection add con-name 'test_conn' ifname enp0s8 type ethernet ip4 123.123.123.123/24 gw4 123.123.123.1</span></div><div class=\"line\">Connection <span class=\"string\">'test_conn'</span> (05c7cd70-a48e-4a12-a0de-9d57724cf0d0) successfully added.</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection show test_conn</span></div><div class=\"line\"><span class=\"comment\"># 这行命令的输出太多了就不展示了。但是我们可以通过这行命令看到自己创建的连接，信息和自己填写的命令相对应。</span></div></pre></td></tr></table></figure></p>\n<p>修改一个连接可以使用<code>nmcli connection modify</code>，下面我们来测试一下修改一个连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection show test_conn | grep ipv4.dns\t# 使用grep搜索查看dns设置</span></div><div class=\"line\">ipv4.dns:                               </div><div class=\"line\">ipv4.dns-search:                        </div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection modify test_conn ipv4.dns 8.8.8.8\t# 修改ipv4的dns地址</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection show test_conn | grep ipv4.dns</span></div><div class=\"line\">ipv4.dns:                               8.8.8.8</div><div class=\"line\">ipv4.dns-search:</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-查看网络配置文件\"><a href=\"#0X00-查看网络配置文件\" class=\"headerlink\" title=\"0X00 查看网络配置文件\"></a>0X00 查看网络配置文件</h1><p>在CentOS中网络是以配置文件的形式存在系统里的，在<code>/etc/sysconfig/network-scripts/</code>目录下，一般情况下网卡的配置文件都在这里了，以<code>ifcfg-</code>就是配置文件了，打开配置文件看一下。下面注释一下关键的配置项<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">TYPE=Ethernet\t# 网络类型</div><div class=\"line\">BOOTPROTO=static\t# 协议取值，常见的是static和dhcp</div><div class=\"line\">IPADDR=10.13.7.33\t# 给网卡ip赋值</div><div class=\"line\">NETMASK=255.255.255.0\t# 给网卡子网掩码赋值</div><div class=\"line\">DEFROUTE=yes</div><div class=\"line\">PEERDNS=yes</div><div class=\"line\">PEERROUTES=yes</div><div class=\"line\">IPV4_FAILURE_FATAL=no</div><div class=\"line\">IPV6INIT=yes</div><div class=\"line\">IPV6_AUTOCONF=yes</div><div class=\"line\">IPV6_DEFROUTE=yes</div><div class=\"line\">IPV6_PEERDNS=yes</div><div class=\"line\">IPV6_PEERROUTES=yes</div><div class=\"line\">IPV6_FAILURE_FATAL=no</div><div class=\"line\">NAME=enp0s8</div><div class=\"line\">USERCTL=no\t# 是否允许非root用户控制</div><div class=\"line\">UUID=4c967913-c4c9-4961-ae03-de7865f144d0\t# 网卡的唯一标识码</div><div class=\"line\">DEVICE=enp0s8\t# 设备名</div><div class=\"line\">ONBOOT=no\t# 是否在开机时激活</div></pre></td></tr></table></figure></p>\n<p>但是一般不建议直接使用编辑器修改网络配置文件，因为这样容易出现一些语法错误和逻辑错误，所以建议使用命令行来管理配置网络，虽然本质上都是去修改配置文件。但是使用命令行去管理网络，命令都是确保配置没有问题才会写入到文件，所以会更加安全。包括下面介绍的<code>ip</code>和<code>nmcli</code>命令，都是通过修改配置文件来完成功能的。</p>\n<h1 id=\"0X01-ifconfig-命令\"><a href=\"#0X01-ifconfig-命令\" class=\"headerlink\" title=\"0X01 ifconfig 命令\"></a>0X01 ifconfig 命令</h1><p>这个命令在CentOS7中已经不建议使用了，不过由于之前的版本都是在用这个命令，还是说一下。<code>ifconfig</code>是<code>interface configuration</code>的缩写，也就是接口配置。</p>\n<h2 id=\"查看网络\"><a href=\"#查看网络\" class=\"headerlink\" title=\"查看网络\"></a>查看网络</h2><p>直接输入这个命令就可以看到现在启动着的所有网络。也可以接上某个特定的网卡来查看单独的信息<code>ifconfig enp0s3</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</div><div class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class=\"line\">        loop  txqueuelen 0  (Local Loopback)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure></p>\n<p>如果想查看包括已经关闭了的网络时，使用<code>ifconfig -a</code>就可以了</p>\n<blockquote>\n<p>最后的那个lo是回环网络，暂时不用管</p>\n</blockquote>\n<h2 id=\"开关网络\"><a href=\"#开关网络\" class=\"headerlink\" title=\"开关网络\"></a>开关网络</h2><p><code>ifconfig</code>还可以开关网络，命令后面接<code>interface name</code>也就是网卡名，然后接上<code>up/down</code>就可以开关网络了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 down\t# 关闭网络</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig</span></div><div class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</div><div class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class=\"line\">        loop  txqueuelen 0  (Local Loopback)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 up\t# 打开网络</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        inet 123.123.123.2  netmask 255.255.255.128  broadcast 123.123.123.1</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</div><div class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class=\"line\">        loop  txqueuelen 0  (Local Loopback)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置网络\"><a href=\"#配置网络\" class=\"headerlink\" title=\"配置网络\"></a>配置网络</h2><p><code>ifconfig</code>命令可以在不重启的情况下开关网络接口，修改IP、掩码、网关等信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8\t# 查看ep0s8的网卡信息</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 123.233.233.123\t# 修改ip为123.233.233.123</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        inet 123.233.233.123  netmask 255.0.0.0  broadcast 123.255.255.255</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\"></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 netmask 255.255.255.0\t# 修改子网掩码为255.255.255.0</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        inet 123.233.233.123  netmask 255.255.255.0  broadcast 123.233.233.255</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8 123.123.123.2 netmask 255.255.255.128\t# 当然也可以把这些写成一行</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ifconfig enp0s8</span></div><div class=\"line\">enp0s8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class=\"line\">        inet 123.123.123.2  netmask 255.255.255.128  broadcast 123.123.123.</div><div class=\"line\">        ether 08:00:27:79:c4:b1  txqueuelen 1000  (Ethernet)</div><div class=\"line\">        RX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class=\"line\">        TX packets 0  bytes 0 (0.0 B)</div><div class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-nmtui-简单的类图形管理工具\"><a href=\"#0X02-nmtui-简单的类图形管理工具\" class=\"headerlink\" title=\"0X02 nmtui 简单的类图形管理工具\"></a>0X02 nmtui 简单的类图形管理工具</h1><p>在终端中输入<code>nmtui</code>就可以打开一个类图形的界面，用这个界面可以更简单得管理配置网络，但是不能做比较细致的配置，而且使用比较简单，所以这里就不多做介绍了，可以自己在终端上打开看看。这个命令的一大优点是可以在ssh远程连接的时候使用，在Windows下的XShell等软件中都可以直接调出。</p>\n<h1 id=\"0X03-ip-命令\"><a href=\"#0X03-ip-命令\" class=\"headerlink\" title=\"0X03 ip 命令\"></a>0X03 ip 命令</h1><p>ip是现在推荐使用的命令，功能比较强大。</p>\n<h2 id=\"ip命令管理设备开关\"><a href=\"#ip命令管理设备开关\" class=\"headerlink\" title=\"ip命令管理设备开关\"></a>ip命令管理设备开关</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link show enp0s8\t# 这个命令大致相当于 ifconfig enp0s8 查看这个网卡的信息</span></div><div class=\"line\">3: enp0s8: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000</div><div class=\"line\">    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link set dev enp0s8 up\t# 设置一个device，enp0s8，打开</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link show enp0s8</span></div><div class=\"line\">3: enp0s8: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000</div><div class=\"line\">    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link set dev enp0s8 down\t# 设置 设备 网卡名 打开/关闭</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link show enp0s8</span></div><div class=\"line\">3: enp0s8: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000</div><div class=\"line\">    link/ether 08:00:27:79:c4:b1 brd ff:ff:ff:ff:ff:ff</div></pre></td></tr></table></figure>\n<h2 id=\"ip命令修改网卡MAC地址\"><a href=\"#ip命令修改网卡MAC地址\" class=\"headerlink\" title=\"ip命令修改网卡MAC地址\"></a>ip命令修改网卡MAC地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link set dev enp0s8 address 00:00:ff:bb:aa:22\t# 修改网卡的物理地址，也就是MAC地址</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># ip link show enp0s8</span></div><div class=\"line\">3: enp0s8: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT qlen 1000</div><div class=\"line\">    link/ether 00:00:ff:bb:aa:22 brd ff:ff:ff:ff:ff:ff</div></pre></td></tr></table></figure>\n<h1 id=\"0X04-nmcli-管理网络\"><a href=\"#0X04-nmcli-管理网络\" class=\"headerlink\" title=\"0X04 nmcli 管理网络\"></a>0X04 nmcli 管理网络</h1><p><code>nmcli</code>是<code>network manager command line interface</code>的简写，这个命令可以用来管理配置网络。</p>\n<h2 id=\"查看网络接口状态\"><a href=\"#查看网络接口状态\" class=\"headerlink\" title=\"查看网络接口状态\"></a>查看网络接口状态</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli -p g</span></div><div class=\"line\">=============================================================</div><div class=\"line\">                    NetworkManager status</div><div class=\"line\">=============================================================</div><div class=\"line\">STATE      CONNECTIVITY  WIFI-HW  WIFI     WWAN-HW  WWAN    </div><div class=\"line\">-------------------------------------------------------------</div><div class=\"line\">connected  full          enabled  enabled  enabled  enabled</div></pre></td></tr></table></figure>\n<h2 id=\"查看修改主机名\"><a href=\"#查看修改主机名\" class=\"headerlink\" title=\"查看修改主机名\"></a>查看修改主机名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli general hostname</span></div><div class=\"line\">localhost.localdomain</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli general hostname test</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli general hostname</span></div><div class=\"line\"><span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h2 id=\"查看网络设备\"><a href=\"#查看网络设备\" class=\"headerlink\" title=\"查看网络设备\"></a>查看网络设备</h2><p>以前可以用ifconfig来查看网络设备，ip命令也可以查看。可以直接查看所有的，也可以指定某一个设备查看。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli device show\t# 莎看所有设备</span></div><div class=\"line\">GENERAL.DEVICE:                         enp0s3</div><div class=\"line\">GENERAL.TYPE:                           ethernet</div><div class=\"line\">GENERAL.HWADDR:                         08:00:27:35:C7:CE</div><div class=\"line\">GENERAL.MTU:                            1500</div><div class=\"line\">.......................\t<span class=\"comment\"># 输出太多，就不全放在这里了</span></div><div class=\"line\">IP6.ADDRESS[1]:                         ::1/128</div><div class=\"line\">IP6.GATEWAY:                 </div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli device show enp0s8\t# 查看指定设备</span></div><div class=\"line\">GENERAL.DEVICE:                         enp0s8</div><div class=\"line\">GENERAL.TYPE:                           ethernet</div><div class=\"line\">GENERAL.HWADDR:                         08:00:27:79:C4:B1</div><div class=\"line\">GENERAL.MTU:                            1500</div><div class=\"line\">GENERAL.STATE:                          100 (connected)</div><div class=\"line\">GENERAL.CONNECTION:                     enp0s8</div><div class=\"line\">GENERAL.CON-PATH:                       /org/freedesktop/NetworkManager/ActiveConnection/7</div><div class=\"line\">WIRED-PROPERTIES.CARRIER:               off</div><div class=\"line\">IP4.ADDRESS[1]:                         123.123.123.2/25</div><div class=\"line\">IP4.GATEWAY:                            </div><div class=\"line\">IP6.GATEWAY:</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改网卡配置\"><a href=\"#修改网卡配置\" class=\"headerlink\" title=\"修改网卡配置\"></a>修改网卡配置</h2><p>一个设备可以有多个连接，在CentOS7中网络是以连接管理的。虽然每个设备可以有多个连接，但是同时生效的只能有一个。我们可以使用<code>nmcli connection</code>查看连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection show</span></div><div class=\"line\">NAME    UUID                                  TYPE            DEVICE </div><div class=\"line\">enp0s8  ae99f48d-5f20-4a9c-a487-c4ebafa3f92e  802-3-ethernet  enp0s8 </div><div class=\"line\">enp0s3  2edc4731-888c-4102-8ff5-236ea47eeedb  802-3-ethernet  enp0s3</div></pre></td></tr></table></figure></p>\n<p>我们可以进行如下操作<code>nmcli connection add/delete/edit</code>也就是增删改三个操作。<br>每一个连接都有一个名字，我们可以根据名字索引来操作对应到的连接。我们先来删除掉之前配置的网络。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection delete enp0s8 \t# 这样可以删掉之前的连接</span></div><div class=\"line\">Connection <span class=\"string\">'enp0s8'</span> (ae99f48d-5f20-4a9c-a487-c4ebafa3f92e) successfully deleted.</div></pre></td></tr></table></figure></p>\n<p>然后添加一个新的连接，名字叫’test_conn’，接口是’enp0s8’，类型是’ethernet’也就是以太网，ip使用v4版本123.123.123.123，子网掩码是24位，ipv4的网关是123.123.123.1<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection add con-name 'test_conn' ifname enp0s8 type ethernet ip4 123.123.123.123/24 gw4 123.123.123.1</span></div><div class=\"line\">Connection <span class=\"string\">'test_conn'</span> (05c7cd70-a48e-4a12-a0de-9d57724cf0d0) successfully added.</div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection show test_conn</span></div><div class=\"line\"><span class=\"comment\"># 这行命令的输出太多了就不展示了。但是我们可以通过这行命令看到自己创建的连接，信息和自己填写的命令相对应。</span></div></pre></td></tr></table></figure></p>\n<p>修改一个连接可以使用<code>nmcli connection modify</code>，下面我们来测试一下修改一个连接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection show test_conn | grep ipv4.dns\t# 使用grep搜索查看dns设置</span></div><div class=\"line\">ipv4.dns:                               </div><div class=\"line\">ipv4.dns-search:                        </div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection modify test_conn ipv4.dns 8.8.8.8\t# 修改ipv4的dns地址</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># nmcli connection show test_conn | grep ipv4.dns</span></div><div class=\"line\">ipv4.dns:                               8.8.8.8</div><div class=\"line\">ipv4.dns-search:</div></pre></td></tr></table></figure></p>\n"},{"title":"OpenSSH 配置 免密码登陆 公钥和私钥 私钥签名","date":"2016-10-17T06:41:00.000Z","_content":"\n\n# 0X00 安装OpenSSH\n一般情况下我们的系统中都是自带SSH服务端和客户端的，万一没有的话就需要我们手动安装这个服务。\n\n`yum install -y openssh`\n\n然后重启OpenSSH服务\n\n`systemctl restart sshd`\n\n# 0X01 两行简单的配置\nOpenSSH的配置文件在`/etc/ssh/`目录下，有两个配置文件，一个是针对服务端的一个是针对客户端的，我们只需要修改针对服务端的`sshd_config`即可。\n\n配置文件里比较重要的两行是`PermitRootLogin`和`PasswordAuthentication`。\n\n* `PermitRootLogin` 当这个值为yes时，才允许root用户使用ssh登陆\n* `PasswordAuthentication` 当这个值为yes时，允许使用密码登陆，反之则拒绝密码登陆(只能使用密钥)。\n\n```config\nPermitRootLogin yes\nPasswordAuthentication yes\n```\n> 这里的配置就允许使用root用户登陆，也允许输入密码登陆\n\n# 0X02 私钥和公钥————非对称加密\n在ssh中可以使用用户名密码的形式登陆，也可以使用密钥的形式登陆。\n\n**非对称加密** 就是说加密和解密用的密码不同。非对称加密里有**公钥**和**私钥**，使用公钥加密的数据只有使用私钥才能解开，虽然是使用公钥加密的，但是并不能通过公钥反向解密。这点和传统的对称加密区别比较大。\n\n下面假设有这么一个场景：有一台服务器S和三个管理员A1、A2、A3。  S生成了自己的一对公钥和私钥，将公钥公开出去，这时候A1就能能看到这个公钥，所以都可以用这个公钥将发给S的数据加密。虽然A2和A3也看到了这个公钥，但是不能通过这个公钥将这个加密的数据解开。数据只有在S上通过对应的私钥才能解开。\n* 公钥：一般是公开出去，并用于加密\n* 私钥：保存在自己这里，用于解密\n> 公钥和私钥是一对的，一个公钥和一个私钥两两对应\n\n# 0X03 在SSH生成公钥和私钥\n在Linux里SSH可以使用公钥和私钥来登陆系统，也就是前面我们说的那个`PasswordAuthentication`选项，如果禁止密码登陆的话就只能使用公钥和私钥登陆了。\n\n`ssh-keygen`可以生成一对公钥和私钥。我们一般在自己用户的主目录里的`.ssh`目录里执行这个命令、执行完了之后会提示输入加密，这里是给公钥私钥加密，可以暂时不用管，一路回车就行了，直到看到一堆乱七八糟的图像，类似于这样就算好了。\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\n09:7c:28:a5:75:sr:ab:5c:82:43:17:81:f8:78:zs:1e root@buyongkan.zhelishi.gaiguode\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|   . .+o.        |\n|  . .=8o.        |\n|   oo+-+.        |\n|  . =.oo..       |\n|   X +  SB.      |\n|    o . o        |\n|     o +         |\n|      )          |\n|                 |\n+-----------------+\n```\n\n`.ssh`目录如果不存在的话，执行一下`ssh localhost`然后输入密码登陆以下本地，就会有了。生成完之后目录里会多出两个文件，`id_rsa` 和 `id_rsa.pub` 后面pub结尾的是public也就是公钥，我们可以打开看看是一堆看似乱码的东西。\n\n# 0X04 使用公钥和私钥免密码登陆\n如果我们有两台机器，一个叫Server一个叫Desktop，我想让Desktop可以免密码登陆到Server上，就可以用这个方法。\n\n原理大概是这样的：在Desktop上生成一对公钥和私钥，然后将Desktop上的公钥追加到Server的`.ssh`目录下的`authorize_keys`里，这个文件就是用来保存可以免密码登录到自己机器上的那些用户的公钥的。\n\n```bash\n[root@iZ28jaak5nnZ .ssh]# ssh-keygen  #生成一对公钥私钥\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\n30:05:7d:63:sf:10:aa:cb:e1:b7:84:48:54:5f:42:4d root@iZ28jaak5nnZ\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|..o o EO+o...    |\n| o = * n. +.     |\n|  + * N  o .     |\n|   S + a         |\n|    . . S        |\n|m            s   |\n|                 |\n|    x            |\n|                 |\n+-----------------+\n[root@iZ28jaak5nnZ .ssh]# ssh-copy-id -i id_rsa.pub root@182.234.214.243 #使用ssh-copy-id来将自己的公钥发送到Server上去，会自动找到那个文件\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nroot@182.254.214.250's password:   # 还没配置好所以要输密码\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'root@182.254.214.250'\"\nand check to make sure that only the key(s) you wanted were added.\n[root@iZ28jaak5nnZ .ssh]# ssh root@182.254.214.250  # 登陆\nLast login: Mon Oct 17 13:47:23 2016 from 43.13.56.7\n☁  ~  hostname  # 成功登陆\nblog.just666.cn\n☁  ~  \n```\n\n# 0X05 使用私钥签名\n公钥私钥对可以对数据加密，是用公钥加密私钥解密。也可以使用公钥私钥对进行数字签名。\n\n当Server公开自己的公钥之后，大家都可以用这个公钥进行加密，然后传给Server，Server用私钥解密就能看到内容。\n\nServer如果想加密一段数据给其他人的话，可以用自己的私钥加密，将密文发送给其他人，其他人就能用Server的**公钥去解密**。因为除了Server意外，任何人都不知道Server的私钥，所以其他人可以确信这条消息是Server发出来的。这种行为称之为**签名**。\n\n注意一个问题：**公钥加密的数据可以用私钥解开**且**私钥加密的数据也可以用公钥解开**\n","source":"_posts/openssh_pub_pri.md","raw":"---\ntitle: OpenSSH 配置 免密码登陆 公钥和私钥 私钥签名\ndate: 2016-10-17 14:41\ntags:\n  - Linux\n  - OpenSSH\n  - 公钥\n  - 私钥\n  - 签名\n  - 加密\n  - 非对称加密\n---\n\n\n# 0X00 安装OpenSSH\n一般情况下我们的系统中都是自带SSH服务端和客户端的，万一没有的话就需要我们手动安装这个服务。\n\n`yum install -y openssh`\n\n然后重启OpenSSH服务\n\n`systemctl restart sshd`\n\n# 0X01 两行简单的配置\nOpenSSH的配置文件在`/etc/ssh/`目录下，有两个配置文件，一个是针对服务端的一个是针对客户端的，我们只需要修改针对服务端的`sshd_config`即可。\n\n配置文件里比较重要的两行是`PermitRootLogin`和`PasswordAuthentication`。\n\n* `PermitRootLogin` 当这个值为yes时，才允许root用户使用ssh登陆\n* `PasswordAuthentication` 当这个值为yes时，允许使用密码登陆，反之则拒绝密码登陆(只能使用密钥)。\n\n```config\nPermitRootLogin yes\nPasswordAuthentication yes\n```\n> 这里的配置就允许使用root用户登陆，也允许输入密码登陆\n\n# 0X02 私钥和公钥————非对称加密\n在ssh中可以使用用户名密码的形式登陆，也可以使用密钥的形式登陆。\n\n**非对称加密** 就是说加密和解密用的密码不同。非对称加密里有**公钥**和**私钥**，使用公钥加密的数据只有使用私钥才能解开，虽然是使用公钥加密的，但是并不能通过公钥反向解密。这点和传统的对称加密区别比较大。\n\n下面假设有这么一个场景：有一台服务器S和三个管理员A1、A2、A3。  S生成了自己的一对公钥和私钥，将公钥公开出去，这时候A1就能能看到这个公钥，所以都可以用这个公钥将发给S的数据加密。虽然A2和A3也看到了这个公钥，但是不能通过这个公钥将这个加密的数据解开。数据只有在S上通过对应的私钥才能解开。\n* 公钥：一般是公开出去，并用于加密\n* 私钥：保存在自己这里，用于解密\n> 公钥和私钥是一对的，一个公钥和一个私钥两两对应\n\n# 0X03 在SSH生成公钥和私钥\n在Linux里SSH可以使用公钥和私钥来登陆系统，也就是前面我们说的那个`PasswordAuthentication`选项，如果禁止密码登陆的话就只能使用公钥和私钥登陆了。\n\n`ssh-keygen`可以生成一对公钥和私钥。我们一般在自己用户的主目录里的`.ssh`目录里执行这个命令、执行完了之后会提示输入加密，这里是给公钥私钥加密，可以暂时不用管，一路回车就行了，直到看到一堆乱七八糟的图像，类似于这样就算好了。\n```\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\n09:7c:28:a5:75:sr:ab:5c:82:43:17:81:f8:78:zs:1e root@buyongkan.zhelishi.gaiguode\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|   . .+o.        |\n|  . .=8o.        |\n|   oo+-+.        |\n|  . =.oo..       |\n|   X +  SB.      |\n|    o . o        |\n|     o +         |\n|      )          |\n|                 |\n+-----------------+\n```\n\n`.ssh`目录如果不存在的话，执行一下`ssh localhost`然后输入密码登陆以下本地，就会有了。生成完之后目录里会多出两个文件，`id_rsa` 和 `id_rsa.pub` 后面pub结尾的是public也就是公钥，我们可以打开看看是一堆看似乱码的东西。\n\n# 0X04 使用公钥和私钥免密码登陆\n如果我们有两台机器，一个叫Server一个叫Desktop，我想让Desktop可以免密码登陆到Server上，就可以用这个方法。\n\n原理大概是这样的：在Desktop上生成一对公钥和私钥，然后将Desktop上的公钥追加到Server的`.ssh`目录下的`authorize_keys`里，这个文件就是用来保存可以免密码登录到自己机器上的那些用户的公钥的。\n\n```bash\n[root@iZ28jaak5nnZ .ssh]# ssh-keygen  #生成一对公钥私钥\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\n30:05:7d:63:sf:10:aa:cb:e1:b7:84:48:54:5f:42:4d root@iZ28jaak5nnZ\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|..o o EO+o...    |\n| o = * n. +.     |\n|  + * N  o .     |\n|   S + a         |\n|    . . S        |\n|m            s   |\n|                 |\n|    x            |\n|                 |\n+-----------------+\n[root@iZ28jaak5nnZ .ssh]# ssh-copy-id -i id_rsa.pub root@182.234.214.243 #使用ssh-copy-id来将自己的公钥发送到Server上去，会自动找到那个文件\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nroot@182.254.214.250's password:   # 还没配置好所以要输密码\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'root@182.254.214.250'\"\nand check to make sure that only the key(s) you wanted were added.\n[root@iZ28jaak5nnZ .ssh]# ssh root@182.254.214.250  # 登陆\nLast login: Mon Oct 17 13:47:23 2016 from 43.13.56.7\n☁  ~  hostname  # 成功登陆\nblog.just666.cn\n☁  ~  \n```\n\n# 0X05 使用私钥签名\n公钥私钥对可以对数据加密，是用公钥加密私钥解密。也可以使用公钥私钥对进行数字签名。\n\n当Server公开自己的公钥之后，大家都可以用这个公钥进行加密，然后传给Server，Server用私钥解密就能看到内容。\n\nServer如果想加密一段数据给其他人的话，可以用自己的私钥加密，将密文发送给其他人，其他人就能用Server的**公钥去解密**。因为除了Server意外，任何人都不知道Server的私钥，所以其他人可以确信这条消息是Server发出来的。这种行为称之为**签名**。\n\n注意一个问题：**公钥加密的数据可以用私钥解开**且**私钥加密的数据也可以用公钥解开**\n","slug":"openssh_pub_pri","published":1,"updated":"2017-09-02T14:46:44.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme70018hnlpjtppxf3x","content":"<h1 id=\"0X00-安装OpenSSH\"><a href=\"#0X00-安装OpenSSH\" class=\"headerlink\" title=\"0X00 安装OpenSSH\"></a>0X00 安装OpenSSH</h1><p>一般情况下我们的系统中都是自带SSH服务端和客户端的，万一没有的话就需要我们手动安装这个服务。</p>\n<p><code>yum install -y openssh</code></p>\n<p>然后重启OpenSSH服务</p>\n<p><code>systemctl restart sshd</code></p>\n<h1 id=\"0X01-两行简单的配置\"><a href=\"#0X01-两行简单的配置\" class=\"headerlink\" title=\"0X01 两行简单的配置\"></a>0X01 两行简单的配置</h1><p>OpenSSH的配置文件在<code>/etc/ssh/</code>目录下，有两个配置文件，一个是针对服务端的一个是针对客户端的，我们只需要修改针对服务端的<code>sshd_config</code>即可。</p>\n<p>配置文件里比较重要的两行是<code>PermitRootLogin</code>和<code>PasswordAuthentication</code>。</p>\n<ul>\n<li><code>PermitRootLogin</code> 当这个值为yes时，才允许root用户使用ssh登陆</li>\n<li><code>PasswordAuthentication</code> 当这个值为yes时，允许使用密码登陆，反之则拒绝密码登陆(只能使用密钥)。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PermitRootLogin yes</div><div class=\"line\">PasswordAuthentication yes</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的配置就允许使用root用户登陆，也允许输入密码登陆</p>\n</blockquote>\n<h1 id=\"0X02-私钥和公钥————非对称加密\"><a href=\"#0X02-私钥和公钥————非对称加密\" class=\"headerlink\" title=\"0X02 私钥和公钥————非对称加密\"></a>0X02 私钥和公钥————非对称加密</h1><p>在ssh中可以使用用户名密码的形式登陆，也可以使用密钥的形式登陆。</p>\n<p><strong>非对称加密</strong> 就是说加密和解密用的密码不同。非对称加密里有<strong>公钥</strong>和<strong>私钥</strong>，使用公钥加密的数据只有使用私钥才能解开，虽然是使用公钥加密的，但是并不能通过公钥反向解密。这点和传统的对称加密区别比较大。</p>\n<p>下面假设有这么一个场景：有一台服务器S和三个管理员A1、A2、A3。  S生成了自己的一对公钥和私钥，将公钥公开出去，这时候A1就能能看到这个公钥，所以都可以用这个公钥将发给S的数据加密。虽然A2和A3也看到了这个公钥，但是不能通过这个公钥将这个加密的数据解开。数据只有在S上通过对应的私钥才能解开。</p>\n<ul>\n<li>公钥：一般是公开出去，并用于加密</li>\n<li>私钥：保存在自己这里，用于解密<blockquote>\n<p>公钥和私钥是一对的，一个公钥和一个私钥两两对应</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"0X03-在SSH生成公钥和私钥\"><a href=\"#0X03-在SSH生成公钥和私钥\" class=\"headerlink\" title=\"0X03 在SSH生成公钥和私钥\"></a>0X03 在SSH生成公钥和私钥</h1><p>在Linux里SSH可以使用公钥和私钥来登陆系统，也就是前面我们说的那个<code>PasswordAuthentication</code>选项，如果禁止密码登陆的话就只能使用公钥和私钥登陆了。</p>\n<p><code>ssh-keygen</code>可以生成一对公钥和私钥。我们一般在自己用户的主目录里的<code>.ssh</code>目录里执行这个命令、执行完了之后会提示输入加密，这里是给公钥私钥加密，可以暂时不用管，一路回车就行了，直到看到一堆乱七八糟的图像，类似于这样就算好了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </div><div class=\"line\">Enter passphrase (empty for no passphrase): </div><div class=\"line\">Enter same passphrase again: </div><div class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</div><div class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">09:7c:28:a5:75:sr:ab:5c:82:43:17:81:f8:78:zs:1e root@buyongkan.zhelishi.gaiguode</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+--[ RSA 2048]----+</div><div class=\"line\">|   . .+o.        |</div><div class=\"line\">|  . .=8o.        |</div><div class=\"line\">|   oo+-+.        |</div><div class=\"line\">|  . =.oo..       |</div><div class=\"line\">|   X +  SB.      |</div><div class=\"line\">|    o . o        |</div><div class=\"line\">|     o +         |</div><div class=\"line\">|      )          |</div><div class=\"line\">|                 |</div><div class=\"line\">+-----------------+</div></pre></td></tr></table></figure></p>\n<p><code>.ssh</code>目录如果不存在的话，执行一下<code>ssh localhost</code>然后输入密码登陆以下本地，就会有了。生成完之后目录里会多出两个文件，<code>id_rsa</code> 和 <code>id_rsa.pub</code> 后面pub结尾的是public也就是公钥，我们可以打开看看是一堆看似乱码的东西。</p>\n<h1 id=\"0X04-使用公钥和私钥免密码登陆\"><a href=\"#0X04-使用公钥和私钥免密码登陆\" class=\"headerlink\" title=\"0X04 使用公钥和私钥免密码登陆\"></a>0X04 使用公钥和私钥免密码登陆</h1><p>如果我们有两台机器，一个叫Server一个叫Desktop，我想让Desktop可以免密码登陆到Server上，就可以用这个方法。</p>\n<p>原理大概是这样的：在Desktop上生成一对公钥和私钥，然后将Desktop上的公钥追加到Server的<code>.ssh</code>目录下的<code>authorize_keys</code>里，这个文件就是用来保存可以免密码登录到自己机器上的那些用户的公钥的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ .ssh]<span class=\"comment\"># ssh-keygen  #生成一对公钥私钥</span></div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/root/.ssh/id_rsa): </div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): </div><div class=\"line\">Enter same passphrase again: </div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">30:05:7d:63:sf:10:aa:cb:e1:b7:84:48:54:5f:42:4d root@iZ28jaak5nnZ</div><div class=\"line\">The key<span class=\"string\">'s randomart image is:</span></div><div class=\"line\"><span class=\"string\">+--[ RSA 2048]----+</span></div><div class=\"line\"><span class=\"string\">|..o o EO+o...    |</span></div><div class=\"line\"><span class=\"string\">| o = * n. +.     |</span></div><div class=\"line\"><span class=\"string\">|  + * N  o .     |</span></div><div class=\"line\"><span class=\"string\">|   S + a         |</span></div><div class=\"line\"><span class=\"string\">|    . . S        |</span></div><div class=\"line\"><span class=\"string\">|m            s   |</span></div><div class=\"line\"><span class=\"string\">|                 |</span></div><div class=\"line\"><span class=\"string\">|    x            |</span></div><div class=\"line\"><span class=\"string\">|                 |</span></div><div class=\"line\"><span class=\"string\">+-----------------+</span></div><div class=\"line\"><span class=\"string\">[root@iZ28jaak5nnZ .ssh]# ssh-copy-id -i id_rsa.pub root@182.234.214.243 #使用ssh-copy-id来将自己的公钥发送到Server上去，会自动找到那个文件</span></div><div class=\"line\"><span class=\"string\">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></div><div class=\"line\"><span class=\"string\">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></div><div class=\"line\"><span class=\"string\">root@182.254.214.250'</span>s password:   <span class=\"comment\"># 还没配置好所以要输密码</span></div><div class=\"line\"></div><div class=\"line\">Number of key(s) added: 1</div><div class=\"line\"></div><div class=\"line\">Now try logging into the machine, with:   <span class=\"string\">\"ssh 'root@182.254.214.250'\"</span></div><div class=\"line\">and check to make sure that only the key(s) you wanted were added.</div><div class=\"line\">[root@iZ28jaak5nnZ .ssh]<span class=\"comment\"># ssh root@182.254.214.250  # 登陆</span></div><div class=\"line\">Last login: Mon Oct 17 13:47:23 2016 from 43.13.56.7</div><div class=\"line\">☁  ~  hostname  <span class=\"comment\"># 成功登陆</span></div><div class=\"line\">blog.just666.cn</div><div class=\"line\">☁  ~</div></pre></td></tr></table></figure>\n<h1 id=\"0X05-使用私钥签名\"><a href=\"#0X05-使用私钥签名\" class=\"headerlink\" title=\"0X05 使用私钥签名\"></a>0X05 使用私钥签名</h1><p>公钥私钥对可以对数据加密，是用公钥加密私钥解密。也可以使用公钥私钥对进行数字签名。</p>\n<p>当Server公开自己的公钥之后，大家都可以用这个公钥进行加密，然后传给Server，Server用私钥解密就能看到内容。</p>\n<p>Server如果想加密一段数据给其他人的话，可以用自己的私钥加密，将密文发送给其他人，其他人就能用Server的<strong>公钥去解密</strong>。因为除了Server意外，任何人都不知道Server的私钥，所以其他人可以确信这条消息是Server发出来的。这种行为称之为<strong>签名</strong>。</p>\n<p>注意一个问题：<strong>公钥加密的数据可以用私钥解开</strong>且<strong>私钥加密的数据也可以用公钥解开</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-安装OpenSSH\"><a href=\"#0X00-安装OpenSSH\" class=\"headerlink\" title=\"0X00 安装OpenSSH\"></a>0X00 安装OpenSSH</h1><p>一般情况下我们的系统中都是自带SSH服务端和客户端的，万一没有的话就需要我们手动安装这个服务。</p>\n<p><code>yum install -y openssh</code></p>\n<p>然后重启OpenSSH服务</p>\n<p><code>systemctl restart sshd</code></p>\n<h1 id=\"0X01-两行简单的配置\"><a href=\"#0X01-两行简单的配置\" class=\"headerlink\" title=\"0X01 两行简单的配置\"></a>0X01 两行简单的配置</h1><p>OpenSSH的配置文件在<code>/etc/ssh/</code>目录下，有两个配置文件，一个是针对服务端的一个是针对客户端的，我们只需要修改针对服务端的<code>sshd_config</code>即可。</p>\n<p>配置文件里比较重要的两行是<code>PermitRootLogin</code>和<code>PasswordAuthentication</code>。</p>\n<ul>\n<li><code>PermitRootLogin</code> 当这个值为yes时，才允许root用户使用ssh登陆</li>\n<li><code>PasswordAuthentication</code> 当这个值为yes时，允许使用密码登陆，反之则拒绝密码登陆(只能使用密钥)。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PermitRootLogin yes</div><div class=\"line\">PasswordAuthentication yes</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的配置就允许使用root用户登陆，也允许输入密码登陆</p>\n</blockquote>\n<h1 id=\"0X02-私钥和公钥————非对称加密\"><a href=\"#0X02-私钥和公钥————非对称加密\" class=\"headerlink\" title=\"0X02 私钥和公钥————非对称加密\"></a>0X02 私钥和公钥————非对称加密</h1><p>在ssh中可以使用用户名密码的形式登陆，也可以使用密钥的形式登陆。</p>\n<p><strong>非对称加密</strong> 就是说加密和解密用的密码不同。非对称加密里有<strong>公钥</strong>和<strong>私钥</strong>，使用公钥加密的数据只有使用私钥才能解开，虽然是使用公钥加密的，但是并不能通过公钥反向解密。这点和传统的对称加密区别比较大。</p>\n<p>下面假设有这么一个场景：有一台服务器S和三个管理员A1、A2、A3。  S生成了自己的一对公钥和私钥，将公钥公开出去，这时候A1就能能看到这个公钥，所以都可以用这个公钥将发给S的数据加密。虽然A2和A3也看到了这个公钥，但是不能通过这个公钥将这个加密的数据解开。数据只有在S上通过对应的私钥才能解开。</p>\n<ul>\n<li>公钥：一般是公开出去，并用于加密</li>\n<li>私钥：保存在自己这里，用于解密<blockquote>\n<p>公钥和私钥是一对的，一个公钥和一个私钥两两对应</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"0X03-在SSH生成公钥和私钥\"><a href=\"#0X03-在SSH生成公钥和私钥\" class=\"headerlink\" title=\"0X03 在SSH生成公钥和私钥\"></a>0X03 在SSH生成公钥和私钥</h1><p>在Linux里SSH可以使用公钥和私钥来登陆系统，也就是前面我们说的那个<code>PasswordAuthentication</code>选项，如果禁止密码登陆的话就只能使用公钥和私钥登陆了。</p>\n<p><code>ssh-keygen</code>可以生成一对公钥和私钥。我们一般在自己用户的主目录里的<code>.ssh</code>目录里执行这个命令、执行完了之后会提示输入加密，这里是给公钥私钥加密，可以暂时不用管，一路回车就行了，直到看到一堆乱七八糟的图像，类似于这样就算好了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </div><div class=\"line\">Enter passphrase (empty for no passphrase): </div><div class=\"line\">Enter same passphrase again: </div><div class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.</div><div class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">09:7c:28:a5:75:sr:ab:5c:82:43:17:81:f8:78:zs:1e root@buyongkan.zhelishi.gaiguode</div><div class=\"line\">The key&apos;s randomart image is:</div><div class=\"line\">+--[ RSA 2048]----+</div><div class=\"line\">|   . .+o.        |</div><div class=\"line\">|  . .=8o.        |</div><div class=\"line\">|   oo+-+.        |</div><div class=\"line\">|  . =.oo..       |</div><div class=\"line\">|   X +  SB.      |</div><div class=\"line\">|    o . o        |</div><div class=\"line\">|     o +         |</div><div class=\"line\">|      )          |</div><div class=\"line\">|                 |</div><div class=\"line\">+-----------------+</div></pre></td></tr></table></figure></p>\n<p><code>.ssh</code>目录如果不存在的话，执行一下<code>ssh localhost</code>然后输入密码登陆以下本地，就会有了。生成完之后目录里会多出两个文件，<code>id_rsa</code> 和 <code>id_rsa.pub</code> 后面pub结尾的是public也就是公钥，我们可以打开看看是一堆看似乱码的东西。</p>\n<h1 id=\"0X04-使用公钥和私钥免密码登陆\"><a href=\"#0X04-使用公钥和私钥免密码登陆\" class=\"headerlink\" title=\"0X04 使用公钥和私钥免密码登陆\"></a>0X04 使用公钥和私钥免密码登陆</h1><p>如果我们有两台机器，一个叫Server一个叫Desktop，我想让Desktop可以免密码登陆到Server上，就可以用这个方法。</p>\n<p>原理大概是这样的：在Desktop上生成一对公钥和私钥，然后将Desktop上的公钥追加到Server的<code>.ssh</code>目录下的<code>authorize_keys</code>里，这个文件就是用来保存可以免密码登录到自己机器上的那些用户的公钥的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ .ssh]<span class=\"comment\"># ssh-keygen  #生成一对公钥私钥</span></div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/root/.ssh/id_rsa): </div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): </div><div class=\"line\">Enter same passphrase again: </div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /root/.ssh/id_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">30:05:7d:63:sf:10:aa:cb:e1:b7:84:48:54:5f:42:4d root@iZ28jaak5nnZ</div><div class=\"line\">The key<span class=\"string\">'s randomart image is:</span></div><div class=\"line\"><span class=\"string\">+--[ RSA 2048]----+</span></div><div class=\"line\"><span class=\"string\">|..o o EO+o...    |</span></div><div class=\"line\"><span class=\"string\">| o = * n. +.     |</span></div><div class=\"line\"><span class=\"string\">|  + * N  o .     |</span></div><div class=\"line\"><span class=\"string\">|   S + a         |</span></div><div class=\"line\"><span class=\"string\">|    . . S        |</span></div><div class=\"line\"><span class=\"string\">|m            s   |</span></div><div class=\"line\"><span class=\"string\">|                 |</span></div><div class=\"line\"><span class=\"string\">|    x            |</span></div><div class=\"line\"><span class=\"string\">|                 |</span></div><div class=\"line\"><span class=\"string\">+-----------------+</span></div><div class=\"line\"><span class=\"string\">[root@iZ28jaak5nnZ .ssh]# ssh-copy-id -i id_rsa.pub root@182.234.214.243 #使用ssh-copy-id来将自己的公钥发送到Server上去，会自动找到那个文件</span></div><div class=\"line\"><span class=\"string\">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></div><div class=\"line\"><span class=\"string\">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></div><div class=\"line\"><span class=\"string\">root@182.254.214.250'</span>s password:   <span class=\"comment\"># 还没配置好所以要输密码</span></div><div class=\"line\"></div><div class=\"line\">Number of key(s) added: 1</div><div class=\"line\"></div><div class=\"line\">Now try logging into the machine, with:   <span class=\"string\">\"ssh 'root@182.254.214.250'\"</span></div><div class=\"line\">and check to make sure that only the key(s) you wanted were added.</div><div class=\"line\">[root@iZ28jaak5nnZ .ssh]<span class=\"comment\"># ssh root@182.254.214.250  # 登陆</span></div><div class=\"line\">Last login: Mon Oct 17 13:47:23 2016 from 43.13.56.7</div><div class=\"line\">☁  ~  hostname  <span class=\"comment\"># 成功登陆</span></div><div class=\"line\">blog.just666.cn</div><div class=\"line\">☁  ~</div></pre></td></tr></table></figure>\n<h1 id=\"0X05-使用私钥签名\"><a href=\"#0X05-使用私钥签名\" class=\"headerlink\" title=\"0X05 使用私钥签名\"></a>0X05 使用私钥签名</h1><p>公钥私钥对可以对数据加密，是用公钥加密私钥解密。也可以使用公钥私钥对进行数字签名。</p>\n<p>当Server公开自己的公钥之后，大家都可以用这个公钥进行加密，然后传给Server，Server用私钥解密就能看到内容。</p>\n<p>Server如果想加密一段数据给其他人的话，可以用自己的私钥加密，将密文发送给其他人，其他人就能用Server的<strong>公钥去解密</strong>。因为除了Server意外，任何人都不知道Server的私钥，所以其他人可以确信这条消息是Server发出来的。这种行为称之为<strong>签名</strong>。</p>\n<p>注意一个问题：<strong>公钥加密的数据可以用私钥解开</strong>且<strong>私钥加密的数据也可以用公钥解开</strong></p>\n"},{"title":"Python中的*args和**kwargs","date":"2017-09-05T14:54:55.000Z","_content":"\n# 0X00 \\*args是什么\n我们知道Python3中的print从一个关键字变成了一个函数，那么调用的时候我们可以这样调用这个函数，可以随便接受几个参数。\n```python\n>>> print(1)\n1\n>>> print(1, 2, 3)\n1 2 3\n>>> print(1, \"hello\", 6.66)\n1 hello 6.66\n```\n那么如果我们想自己实现类似这样‘变态’的函数该怎么实现呢？这就需要用到\\*args了，可以将一个非键值对的可变数量的参数列表传给一个函数（换个书佛啊：可以传n个参数给函数，而且n不是固定的），举个例子就容易理解多了。\n```python\ndef say_something(*args):\n    for i in args:\n        print i\n    print '--------'\n\nsay_something(1)\nsay_something(1, 2, 3)\nsay_something('hello')\nsay_something('hello', 'world')\n```\n运行这个例子的输出就是这样的\n```bash\n1\n--------\n1\n2\n3\n--------\nhello\n--------\nhello\nworld\n--------\n```\n\n还有一个更棒的例子[来自Gitbook](https://eastlakeside.gitbooks.io/interpy-zh/content/args_kwargs/Usage_args.html)\n```python\ndef test_var_args(f_arg, *args):\n    print(\"first normal arg:\", f_arg)\n    for arg in args:\n        print(\"another arg through *args:\", arg)\n\ntest_var_args('yasoob', 'python', 'eggs', 'test')\n```\n输出是这样的\n```bash\n('first normal arg:', 'yasoob')\n('another arg through *args:', 'python')\n('another arg through *args:', 'eggs')\n('another arg through *args:', 'test')\n```\n这个例子完整的说明了`\\*args`的用法，我们传入的第一个参数被函数指定的`f_arg`接收到了，其余的都被`*args`接收到了。\n\n\n# 0X01 \\*\\*kwargs是什么\n写代码的时候还会有一种函数调用，大概是这个样子`json.dumps(dict_data)`和`json.dumps(dict_data, indent=4)`。当然，实现这种的方式有一个最简单的方案就是`def dumps(input_data, indent=0)`。在可选参数只有一两个的时候这种方式固然是好用的，但是如果像是requests这种库中的常用方法，有很多很多个可选参数那就该用上这个\\*\\*kwargs了。顾名思义这个就是`keyworkargs`的意思，也就是说是带有key的可变参数。可以这样定义一个函数\n```python\ndef foo(**kwargs):\n    for key in kwargs:\n        print key\n        print kwargs[key]\n        print '-----'\n\nfoo(a=1, b=2, c=3, d=4, e=5)\n```\n运行出来的结果可想而知：\n```bash\na\n1\n-----\nc\n3\n-----\nb\n2\n-----\ne\n5\n-----\nd\n4\n-----\n```\n\n# 0X02 合在一起怎么用\n值得一提的是如何把这两个放在一起用，这里列举个例子来演示一下\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\n\ndef foo(name, sex, *args, **kwargs):\n    print 'name is ', name\n    print 'sex is ', sex\n    print 'other is ', args\n    for key in kwargs:\n        print key, ' is ', kwargs[key]\n\n\ndef bar(*args, **kwargs):\n    print 'args is ', args\n    print 'kwargs is ', kwargs\n\n\nfoo('shawn', '???', 'hello', 'world', hobby='computer', number=666)\nprint '--------------------------'\nbar('shawn', '???', 'hello', 'world', hobby='computer', number=666)\n```\n输出结果是这样的\n```bash\nname is  shawn\nsex is  ???\nother is  ('hello', 'world')\nhobby  is  computer\nnumber  is  666\n--------------------------\nargs is  ('shawn', '???', 'hello', 'world')\nkwargs is  {'hobby': 'computer', 'number': 666}\n```\n\n> 这里有需要注意的一点：参数的名字不一定非要是`*args`和`**kwargs`，所以我们定义函数的时候不一定是`def foo(*args, **kwargs):`，也同样可以定义成`def bar(*hehe, **haha):`，这里真正标识的是星号而不是名字。不过建议命名的时候符合大家的习惯。\n","source":"_posts/python_args_kwargs.md","raw":"---\ntitle: Python中的*args和**kwargs\ndate: 2017-09-05 22:54:55\ntags:\n    - Python\n---\n\n# 0X00 \\*args是什么\n我们知道Python3中的print从一个关键字变成了一个函数，那么调用的时候我们可以这样调用这个函数，可以随便接受几个参数。\n```python\n>>> print(1)\n1\n>>> print(1, 2, 3)\n1 2 3\n>>> print(1, \"hello\", 6.66)\n1 hello 6.66\n```\n那么如果我们想自己实现类似这样‘变态’的函数该怎么实现呢？这就需要用到\\*args了，可以将一个非键值对的可变数量的参数列表传给一个函数（换个书佛啊：可以传n个参数给函数，而且n不是固定的），举个例子就容易理解多了。\n```python\ndef say_something(*args):\n    for i in args:\n        print i\n    print '--------'\n\nsay_something(1)\nsay_something(1, 2, 3)\nsay_something('hello')\nsay_something('hello', 'world')\n```\n运行这个例子的输出就是这样的\n```bash\n1\n--------\n1\n2\n3\n--------\nhello\n--------\nhello\nworld\n--------\n```\n\n还有一个更棒的例子[来自Gitbook](https://eastlakeside.gitbooks.io/interpy-zh/content/args_kwargs/Usage_args.html)\n```python\ndef test_var_args(f_arg, *args):\n    print(\"first normal arg:\", f_arg)\n    for arg in args:\n        print(\"another arg through *args:\", arg)\n\ntest_var_args('yasoob', 'python', 'eggs', 'test')\n```\n输出是这样的\n```bash\n('first normal arg:', 'yasoob')\n('another arg through *args:', 'python')\n('another arg through *args:', 'eggs')\n('another arg through *args:', 'test')\n```\n这个例子完整的说明了`\\*args`的用法，我们传入的第一个参数被函数指定的`f_arg`接收到了，其余的都被`*args`接收到了。\n\n\n# 0X01 \\*\\*kwargs是什么\n写代码的时候还会有一种函数调用，大概是这个样子`json.dumps(dict_data)`和`json.dumps(dict_data, indent=4)`。当然，实现这种的方式有一个最简单的方案就是`def dumps(input_data, indent=0)`。在可选参数只有一两个的时候这种方式固然是好用的，但是如果像是requests这种库中的常用方法，有很多很多个可选参数那就该用上这个\\*\\*kwargs了。顾名思义这个就是`keyworkargs`的意思，也就是说是带有key的可变参数。可以这样定义一个函数\n```python\ndef foo(**kwargs):\n    for key in kwargs:\n        print key\n        print kwargs[key]\n        print '-----'\n\nfoo(a=1, b=2, c=3, d=4, e=5)\n```\n运行出来的结果可想而知：\n```bash\na\n1\n-----\nc\n3\n-----\nb\n2\n-----\ne\n5\n-----\nd\n4\n-----\n```\n\n# 0X02 合在一起怎么用\n值得一提的是如何把这两个放在一起用，这里列举个例子来演示一下\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\n\ndef foo(name, sex, *args, **kwargs):\n    print 'name is ', name\n    print 'sex is ', sex\n    print 'other is ', args\n    for key in kwargs:\n        print key, ' is ', kwargs[key]\n\n\ndef bar(*args, **kwargs):\n    print 'args is ', args\n    print 'kwargs is ', kwargs\n\n\nfoo('shawn', '???', 'hello', 'world', hobby='computer', number=666)\nprint '--------------------------'\nbar('shawn', '???', 'hello', 'world', hobby='computer', number=666)\n```\n输出结果是这样的\n```bash\nname is  shawn\nsex is  ???\nother is  ('hello', 'world')\nhobby  is  computer\nnumber  is  666\n--------------------------\nargs is  ('shawn', '???', 'hello', 'world')\nkwargs is  {'hobby': 'computer', 'number': 666}\n```\n\n> 这里有需要注意的一点：参数的名字不一定非要是`*args`和`**kwargs`，所以我们定义函数的时候不一定是`def foo(*args, **kwargs):`，也同样可以定义成`def bar(*hehe, **haha):`，这里真正标识的是星号而不是名字。不过建议命名的时候符合大家的习惯。\n","slug":"python_args_kwargs","published":1,"updated":"2017-09-05T15:43:46.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme7001ahnlpm2d4thp7","content":"<h1 id=\"0X00-args是什么\"><a href=\"#0X00-args是什么\" class=\"headerlink\" title=\"0X00 *args是什么\"></a>0X00 *args是什么</h1><p>我们知道Python3中的print从一个关键字变成了一个函数，那么调用的时候我们可以这样调用这个函数，可以随便接受几个参数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">1</span>, <span class=\"string\">\"hello\"</span>, <span class=\"number\">6.66</span>)</div><div class=\"line\"><span class=\"number\">1</span> hello <span class=\"number\">6.66</span></div></pre></td></tr></table></figure></p>\n<p>那么如果我们想自己实现类似这样‘变态’的函数该怎么实现呢？这就需要用到*args了，可以将一个非键值对的可变数量的参数列表传给一个函数（换个书佛啊：可以传n个参数给函数，而且n不是固定的），举个例子就容易理解多了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_something</span><span class=\"params\">(*args)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> args:</div><div class=\"line\">        <span class=\"keyword\">print</span> i</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'--------'</span></div><div class=\"line\"></div><div class=\"line\">say_something(<span class=\"number\">1</span>)</div><div class=\"line\">say_something(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">say_something(<span class=\"string\">'hello'</span>)</div><div class=\"line\">say_something(<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>)</div></pre></td></tr></table></figure></p>\n<p>运行这个例子的输出就是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">1</div><div class=\"line\">--------</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">--------</div><div class=\"line\">hello</div><div class=\"line\">--------</div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">--------</div></pre></td></tr></table></figure></p>\n<p>还有一个更棒的例子<a href=\"https://eastlakeside.gitbooks.io/interpy-zh/content/args_kwargs/Usage_args.html\" target=\"_blank\" rel=\"external\">来自Gitbook</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args</span><span class=\"params\">(f_arg, *args)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"first normal arg:\"</span>, f_arg)</div><div class=\"line\">    <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args:</div><div class=\"line\">        print(<span class=\"string\">\"another arg through *args:\"</span>, arg)</div><div class=\"line\"></div><div class=\"line\">test_var_args(<span class=\"string\">'yasoob'</span>, <span class=\"string\">'python'</span>, <span class=\"string\">'eggs'</span>, <span class=\"string\">'test'</span>)</div></pre></td></tr></table></figure></p>\n<p>输出是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"string\">'first normal arg:'</span>, <span class=\"string\">'yasoob'</span>)</div><div class=\"line\">(<span class=\"string\">'another arg through *args:'</span>, <span class=\"string\">'python'</span>)</div><div class=\"line\">(<span class=\"string\">'another arg through *args:'</span>, <span class=\"string\">'eggs'</span>)</div><div class=\"line\">(<span class=\"string\">'another arg through *args:'</span>, <span class=\"string\">'test'</span>)</div></pre></td></tr></table></figure></p>\n<p>这个例子完整的说明了<code>\\*args</code>的用法，我们传入的第一个参数被函数指定的<code>f_arg</code>接收到了，其余的都被<code>*args</code>接收到了。</p>\n<h1 id=\"0X01-kwargs是什么\"><a href=\"#0X01-kwargs是什么\" class=\"headerlink\" title=\"0X01 **kwargs是什么\"></a>0X01 **kwargs是什么</h1><p>写代码的时候还会有一种函数调用，大概是这个样子<code>json.dumps(dict_data)</code>和<code>json.dumps(dict_data, indent=4)</code>。当然，实现这种的方式有一个最简单的方案就是<code>def dumps(input_data, indent=0)</code>。在可选参数只有一两个的时候这种方式固然是好用的，但是如果像是requests这种库中的常用方法，有很多很多个可选参数那就该用上这个**kwargs了。顾名思义这个就是<code>keyworkargs</code>的意思，也就是说是带有key的可变参数。可以这样定义一个函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(**kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> kwargs:</div><div class=\"line\">        <span class=\"keyword\">print</span> key</div><div class=\"line\">        <span class=\"keyword\">print</span> kwargs[key]</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'-----'</span></div><div class=\"line\"></div><div class=\"line\">foo(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>, d=<span class=\"number\">4</span>, e=<span class=\"number\">5</span>)</div></pre></td></tr></table></figure></p>\n<p>运行出来的结果可想而知：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">a</div><div class=\"line\">1</div><div class=\"line\">-----</div><div class=\"line\">c</div><div class=\"line\">3</div><div class=\"line\">-----</div><div class=\"line\">b</div><div class=\"line\">2</div><div class=\"line\">-----</div><div class=\"line\">e</div><div class=\"line\">5</div><div class=\"line\">-----</div><div class=\"line\">d</div><div class=\"line\">4</div><div class=\"line\">-----</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-合在一起怎么用\"><a href=\"#0X02-合在一起怎么用\" class=\"headerlink\" title=\"0X02 合在一起怎么用\"></a>0X02 合在一起怎么用</h1><p>值得一提的是如何把这两个放在一起用，这里列举个例子来演示一下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name, sex, *args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'name is '</span>, name</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'sex is '</span>, sex</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'other is '</span>, args</div><div class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> kwargs:</div><div class=\"line\">        <span class=\"keyword\">print</span> key, <span class=\"string\">' is '</span>, kwargs[key]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'args is '</span>, args</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'kwargs is '</span>, kwargs</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"string\">'shawn'</span>, <span class=\"string\">'???'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, hobby=<span class=\"string\">'computer'</span>, number=<span class=\"number\">666</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'--------------------------'</span></div><div class=\"line\">bar(<span class=\"string\">'shawn'</span>, <span class=\"string\">'???'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, hobby=<span class=\"string\">'computer'</span>, number=<span class=\"number\">666</span>)</div></pre></td></tr></table></figure></p>\n<p>输出结果是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">name is  shawn</div><div class=\"line\">sex is  ???</div><div class=\"line\">other is  (<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>)</div><div class=\"line\">hobby  is  computer</div><div class=\"line\">number  is  666</div><div class=\"line\">--------------------------</div><div class=\"line\">args is  (<span class=\"string\">'shawn'</span>, <span class=\"string\">'???'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>)</div><div class=\"line\">kwargs is  &#123;<span class=\"string\">'hobby'</span>: <span class=\"string\">'computer'</span>, <span class=\"string\">'number'</span>: 666&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里有需要注意的一点：参数的名字不一定非要是<code>*args</code>和<code>**kwargs</code>，所以我们定义函数的时候不一定是<code>def foo(*args, **kwargs):</code>，也同样可以定义成<code>def bar(*hehe, **haha):</code>，这里真正标识的是星号而不是名字。不过建议命名的时候符合大家的习惯。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-args是什么\"><a href=\"#0X00-args是什么\" class=\"headerlink\" title=\"0X00 *args是什么\"></a>0X00 *args是什么</h1><p>我们知道Python3中的print从一个关键字变成了一个函数，那么调用的时候我们可以这样调用这个函数，可以随便接受几个参数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"number\">1</span>, <span class=\"string\">\"hello\"</span>, <span class=\"number\">6.66</span>)</div><div class=\"line\"><span class=\"number\">1</span> hello <span class=\"number\">6.66</span></div></pre></td></tr></table></figure></p>\n<p>那么如果我们想自己实现类似这样‘变态’的函数该怎么实现呢？这就需要用到*args了，可以将一个非键值对的可变数量的参数列表传给一个函数（换个书佛啊：可以传n个参数给函数，而且n不是固定的），举个例子就容易理解多了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_something</span><span class=\"params\">(*args)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> args:</div><div class=\"line\">        <span class=\"keyword\">print</span> i</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'--------'</span></div><div class=\"line\"></div><div class=\"line\">say_something(<span class=\"number\">1</span>)</div><div class=\"line\">say_something(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\">say_something(<span class=\"string\">'hello'</span>)</div><div class=\"line\">say_something(<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>)</div></pre></td></tr></table></figure></p>\n<p>运行这个例子的输出就是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">1</div><div class=\"line\">--------</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">--------</div><div class=\"line\">hello</div><div class=\"line\">--------</div><div class=\"line\">hello</div><div class=\"line\">world</div><div class=\"line\">--------</div></pre></td></tr></table></figure></p>\n<p>还有一个更棒的例子<a href=\"https://eastlakeside.gitbooks.io/interpy-zh/content/args_kwargs/Usage_args.html\" target=\"_blank\" rel=\"external\">来自Gitbook</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args</span><span class=\"params\">(f_arg, *args)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"first normal arg:\"</span>, f_arg)</div><div class=\"line\">    <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args:</div><div class=\"line\">        print(<span class=\"string\">\"another arg through *args:\"</span>, arg)</div><div class=\"line\"></div><div class=\"line\">test_var_args(<span class=\"string\">'yasoob'</span>, <span class=\"string\">'python'</span>, <span class=\"string\">'eggs'</span>, <span class=\"string\">'test'</span>)</div></pre></td></tr></table></figure></p>\n<p>输出是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"string\">'first normal arg:'</span>, <span class=\"string\">'yasoob'</span>)</div><div class=\"line\">(<span class=\"string\">'another arg through *args:'</span>, <span class=\"string\">'python'</span>)</div><div class=\"line\">(<span class=\"string\">'another arg through *args:'</span>, <span class=\"string\">'eggs'</span>)</div><div class=\"line\">(<span class=\"string\">'another arg through *args:'</span>, <span class=\"string\">'test'</span>)</div></pre></td></tr></table></figure></p>\n<p>这个例子完整的说明了<code>\\*args</code>的用法，我们传入的第一个参数被函数指定的<code>f_arg</code>接收到了，其余的都被<code>*args</code>接收到了。</p>\n<h1 id=\"0X01-kwargs是什么\"><a href=\"#0X01-kwargs是什么\" class=\"headerlink\" title=\"0X01 **kwargs是什么\"></a>0X01 **kwargs是什么</h1><p>写代码的时候还会有一种函数调用，大概是这个样子<code>json.dumps(dict_data)</code>和<code>json.dumps(dict_data, indent=4)</code>。当然，实现这种的方式有一个最简单的方案就是<code>def dumps(input_data, indent=0)</code>。在可选参数只有一两个的时候这种方式固然是好用的，但是如果像是requests这种库中的常用方法，有很多很多个可选参数那就该用上这个**kwargs了。顾名思义这个就是<code>keyworkargs</code>的意思，也就是说是带有key的可变参数。可以这样定义一个函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(**kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> kwargs:</div><div class=\"line\">        <span class=\"keyword\">print</span> key</div><div class=\"line\">        <span class=\"keyword\">print</span> kwargs[key]</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'-----'</span></div><div class=\"line\"></div><div class=\"line\">foo(a=<span class=\"number\">1</span>, b=<span class=\"number\">2</span>, c=<span class=\"number\">3</span>, d=<span class=\"number\">4</span>, e=<span class=\"number\">5</span>)</div></pre></td></tr></table></figure></p>\n<p>运行出来的结果可想而知：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">a</div><div class=\"line\">1</div><div class=\"line\">-----</div><div class=\"line\">c</div><div class=\"line\">3</div><div class=\"line\">-----</div><div class=\"line\">b</div><div class=\"line\">2</div><div class=\"line\">-----</div><div class=\"line\">e</div><div class=\"line\">5</div><div class=\"line\">-----</div><div class=\"line\">d</div><div class=\"line\">4</div><div class=\"line\">-----</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-合在一起怎么用\"><a href=\"#0X02-合在一起怎么用\" class=\"headerlink\" title=\"0X02 合在一起怎么用\"></a>0X02 合在一起怎么用</h1><p>值得一提的是如何把这两个放在一起用，这里列举个例子来演示一下<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name, sex, *args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'name is '</span>, name</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'sex is '</span>, sex</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'other is '</span>, args</div><div class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> kwargs:</div><div class=\"line\">        <span class=\"keyword\">print</span> key, <span class=\"string\">' is '</span>, kwargs[key]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'args is '</span>, args</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'kwargs is '</span>, kwargs</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"string\">'shawn'</span>, <span class=\"string\">'???'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, hobby=<span class=\"string\">'computer'</span>, number=<span class=\"number\">666</span>)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'--------------------------'</span></div><div class=\"line\">bar(<span class=\"string\">'shawn'</span>, <span class=\"string\">'???'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, hobby=<span class=\"string\">'computer'</span>, number=<span class=\"number\">666</span>)</div></pre></td></tr></table></figure></p>\n<p>输出结果是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">name is  shawn</div><div class=\"line\">sex is  ???</div><div class=\"line\">other is  (<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>)</div><div class=\"line\">hobby  is  computer</div><div class=\"line\">number  is  666</div><div class=\"line\">--------------------------</div><div class=\"line\">args is  (<span class=\"string\">'shawn'</span>, <span class=\"string\">'???'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>)</div><div class=\"line\">kwargs is  &#123;<span class=\"string\">'hobby'</span>: <span class=\"string\">'computer'</span>, <span class=\"string\">'number'</span>: 666&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里有需要注意的一点：参数的名字不一定非要是<code>*args</code>和<code>**kwargs</code>，所以我们定义函数的时候不一定是<code>def foo(*args, **kwargs):</code>，也同样可以定义成<code>def bar(*hehe, **haha):</code>，这里真正标识的是星号而不是名字。不过建议命名的时候符合大家的习惯。</p>\n</blockquote>\n"},{"title":"Python命令行日历 获取时间 格式化输出","date":"2015-07-06T18:08:00.000Z","_content":"\n实现简单日历\n>读取当前时间并显示本月日历\n>输出格式化\n\n```python\n#!/usr/bin/python2\n\n#It's my first Python program\n\nimport time\n\n#get date 获取当前日期\nyear  = time.strftime('%Y', time.localtime(time.time()))\nyear = (int)(year)\nmonth = time.strftime('%m', time.localtime(time.time()))\nday   = time.strftime('%d', time.localtime(time.time()))\nday = (int)(day)\nweek  = time.strftime('%w', time.localtime(time.time()))\n\nweek = (int)(week)\nfor i in range(0, day - 1):\n    week = week - 1\n    if week == -1:\n        week = 6\n\n#judge leap 判断是否是闰年\nif year % 4 == 0 and year % 400 != 0 or year % 400 == 0 :\n    isLeap = True\nelse :\n    isLeap = False\n\n#all Day这个月一共有多少天\nif month == '01' or month == '03' or month == '05' or month == '07' or month == '08' or month == '10' or month == '12' :\n    allDay = 31\nelif month == '02' and isLeap :\n    allDay = 29\nelif month == '02' and not isLeap :\n    allDay = 28\nelse :\n    allDay = 30\n\n#print CAL  输出这个月的日历\nprint '            ' + str(year) + '   ' + str(month)\nprint ''\nprint 'Sun  Mon  Tue  Wed  Thu  Fri  Sat'\n\nfor i in range(week) :   #print space   输出空白部分\n    print '    ',\n\nfor i in range(1, allDay + 1) :   #print everday  输出日期\n    x = str(i)\n    print '%-4s' % x,\n    week = week + 1\n    if week == 7 :\n        week = 0\n        print\n\nraw_input()\n```\n","source":"_posts/python_cal.md","raw":"---\ntitle: Python命令行日历 获取时间 格式化输出 \ndate: 2015-07-07 02:08\ntags:\n  - Python\n  - Demo\n---\n\n实现简单日历\n>读取当前时间并显示本月日历\n>输出格式化\n\n```python\n#!/usr/bin/python2\n\n#It's my first Python program\n\nimport time\n\n#get date 获取当前日期\nyear  = time.strftime('%Y', time.localtime(time.time()))\nyear = (int)(year)\nmonth = time.strftime('%m', time.localtime(time.time()))\nday   = time.strftime('%d', time.localtime(time.time()))\nday = (int)(day)\nweek  = time.strftime('%w', time.localtime(time.time()))\n\nweek = (int)(week)\nfor i in range(0, day - 1):\n    week = week - 1\n    if week == -1:\n        week = 6\n\n#judge leap 判断是否是闰年\nif year % 4 == 0 and year % 400 != 0 or year % 400 == 0 :\n    isLeap = True\nelse :\n    isLeap = False\n\n#all Day这个月一共有多少天\nif month == '01' or month == '03' or month == '05' or month == '07' or month == '08' or month == '10' or month == '12' :\n    allDay = 31\nelif month == '02' and isLeap :\n    allDay = 29\nelif month == '02' and not isLeap :\n    allDay = 28\nelse :\n    allDay = 30\n\n#print CAL  输出这个月的日历\nprint '            ' + str(year) + '   ' + str(month)\nprint ''\nprint 'Sun  Mon  Tue  Wed  Thu  Fri  Sat'\n\nfor i in range(week) :   #print space   输出空白部分\n    print '    ',\n\nfor i in range(1, allDay + 1) :   #print everday  输出日期\n    x = str(i)\n    print '%-4s' % x,\n    week = week + 1\n    if week == 7 :\n        week = 0\n        print\n\nraw_input()\n```\n","slug":"python_cal","published":1,"updated":"2017-09-02T14:47:22.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kme9001bhnlp0fgzk6nn","content":"<p>实现简单日历</p>\n<blockquote>\n<p>读取当前时间并显示本月日历<br>输出格式化</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#It's my first Python program</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#get date 获取当前日期</span></div><div class=\"line\">year  = time.strftime(<span class=\"string\">'%Y'</span>, time.localtime(time.time()))</div><div class=\"line\">year = (int)(year)</div><div class=\"line\">month = time.strftime(<span class=\"string\">'%m'</span>, time.localtime(time.time()))</div><div class=\"line\">day   = time.strftime(<span class=\"string\">'%d'</span>, time.localtime(time.time()))</div><div class=\"line\">day = (int)(day)</div><div class=\"line\">week  = time.strftime(<span class=\"string\">'%w'</span>, time.localtime(time.time()))</div><div class=\"line\"></div><div class=\"line\">week = (int)(week)</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, day - <span class=\"number\">1</span>):</div><div class=\"line\">    week = week - <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> week == <span class=\"number\">-1</span>:</div><div class=\"line\">        week = <span class=\"number\">6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#judge leap 判断是否是闰年</span></div><div class=\"line\"><span class=\"keyword\">if</span> year % <span class=\"number\">4</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> year % <span class=\"number\">400</span> != <span class=\"number\">0</span> <span class=\"keyword\">or</span> year % <span class=\"number\">400</span> == <span class=\"number\">0</span> :</div><div class=\"line\">    isLeap = <span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"keyword\">else</span> :</div><div class=\"line\">    isLeap = <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#all Day这个月一共有多少天</span></div><div class=\"line\"><span class=\"keyword\">if</span> month == <span class=\"string\">'01'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'03'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'05'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'07'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'08'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'10'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'12'</span> :</div><div class=\"line\">    allDay = <span class=\"number\">31</span></div><div class=\"line\"><span class=\"keyword\">elif</span> month == <span class=\"string\">'02'</span> <span class=\"keyword\">and</span> isLeap :</div><div class=\"line\">    allDay = <span class=\"number\">29</span></div><div class=\"line\"><span class=\"keyword\">elif</span> month == <span class=\"string\">'02'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isLeap :</div><div class=\"line\">    allDay = <span class=\"number\">28</span></div><div class=\"line\"><span class=\"keyword\">else</span> :</div><div class=\"line\">    allDay = <span class=\"number\">30</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#print CAL  输出这个月的日历</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'            '</span> + str(year) + <span class=\"string\">'   '</span> + str(month)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Sun  Mon  Tue  Wed  Thu  Fri  Sat'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(week) :   <span class=\"comment\">#print space   输出空白部分</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'    '</span>,</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, allDay + <span class=\"number\">1</span>) :   <span class=\"comment\">#print everday  输出日期</span></div><div class=\"line\">    x = str(i)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'%-4s'</span> % x,</div><div class=\"line\">    week = week + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> week == <span class=\"number\">7</span> :</div><div class=\"line\">        week = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">print</span></div><div class=\"line\"></div><div class=\"line\">raw_input()</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>实现简单日历</p>\n<blockquote>\n<p>读取当前时间并显示本月日历<br>输出格式化</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#It's my first Python program</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#get date 获取当前日期</span></div><div class=\"line\">year  = time.strftime(<span class=\"string\">'%Y'</span>, time.localtime(time.time()))</div><div class=\"line\">year = (int)(year)</div><div class=\"line\">month = time.strftime(<span class=\"string\">'%m'</span>, time.localtime(time.time()))</div><div class=\"line\">day   = time.strftime(<span class=\"string\">'%d'</span>, time.localtime(time.time()))</div><div class=\"line\">day = (int)(day)</div><div class=\"line\">week  = time.strftime(<span class=\"string\">'%w'</span>, time.localtime(time.time()))</div><div class=\"line\"></div><div class=\"line\">week = (int)(week)</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, day - <span class=\"number\">1</span>):</div><div class=\"line\">    week = week - <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> week == <span class=\"number\">-1</span>:</div><div class=\"line\">        week = <span class=\"number\">6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#judge leap 判断是否是闰年</span></div><div class=\"line\"><span class=\"keyword\">if</span> year % <span class=\"number\">4</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> year % <span class=\"number\">400</span> != <span class=\"number\">0</span> <span class=\"keyword\">or</span> year % <span class=\"number\">400</span> == <span class=\"number\">0</span> :</div><div class=\"line\">    isLeap = <span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"keyword\">else</span> :</div><div class=\"line\">    isLeap = <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#all Day这个月一共有多少天</span></div><div class=\"line\"><span class=\"keyword\">if</span> month == <span class=\"string\">'01'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'03'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'05'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'07'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'08'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'10'</span> <span class=\"keyword\">or</span> month == <span class=\"string\">'12'</span> :</div><div class=\"line\">    allDay = <span class=\"number\">31</span></div><div class=\"line\"><span class=\"keyword\">elif</span> month == <span class=\"string\">'02'</span> <span class=\"keyword\">and</span> isLeap :</div><div class=\"line\">    allDay = <span class=\"number\">29</span></div><div class=\"line\"><span class=\"keyword\">elif</span> month == <span class=\"string\">'02'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isLeap :</div><div class=\"line\">    allDay = <span class=\"number\">28</span></div><div class=\"line\"><span class=\"keyword\">else</span> :</div><div class=\"line\">    allDay = <span class=\"number\">30</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#print CAL  输出这个月的日历</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'            '</span> + str(year) + <span class=\"string\">'   '</span> + str(month)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">''</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Sun  Mon  Tue  Wed  Thu  Fri  Sat'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(week) :   <span class=\"comment\">#print space   输出空白部分</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'    '</span>,</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, allDay + <span class=\"number\">1</span>) :   <span class=\"comment\">#print everday  输出日期</span></div><div class=\"line\">    x = str(i)</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'%-4s'</span> % x,</div><div class=\"line\">    week = week + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> week == <span class=\"number\">7</span> :</div><div class=\"line\">        week = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">print</span></div><div class=\"line\"></div><div class=\"line\">raw_input()</div></pre></td></tr></table></figure>\n"},{"title":"Python 异常处理 捕获异常","date":"2016-10-27T11:36:00.000Z","_content":"\n\n# 0X00 什么是异常\n程序在运行出错的时候就会抛出异常，异常时在正确的代码里发生的，不是代码出现了错误。下面就是一个异常\n```python\n#!/usr/bin/python\n#coding=utf-8\n\nnum_1 = 10\nnum_2 = 0\n# 很明显这里是用一个数字去除以0\n# 小学老师就说过0不能作为被除数\n# 那么我们来看Python是如何处理这个问题的\nnum_3 = num_1 / num_2\nprint num_3\n```\n运行这个程序就会报出下面的错误，错误提示说在`hello.py`这个文件的第6行，出现了一个错误`integer division or modulo by zero`也就是说Python解释器发现你试图除以0或者试图用0取模。\n```bash\nTraceback (most recent call last):\n  File \"./hello.py\", line 6, in <module>\n    num_3 = num_1 / num_2\nZeroDivisionError: integer division or modulo by zero\n```\n这里提示的`ZeroDivisionError`就是一个异常，我们可以在后面捕获这个异常，然后进行一些处理。如果不捕获这个异常的话，程序运行到这里，异常就会直接抛出到用户界面，中断程序的运行。\n\n# 0X01 自己放出一个异常\n我们可以用`raise`抛出一个自己的异常，这样我们可以在调试程序的时候判断到底出了什么错误，通过抛出的异常信息就可以判断。\n```python\n#!/usr/bin/python\n#coding=utf-8\n\nname = raw_input('name: ')\nif name == '':  # 姓名不允许为空\n    raise Exception('name is null') # 抛出一个自定义的Exception内容是name is null\n\nage  = input('age : ')\nif age <= 0:    # 不允许年龄小于等于0\n    raise Exception('age too little') # 爆出一个自顶一个Excep内容是age too little\n\nprint 'name is ' + name\nprint 'age is ' + str(age)\n```\n上面这段代码只是简单地输入name和age两个变量，合法的话就输出出来。我们这里运行一下试试\n```bash\n[root@iZ28jaak5nnZ ~]# ./hello.py \nname: shawn     #合法输入的话，就可以顺利输出\nage : 20\nname is shawn\nage is 20\n[root@iZ28jaak5nnZ ~]# ./hello.py \nname:   # 这里变量内容为空\nTraceback (most recent call last):\n  File \"./hello.py\", line 6, in <module>\n    raise Exception('name is null')     # 就是在我设置的地方抛出了异常\nException: name is null # 异常内容和类型都是我所规定的\n[root@iZ28jaak5nnZ ~]# ./hello.py \nname: shawn\nage : -1\nTraceback (most recent call last):\n  File \"./hello.py\", line 10, in <module>\n    raise Exception('age too little')\nException: age too little\n```\n我们可以用这种方式在自己的代码中抛出异常，用来做中间值检测，防止中间的数据出现意外导致一些不可思议的后果。\n\n# 0X02 捕获异常\n 我们在代码中不管是解释器自己抛出的异常还是你手动抛出的异常，都可以手动的捕获到这个异常，并做出相应的处理。这样就可以提高代码的健壮性。在Python使用`try...except...else`来捕获处理异常。\n ```python\n try:\n     # 这里执行一些可能会抛出异常的代码\n except (ExceptionA, ExceptionB, ExceptionC):   # 一个except可以捕获好多个异常\n     # 当抛出ABC三种异常的时候，执行这里的代码，执行完之后跳出try...except并继续执行代码\n except ExceptD:\n     # 当抛出D异常的时候就会执行这里的代码，执行完后也跳出\n except ExceptE, e:\n     # 当抛出E异常的时候在这里处理，e就是这个异常对象，我们可以看e中的信息\n     print e # 输出e\n except:\n     # 当抛出了一个上面两个except捕获不到的异常的时候，执行这里的操作\n else:\n     # 当没有异常抛出的时候执行这里的代码\n finally:\n     # 不管代码有没有抛出异常，都会执行这里的代码\n ```\n 下面有一个样例，还是除0异常的样例，当除数是0的时候就抛出异常并捕获，然后处理这个异常（提示并重新输入），直到没有除0异常才计算成功并退出程序\n ```python\n #!/usr/bin/python\n #coding=utf-8\n \n while True:\n \tnum_1 = input('num1: ')\n \tnum_2 = input('num2: ')\n \n \ttry:\n \t\tnum_3 = num_1 / num_2\n \texcept ZeroDivisionError:\n \t\tprint 'num_1 is 0 !!!'\n \t\tcontinue\n \telse:\n \t\tprint num_3\n \t\texit()\n ```\n 下面有一个运行样例\n ```bash\n [root@iZ28jaak5nnZ ~]# ./hello.py \n num1: 9\n num2: 0\n num_1 is 0 !!!\n num1: 2\n num2: 0\n num_1 is 0 !!!\n num1: 0\n num2: 0\n num_1 is 0 !!!\n num1: 4\n num2: 2\n 2\n ```\n 当然我们也可以将异常处理完了之后继续抛出，只要你需要。下面的代码和上面的是完全一样的，就只有12行的地方从continue换成了raise，意思就是抛出异常\n ```python\n #!/usr/bin/python\n #coding=utf-8\n \n while True:\n \tnum_1 = input('num1: ')\n \tnum_2 = input('num2: ')\n \n \ttry:\n \t\tnum_3 = num_1 / num_2\n \texcept ZeroDivisionError:\n \t\tprint 'num_1 is 0 !!!'\n \t\traise    # 只有这里是不同的，从continue换成了没有参数的raise，就是把异常继续抛出\n \telse:\n \t\tprint num_3\n \t\texit()\n ```\n 运行的样例就是下面这样的，执行下去之后会执行except中的处理代码，但是由于raise的存在还是会抛出这个异常\n ```bash\n [root@iZ28jaak5nnZ ~]# ./hello.py \n num1: 123\n num2: 0\n num_1 is 0 !!!     # 这里就是except处的处理代码\n Traceback (most recent call last):\n   File \"./hello.py\", line 9, in <module>\n     num_3 = num_1 / num_2\n ZeroDivisionError: integer division or modulo by zero\n ```\n","source":"_posts/python_execption.md","raw":"---\ntitle: Python 异常处理 捕获异常\ndate: 2016-10-27 19:36\ntags:\n  - Python\n  - Exception\n---\n\n\n# 0X00 什么是异常\n程序在运行出错的时候就会抛出异常，异常时在正确的代码里发生的，不是代码出现了错误。下面就是一个异常\n```python\n#!/usr/bin/python\n#coding=utf-8\n\nnum_1 = 10\nnum_2 = 0\n# 很明显这里是用一个数字去除以0\n# 小学老师就说过0不能作为被除数\n# 那么我们来看Python是如何处理这个问题的\nnum_3 = num_1 / num_2\nprint num_3\n```\n运行这个程序就会报出下面的错误，错误提示说在`hello.py`这个文件的第6行，出现了一个错误`integer division or modulo by zero`也就是说Python解释器发现你试图除以0或者试图用0取模。\n```bash\nTraceback (most recent call last):\n  File \"./hello.py\", line 6, in <module>\n    num_3 = num_1 / num_2\nZeroDivisionError: integer division or modulo by zero\n```\n这里提示的`ZeroDivisionError`就是一个异常，我们可以在后面捕获这个异常，然后进行一些处理。如果不捕获这个异常的话，程序运行到这里，异常就会直接抛出到用户界面，中断程序的运行。\n\n# 0X01 自己放出一个异常\n我们可以用`raise`抛出一个自己的异常，这样我们可以在调试程序的时候判断到底出了什么错误，通过抛出的异常信息就可以判断。\n```python\n#!/usr/bin/python\n#coding=utf-8\n\nname = raw_input('name: ')\nif name == '':  # 姓名不允许为空\n    raise Exception('name is null') # 抛出一个自定义的Exception内容是name is null\n\nage  = input('age : ')\nif age <= 0:    # 不允许年龄小于等于0\n    raise Exception('age too little') # 爆出一个自顶一个Excep内容是age too little\n\nprint 'name is ' + name\nprint 'age is ' + str(age)\n```\n上面这段代码只是简单地输入name和age两个变量，合法的话就输出出来。我们这里运行一下试试\n```bash\n[root@iZ28jaak5nnZ ~]# ./hello.py \nname: shawn     #合法输入的话，就可以顺利输出\nage : 20\nname is shawn\nage is 20\n[root@iZ28jaak5nnZ ~]# ./hello.py \nname:   # 这里变量内容为空\nTraceback (most recent call last):\n  File \"./hello.py\", line 6, in <module>\n    raise Exception('name is null')     # 就是在我设置的地方抛出了异常\nException: name is null # 异常内容和类型都是我所规定的\n[root@iZ28jaak5nnZ ~]# ./hello.py \nname: shawn\nage : -1\nTraceback (most recent call last):\n  File \"./hello.py\", line 10, in <module>\n    raise Exception('age too little')\nException: age too little\n```\n我们可以用这种方式在自己的代码中抛出异常，用来做中间值检测，防止中间的数据出现意外导致一些不可思议的后果。\n\n# 0X02 捕获异常\n 我们在代码中不管是解释器自己抛出的异常还是你手动抛出的异常，都可以手动的捕获到这个异常，并做出相应的处理。这样就可以提高代码的健壮性。在Python使用`try...except...else`来捕获处理异常。\n ```python\n try:\n     # 这里执行一些可能会抛出异常的代码\n except (ExceptionA, ExceptionB, ExceptionC):   # 一个except可以捕获好多个异常\n     # 当抛出ABC三种异常的时候，执行这里的代码，执行完之后跳出try...except并继续执行代码\n except ExceptD:\n     # 当抛出D异常的时候就会执行这里的代码，执行完后也跳出\n except ExceptE, e:\n     # 当抛出E异常的时候在这里处理，e就是这个异常对象，我们可以看e中的信息\n     print e # 输出e\n except:\n     # 当抛出了一个上面两个except捕获不到的异常的时候，执行这里的操作\n else:\n     # 当没有异常抛出的时候执行这里的代码\n finally:\n     # 不管代码有没有抛出异常，都会执行这里的代码\n ```\n 下面有一个样例，还是除0异常的样例，当除数是0的时候就抛出异常并捕获，然后处理这个异常（提示并重新输入），直到没有除0异常才计算成功并退出程序\n ```python\n #!/usr/bin/python\n #coding=utf-8\n \n while True:\n \tnum_1 = input('num1: ')\n \tnum_2 = input('num2: ')\n \n \ttry:\n \t\tnum_3 = num_1 / num_2\n \texcept ZeroDivisionError:\n \t\tprint 'num_1 is 0 !!!'\n \t\tcontinue\n \telse:\n \t\tprint num_3\n \t\texit()\n ```\n 下面有一个运行样例\n ```bash\n [root@iZ28jaak5nnZ ~]# ./hello.py \n num1: 9\n num2: 0\n num_1 is 0 !!!\n num1: 2\n num2: 0\n num_1 is 0 !!!\n num1: 0\n num2: 0\n num_1 is 0 !!!\n num1: 4\n num2: 2\n 2\n ```\n 当然我们也可以将异常处理完了之后继续抛出，只要你需要。下面的代码和上面的是完全一样的，就只有12行的地方从continue换成了raise，意思就是抛出异常\n ```python\n #!/usr/bin/python\n #coding=utf-8\n \n while True:\n \tnum_1 = input('num1: ')\n \tnum_2 = input('num2: ')\n \n \ttry:\n \t\tnum_3 = num_1 / num_2\n \texcept ZeroDivisionError:\n \t\tprint 'num_1 is 0 !!!'\n \t\traise    # 只有这里是不同的，从continue换成了没有参数的raise，就是把异常继续抛出\n \telse:\n \t\tprint num_3\n \t\texit()\n ```\n 运行的样例就是下面这样的，执行下去之后会执行except中的处理代码，但是由于raise的存在还是会抛出这个异常\n ```bash\n [root@iZ28jaak5nnZ ~]# ./hello.py \n num1: 123\n num2: 0\n num_1 is 0 !!!     # 这里就是except处的处理代码\n Traceback (most recent call last):\n   File \"./hello.py\", line 9, in <module>\n     num_3 = num_1 / num_2\n ZeroDivisionError: integer division or modulo by zero\n ```\n","slug":"python_execption","published":1,"updated":"2017-09-02T14:47:38.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmea001dhnlpq3fiy6vm","content":"<h1 id=\"0X00-什么是异常\"><a href=\"#0X00-什么是异常\" class=\"headerlink\" title=\"0X00 什么是异常\"></a>0X00 什么是异常</h1><p>程序在运行出错的时候就会抛出异常，异常时在正确的代码里发生的，不是代码出现了错误。下面就是一个异常<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">num_1 = <span class=\"number\">10</span></div><div class=\"line\">num_2 = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\"># 很明显这里是用一个数字去除以0</span></div><div class=\"line\"><span class=\"comment\"># 小学老师就说过0不能作为被除数</span></div><div class=\"line\"><span class=\"comment\"># 那么我们来看Python是如何处理这个问题的</span></div><div class=\"line\">num_3 = num_1 / num_2</div><div class=\"line\"><span class=\"keyword\">print</span> num_3</div></pre></td></tr></table></figure></p>\n<p>运行这个程序就会报出下面的错误，错误提示说在<code>hello.py</code>这个文件的第6行，出现了一个错误<code>integer division or modulo by zero</code>也就是说Python解释器发现你试图除以0或者试图用0取模。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 6, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    num_3 = num_1 / num_2</div><div class=\"line\">ZeroDivisionError: <span class=\"built_in\">integer</span> division or modulo by zero</div></pre></td></tr></table></figure></p>\n<p>这里提示的<code>ZeroDivisionError</code>就是一个异常，我们可以在后面捕获这个异常，然后进行一些处理。如果不捕获这个异常的话，程序运行到这里，异常就会直接抛出到用户界面，中断程序的运行。</p>\n<h1 id=\"0X01-自己放出一个异常\"><a href=\"#0X01-自己放出一个异常\" class=\"headerlink\" title=\"0X01 自己放出一个异常\"></a>0X01 自己放出一个异常</h1><p>我们可以用<code>raise</code>抛出一个自己的异常，这样我们可以在调试程序的时候判断到底出了什么错误，通过抛出的异常信息就可以判断。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">name = raw_input(<span class=\"string\">'name: '</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> name == <span class=\"string\">''</span>:  <span class=\"comment\"># 姓名不允许为空</span></div><div class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'name is null'</span>) <span class=\"comment\"># 抛出一个自定义的Exception内容是name is null</span></div><div class=\"line\"></div><div class=\"line\">age  = input(<span class=\"string\">'age : '</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> age &lt;= <span class=\"number\">0</span>:    <span class=\"comment\"># 不允许年龄小于等于0</span></div><div class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'age too little'</span>) <span class=\"comment\"># 爆出一个自顶一个Excep内容是age too little</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'name is '</span> + name</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'age is '</span> + str(age)</div></pre></td></tr></table></figure></p>\n<p>上面这段代码只是简单地输入name和age两个变量，合法的话就输出出来。我们这里运行一下试试<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">name: shawn     <span class=\"comment\">#合法输入的话，就可以顺利输出</span></div><div class=\"line\">age : 20</div><div class=\"line\">name is shawn</div><div class=\"line\">age is 20</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">name:   <span class=\"comment\"># 这里变量内容为空</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 6, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    raise Exception(<span class=\"string\">'name is null'</span>)     <span class=\"comment\"># 就是在我设置的地方抛出了异常</span></div><div class=\"line\">Exception: name is null <span class=\"comment\"># 异常内容和类型都是我所规定的</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">name: shawn</div><div class=\"line\">age : -1</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 10, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    raise Exception(<span class=\"string\">'age too little'</span>)</div><div class=\"line\">Exception: age too little</div></pre></td></tr></table></figure></p>\n<p>我们可以用这种方式在自己的代码中抛出异常，用来做中间值检测，防止中间的数据出现意外导致一些不可思议的后果。</p>\n<h1 id=\"0X02-捕获异常\"><a href=\"#0X02-捕获异常\" class=\"headerlink\" title=\"0X02 捕获异常\"></a>0X02 捕获异常</h1><p> 我们在代码中不管是解释器自己抛出的异常还是你手动抛出的异常，都可以手动的捕获到这个异常，并做出相应的处理。这样就可以提高代码的健壮性。在Python使用<code>try...except...else</code>来捕获处理异常。<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    <span class=\"comment\"># 这里执行一些可能会抛出异常的代码</span></div><div class=\"line\"><span class=\"keyword\">except</span> (ExceptionA, ExceptionB, ExceptionC):   <span class=\"comment\"># 一个except可以捕获好多个异常</span></div><div class=\"line\">    <span class=\"comment\"># 当抛出ABC三种异常的时候，执行这里的代码，执行完之后跳出try...except并继续执行代码</span></div><div class=\"line\"><span class=\"keyword\">except</span> ExceptD:</div><div class=\"line\">    <span class=\"comment\"># 当抛出D异常的时候就会执行这里的代码，执行完后也跳出</span></div><div class=\"line\"><span class=\"keyword\">except</span> ExceptE, e:</div><div class=\"line\">    <span class=\"comment\"># 当抛出E异常的时候在这里处理，e就是这个异常对象，我们可以看e中的信息</span></div><div class=\"line\">    <span class=\"keyword\">print</span> e <span class=\"comment\"># 输出e</span></div><div class=\"line\"><span class=\"keyword\">except</span>:</div><div class=\"line\">    <span class=\"comment\"># 当抛出了一个上面两个except捕获不到的异常的时候，执行这里的操作</span></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"comment\"># 当没有异常抛出的时候执行这里的代码</span></div><div class=\"line\"><span class=\"keyword\">finally</span>:</div><div class=\"line\">    <span class=\"comment\"># 不管代码有没有抛出异常，都会执行这里的代码</span></div></pre></td></tr></table></figure></p>\n<p> 下面有一个样例，还是除0异常的样例，当除数是0的时候就抛出异常并捕获，然后处理这个异常（提示并重新输入），直到没有除0异常才计算成功并退出程序<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">\tnum_1 = input(<span class=\"string\">'num1: '</span>)</div><div class=\"line\">\tnum_2 = input(<span class=\"string\">'num2: '</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\tnum_3 = num_1 / num_2</div><div class=\"line\">\t<span class=\"keyword\">except</span> ZeroDivisionError:</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">'num_1 is 0 !!!'</span></div><div class=\"line\">\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> num_3</div><div class=\"line\">\t\texit()</div></pre></td></tr></table></figure></p>\n<p> 下面有一个运行样例<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">num1: 9</div><div class=\"line\">num2: 0</div><div class=\"line\">num_1 is 0 !!!</div><div class=\"line\">num1: 2</div><div class=\"line\">num2: 0</div><div class=\"line\">num_1 is 0 !!!</div><div class=\"line\">num1: 0</div><div class=\"line\">num2: 0</div><div class=\"line\">num_1 is 0 !!!</div><div class=\"line\">num1: 4</div><div class=\"line\">num2: 2</div><div class=\"line\">2</div></pre></td></tr></table></figure></p>\n<p> 当然我们也可以将异常处理完了之后继续抛出，只要你需要。下面的代码和上面的是完全一样的，就只有12行的地方从continue换成了raise，意思就是抛出异常<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">\tnum_1 = input(<span class=\"string\">'num1: '</span>)</div><div class=\"line\">\tnum_2 = input(<span class=\"string\">'num2: '</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\tnum_3 = num_1 / num_2</div><div class=\"line\">\t<span class=\"keyword\">except</span> ZeroDivisionError:</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">'num_1 is 0 !!!'</span></div><div class=\"line\">\t\t<span class=\"keyword\">raise</span>    <span class=\"comment\"># 只有这里是不同的，从continue换成了没有参数的raise，就是把异常继续抛出</span></div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> num_3</div><div class=\"line\">\t\texit()</div></pre></td></tr></table></figure></p>\n<p> 运行的样例就是下面这样的，执行下去之后会执行except中的处理代码，但是由于raise的存在还是会抛出这个异常<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">num1: 123</div><div class=\"line\">num2: 0</div><div class=\"line\">num_1 is 0 !!!     <span class=\"comment\"># 这里就是except处的处理代码</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 9, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    num_3 = num_1 / num_2</div><div class=\"line\">ZeroDivisionError: <span class=\"built_in\">integer</span> division or modulo by zero</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-什么是异常\"><a href=\"#0X00-什么是异常\" class=\"headerlink\" title=\"0X00 什么是异常\"></a>0X00 什么是异常</h1><p>程序在运行出错的时候就会抛出异常，异常时在正确的代码里发生的，不是代码出现了错误。下面就是一个异常<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">num_1 = <span class=\"number\">10</span></div><div class=\"line\">num_2 = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\"># 很明显这里是用一个数字去除以0</span></div><div class=\"line\"><span class=\"comment\"># 小学老师就说过0不能作为被除数</span></div><div class=\"line\"><span class=\"comment\"># 那么我们来看Python是如何处理这个问题的</span></div><div class=\"line\">num_3 = num_1 / num_2</div><div class=\"line\"><span class=\"keyword\">print</span> num_3</div></pre></td></tr></table></figure></p>\n<p>运行这个程序就会报出下面的错误，错误提示说在<code>hello.py</code>这个文件的第6行，出现了一个错误<code>integer division or modulo by zero</code>也就是说Python解释器发现你试图除以0或者试图用0取模。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 6, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    num_3 = num_1 / num_2</div><div class=\"line\">ZeroDivisionError: <span class=\"built_in\">integer</span> division or modulo by zero</div></pre></td></tr></table></figure></p>\n<p>这里提示的<code>ZeroDivisionError</code>就是一个异常，我们可以在后面捕获这个异常，然后进行一些处理。如果不捕获这个异常的话，程序运行到这里，异常就会直接抛出到用户界面，中断程序的运行。</p>\n<h1 id=\"0X01-自己放出一个异常\"><a href=\"#0X01-自己放出一个异常\" class=\"headerlink\" title=\"0X01 自己放出一个异常\"></a>0X01 自己放出一个异常</h1><p>我们可以用<code>raise</code>抛出一个自己的异常，这样我们可以在调试程序的时候判断到底出了什么错误，通过抛出的异常信息就可以判断。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\">name = raw_input(<span class=\"string\">'name: '</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> name == <span class=\"string\">''</span>:  <span class=\"comment\"># 姓名不允许为空</span></div><div class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'name is null'</span>) <span class=\"comment\"># 抛出一个自定义的Exception内容是name is null</span></div><div class=\"line\"></div><div class=\"line\">age  = input(<span class=\"string\">'age : '</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> age &lt;= <span class=\"number\">0</span>:    <span class=\"comment\"># 不允许年龄小于等于0</span></div><div class=\"line\">    <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'age too little'</span>) <span class=\"comment\"># 爆出一个自顶一个Excep内容是age too little</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'name is '</span> + name</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'age is '</span> + str(age)</div></pre></td></tr></table></figure></p>\n<p>上面这段代码只是简单地输入name和age两个变量，合法的话就输出出来。我们这里运行一下试试<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">name: shawn     <span class=\"comment\">#合法输入的话，就可以顺利输出</span></div><div class=\"line\">age : 20</div><div class=\"line\">name is shawn</div><div class=\"line\">age is 20</div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">name:   <span class=\"comment\"># 这里变量内容为空</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 6, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    raise Exception(<span class=\"string\">'name is null'</span>)     <span class=\"comment\"># 就是在我设置的地方抛出了异常</span></div><div class=\"line\">Exception: name is null <span class=\"comment\"># 异常内容和类型都是我所规定的</span></div><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">name: shawn</div><div class=\"line\">age : -1</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 10, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    raise Exception(<span class=\"string\">'age too little'</span>)</div><div class=\"line\">Exception: age too little</div></pre></td></tr></table></figure></p>\n<p>我们可以用这种方式在自己的代码中抛出异常，用来做中间值检测，防止中间的数据出现意外导致一些不可思议的后果。</p>\n<h1 id=\"0X02-捕获异常\"><a href=\"#0X02-捕获异常\" class=\"headerlink\" title=\"0X02 捕获异常\"></a>0X02 捕获异常</h1><p> 我们在代码中不管是解释器自己抛出的异常还是你手动抛出的异常，都可以手动的捕获到这个异常，并做出相应的处理。这样就可以提高代码的健壮性。在Python使用<code>try...except...else</code>来捕获处理异常。<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    <span class=\"comment\"># 这里执行一些可能会抛出异常的代码</span></div><div class=\"line\"><span class=\"keyword\">except</span> (ExceptionA, ExceptionB, ExceptionC):   <span class=\"comment\"># 一个except可以捕获好多个异常</span></div><div class=\"line\">    <span class=\"comment\"># 当抛出ABC三种异常的时候，执行这里的代码，执行完之后跳出try...except并继续执行代码</span></div><div class=\"line\"><span class=\"keyword\">except</span> ExceptD:</div><div class=\"line\">    <span class=\"comment\"># 当抛出D异常的时候就会执行这里的代码，执行完后也跳出</span></div><div class=\"line\"><span class=\"keyword\">except</span> ExceptE, e:</div><div class=\"line\">    <span class=\"comment\"># 当抛出E异常的时候在这里处理，e就是这个异常对象，我们可以看e中的信息</span></div><div class=\"line\">    <span class=\"keyword\">print</span> e <span class=\"comment\"># 输出e</span></div><div class=\"line\"><span class=\"keyword\">except</span>:</div><div class=\"line\">    <span class=\"comment\"># 当抛出了一个上面两个except捕获不到的异常的时候，执行这里的操作</span></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"comment\"># 当没有异常抛出的时候执行这里的代码</span></div><div class=\"line\"><span class=\"keyword\">finally</span>:</div><div class=\"line\">    <span class=\"comment\"># 不管代码有没有抛出异常，都会执行这里的代码</span></div></pre></td></tr></table></figure></p>\n<p> 下面有一个样例，还是除0异常的样例，当除数是0的时候就抛出异常并捕获，然后处理这个异常（提示并重新输入），直到没有除0异常才计算成功并退出程序<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">\tnum_1 = input(<span class=\"string\">'num1: '</span>)</div><div class=\"line\">\tnum_2 = input(<span class=\"string\">'num2: '</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\tnum_3 = num_1 / num_2</div><div class=\"line\">\t<span class=\"keyword\">except</span> ZeroDivisionError:</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">'num_1 is 0 !!!'</span></div><div class=\"line\">\t\t<span class=\"keyword\">continue</span></div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> num_3</div><div class=\"line\">\t\texit()</div></pre></td></tr></table></figure></p>\n<p> 下面有一个运行样例<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">num1: 9</div><div class=\"line\">num2: 0</div><div class=\"line\">num_1 is 0 !!!</div><div class=\"line\">num1: 2</div><div class=\"line\">num2: 0</div><div class=\"line\">num_1 is 0 !!!</div><div class=\"line\">num1: 0</div><div class=\"line\">num2: 0</div><div class=\"line\">num_1 is 0 !!!</div><div class=\"line\">num1: 4</div><div class=\"line\">num2: 2</div><div class=\"line\">2</div></pre></td></tr></table></figure></p>\n<p> 当然我们也可以将异常处理完了之后继续抛出，只要你需要。下面的代码和上面的是完全一样的，就只有12行的地方从continue换成了raise，意思就是抛出异常<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\">#coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">\tnum_1 = input(<span class=\"string\">'num1: '</span>)</div><div class=\"line\">\tnum_2 = input(<span class=\"string\">'num2: '</span>)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\tnum_3 = num_1 / num_2</div><div class=\"line\">\t<span class=\"keyword\">except</span> ZeroDivisionError:</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">'num_1 is 0 !!!'</span></div><div class=\"line\">\t\t<span class=\"keyword\">raise</span>    <span class=\"comment\"># 只有这里是不同的，从continue换成了没有参数的raise，就是把异常继续抛出</span></div><div class=\"line\">\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> num_3</div><div class=\"line\">\t\texit()</div></pre></td></tr></table></figure></p>\n<p> 运行的样例就是下面这样的，执行下去之后会执行except中的处理代码，但是由于raise的存在还是会抛出这个异常<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@iZ28jaak5nnZ ~]<span class=\"comment\"># ./hello.py </span></div><div class=\"line\">num1: 123</div><div class=\"line\">num2: 0</div><div class=\"line\">num_1 is 0 !!!     <span class=\"comment\"># 这里就是except处的处理代码</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 9, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    num_3 = num_1 / num_2</div><div class=\"line\">ZeroDivisionError: <span class=\"built_in\">integer</span> division or modulo by zero</div></pre></td></tr></table></figure></p>\n"},{"title":"简述几种简单的页面置换算法","date":"2016-12-15T09:14:00.000Z","_content":"\n# 0X00 最优算法---不可能实现算法\n最优算法听起来很棒，但是 **实现起来是不可能的** 。最优算法是：当发生缺页中断时，将最晚会用到的页换出。也就是说，有三个页，现在发生了缺页中断，第一个页在第201条指令的时候会用到，第二个页在第5001条指令的时候会用到，第三个页在第20000条指令的时候会用到，那么第三个页面就是最晚会被用到的，就将其换出。这样确实是最好的效率，但是真正实现不了的原因是：程序不可能知道自己在什么时候需要哪些内存，所以就不能找到最晚会被用到的页。因为要用未来的事情来判断所以我一般称之为未来算法。虽说实现不了，也不是说这个算法就没意义了。这个算法最大的意义就在于可以比较效率。效率越是接近最优算法的就越好，当一个算法已经能达到最优算法效率的101%时，就没必要累死累活的去优化效率了，可以去找一些别的瓶颈了。\n\n# 0X01 最近未使用---NRU\n如果说最优算法叫未来算法的话，那么这个最近未使用就可以叫做历史算法，这样就好理解了。当系统发生缺页中断的时候，在内存中找到最久没被用过的页，将其换出。有一种实现方法：给每一个页设置一个 **R(read)位和M(modify)位** 。当一个进程启动的时候将这个进程的所有页的RM位都设置为0。然后每访问一个页就将R位置为1，每修改一个页就将M置为1。系统每隔一段时间就将所有页的R置为0。那么这里就会出现四种页，其实这里只是一个表示，比如第1类。不可能出现一个没被访问就修改的页，但是第3类页经过一段时间之后将R置为0的话就是第1类了。\n```bash\n类别   |    访问   |   修改    | R | M\n--------------------------------------\n第0类：| 没有被访问 | 没有被修改 | 0 | 0 \n第1类：| 没有被访问 | 已经被修改 | 0 | 1 \n第2类：| 已经被访问 | 没有被修改 | 1 | 0 \n第3类：| 已经被访问 | 已经被修改 | 1 | 1 \n--------------------------------------\n```\n现在内存中的每个页都是这0到4的其中一种。那么当发生缺页中断的时候，NRU算法就会从类别编号最小的一堆页中 **随机** 换出。\n\n# 0X02 先进先出---队列置换算法 FIFO\n这种算法相对容易实现，就像是数据结构中的 **队列** 一样。每次的新页放在队列尾部，当发生缺页中断时将队列头部的页踢掉，将新页放到队列尾部。这种算法有一个非常严重的问题就是会踢掉一些必要的页，比如操作系统核心功能。想想系统启动的时候，首先加入了10000个页以用来运行操作系统，但是发生缺页中断的时候就会将核心页换出去，然后因为核心页被换出去了就需要再换进来，有可能就造成了连续10000个页从队首换到了队尾，产生了20000个操作。\n\n# 0X03 第二次机会---FIFO改进\n因为FIFO会将所有队尾直接踢出去，第二次机会就是给了每个页面再一次机会。也就是说：每个页面还是有一个R位，然后有一个时间位用来记录装入时间。每当发生缺页中断的时候查看队首页的R值，如果R值为0那么就将其换出，否则就将其R值设置为0，并设置‘装入时间’（在哪个时钟的时候装入的），然后再从队首的下一个页开始判断。\n\n# 0X04 时钟算法---CLOCK\n因为二次机会算法还是基于单向链表的，所以会经常需要在链表中移动页面，虽然是在内存中操作但还是会浪费资源。这里就把单向链表改成了 **环形链表** 。当发生缺页中断的时候，检查指针指向的页面，如果页的R位是0则提出这个页面将新的页加到这个位置，并设置R位为1；否则就将当前的R位设置为0并将指针下移。所以时钟算法也可以理解成是第二次机会算法的改进版本。\n\n![时钟算法](http://qiniu.just666.cn//article/image/clock.png)\n> 图片来源：《现代操作系统》 Andrew S. Tanenbaum\n\n# 0X05 最近最少使用置换算法---LRU\n有这样一种情况：“在前面几条指令中频繁使用的页很可能在后面的及条指令中被使用”，所以说已经很久没有用过的页很可能在未来的一段时间内也不会被用到。所以可以在发生缺页中断的时候将最久未使用的页替换出去。为了实现LRU算法需要将所有页串成一个链表，链表的一端是最常使用的页，另一端则是最不常用的页，每次调用一个页的时候都要将整个链表更新，但移动整个链表是很慢的。\n\n可以通过特殊硬件来实现LRU。\n\n第一种方案：这里需要一个64位的计数器，计数器在每条指令执行完成之后自动加一，且每个页表项中需要需要足够容纳这个计数器。在每次访问内存的时候将当前计数器的值赋值给该页表项的对应区域。当发生缺页中断的时候找到每个页表项中该值最小的，这个页表项就是最近最少使用的。\n\n需要注意的一点是： **这个计数器只有一个** 而不是每个页表项一个；每个页表项里只是有一个可以容纳这个计数器的位置，也就是说要有一个64位的空间来保存数字。这里保存的数字不会随着指令的执行而自增，随着指令执行自增的就只有那个唯一的计数器。\n\n第二种方案：假设某机器有n个页框，那么LRU硬件就是一个n \\* n的矩阵，初始化为零矩阵。当访问页框k时 **先** 将k行全部置1， **再** 将k列全部置0。在任意时间二进制数值最小的行就是最近最少使用的，第二小的就是下一个最近最少使用的。\n\n# 0X06 最不常用置换算法---NFU\n因为LRU算法需要独立的硬件设备，然而大多数计算机并没有这种硬件，所以需要一个能用软件实现的解决方案。这种成为NFU的最不常用置换算法就是一种使用软件模拟LRU的实现。在NFU中针对每一个页设置一个计数器，每当发生缺页中断时刷新所有的页对应的计数器，先将每一个页的R值（R值用来标识该页是否用过，为0或1）加到计数器上，再将R置0。这个计数器基本可以反映某个页的使用频率。当发生缺页中断的时候就可以踢出计数器最小的页。\n\n这个算法的一大问题就是：记忆力太强。比如说我开机的时候开机相关的页可能调用了10万次，开机之后其他的东西并没有这么高的使用率，但是因为这些页的计数器太大了，所以不会被轻易踢出去，就会导致有一批‘元老页’滞留在内存中浪费空间。\n\n可以通过一个简单的小修改解决这个问题：首先在R值加到计数器之前先将计数器右移一位（二进制移位，最后一位抛掉），其次将R位加入到计数器的最左端，而不是最右端（简单的NFU是加入到最右端的）。经过这种修改的算法称之为 **老化算法** 。因为这种算法中新的操作会对计数器产生较大的影响，可以让以前的计数器迅速变老，所以称为老化算法。\n","source":"_posts/page_swap.md","raw":"---\ntitle: 简述几种简单的页面置换算法\ndate: 2016-12-15 17:14\ntags:\n  - 操作系统\n  - 算法\n  - 虚拟内存\n---\n\n# 0X00 最优算法---不可能实现算法\n最优算法听起来很棒，但是 **实现起来是不可能的** 。最优算法是：当发生缺页中断时，将最晚会用到的页换出。也就是说，有三个页，现在发生了缺页中断，第一个页在第201条指令的时候会用到，第二个页在第5001条指令的时候会用到，第三个页在第20000条指令的时候会用到，那么第三个页面就是最晚会被用到的，就将其换出。这样确实是最好的效率，但是真正实现不了的原因是：程序不可能知道自己在什么时候需要哪些内存，所以就不能找到最晚会被用到的页。因为要用未来的事情来判断所以我一般称之为未来算法。虽说实现不了，也不是说这个算法就没意义了。这个算法最大的意义就在于可以比较效率。效率越是接近最优算法的就越好，当一个算法已经能达到最优算法效率的101%时，就没必要累死累活的去优化效率了，可以去找一些别的瓶颈了。\n\n# 0X01 最近未使用---NRU\n如果说最优算法叫未来算法的话，那么这个最近未使用就可以叫做历史算法，这样就好理解了。当系统发生缺页中断的时候，在内存中找到最久没被用过的页，将其换出。有一种实现方法：给每一个页设置一个 **R(read)位和M(modify)位** 。当一个进程启动的时候将这个进程的所有页的RM位都设置为0。然后每访问一个页就将R位置为1，每修改一个页就将M置为1。系统每隔一段时间就将所有页的R置为0。那么这里就会出现四种页，其实这里只是一个表示，比如第1类。不可能出现一个没被访问就修改的页，但是第3类页经过一段时间之后将R置为0的话就是第1类了。\n```bash\n类别   |    访问   |   修改    | R | M\n--------------------------------------\n第0类：| 没有被访问 | 没有被修改 | 0 | 0 \n第1类：| 没有被访问 | 已经被修改 | 0 | 1 \n第2类：| 已经被访问 | 没有被修改 | 1 | 0 \n第3类：| 已经被访问 | 已经被修改 | 1 | 1 \n--------------------------------------\n```\n现在内存中的每个页都是这0到4的其中一种。那么当发生缺页中断的时候，NRU算法就会从类别编号最小的一堆页中 **随机** 换出。\n\n# 0X02 先进先出---队列置换算法 FIFO\n这种算法相对容易实现，就像是数据结构中的 **队列** 一样。每次的新页放在队列尾部，当发生缺页中断时将队列头部的页踢掉，将新页放到队列尾部。这种算法有一个非常严重的问题就是会踢掉一些必要的页，比如操作系统核心功能。想想系统启动的时候，首先加入了10000个页以用来运行操作系统，但是发生缺页中断的时候就会将核心页换出去，然后因为核心页被换出去了就需要再换进来，有可能就造成了连续10000个页从队首换到了队尾，产生了20000个操作。\n\n# 0X03 第二次机会---FIFO改进\n因为FIFO会将所有队尾直接踢出去，第二次机会就是给了每个页面再一次机会。也就是说：每个页面还是有一个R位，然后有一个时间位用来记录装入时间。每当发生缺页中断的时候查看队首页的R值，如果R值为0那么就将其换出，否则就将其R值设置为0，并设置‘装入时间’（在哪个时钟的时候装入的），然后再从队首的下一个页开始判断。\n\n# 0X04 时钟算法---CLOCK\n因为二次机会算法还是基于单向链表的，所以会经常需要在链表中移动页面，虽然是在内存中操作但还是会浪费资源。这里就把单向链表改成了 **环形链表** 。当发生缺页中断的时候，检查指针指向的页面，如果页的R位是0则提出这个页面将新的页加到这个位置，并设置R位为1；否则就将当前的R位设置为0并将指针下移。所以时钟算法也可以理解成是第二次机会算法的改进版本。\n\n![时钟算法](http://qiniu.just666.cn//article/image/clock.png)\n> 图片来源：《现代操作系统》 Andrew S. Tanenbaum\n\n# 0X05 最近最少使用置换算法---LRU\n有这样一种情况：“在前面几条指令中频繁使用的页很可能在后面的及条指令中被使用”，所以说已经很久没有用过的页很可能在未来的一段时间内也不会被用到。所以可以在发生缺页中断的时候将最久未使用的页替换出去。为了实现LRU算法需要将所有页串成一个链表，链表的一端是最常使用的页，另一端则是最不常用的页，每次调用一个页的时候都要将整个链表更新，但移动整个链表是很慢的。\n\n可以通过特殊硬件来实现LRU。\n\n第一种方案：这里需要一个64位的计数器，计数器在每条指令执行完成之后自动加一，且每个页表项中需要需要足够容纳这个计数器。在每次访问内存的时候将当前计数器的值赋值给该页表项的对应区域。当发生缺页中断的时候找到每个页表项中该值最小的，这个页表项就是最近最少使用的。\n\n需要注意的一点是： **这个计数器只有一个** 而不是每个页表项一个；每个页表项里只是有一个可以容纳这个计数器的位置，也就是说要有一个64位的空间来保存数字。这里保存的数字不会随着指令的执行而自增，随着指令执行自增的就只有那个唯一的计数器。\n\n第二种方案：假设某机器有n个页框，那么LRU硬件就是一个n \\* n的矩阵，初始化为零矩阵。当访问页框k时 **先** 将k行全部置1， **再** 将k列全部置0。在任意时间二进制数值最小的行就是最近最少使用的，第二小的就是下一个最近最少使用的。\n\n# 0X06 最不常用置换算法---NFU\n因为LRU算法需要独立的硬件设备，然而大多数计算机并没有这种硬件，所以需要一个能用软件实现的解决方案。这种成为NFU的最不常用置换算法就是一种使用软件模拟LRU的实现。在NFU中针对每一个页设置一个计数器，每当发生缺页中断时刷新所有的页对应的计数器，先将每一个页的R值（R值用来标识该页是否用过，为0或1）加到计数器上，再将R置0。这个计数器基本可以反映某个页的使用频率。当发生缺页中断的时候就可以踢出计数器最小的页。\n\n这个算法的一大问题就是：记忆力太强。比如说我开机的时候开机相关的页可能调用了10万次，开机之后其他的东西并没有这么高的使用率，但是因为这些页的计数器太大了，所以不会被轻易踢出去，就会导致有一批‘元老页’滞留在内存中浪费空间。\n\n可以通过一个简单的小修改解决这个问题：首先在R值加到计数器之前先将计数器右移一位（二进制移位，最后一位抛掉），其次将R位加入到计数器的最左端，而不是最右端（简单的NFU是加入到最右端的）。经过这种修改的算法称之为 **老化算法** 。因为这种算法中新的操作会对计数器产生较大的影响，可以让以前的计数器迅速变老，所以称为老化算法。\n","slug":"page_swap","published":1,"updated":"2017-09-02T14:47:07.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmeb001ehnlp5vcethfx","content":"<h1 id=\"0X00-最优算法—不可能实现算法\"><a href=\"#0X00-最优算法—不可能实现算法\" class=\"headerlink\" title=\"0X00 最优算法—不可能实现算法\"></a>0X00 最优算法—不可能实现算法</h1><p>最优算法听起来很棒，但是 <strong>实现起来是不可能的</strong> 。最优算法是：当发生缺页中断时，将最晚会用到的页换出。也就是说，有三个页，现在发生了缺页中断，第一个页在第201条指令的时候会用到，第二个页在第5001条指令的时候会用到，第三个页在第20000条指令的时候会用到，那么第三个页面就是最晚会被用到的，就将其换出。这样确实是最好的效率，但是真正实现不了的原因是：程序不可能知道自己在什么时候需要哪些内存，所以就不能找到最晚会被用到的页。因为要用未来的事情来判断所以我一般称之为未来算法。虽说实现不了，也不是说这个算法就没意义了。这个算法最大的意义就在于可以比较效率。效率越是接近最优算法的就越好，当一个算法已经能达到最优算法效率的101%时，就没必要累死累活的去优化效率了，可以去找一些别的瓶颈了。</p>\n<h1 id=\"0X01-最近未使用—NRU\"><a href=\"#0X01-最近未使用—NRU\" class=\"headerlink\" title=\"0X01 最近未使用—NRU\"></a>0X01 最近未使用—NRU</h1><p>如果说最优算法叫未来算法的话，那么这个最近未使用就可以叫做历史算法，这样就好理解了。当系统发生缺页中断的时候，在内存中找到最久没被用过的页，将其换出。有一种实现方法：给每一个页设置一个 <strong>R(read)位和M(modify)位</strong> 。当一个进程启动的时候将这个进程的所有页的RM位都设置为0。然后每访问一个页就将R位置为1，每修改一个页就将M置为1。系统每隔一段时间就将所有页的R置为0。那么这里就会出现四种页，其实这里只是一个表示，比如第1类。不可能出现一个没被访问就修改的页，但是第3类页经过一段时间之后将R置为0的话就是第1类了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">类别   |    访问   |   修改    | R | M</div><div class=\"line\">--------------------------------------</div><div class=\"line\">第0类：| 没有被访问 | 没有被修改 | 0 | 0 </div><div class=\"line\">第1类：| 没有被访问 | 已经被修改 | 0 | 1 </div><div class=\"line\">第2类：| 已经被访问 | 没有被修改 | 1 | 0 </div><div class=\"line\">第3类：| 已经被访问 | 已经被修改 | 1 | 1 </div><div class=\"line\">--------------------------------------</div></pre></td></tr></table></figure></p>\n<p>现在内存中的每个页都是这0到4的其中一种。那么当发生缺页中断的时候，NRU算法就会从类别编号最小的一堆页中 <strong>随机</strong> 换出。</p>\n<h1 id=\"0X02-先进先出—队列置换算法-FIFO\"><a href=\"#0X02-先进先出—队列置换算法-FIFO\" class=\"headerlink\" title=\"0X02 先进先出—队列置换算法 FIFO\"></a>0X02 先进先出—队列置换算法 FIFO</h1><p>这种算法相对容易实现，就像是数据结构中的 <strong>队列</strong> 一样。每次的新页放在队列尾部，当发生缺页中断时将队列头部的页踢掉，将新页放到队列尾部。这种算法有一个非常严重的问题就是会踢掉一些必要的页，比如操作系统核心功能。想想系统启动的时候，首先加入了10000个页以用来运行操作系统，但是发生缺页中断的时候就会将核心页换出去，然后因为核心页被换出去了就需要再换进来，有可能就造成了连续10000个页从队首换到了队尾，产生了20000个操作。</p>\n<h1 id=\"0X03-第二次机会—FIFO改进\"><a href=\"#0X03-第二次机会—FIFO改进\" class=\"headerlink\" title=\"0X03 第二次机会—FIFO改进\"></a>0X03 第二次机会—FIFO改进</h1><p>因为FIFO会将所有队尾直接踢出去，第二次机会就是给了每个页面再一次机会。也就是说：每个页面还是有一个R位，然后有一个时间位用来记录装入时间。每当发生缺页中断的时候查看队首页的R值，如果R值为0那么就将其换出，否则就将其R值设置为0，并设置‘装入时间’（在哪个时钟的时候装入的），然后再从队首的下一个页开始判断。</p>\n<h1 id=\"0X04-时钟算法—CLOCK\"><a href=\"#0X04-时钟算法—CLOCK\" class=\"headerlink\" title=\"0X04 时钟算法—CLOCK\"></a>0X04 时钟算法—CLOCK</h1><p>因为二次机会算法还是基于单向链表的，所以会经常需要在链表中移动页面，虽然是在内存中操作但还是会浪费资源。这里就把单向链表改成了 <strong>环形链表</strong> 。当发生缺页中断的时候，检查指针指向的页面，如果页的R位是0则提出这个页面将新的页加到这个位置，并设置R位为1；否则就将当前的R位设置为0并将指针下移。所以时钟算法也可以理解成是第二次机会算法的改进版本。</p>\n<p><img src=\"http://qiniu.just666.cn//article/image/clock.png\" alt=\"时钟算法\"></p>\n<blockquote>\n<p>图片来源：《现代操作系统》 Andrew S. Tanenbaum</p>\n</blockquote>\n<h1 id=\"0X05-最近最少使用置换算法—LRU\"><a href=\"#0X05-最近最少使用置换算法—LRU\" class=\"headerlink\" title=\"0X05 最近最少使用置换算法—LRU\"></a>0X05 最近最少使用置换算法—LRU</h1><p>有这样一种情况：“在前面几条指令中频繁使用的页很可能在后面的及条指令中被使用”，所以说已经很久没有用过的页很可能在未来的一段时间内也不会被用到。所以可以在发生缺页中断的时候将最久未使用的页替换出去。为了实现LRU算法需要将所有页串成一个链表，链表的一端是最常使用的页，另一端则是最不常用的页，每次调用一个页的时候都要将整个链表更新，但移动整个链表是很慢的。</p>\n<p>可以通过特殊硬件来实现LRU。</p>\n<p>第一种方案：这里需要一个64位的计数器，计数器在每条指令执行完成之后自动加一，且每个页表项中需要需要足够容纳这个计数器。在每次访问内存的时候将当前计数器的值赋值给该页表项的对应区域。当发生缺页中断的时候找到每个页表项中该值最小的，这个页表项就是最近最少使用的。</p>\n<p>需要注意的一点是： <strong>这个计数器只有一个</strong> 而不是每个页表项一个；每个页表项里只是有一个可以容纳这个计数器的位置，也就是说要有一个64位的空间来保存数字。这里保存的数字不会随着指令的执行而自增，随着指令执行自增的就只有那个唯一的计数器。</p>\n<p>第二种方案：假设某机器有n个页框，那么LRU硬件就是一个n * n的矩阵，初始化为零矩阵。当访问页框k时 <strong>先</strong> 将k行全部置1， <strong>再</strong> 将k列全部置0。在任意时间二进制数值最小的行就是最近最少使用的，第二小的就是下一个最近最少使用的。</p>\n<h1 id=\"0X06-最不常用置换算法—NFU\"><a href=\"#0X06-最不常用置换算法—NFU\" class=\"headerlink\" title=\"0X06 最不常用置换算法—NFU\"></a>0X06 最不常用置换算法—NFU</h1><p>因为LRU算法需要独立的硬件设备，然而大多数计算机并没有这种硬件，所以需要一个能用软件实现的解决方案。这种成为NFU的最不常用置换算法就是一种使用软件模拟LRU的实现。在NFU中针对每一个页设置一个计数器，每当发生缺页中断时刷新所有的页对应的计数器，先将每一个页的R值（R值用来标识该页是否用过，为0或1）加到计数器上，再将R置0。这个计数器基本可以反映某个页的使用频率。当发生缺页中断的时候就可以踢出计数器最小的页。</p>\n<p>这个算法的一大问题就是：记忆力太强。比如说我开机的时候开机相关的页可能调用了10万次，开机之后其他的东西并没有这么高的使用率，但是因为这些页的计数器太大了，所以不会被轻易踢出去，就会导致有一批‘元老页’滞留在内存中浪费空间。</p>\n<p>可以通过一个简单的小修改解决这个问题：首先在R值加到计数器之前先将计数器右移一位（二进制移位，最后一位抛掉），其次将R位加入到计数器的最左端，而不是最右端（简单的NFU是加入到最右端的）。经过这种修改的算法称之为 <strong>老化算法</strong> 。因为这种算法中新的操作会对计数器产生较大的影响，可以让以前的计数器迅速变老，所以称为老化算法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-最优算法—不可能实现算法\"><a href=\"#0X00-最优算法—不可能实现算法\" class=\"headerlink\" title=\"0X00 最优算法—不可能实现算法\"></a>0X00 最优算法—不可能实现算法</h1><p>最优算法听起来很棒，但是 <strong>实现起来是不可能的</strong> 。最优算法是：当发生缺页中断时，将最晚会用到的页换出。也就是说，有三个页，现在发生了缺页中断，第一个页在第201条指令的时候会用到，第二个页在第5001条指令的时候会用到，第三个页在第20000条指令的时候会用到，那么第三个页面就是最晚会被用到的，就将其换出。这样确实是最好的效率，但是真正实现不了的原因是：程序不可能知道自己在什么时候需要哪些内存，所以就不能找到最晚会被用到的页。因为要用未来的事情来判断所以我一般称之为未来算法。虽说实现不了，也不是说这个算法就没意义了。这个算法最大的意义就在于可以比较效率。效率越是接近最优算法的就越好，当一个算法已经能达到最优算法效率的101%时，就没必要累死累活的去优化效率了，可以去找一些别的瓶颈了。</p>\n<h1 id=\"0X01-最近未使用—NRU\"><a href=\"#0X01-最近未使用—NRU\" class=\"headerlink\" title=\"0X01 最近未使用—NRU\"></a>0X01 最近未使用—NRU</h1><p>如果说最优算法叫未来算法的话，那么这个最近未使用就可以叫做历史算法，这样就好理解了。当系统发生缺页中断的时候，在内存中找到最久没被用过的页，将其换出。有一种实现方法：给每一个页设置一个 <strong>R(read)位和M(modify)位</strong> 。当一个进程启动的时候将这个进程的所有页的RM位都设置为0。然后每访问一个页就将R位置为1，每修改一个页就将M置为1。系统每隔一段时间就将所有页的R置为0。那么这里就会出现四种页，其实这里只是一个表示，比如第1类。不可能出现一个没被访问就修改的页，但是第3类页经过一段时间之后将R置为0的话就是第1类了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">类别   |    访问   |   修改    | R | M</div><div class=\"line\">--------------------------------------</div><div class=\"line\">第0类：| 没有被访问 | 没有被修改 | 0 | 0 </div><div class=\"line\">第1类：| 没有被访问 | 已经被修改 | 0 | 1 </div><div class=\"line\">第2类：| 已经被访问 | 没有被修改 | 1 | 0 </div><div class=\"line\">第3类：| 已经被访问 | 已经被修改 | 1 | 1 </div><div class=\"line\">--------------------------------------</div></pre></td></tr></table></figure></p>\n<p>现在内存中的每个页都是这0到4的其中一种。那么当发生缺页中断的时候，NRU算法就会从类别编号最小的一堆页中 <strong>随机</strong> 换出。</p>\n<h1 id=\"0X02-先进先出—队列置换算法-FIFO\"><a href=\"#0X02-先进先出—队列置换算法-FIFO\" class=\"headerlink\" title=\"0X02 先进先出—队列置换算法 FIFO\"></a>0X02 先进先出—队列置换算法 FIFO</h1><p>这种算法相对容易实现，就像是数据结构中的 <strong>队列</strong> 一样。每次的新页放在队列尾部，当发生缺页中断时将队列头部的页踢掉，将新页放到队列尾部。这种算法有一个非常严重的问题就是会踢掉一些必要的页，比如操作系统核心功能。想想系统启动的时候，首先加入了10000个页以用来运行操作系统，但是发生缺页中断的时候就会将核心页换出去，然后因为核心页被换出去了就需要再换进来，有可能就造成了连续10000个页从队首换到了队尾，产生了20000个操作。</p>\n<h1 id=\"0X03-第二次机会—FIFO改进\"><a href=\"#0X03-第二次机会—FIFO改进\" class=\"headerlink\" title=\"0X03 第二次机会—FIFO改进\"></a>0X03 第二次机会—FIFO改进</h1><p>因为FIFO会将所有队尾直接踢出去，第二次机会就是给了每个页面再一次机会。也就是说：每个页面还是有一个R位，然后有一个时间位用来记录装入时间。每当发生缺页中断的时候查看队首页的R值，如果R值为0那么就将其换出，否则就将其R值设置为0，并设置‘装入时间’（在哪个时钟的时候装入的），然后再从队首的下一个页开始判断。</p>\n<h1 id=\"0X04-时钟算法—CLOCK\"><a href=\"#0X04-时钟算法—CLOCK\" class=\"headerlink\" title=\"0X04 时钟算法—CLOCK\"></a>0X04 时钟算法—CLOCK</h1><p>因为二次机会算法还是基于单向链表的，所以会经常需要在链表中移动页面，虽然是在内存中操作但还是会浪费资源。这里就把单向链表改成了 <strong>环形链表</strong> 。当发生缺页中断的时候，检查指针指向的页面，如果页的R位是0则提出这个页面将新的页加到这个位置，并设置R位为1；否则就将当前的R位设置为0并将指针下移。所以时钟算法也可以理解成是第二次机会算法的改进版本。</p>\n<p><img src=\"http://qiniu.just666.cn//article/image/clock.png\" alt=\"时钟算法\"></p>\n<blockquote>\n<p>图片来源：《现代操作系统》 Andrew S. Tanenbaum</p>\n</blockquote>\n<h1 id=\"0X05-最近最少使用置换算法—LRU\"><a href=\"#0X05-最近最少使用置换算法—LRU\" class=\"headerlink\" title=\"0X05 最近最少使用置换算法—LRU\"></a>0X05 最近最少使用置换算法—LRU</h1><p>有这样一种情况：“在前面几条指令中频繁使用的页很可能在后面的及条指令中被使用”，所以说已经很久没有用过的页很可能在未来的一段时间内也不会被用到。所以可以在发生缺页中断的时候将最久未使用的页替换出去。为了实现LRU算法需要将所有页串成一个链表，链表的一端是最常使用的页，另一端则是最不常用的页，每次调用一个页的时候都要将整个链表更新，但移动整个链表是很慢的。</p>\n<p>可以通过特殊硬件来实现LRU。</p>\n<p>第一种方案：这里需要一个64位的计数器，计数器在每条指令执行完成之后自动加一，且每个页表项中需要需要足够容纳这个计数器。在每次访问内存的时候将当前计数器的值赋值给该页表项的对应区域。当发生缺页中断的时候找到每个页表项中该值最小的，这个页表项就是最近最少使用的。</p>\n<p>需要注意的一点是： <strong>这个计数器只有一个</strong> 而不是每个页表项一个；每个页表项里只是有一个可以容纳这个计数器的位置，也就是说要有一个64位的空间来保存数字。这里保存的数字不会随着指令的执行而自增，随着指令执行自增的就只有那个唯一的计数器。</p>\n<p>第二种方案：假设某机器有n个页框，那么LRU硬件就是一个n * n的矩阵，初始化为零矩阵。当访问页框k时 <strong>先</strong> 将k行全部置1， <strong>再</strong> 将k列全部置0。在任意时间二进制数值最小的行就是最近最少使用的，第二小的就是下一个最近最少使用的。</p>\n<h1 id=\"0X06-最不常用置换算法—NFU\"><a href=\"#0X06-最不常用置换算法—NFU\" class=\"headerlink\" title=\"0X06 最不常用置换算法—NFU\"></a>0X06 最不常用置换算法—NFU</h1><p>因为LRU算法需要独立的硬件设备，然而大多数计算机并没有这种硬件，所以需要一个能用软件实现的解决方案。这种成为NFU的最不常用置换算法就是一种使用软件模拟LRU的实现。在NFU中针对每一个页设置一个计数器，每当发生缺页中断时刷新所有的页对应的计数器，先将每一个页的R值（R值用来标识该页是否用过，为0或1）加到计数器上，再将R置0。这个计数器基本可以反映某个页的使用频率。当发生缺页中断的时候就可以踢出计数器最小的页。</p>\n<p>这个算法的一大问题就是：记忆力太强。比如说我开机的时候开机相关的页可能调用了10万次，开机之后其他的东西并没有这么高的使用率，但是因为这些页的计数器太大了，所以不会被轻易踢出去，就会导致有一批‘元老页’滞留在内存中浪费空间。</p>\n<p>可以通过一个简单的小修改解决这个问题：首先在R值加到计数器之前先将计数器右移一位（二进制移位，最后一位抛掉），其次将R位加入到计数器的最左端，而不是最右端（简单的NFU是加入到最右端的）。经过这种修改的算法称之为 <strong>老化算法</strong> 。因为这种算法中新的操作会对计数器产生较大的影响，可以让以前的计数器迅速变老，所以称为老化算法。</p>\n"},{"title":"Python之字典","date":"2016-09-13T12:03:00.000Z","_content":"\n\n# 0X00 什么是字典\n字典，顾名思义就是通过一个条件可以找到相应的值，字典由Key-Value组成。像是下面这样创建一个字典\n字典中的数据是没有顺序的，不像列表一样有顺序，在字典中是没有固定顺序的\n```python\n>>> a = {'name':'xiaoming', 'sex':'F', 'age':22}  #直接创建一个字典\n>>> print a\n    {'age': 22, 'name': 'xiaoming', 'sex': 'F'}\n>>> print a['name']\n    xiaoming\n\n>>> b = dict(name='xiaogang', sex='M', age=23)\t #通过dict函数创建一个字典\n>>> print b['name']\n    xiaogang\n```\n> 下文说的Key就是键， Value就是值\n> Key-Value 就是键值对，一个键对应着一个值\n> Key的值是可以随意改变的，但是Key的类型是固定的不能改变\n> 如果为一个不存在的键赋值，那么会自动添加这个K-V\n\n# 0X01 字典操作\n## len 测量长度\n测量这个字典中有多少\n```python\n>>> d = {'username':'admin', 'password':'123456')\n>>> print len(d)\n\t2\n```\n\n## d[k] 调用字典\n根据已知的Key来查找Key所对应的Value\n```python\n>>> d = {'username':'admin', 'password':'123456'}\n>>> print d['username']\n\tadmin\n```\n\n## d[k] = v\t字典赋值\n为某个特定的Key赋值，如果这个Key在字典中不存在则创建这个Key\n```python\n>>> d = {'username':'admin', 'password':'123456'}\n>>> d['password'] = '2336666'\n>>> print d['password']\n\t2336666\n```\n\n## del d[k] 删除Key-Value\n删除相应的Key和Value\n```python\n>>> d = {'username':'admin', 'password':'123456'}\n>>> del d['username']\n>>> print d\n\t{'password': '123456'}\n>>> del d['username']\t#删除一个不存在的K-V会抛出异常\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    KeyError: 'username'\n```\n\n## k in d 成员检查\n检查某字典中是否存在某Key，成员检查时用的是Key而不是Value\n```python\n>>> d = {'username':'admin', 'password':'123456'}\n>>> 'username' in d\n\tTrue\n>>> 'phonenumber' in d\n\tFalse\n```\n\n# 0X02 字典的递归\n字典中是Key-Value，然而字典的Value是可以是字典的，也就是Key-Value的Value是字典，也就是递归。\n这样就可以建立一个递归的字典，字典里的字典可以是一层一层递归包括下去\n```python\n>>> phones = {\n        'xiaoming':{\n        'num':'123',\n        'addr':'hebei'\n        },\n        'xiaohua':{\n        'num':'456',\n        'addr':'sichuan'\n        }\n    }\n>>> print phones\n    {'xiaoming': {'num': '123', 'addr': 'hebei'}, 'xiaohua': {'num': '456', 'addr': 'sichuan'}}\n>>> print phones['xiaoming']\n    {'num': '123', 'addr': 'hebei'}\n>>> print phones['xiaoming']['addr']\n    hebei\n```\n\n# 0X03 字典方法\n字典有好多方法可以调用，对字典进行操作\n## clear 清除\nclear可以清除字典所有项，这项操作是直接操作原来的字典而不是修改字典然后返回新的字典\n下面展示一下这个方法的用处\nA\n```python\n>>> x = {}\n>>> y = x\n>>> x['key'] = 'value'\n>>> y\n\t{'key': 'value'}\n>>> x = {}\n>>> y\n\t{'key': 'value'}\n```\nB\n```python\n>>> x = {}\n>>> y = x\n>>> x['key'] = 'value'\n>>> y\n\t{'key': 'value'}\n>>> x.clear()\n>>> y\n\t{}\n```\n对比A和B这两种情况，就大概知道什么时候clear方法可以发挥用处了\n\n## copy 复制\n可以复制一个全新的字典出来，并返回这个新的字典。字典的复制分为浅度复制和深度复制\n浅度复制\n```python\n>>> x = {'username':'admin', 'machines':['foo', 'bar', 'baz']}\n>>> y = x.copy()\n>>> y['username'] = 'mlh'\n>>> y['machines'].remove('bar')\n>>> y\n    {'username': 'mlh', 'machines': ['foo', 'baz']}\n>>> x\n    {'username': 'admin', 'machines': ['foo', 'baz']}\n```\n\n深度复制\n```python\n>>> from copy import deepcopy\n>>> d = {}\n>>> d['names'] = ['Alfred', 'Bertrand']\n>>> c = d.copy()\n>>> dc = deepcopy(d)\n>>> d['names'].append('Clive')\n>>> c\n    {'names': ['Alfred', 'Bertrand', 'Clive']}\n>>> dc\n    {'names': ['Alfred', 'Bertrand']}\n```\n\n## fromkeys 空字典\n使用给定的键来建立一个没有值的字典，也可以给一个默认的值让所有键的值都是这个默认值\n```python\n>>> dict.fromkeys(['name', 'age'])\t#一个纯空的字典\n    {'name': None, 'age':None}\n>>> dict.fromkeys(['name', 'age'], 'unknow')   #给键创建一个默认值\n    {'name':'unknow', 'age':'unknow'}\n```\n\n## get 获取\n比较宽松的获取数据，以前用d[k]的方式调用一个值的话，如果这个键不存在就会抛出异常，用get获取就不会这样\n```python\n>>> d = {}\n>>> print d.get('name')  #获取一个不存在的数据，不会抛出异常，而显示None\n    None\n```\n\n## has_key 判断键\n判断字典中是否有这个键，返回True和False\n```python\n>>> d = {'name':'admin', 'password':'123456'}\n>>> d.has_key('name')\n    True\n>>> d.has_key('hehe')\n    False\n```\n\n## items iteritems 返回字典\nitems 可以将整个字典转化成列表并返回\niteritems 可以将整个字典转化成迭代器返回\n```python\n>>> d = {'username':'admin', 'password':'123'}\n>>> d.items()\n    [('username', 'admin'), ('password', '123')]\n>>> d.iteritems()\n    <built-in method iteritems of dict object at 0x7f62ac08e6e0>\n>>> list(d.iteritems())\n    [('username', 'admin'), ('password', '123')]\n```\n\n## keys iterkeys 返回键\nkeys 以列表的方式返回整个字典中所有的key\niterkeys 以迭代器的方式返回整个字典中所有的key\n```python\n>>> d = {'username':'admin', 'password':'123'}\n>>> d.keys()\n    ['username', 'password']\n>>> d.iterkeys()\n    <dictionary-keyiterator object at 0x7f62ac0972b8>\n```\n\n## pop 出栈\n因为字典中是没有顺序的，所以出栈的时候必须自己指定一个Key才能弹出这个K-V，如果了解“栈”这个数据结构的话就能非常清晰这个方法。使用pop弹出一个数据的时候回在原字典中删除这个数据并返回这个数据。\n```python\n>>> d = {'username':'admin', 'password':'123'}\n>>> d.pop('password')\n    '123'\n>>> d\n    {'username': 'admin'}\n```\n\n## popitem 随机出栈\n随机从字典中弹出一组K-V\n```python\n>>> d = {'one':'1', 'two':'2', 'three':'3', 'four':'4', 'five':'5', 'six':'6'}\n>>> d.popitem()\n    ('six', '6')\n>>> d.popitem()\n    ('three', '3')\n>>> d.popitem()\n    ('two', '2')\n>>> d.popitem()\n    ('four', '4')\n>>> d.popitem()\n    ('five', '5')\n>>> d.popitem()\n    ('one', '1')\n```\n\n## setdefault 设置默认\n给字典中某个Key设定一个默认的Value，当这个Key没有Value的时候就默认为那个默认的Value，如果有数据则默认Value不会生效\n```python\n>>> d = {}\n>>> d.setdefault('name', 'N/A')\n    'N/A'\n>>> d\n    {'name': 'N/A'}\n>>> d['name'] = 'admin'\n>>> d.setdefault('name', 'N/A')\n    'admin'\n>>> d\n    {'name': 'admin'}\n```\n\n## update 更新字典\n可以用一个新的字典去更新旧的字典，新旧字典中Key重合的部分以新字典为准，旧字典中有的Key且新字典中没有的话则不变，旧字典中没有的Key且新字典中有的话则添加这个K-V\n```python\n>>> a = {'username':'admin', 'password':'123456'}\n>>> b = {'password':'2336666', 'sex':'F'}\n>>> a.update(b)\n>>> a\n    {'username': 'admin', 'password': '2336666', 'sex': 'F'}\n```\n\n## values intervalues\nvalues 返回字典中所有的值组成的列表\nintervalues 返回字典中所有的值相应的迭代器\n","source":"_posts/python_dict.md","raw":"---\ntitle: Python之字典\ndate: 2016-09-13 20:03\n---\n\n\n# 0X00 什么是字典\n字典，顾名思义就是通过一个条件可以找到相应的值，字典由Key-Value组成。像是下面这样创建一个字典\n字典中的数据是没有顺序的，不像列表一样有顺序，在字典中是没有固定顺序的\n```python\n>>> a = {'name':'xiaoming', 'sex':'F', 'age':22}  #直接创建一个字典\n>>> print a\n    {'age': 22, 'name': 'xiaoming', 'sex': 'F'}\n>>> print a['name']\n    xiaoming\n\n>>> b = dict(name='xiaogang', sex='M', age=23)\t #通过dict函数创建一个字典\n>>> print b['name']\n    xiaogang\n```\n> 下文说的Key就是键， Value就是值\n> Key-Value 就是键值对，一个键对应着一个值\n> Key的值是可以随意改变的，但是Key的类型是固定的不能改变\n> 如果为一个不存在的键赋值，那么会自动添加这个K-V\n\n# 0X01 字典操作\n## len 测量长度\n测量这个字典中有多少\n```python\n>>> d = {'username':'admin', 'password':'123456')\n>>> print len(d)\n\t2\n```\n\n## d[k] 调用字典\n根据已知的Key来查找Key所对应的Value\n```python\n>>> d = {'username':'admin', 'password':'123456'}\n>>> print d['username']\n\tadmin\n```\n\n## d[k] = v\t字典赋值\n为某个特定的Key赋值，如果这个Key在字典中不存在则创建这个Key\n```python\n>>> d = {'username':'admin', 'password':'123456'}\n>>> d['password'] = '2336666'\n>>> print d['password']\n\t2336666\n```\n\n## del d[k] 删除Key-Value\n删除相应的Key和Value\n```python\n>>> d = {'username':'admin', 'password':'123456'}\n>>> del d['username']\n>>> print d\n\t{'password': '123456'}\n>>> del d['username']\t#删除一个不存在的K-V会抛出异常\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    KeyError: 'username'\n```\n\n## k in d 成员检查\n检查某字典中是否存在某Key，成员检查时用的是Key而不是Value\n```python\n>>> d = {'username':'admin', 'password':'123456'}\n>>> 'username' in d\n\tTrue\n>>> 'phonenumber' in d\n\tFalse\n```\n\n# 0X02 字典的递归\n字典中是Key-Value，然而字典的Value是可以是字典的，也就是Key-Value的Value是字典，也就是递归。\n这样就可以建立一个递归的字典，字典里的字典可以是一层一层递归包括下去\n```python\n>>> phones = {\n        'xiaoming':{\n        'num':'123',\n        'addr':'hebei'\n        },\n        'xiaohua':{\n        'num':'456',\n        'addr':'sichuan'\n        }\n    }\n>>> print phones\n    {'xiaoming': {'num': '123', 'addr': 'hebei'}, 'xiaohua': {'num': '456', 'addr': 'sichuan'}}\n>>> print phones['xiaoming']\n    {'num': '123', 'addr': 'hebei'}\n>>> print phones['xiaoming']['addr']\n    hebei\n```\n\n# 0X03 字典方法\n字典有好多方法可以调用，对字典进行操作\n## clear 清除\nclear可以清除字典所有项，这项操作是直接操作原来的字典而不是修改字典然后返回新的字典\n下面展示一下这个方法的用处\nA\n```python\n>>> x = {}\n>>> y = x\n>>> x['key'] = 'value'\n>>> y\n\t{'key': 'value'}\n>>> x = {}\n>>> y\n\t{'key': 'value'}\n```\nB\n```python\n>>> x = {}\n>>> y = x\n>>> x['key'] = 'value'\n>>> y\n\t{'key': 'value'}\n>>> x.clear()\n>>> y\n\t{}\n```\n对比A和B这两种情况，就大概知道什么时候clear方法可以发挥用处了\n\n## copy 复制\n可以复制一个全新的字典出来，并返回这个新的字典。字典的复制分为浅度复制和深度复制\n浅度复制\n```python\n>>> x = {'username':'admin', 'machines':['foo', 'bar', 'baz']}\n>>> y = x.copy()\n>>> y['username'] = 'mlh'\n>>> y['machines'].remove('bar')\n>>> y\n    {'username': 'mlh', 'machines': ['foo', 'baz']}\n>>> x\n    {'username': 'admin', 'machines': ['foo', 'baz']}\n```\n\n深度复制\n```python\n>>> from copy import deepcopy\n>>> d = {}\n>>> d['names'] = ['Alfred', 'Bertrand']\n>>> c = d.copy()\n>>> dc = deepcopy(d)\n>>> d['names'].append('Clive')\n>>> c\n    {'names': ['Alfred', 'Bertrand', 'Clive']}\n>>> dc\n    {'names': ['Alfred', 'Bertrand']}\n```\n\n## fromkeys 空字典\n使用给定的键来建立一个没有值的字典，也可以给一个默认的值让所有键的值都是这个默认值\n```python\n>>> dict.fromkeys(['name', 'age'])\t#一个纯空的字典\n    {'name': None, 'age':None}\n>>> dict.fromkeys(['name', 'age'], 'unknow')   #给键创建一个默认值\n    {'name':'unknow', 'age':'unknow'}\n```\n\n## get 获取\n比较宽松的获取数据，以前用d[k]的方式调用一个值的话，如果这个键不存在就会抛出异常，用get获取就不会这样\n```python\n>>> d = {}\n>>> print d.get('name')  #获取一个不存在的数据，不会抛出异常，而显示None\n    None\n```\n\n## has_key 判断键\n判断字典中是否有这个键，返回True和False\n```python\n>>> d = {'name':'admin', 'password':'123456'}\n>>> d.has_key('name')\n    True\n>>> d.has_key('hehe')\n    False\n```\n\n## items iteritems 返回字典\nitems 可以将整个字典转化成列表并返回\niteritems 可以将整个字典转化成迭代器返回\n```python\n>>> d = {'username':'admin', 'password':'123'}\n>>> d.items()\n    [('username', 'admin'), ('password', '123')]\n>>> d.iteritems()\n    <built-in method iteritems of dict object at 0x7f62ac08e6e0>\n>>> list(d.iteritems())\n    [('username', 'admin'), ('password', '123')]\n```\n\n## keys iterkeys 返回键\nkeys 以列表的方式返回整个字典中所有的key\niterkeys 以迭代器的方式返回整个字典中所有的key\n```python\n>>> d = {'username':'admin', 'password':'123'}\n>>> d.keys()\n    ['username', 'password']\n>>> d.iterkeys()\n    <dictionary-keyiterator object at 0x7f62ac0972b8>\n```\n\n## pop 出栈\n因为字典中是没有顺序的，所以出栈的时候必须自己指定一个Key才能弹出这个K-V，如果了解“栈”这个数据结构的话就能非常清晰这个方法。使用pop弹出一个数据的时候回在原字典中删除这个数据并返回这个数据。\n```python\n>>> d = {'username':'admin', 'password':'123'}\n>>> d.pop('password')\n    '123'\n>>> d\n    {'username': 'admin'}\n```\n\n## popitem 随机出栈\n随机从字典中弹出一组K-V\n```python\n>>> d = {'one':'1', 'two':'2', 'three':'3', 'four':'4', 'five':'5', 'six':'6'}\n>>> d.popitem()\n    ('six', '6')\n>>> d.popitem()\n    ('three', '3')\n>>> d.popitem()\n    ('two', '2')\n>>> d.popitem()\n    ('four', '4')\n>>> d.popitem()\n    ('five', '5')\n>>> d.popitem()\n    ('one', '1')\n```\n\n## setdefault 设置默认\n给字典中某个Key设定一个默认的Value，当这个Key没有Value的时候就默认为那个默认的Value，如果有数据则默认Value不会生效\n```python\n>>> d = {}\n>>> d.setdefault('name', 'N/A')\n    'N/A'\n>>> d\n    {'name': 'N/A'}\n>>> d['name'] = 'admin'\n>>> d.setdefault('name', 'N/A')\n    'admin'\n>>> d\n    {'name': 'admin'}\n```\n\n## update 更新字典\n可以用一个新的字典去更新旧的字典，新旧字典中Key重合的部分以新字典为准，旧字典中有的Key且新字典中没有的话则不变，旧字典中没有的Key且新字典中有的话则添加这个K-V\n```python\n>>> a = {'username':'admin', 'password':'123456'}\n>>> b = {'password':'2336666', 'sex':'F'}\n>>> a.update(b)\n>>> a\n    {'username': 'admin', 'password': '2336666', 'sex': 'F'}\n```\n\n## values intervalues\nvalues 返回字典中所有的值组成的列表\nintervalues 返回字典中所有的值相应的迭代器\n","slug":"python_dict","published":1,"updated":"2017-09-02T14:09:30.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmec001ghnlpnce5i8zi","content":"<h1 id=\"0X00-什么是字典\"><a href=\"#0X00-什么是字典\" class=\"headerlink\" title=\"0X00 什么是字典\"></a>0X00 什么是字典</h1><p>字典，顾名思义就是通过一个条件可以找到相应的值，字典由Key-Value组成。像是下面这样创建一个字典<br>字典中的数据是没有顺序的，不像列表一样有顺序，在字典中是没有固定顺序的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaoming'</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'F'</span>, <span class=\"string\">'age'</span>:<span class=\"number\">22</span>&#125;  <span class=\"comment\">#直接创建一个字典</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a</div><div class=\"line\">    &#123;<span class=\"string\">'age'</span>: <span class=\"number\">22</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'xiaoming'</span>, <span class=\"string\">'sex'</span>: <span class=\"string\">'F'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a[<span class=\"string\">'name'</span>]</div><div class=\"line\">    xiaoming</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = dict(name=<span class=\"string\">'xiaogang'</span>, sex=<span class=\"string\">'M'</span>, age=<span class=\"number\">23</span>)\t <span class=\"comment\">#通过dict函数创建一个字典</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> b[<span class=\"string\">'name'</span>]</div><div class=\"line\">    xiaogang</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>下文说的Key就是键， Value就是值<br>Key-Value 就是键值对，一个键对应着一个值<br>Key的值是可以随意改变的，但是Key的类型是固定的不能改变<br>如果为一个不存在的键赋值，那么会自动添加这个K-V</p>\n</blockquote>\n<h1 id=\"0X01-字典操作\"><a href=\"#0X01-字典操作\" class=\"headerlink\" title=\"0X01 字典操作\"></a>0X01 字典操作</h1><h2 id=\"len-测量长度\"><a href=\"#len-测量长度\" class=\"headerlink\" title=\"len 测量长度\"></a>len 测量长度</h2><p>测量这个字典中有多少<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> len(d)</div><div class=\"line\">\t<span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"d-k-调用字典\"><a href=\"#d-k-调用字典\" class=\"headerlink\" title=\"d[k] 调用字典\"></a>d[k] 调用字典</h2><p>根据已知的Key来查找Key所对应的Value<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> d[<span class=\"string\">'username'</span>]</div><div class=\"line\">\tadmin</div></pre></td></tr></table></figure></p>\n<h2 id=\"d-k-v-字典赋值\"><a href=\"#d-k-v-字典赋值\" class=\"headerlink\" title=\"d[k] = v    字典赋值\"></a>d[k] = v    字典赋值</h2><p>为某个特定的Key赋值，如果这个Key在字典中不存在则创建这个Key<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'password'</span>] = <span class=\"string\">'2336666'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> d[<span class=\"string\">'password'</span>]</div><div class=\"line\">\t<span class=\"number\">2336666</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"del-d-k-删除Key-Value\"><a href=\"#del-d-k-删除Key-Value\" class=\"headerlink\" title=\"del d[k] 删除Key-Value\"></a>del d[k] 删除Key-Value</h2><p>删除相应的Key和Value<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> d[<span class=\"string\">'username'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> d</div><div class=\"line\">\t&#123;<span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> d[<span class=\"string\">'username'</span>]\t<span class=\"comment\">#删除一个不存在的K-V会抛出异常</span></div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    KeyError: <span class=\"string\">'username'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"k-in-d-成员检查\"><a href=\"#k-in-d-成员检查\" class=\"headerlink\" title=\"k in d 成员检查\"></a>k in d 成员检查</h2><p>检查某字典中是否存在某Key，成员检查时用的是Key而不是Value<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'username'</span> <span class=\"keyword\">in</span> d</div><div class=\"line\">\t<span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'phonenumber'</span> <span class=\"keyword\">in</span> d</div><div class=\"line\">\t<span class=\"keyword\">False</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-字典的递归\"><a href=\"#0X02-字典的递归\" class=\"headerlink\" title=\"0X02 字典的递归\"></a>0X02 字典的递归</h1><p>字典中是Key-Value，然而字典的Value是可以是字典的，也就是Key-Value的Value是字典，也就是递归。<br>这样就可以建立一个递归的字典，字典里的字典可以是一层一层递归包括下去<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>phones = &#123;</div><div class=\"line\">        <span class=\"string\">'xiaoming'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'num'</span>:<span class=\"string\">'123'</span>,</div><div class=\"line\">        <span class=\"string\">'addr'</span>:<span class=\"string\">'hebei'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'xiaohua'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'num'</span>:<span class=\"string\">'456'</span>,</div><div class=\"line\">        <span class=\"string\">'addr'</span>:<span class=\"string\">'sichuan'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> phones</div><div class=\"line\">    &#123;<span class=\"string\">'xiaoming'</span>: &#123;<span class=\"string\">'num'</span>: <span class=\"string\">'123'</span>, <span class=\"string\">'addr'</span>: <span class=\"string\">'hebei'</span>&#125;, <span class=\"string\">'xiaohua'</span>: &#123;<span class=\"string\">'num'</span>: <span class=\"string\">'456'</span>, <span class=\"string\">'addr'</span>: <span class=\"string\">'sichuan'</span>&#125;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> phones[<span class=\"string\">'xiaoming'</span>]</div><div class=\"line\">    &#123;<span class=\"string\">'num'</span>: <span class=\"string\">'123'</span>, <span class=\"string\">'addr'</span>: <span class=\"string\">'hebei'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> phones[<span class=\"string\">'xiaoming'</span>][<span class=\"string\">'addr'</span>]</div><div class=\"line\">    hebei</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-字典方法\"><a href=\"#0X03-字典方法\" class=\"headerlink\" title=\"0X03 字典方法\"></a>0X03 字典方法</h1><p>字典有好多方法可以调用，对字典进行操作</p>\n<h2 id=\"clear-清除\"><a href=\"#clear-清除\" class=\"headerlink\" title=\"clear 清除\"></a>clear 清除</h2><p>clear可以清除字典所有项，这项操作是直接操作原来的字典而不是修改字典然后返回新的字典<br>下面展示一下这个方法的用处<br>A<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = x</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x[<span class=\"string\">'key'</span>] = <span class=\"string\">'value'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">\t&#123;<span class=\"string\">'key'</span>: <span class=\"string\">'value'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">\t&#123;<span class=\"string\">'key'</span>: <span class=\"string\">'value'</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>B<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = x</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x[<span class=\"string\">'key'</span>] = <span class=\"string\">'value'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">\t&#123;<span class=\"string\">'key'</span>: <span class=\"string\">'value'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x.clear()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">\t&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>对比A和B这两种情况，就大概知道什么时候clear方法可以发挥用处了</p>\n<h2 id=\"copy-复制\"><a href=\"#copy-复制\" class=\"headerlink\" title=\"copy 复制\"></a>copy 复制</h2><p>可以复制一个全新的字典出来，并返回这个新的字典。字典的复制分为浅度复制和深度复制<br>浅度复制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'machines'</span>:[<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'baz'</span>]&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = x.copy()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y[<span class=\"string\">'username'</span>] = <span class=\"string\">'mlh'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y[<span class=\"string\">'machines'</span>].remove(<span class=\"string\">'bar'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">    &#123;<span class=\"string\">'username'</span>: <span class=\"string\">'mlh'</span>, <span class=\"string\">'machines'</span>: [<span class=\"string\">'foo'</span>, <span class=\"string\">'baz'</span>]&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</div><div class=\"line\">    &#123;<span class=\"string\">'username'</span>: <span class=\"string\">'admin'</span>, <span class=\"string\">'machines'</span>: [<span class=\"string\">'foo'</span>, <span class=\"string\">'baz'</span>]&#125;</div></pre></td></tr></table></figure></p>\n<p>深度复制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'names'</span>] = [<span class=\"string\">'Alfred'</span>, <span class=\"string\">'Bertrand'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = d.copy()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dc = deepcopy(d)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'names'</span>].append(<span class=\"string\">'Clive'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</div><div class=\"line\">    &#123;<span class=\"string\">'names'</span>: [<span class=\"string\">'Alfred'</span>, <span class=\"string\">'Bertrand'</span>, <span class=\"string\">'Clive'</span>]&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dc</div><div class=\"line\">    &#123;<span class=\"string\">'names'</span>: [<span class=\"string\">'Alfred'</span>, <span class=\"string\">'Bertrand'</span>]&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"fromkeys-空字典\"><a href=\"#fromkeys-空字典\" class=\"headerlink\" title=\"fromkeys 空字典\"></a>fromkeys 空字典</h2><p>使用给定的键来建立一个没有值的字典，也可以给一个默认的值让所有键的值都是这个默认值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict.fromkeys([<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>])\t<span class=\"comment\">#一个纯空的字典</span></div><div class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'age'</span>:<span class=\"keyword\">None</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict.fromkeys([<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>], <span class=\"string\">'unknow'</span>)   <span class=\"comment\">#给键创建一个默认值</span></div><div class=\"line\">    &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'unknow'</span>, <span class=\"string\">'age'</span>:<span class=\"string\">'unknow'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"get-获取\"><a href=\"#get-获取\" class=\"headerlink\" title=\"get 获取\"></a>get 获取</h2><p>比较宽松的获取数据，以前用d[k]的方式调用一个值的话，如果这个键不存在就会抛出异常，用get获取就不会这样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> d.get(<span class=\"string\">'name'</span>)  <span class=\"comment\">#获取一个不存在的数据，不会抛出异常，而显示None</span></div><div class=\"line\">    <span class=\"keyword\">None</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"has-key-判断键\"><a href=\"#has-key-判断键\" class=\"headerlink\" title=\"has_key 判断键\"></a>has_key 判断键</h2><p>判断字典中是否有这个键，返回True和False<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.has_key(<span class=\"string\">'name'</span>)</div><div class=\"line\">    <span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.has_key(<span class=\"string\">'hehe'</span>)</div><div class=\"line\">    <span class=\"keyword\">False</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"items-iteritems-返回字典\"><a href=\"#items-iteritems-返回字典\" class=\"headerlink\" title=\"items iteritems 返回字典\"></a>items iteritems 返回字典</h2><p>items 可以将整个字典转化成列表并返回<br>iteritems 可以将整个字典转化成迭代器返回<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.items()</div><div class=\"line\">    [(<span class=\"string\">'username'</span>, <span class=\"string\">'admin'</span>), (<span class=\"string\">'password'</span>, <span class=\"string\">'123'</span>)]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.iteritems()</div><div class=\"line\">    &lt;built-<span class=\"keyword\">in</span> method iteritems of dict object at <span class=\"number\">0x7f62ac08e6e0</span>&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(d.iteritems())</div><div class=\"line\">    [(<span class=\"string\">'username'</span>, <span class=\"string\">'admin'</span>), (<span class=\"string\">'password'</span>, <span class=\"string\">'123'</span>)]</div></pre></td></tr></table></figure></p>\n<h2 id=\"keys-iterkeys-返回键\"><a href=\"#keys-iterkeys-返回键\" class=\"headerlink\" title=\"keys iterkeys 返回键\"></a>keys iterkeys 返回键</h2><p>keys 以列表的方式返回整个字典中所有的key<br>iterkeys 以迭代器的方式返回整个字典中所有的key<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.keys()</div><div class=\"line\">    [<span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.iterkeys()</div><div class=\"line\">    &lt;dictionary-keyiterator object at <span class=\"number\">0x7f62ac0972b8</span>&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"pop-出栈\"><a href=\"#pop-出栈\" class=\"headerlink\" title=\"pop 出栈\"></a>pop 出栈</h2><p>因为字典中是没有顺序的，所以出栈的时候必须自己指定一个Key才能弹出这个K-V，如果了解“栈”这个数据结构的话就能非常清晰这个方法。使用pop弹出一个数据的时候回在原字典中删除这个数据并返回这个数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.pop(<span class=\"string\">'password'</span>)</div><div class=\"line\">    <span class=\"string\">'123'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</div><div class=\"line\">    &#123;<span class=\"string\">'username'</span>: <span class=\"string\">'admin'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"popitem-随机出栈\"><a href=\"#popitem-随机出栈\" class=\"headerlink\" title=\"popitem 随机出栈\"></a>popitem 随机出栈</h2><p>随机从字典中弹出一组K-V<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'one'</span>:<span class=\"string\">'1'</span>, <span class=\"string\">'two'</span>:<span class=\"string\">'2'</span>, <span class=\"string\">'three'</span>:<span class=\"string\">'3'</span>, <span class=\"string\">'four'</span>:<span class=\"string\">'4'</span>, <span class=\"string\">'five'</span>:<span class=\"string\">'5'</span>, <span class=\"string\">'six'</span>:<span class=\"string\">'6'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'six'</span>, <span class=\"string\">'6'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'three'</span>, <span class=\"string\">'3'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'two'</span>, <span class=\"string\">'2'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'four'</span>, <span class=\"string\">'4'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'five'</span>, <span class=\"string\">'5'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'one'</span>, <span class=\"string\">'1'</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"setdefault-设置默认\"><a href=\"#setdefault-设置默认\" class=\"headerlink\" title=\"setdefault 设置默认\"></a>setdefault 设置默认</h2><p>给字典中某个Key设定一个默认的Value，当这个Key没有Value的时候就默认为那个默认的Value，如果有数据则默认Value不会生效<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.setdefault(<span class=\"string\">'name'</span>, <span class=\"string\">'N/A'</span>)</div><div class=\"line\">    <span class=\"string\">'N/A'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</div><div class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'N/A'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'name'</span>] = <span class=\"string\">'admin'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.setdefault(<span class=\"string\">'name'</span>, <span class=\"string\">'N/A'</span>)</div><div class=\"line\">    <span class=\"string\">'admin'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</div><div class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'admin'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"update-更新字典\"><a href=\"#update-更新字典\" class=\"headerlink\" title=\"update 更新字典\"></a>update 更新字典</h2><p>可以用一个新的字典去更新旧的字典，新旧字典中Key重合的部分以新字典为准，旧字典中有的Key且新字典中没有的话则不变，旧字典中没有的Key且新字典中有的话则添加这个K-V<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = &#123;<span class=\"string\">'password'</span>:<span class=\"string\">'2336666'</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'F'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.update(b)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">    &#123;<span class=\"string\">'username'</span>: <span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'2336666'</span>, <span class=\"string\">'sex'</span>: <span class=\"string\">'F'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"values-intervalues\"><a href=\"#values-intervalues\" class=\"headerlink\" title=\"values intervalues\"></a>values intervalues</h2><p>values 返回字典中所有的值组成的列表<br>intervalues 返回字典中所有的值相应的迭代器</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-什么是字典\"><a href=\"#0X00-什么是字典\" class=\"headerlink\" title=\"0X00 什么是字典\"></a>0X00 什么是字典</h1><p>字典，顾名思义就是通过一个条件可以找到相应的值，字典由Key-Value组成。像是下面这样创建一个字典<br>字典中的数据是没有顺序的，不像列表一样有顺序，在字典中是没有固定顺序的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaoming'</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'F'</span>, <span class=\"string\">'age'</span>:<span class=\"number\">22</span>&#125;  <span class=\"comment\">#直接创建一个字典</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a</div><div class=\"line\">    &#123;<span class=\"string\">'age'</span>: <span class=\"number\">22</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'xiaoming'</span>, <span class=\"string\">'sex'</span>: <span class=\"string\">'F'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> a[<span class=\"string\">'name'</span>]</div><div class=\"line\">    xiaoming</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = dict(name=<span class=\"string\">'xiaogang'</span>, sex=<span class=\"string\">'M'</span>, age=<span class=\"number\">23</span>)\t <span class=\"comment\">#通过dict函数创建一个字典</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> b[<span class=\"string\">'name'</span>]</div><div class=\"line\">    xiaogang</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>下文说的Key就是键， Value就是值<br>Key-Value 就是键值对，一个键对应着一个值<br>Key的值是可以随意改变的，但是Key的类型是固定的不能改变<br>如果为一个不存在的键赋值，那么会自动添加这个K-V</p>\n</blockquote>\n<h1 id=\"0X01-字典操作\"><a href=\"#0X01-字典操作\" class=\"headerlink\" title=\"0X01 字典操作\"></a>0X01 字典操作</h1><h2 id=\"len-测量长度\"><a href=\"#len-测量长度\" class=\"headerlink\" title=\"len 测量长度\"></a>len 测量长度</h2><p>测量这个字典中有多少<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> len(d)</div><div class=\"line\">\t<span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"d-k-调用字典\"><a href=\"#d-k-调用字典\" class=\"headerlink\" title=\"d[k] 调用字典\"></a>d[k] 调用字典</h2><p>根据已知的Key来查找Key所对应的Value<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> d[<span class=\"string\">'username'</span>]</div><div class=\"line\">\tadmin</div></pre></td></tr></table></figure></p>\n<h2 id=\"d-k-v-字典赋值\"><a href=\"#d-k-v-字典赋值\" class=\"headerlink\" title=\"d[k] = v    字典赋值\"></a>d[k] = v    字典赋值</h2><p>为某个特定的Key赋值，如果这个Key在字典中不存在则创建这个Key<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'password'</span>] = <span class=\"string\">'2336666'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> d[<span class=\"string\">'password'</span>]</div><div class=\"line\">\t<span class=\"number\">2336666</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"del-d-k-删除Key-Value\"><a href=\"#del-d-k-删除Key-Value\" class=\"headerlink\" title=\"del d[k] 删除Key-Value\"></a>del d[k] 删除Key-Value</h2><p>删除相应的Key和Value<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> d[<span class=\"string\">'username'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> d</div><div class=\"line\">\t&#123;<span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> d[<span class=\"string\">'username'</span>]\t<span class=\"comment\">#删除一个不存在的K-V会抛出异常</span></div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    KeyError: <span class=\"string\">'username'</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"k-in-d-成员检查\"><a href=\"#k-in-d-成员检查\" class=\"headerlink\" title=\"k in d 成员检查\"></a>k in d 成员检查</h2><p>检查某字典中是否存在某Key，成员检查时用的是Key而不是Value<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'username'</span> <span class=\"keyword\">in</span> d</div><div class=\"line\">\t<span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'phonenumber'</span> <span class=\"keyword\">in</span> d</div><div class=\"line\">\t<span class=\"keyword\">False</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-字典的递归\"><a href=\"#0X02-字典的递归\" class=\"headerlink\" title=\"0X02 字典的递归\"></a>0X02 字典的递归</h1><p>字典中是Key-Value，然而字典的Value是可以是字典的，也就是Key-Value的Value是字典，也就是递归。<br>这样就可以建立一个递归的字典，字典里的字典可以是一层一层递归包括下去<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>phones = &#123;</div><div class=\"line\">        <span class=\"string\">'xiaoming'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'num'</span>:<span class=\"string\">'123'</span>,</div><div class=\"line\">        <span class=\"string\">'addr'</span>:<span class=\"string\">'hebei'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">'xiaohua'</span>:&#123;</div><div class=\"line\">        <span class=\"string\">'num'</span>:<span class=\"string\">'456'</span>,</div><div class=\"line\">        <span class=\"string\">'addr'</span>:<span class=\"string\">'sichuan'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> phones</div><div class=\"line\">    &#123;<span class=\"string\">'xiaoming'</span>: &#123;<span class=\"string\">'num'</span>: <span class=\"string\">'123'</span>, <span class=\"string\">'addr'</span>: <span class=\"string\">'hebei'</span>&#125;, <span class=\"string\">'xiaohua'</span>: &#123;<span class=\"string\">'num'</span>: <span class=\"string\">'456'</span>, <span class=\"string\">'addr'</span>: <span class=\"string\">'sichuan'</span>&#125;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> phones[<span class=\"string\">'xiaoming'</span>]</div><div class=\"line\">    &#123;<span class=\"string\">'num'</span>: <span class=\"string\">'123'</span>, <span class=\"string\">'addr'</span>: <span class=\"string\">'hebei'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> phones[<span class=\"string\">'xiaoming'</span>][<span class=\"string\">'addr'</span>]</div><div class=\"line\">    hebei</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-字典方法\"><a href=\"#0X03-字典方法\" class=\"headerlink\" title=\"0X03 字典方法\"></a>0X03 字典方法</h1><p>字典有好多方法可以调用，对字典进行操作</p>\n<h2 id=\"clear-清除\"><a href=\"#clear-清除\" class=\"headerlink\" title=\"clear 清除\"></a>clear 清除</h2><p>clear可以清除字典所有项，这项操作是直接操作原来的字典而不是修改字典然后返回新的字典<br>下面展示一下这个方法的用处<br>A<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = x</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x[<span class=\"string\">'key'</span>] = <span class=\"string\">'value'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">\t&#123;<span class=\"string\">'key'</span>: <span class=\"string\">'value'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">\t&#123;<span class=\"string\">'key'</span>: <span class=\"string\">'value'</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>B<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = x</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x[<span class=\"string\">'key'</span>] = <span class=\"string\">'value'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">\t&#123;<span class=\"string\">'key'</span>: <span class=\"string\">'value'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x.clear()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">\t&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>对比A和B这两种情况，就大概知道什么时候clear方法可以发挥用处了</p>\n<h2 id=\"copy-复制\"><a href=\"#copy-复制\" class=\"headerlink\" title=\"copy 复制\"></a>copy 复制</h2><p>可以复制一个全新的字典出来，并返回这个新的字典。字典的复制分为浅度复制和深度复制<br>浅度复制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'machines'</span>:[<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'baz'</span>]&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = x.copy()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y[<span class=\"string\">'username'</span>] = <span class=\"string\">'mlh'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y[<span class=\"string\">'machines'</span>].remove(<span class=\"string\">'bar'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</div><div class=\"line\">    &#123;<span class=\"string\">'username'</span>: <span class=\"string\">'mlh'</span>, <span class=\"string\">'machines'</span>: [<span class=\"string\">'foo'</span>, <span class=\"string\">'baz'</span>]&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</div><div class=\"line\">    &#123;<span class=\"string\">'username'</span>: <span class=\"string\">'admin'</span>, <span class=\"string\">'machines'</span>: [<span class=\"string\">'foo'</span>, <span class=\"string\">'baz'</span>]&#125;</div></pre></td></tr></table></figure></p>\n<p>深度复制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'names'</span>] = [<span class=\"string\">'Alfred'</span>, <span class=\"string\">'Bertrand'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = d.copy()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dc = deepcopy(d)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'names'</span>].append(<span class=\"string\">'Clive'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</div><div class=\"line\">    &#123;<span class=\"string\">'names'</span>: [<span class=\"string\">'Alfred'</span>, <span class=\"string\">'Bertrand'</span>, <span class=\"string\">'Clive'</span>]&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dc</div><div class=\"line\">    &#123;<span class=\"string\">'names'</span>: [<span class=\"string\">'Alfred'</span>, <span class=\"string\">'Bertrand'</span>]&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"fromkeys-空字典\"><a href=\"#fromkeys-空字典\" class=\"headerlink\" title=\"fromkeys 空字典\"></a>fromkeys 空字典</h2><p>使用给定的键来建立一个没有值的字典，也可以给一个默认的值让所有键的值都是这个默认值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict.fromkeys([<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>])\t<span class=\"comment\">#一个纯空的字典</span></div><div class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"keyword\">None</span>, <span class=\"string\">'age'</span>:<span class=\"keyword\">None</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dict.fromkeys([<span class=\"string\">'name'</span>, <span class=\"string\">'age'</span>], <span class=\"string\">'unknow'</span>)   <span class=\"comment\">#给键创建一个默认值</span></div><div class=\"line\">    &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'unknow'</span>, <span class=\"string\">'age'</span>:<span class=\"string\">'unknow'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"get-获取\"><a href=\"#get-获取\" class=\"headerlink\" title=\"get 获取\"></a>get 获取</h2><p>比较宽松的获取数据，以前用d[k]的方式调用一个值的话，如果这个键不存在就会抛出异常，用get获取就不会这样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> d.get(<span class=\"string\">'name'</span>)  <span class=\"comment\">#获取一个不存在的数据，不会抛出异常，而显示None</span></div><div class=\"line\">    <span class=\"keyword\">None</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"has-key-判断键\"><a href=\"#has-key-判断键\" class=\"headerlink\" title=\"has_key 判断键\"></a>has_key 判断键</h2><p>判断字典中是否有这个键，返回True和False<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.has_key(<span class=\"string\">'name'</span>)</div><div class=\"line\">    <span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.has_key(<span class=\"string\">'hehe'</span>)</div><div class=\"line\">    <span class=\"keyword\">False</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"items-iteritems-返回字典\"><a href=\"#items-iteritems-返回字典\" class=\"headerlink\" title=\"items iteritems 返回字典\"></a>items iteritems 返回字典</h2><p>items 可以将整个字典转化成列表并返回<br>iteritems 可以将整个字典转化成迭代器返回<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.items()</div><div class=\"line\">    [(<span class=\"string\">'username'</span>, <span class=\"string\">'admin'</span>), (<span class=\"string\">'password'</span>, <span class=\"string\">'123'</span>)]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.iteritems()</div><div class=\"line\">    &lt;built-<span class=\"keyword\">in</span> method iteritems of dict object at <span class=\"number\">0x7f62ac08e6e0</span>&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(d.iteritems())</div><div class=\"line\">    [(<span class=\"string\">'username'</span>, <span class=\"string\">'admin'</span>), (<span class=\"string\">'password'</span>, <span class=\"string\">'123'</span>)]</div></pre></td></tr></table></figure></p>\n<h2 id=\"keys-iterkeys-返回键\"><a href=\"#keys-iterkeys-返回键\" class=\"headerlink\" title=\"keys iterkeys 返回键\"></a>keys iterkeys 返回键</h2><p>keys 以列表的方式返回整个字典中所有的key<br>iterkeys 以迭代器的方式返回整个字典中所有的key<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.keys()</div><div class=\"line\">    [<span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.iterkeys()</div><div class=\"line\">    &lt;dictionary-keyiterator object at <span class=\"number\">0x7f62ac0972b8</span>&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"pop-出栈\"><a href=\"#pop-出栈\" class=\"headerlink\" title=\"pop 出栈\"></a>pop 出栈</h2><p>因为字典中是没有顺序的，所以出栈的时候必须自己指定一个Key才能弹出这个K-V，如果了解“栈”这个数据结构的话就能非常清晰这个方法。使用pop弹出一个数据的时候回在原字典中删除这个数据并返回这个数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.pop(<span class=\"string\">'password'</span>)</div><div class=\"line\">    <span class=\"string\">'123'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</div><div class=\"line\">    &#123;<span class=\"string\">'username'</span>: <span class=\"string\">'admin'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"popitem-随机出栈\"><a href=\"#popitem-随机出栈\" class=\"headerlink\" title=\"popitem 随机出栈\"></a>popitem 随机出栈</h2><p>随机从字典中弹出一组K-V<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'one'</span>:<span class=\"string\">'1'</span>, <span class=\"string\">'two'</span>:<span class=\"string\">'2'</span>, <span class=\"string\">'three'</span>:<span class=\"string\">'3'</span>, <span class=\"string\">'four'</span>:<span class=\"string\">'4'</span>, <span class=\"string\">'five'</span>:<span class=\"string\">'5'</span>, <span class=\"string\">'six'</span>:<span class=\"string\">'6'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'six'</span>, <span class=\"string\">'6'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'three'</span>, <span class=\"string\">'3'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'two'</span>, <span class=\"string\">'2'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'four'</span>, <span class=\"string\">'4'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'five'</span>, <span class=\"string\">'5'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.popitem()</div><div class=\"line\">    (<span class=\"string\">'one'</span>, <span class=\"string\">'1'</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"setdefault-设置默认\"><a href=\"#setdefault-设置默认\" class=\"headerlink\" title=\"setdefault 设置默认\"></a>setdefault 设置默认</h2><p>给字典中某个Key设定一个默认的Value，当这个Key没有Value的时候就默认为那个默认的Value，如果有数据则默认Value不会生效<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.setdefault(<span class=\"string\">'name'</span>, <span class=\"string\">'N/A'</span>)</div><div class=\"line\">    <span class=\"string\">'N/A'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</div><div class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'N/A'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'name'</span>] = <span class=\"string\">'admin'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.setdefault(<span class=\"string\">'name'</span>, <span class=\"string\">'N/A'</span>)</div><div class=\"line\">    <span class=\"string\">'admin'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</div><div class=\"line\">    &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'admin'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"update-更新字典\"><a href=\"#update-更新字典\" class=\"headerlink\" title=\"update 更新字典\"></a>update 更新字典</h2><p>可以用一个新的字典去更新旧的字典，新旧字典中Key重合的部分以新字典为准，旧字典中有的Key且新字典中没有的话则不变，旧字典中没有的Key且新字典中有的话则添加这个K-V<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = &#123;<span class=\"string\">'username'</span>:<span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>:<span class=\"string\">'123456'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = &#123;<span class=\"string\">'password'</span>:<span class=\"string\">'2336666'</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'F'</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.update(b)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">    &#123;<span class=\"string\">'username'</span>: <span class=\"string\">'admin'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'2336666'</span>, <span class=\"string\">'sex'</span>: <span class=\"string\">'F'</span>&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"values-intervalues\"><a href=\"#values-intervalues\" class=\"headerlink\" title=\"values intervalues\"></a>values intervalues</h2><p>values 返回字典中所有的值组成的列表<br>intervalues 返回字典中所有的值相应的迭代器</p>\n"},{"title":"Python的实例方法、静态方法、类方法","date":"2017-01-01T12:34:00.000Z","_content":"\n# 0X00 实例方法\nPython中的实例方法是在面向对象编程中用到的最多的方法类型了。 **实例方法** 从字面理解就可以，就是说这个方法是属于实例的。每次实例化一个对象出来，这个对象都会拥有这个方法。从下面代码中就可以看得出来，这里我定义了一个实例方法'get_name()'，定义实例方法不需要任何特殊的修饰符。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nclass Student:\n    def __init__(self):\n        self.name = None\n\n    # 一个实例方法\n    def get_name(self):\n        return self.name\n\nif __name__ == '__main__':\n    a = Student()\n    a.name = '小明'\n    print a.get_name()\n    b = Student()\n    b.name = '小红'\n    print b.get_name()\n```\n从运行结果可以看出来，针对每一个实例，调用实例方法的输出是不同的，也就可以证明这个方法是属于某个实例的。\n```bash\n小明\n小红\n```\n\n# 0X01 静态方法\n静态方法用的也很多，比如我们写正则表达式的时候经常会用到表达式的编译，一般都是这么写的're.compile()'这里就是一个静态方法。可以看到我们在调用编译方法的时候是并没有实例化一个re对象的。所以可以知道 **静态方法** 就是不需要实例化对象即可调用的方法。下面有一个例子，例子中还是上面的Student类，但是定义了一个静态方法'say_hello()'，因为这是一个静态方法，所以不需要实例化对象即可调用。正因为这些特点，在定义静态方法的时候没有一个默认的参数self。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\nclass Student:\n    def __init__(self):\n        self.name = None\n\n    def get_name(self):\n        return self.name\n\n    # 这里使用装饰器定义了一个静态方法\n    @staticmethod\n    def say_hello():\n        print 'hello,world'\n\nif __name__ == '__main__':\n    Student.say_hello()\n```\n运行结果如下。我个人觉得静态方法的最大作用就是实现一些工具类，比如某些固定的重复的操作之类的。\n```bash\nhello,world\n```\n\n# 0X02 类方法\n使用类方法需要弄清楚类中属性的种类。类里有两种属性，一种是 **类属性** 一种是 **实例属性** 。顾名思义，类属性就是说这个属性是属于类的，这个类的所有实例共享着一个属性。实例属性就是属于实例的属性，每个实例的实例属性间不共享。下面这个例子里可以看到，类属性和实例属性是可以重名的，但是调用的时候要用'cls'或者'self'来制定到底调用的是哪个属性。下面的例子中有一个类属性'name'和一个实例属性'name'。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nclass Student:\n    # 声明并赋值了一个类属性\n    name = '默认的类属性'\n\n    def __init__(self):\n        self.name = '默认的对象属性'\n\n    @classmethod\n    def set_class_name(cls):\n        cls.name = '修改的对象属性'\n\n    def set_object_name(self):\n        self.name = '修改的对象属性'\n\n    @classmethod\n    def get_class_name(cls):\n        return cls.name\n\n    def get_object_name(self):\n        return self.name\n\nif __name__ == '__main__':\n    a = Student()\n    print a.get_class_name()\n    print a.get_object_name()\n    a.set_class_name()\n    a.set_object_name()\n    print a.get_class_name()\n    print a.get_object_name()\n```\n通过运行结果可以清晰地看出类属性的使用方式。运行结果如下。首先实例化一个对象，获取了a的实例属性和Student的类属性，然后调用了实例方法和类方法对两个属性重新赋值，最后再输出一次。\n```bash\n默认的类属性\n默认的对象属性\n修改的对象属性\n修改的对象属性\n```\n","source":"_posts/python_function.md","raw":"---\ntitle: Python的实例方法、静态方法、类方法\ndate: 2017-01-01 20:34\ntags:\n  - Python\n  - 实例方法\n  - 静态方法\n  - 类方法\n  - OOP\n---\n\n# 0X00 实例方法\nPython中的实例方法是在面向对象编程中用到的最多的方法类型了。 **实例方法** 从字面理解就可以，就是说这个方法是属于实例的。每次实例化一个对象出来，这个对象都会拥有这个方法。从下面代码中就可以看得出来，这里我定义了一个实例方法'get_name()'，定义实例方法不需要任何特殊的修饰符。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nclass Student:\n    def __init__(self):\n        self.name = None\n\n    # 一个实例方法\n    def get_name(self):\n        return self.name\n\nif __name__ == '__main__':\n    a = Student()\n    a.name = '小明'\n    print a.get_name()\n    b = Student()\n    b.name = '小红'\n    print b.get_name()\n```\n从运行结果可以看出来，针对每一个实例，调用实例方法的输出是不同的，也就可以证明这个方法是属于某个实例的。\n```bash\n小明\n小红\n```\n\n# 0X01 静态方法\n静态方法用的也很多，比如我们写正则表达式的时候经常会用到表达式的编译，一般都是这么写的're.compile()'这里就是一个静态方法。可以看到我们在调用编译方法的时候是并没有实例化一个re对象的。所以可以知道 **静态方法** 就是不需要实例化对象即可调用的方法。下面有一个例子，例子中还是上面的Student类，但是定义了一个静态方法'say_hello()'，因为这是一个静态方法，所以不需要实例化对象即可调用。正因为这些特点，在定义静态方法的时候没有一个默认的参数self。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\nclass Student:\n    def __init__(self):\n        self.name = None\n\n    def get_name(self):\n        return self.name\n\n    # 这里使用装饰器定义了一个静态方法\n    @staticmethod\n    def say_hello():\n        print 'hello,world'\n\nif __name__ == '__main__':\n    Student.say_hello()\n```\n运行结果如下。我个人觉得静态方法的最大作用就是实现一些工具类，比如某些固定的重复的操作之类的。\n```bash\nhello,world\n```\n\n# 0X02 类方法\n使用类方法需要弄清楚类中属性的种类。类里有两种属性，一种是 **类属性** 一种是 **实例属性** 。顾名思义，类属性就是说这个属性是属于类的，这个类的所有实例共享着一个属性。实例属性就是属于实例的属性，每个实例的实例属性间不共享。下面这个例子里可以看到，类属性和实例属性是可以重名的，但是调用的时候要用'cls'或者'self'来制定到底调用的是哪个属性。下面的例子中有一个类属性'name'和一个实例属性'name'。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nclass Student:\n    # 声明并赋值了一个类属性\n    name = '默认的类属性'\n\n    def __init__(self):\n        self.name = '默认的对象属性'\n\n    @classmethod\n    def set_class_name(cls):\n        cls.name = '修改的对象属性'\n\n    def set_object_name(self):\n        self.name = '修改的对象属性'\n\n    @classmethod\n    def get_class_name(cls):\n        return cls.name\n\n    def get_object_name(self):\n        return self.name\n\nif __name__ == '__main__':\n    a = Student()\n    print a.get_class_name()\n    print a.get_object_name()\n    a.set_class_name()\n    a.set_object_name()\n    print a.get_class_name()\n    print a.get_object_name()\n```\n通过运行结果可以清晰地看出类属性的使用方式。运行结果如下。首先实例化一个对象，获取了a的实例属性和Student的类属性，然后调用了实例方法和类方法对两个属性重新赋值，最后再输出一次。\n```bash\n默认的类属性\n默认的对象属性\n修改的对象属性\n修改的对象属性\n```\n","slug":"python_function","published":1,"updated":"2017-09-02T14:48:00.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmed001ihnlpl5ec7pja","content":"<h1 id=\"0X00-实例方法\"><a href=\"#0X00-实例方法\" class=\"headerlink\" title=\"0X00 实例方法\"></a>0X00 实例方法</h1><p>Python中的实例方法是在面向对象编程中用到的最多的方法类型了。 <strong>实例方法</strong> 从字面理解就可以，就是说这个方法是属于实例的。每次实例化一个对象出来，这个对象都会拥有这个方法。从下面代码中就可以看得出来，这里我定义了一个实例方法’get_name()’，定义实例方法不需要任何特殊的修饰符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 一个实例方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    a = Student()</div><div class=\"line\">    a.name = <span class=\"string\">'小明'</span></div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_name()</div><div class=\"line\">    b = Student()</div><div class=\"line\">    b.name = <span class=\"string\">'小红'</span></div><div class=\"line\">    <span class=\"keyword\">print</span> b.get_name()</div></pre></td></tr></table></figure></p>\n<p>从运行结果可以看出来，针对每一个实例，调用实例方法的输出是不同的，也就可以证明这个方法是属于某个实例的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">小明</div><div class=\"line\">小红</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X01-静态方法\"><a href=\"#0X01-静态方法\" class=\"headerlink\" title=\"0X01 静态方法\"></a>0X01 静态方法</h1><p>静态方法用的也很多，比如我们写正则表达式的时候经常会用到表达式的编译，一般都是这么写的’re.compile()’这里就是一个静态方法。可以看到我们在调用编译方法的时候是并没有实例化一个re对象的。所以可以知道 <strong>静态方法</strong> 就是不需要实例化对象即可调用的方法。下面有一个例子，例子中还是上面的Student类，但是定义了一个静态方法’say_hello()’，因为这是一个静态方法，所以不需要实例化对象即可调用。正因为这些特点，在定义静态方法的时候没有一个默认的参数self。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 这里使用装饰器定义了一个静态方法</span></div><div class=\"line\"><span class=\"meta\">    @staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    Student.say_hello()</div></pre></td></tr></table></figure></p>\n<p>运行结果如下。我个人觉得静态方法的最大作用就是实现一些工具类，比如某些固定的重复的操作之类的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello,world</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-类方法\"><a href=\"#0X02-类方法\" class=\"headerlink\" title=\"0X02 类方法\"></a>0X02 类方法</h1><p>使用类方法需要弄清楚类中属性的种类。类里有两种属性，一种是 <strong>类属性</strong> 一种是 <strong>实例属性</strong> 。顾名思义，类属性就是说这个属性是属于类的，这个类的所有实例共享着一个属性。实例属性就是属于实例的属性，每个实例的实例属性间不共享。下面这个例子里可以看到，类属性和实例属性是可以重名的，但是调用的时候要用’cls’或者’self’来制定到底调用的是哪个属性。下面的例子中有一个类属性’name’和一个实例属性’name’。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 声明并赋值了一个类属性</span></div><div class=\"line\">    name = <span class=\"string\">'默认的类属性'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"string\">'默认的对象属性'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_class_name</span><span class=\"params\">(cls)</span>:</span></div><div class=\"line\">        cls.name = <span class=\"string\">'修改的对象属性'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_object_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"string\">'修改的对象属性'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_class_name</span><span class=\"params\">(cls)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> cls.name</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_object_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    a = Student()</div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_class_name()</div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_object_name()</div><div class=\"line\">    a.set_class_name()</div><div class=\"line\">    a.set_object_name()</div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_class_name()</div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_object_name()</div></pre></td></tr></table></figure></p>\n<p>通过运行结果可以清晰地看出类属性的使用方式。运行结果如下。首先实例化一个对象，获取了a的实例属性和Student的类属性，然后调用了实例方法和类方法对两个属性重新赋值，最后再输出一次。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">默认的类属性</div><div class=\"line\">默认的对象属性</div><div class=\"line\">修改的对象属性</div><div class=\"line\">修改的对象属性</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-实例方法\"><a href=\"#0X00-实例方法\" class=\"headerlink\" title=\"0X00 实例方法\"></a>0X00 实例方法</h1><p>Python中的实例方法是在面向对象编程中用到的最多的方法类型了。 <strong>实例方法</strong> 从字面理解就可以，就是说这个方法是属于实例的。每次实例化一个对象出来，这个对象都会拥有这个方法。从下面代码中就可以看得出来，这里我定义了一个实例方法’get_name()’，定义实例方法不需要任何特殊的修饰符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 一个实例方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    a = Student()</div><div class=\"line\">    a.name = <span class=\"string\">'小明'</span></div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_name()</div><div class=\"line\">    b = Student()</div><div class=\"line\">    b.name = <span class=\"string\">'小红'</span></div><div class=\"line\">    <span class=\"keyword\">print</span> b.get_name()</div></pre></td></tr></table></figure></p>\n<p>从运行结果可以看出来，针对每一个实例，调用实例方法的输出是不同的，也就可以证明这个方法是属于某个实例的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">小明</div><div class=\"line\">小红</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X01-静态方法\"><a href=\"#0X01-静态方法\" class=\"headerlink\" title=\"0X01 静态方法\"></a>0X01 静态方法</h1><p>静态方法用的也很多，比如我们写正则表达式的时候经常会用到表达式的编译，一般都是这么写的’re.compile()’这里就是一个静态方法。可以看到我们在调用编译方法的时候是并没有实例化一个re对象的。所以可以知道 <strong>静态方法</strong> 就是不需要实例化对象即可调用的方法。下面有一个例子，例子中还是上面的Student类，但是定义了一个静态方法’say_hello()’，因为这是一个静态方法，所以不需要实例化对象即可调用。正因为这些特点，在定义静态方法的时候没有一个默认的参数self。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 这里使用装饰器定义了一个静态方法</span></div><div class=\"line\"><span class=\"meta\">    @staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">say_hello</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    Student.say_hello()</div></pre></td></tr></table></figure></p>\n<p>运行结果如下。我个人觉得静态方法的最大作用就是实现一些工具类，比如某些固定的重复的操作之类的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello,world</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-类方法\"><a href=\"#0X02-类方法\" class=\"headerlink\" title=\"0X02 类方法\"></a>0X02 类方法</h1><p>使用类方法需要弄清楚类中属性的种类。类里有两种属性，一种是 <strong>类属性</strong> 一种是 <strong>实例属性</strong> 。顾名思义，类属性就是说这个属性是属于类的，这个类的所有实例共享着一个属性。实例属性就是属于实例的属性，每个实例的实例属性间不共享。下面这个例子里可以看到，类属性和实例属性是可以重名的，但是调用的时候要用’cls’或者’self’来制定到底调用的是哪个属性。下面的例子中有一个类属性’name’和一个实例属性’name’。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 声明并赋值了一个类属性</span></div><div class=\"line\">    name = <span class=\"string\">'默认的类属性'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"string\">'默认的对象属性'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_class_name</span><span class=\"params\">(cls)</span>:</span></div><div class=\"line\">        cls.name = <span class=\"string\">'修改的对象属性'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_object_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.name = <span class=\"string\">'修改的对象属性'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_class_name</span><span class=\"params\">(cls)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> cls.name</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_object_name</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.name</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    a = Student()</div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_class_name()</div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_object_name()</div><div class=\"line\">    a.set_class_name()</div><div class=\"line\">    a.set_object_name()</div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_class_name()</div><div class=\"line\">    <span class=\"keyword\">print</span> a.get_object_name()</div></pre></td></tr></table></figure></p>\n<p>通过运行结果可以清晰地看出类属性的使用方式。运行结果如下。首先实例化一个对象，获取了a的实例属性和Student的类属性，然后调用了实例方法和类方法对两个属性重新赋值，最后再输出一次。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">默认的类属性</div><div class=\"line\">默认的对象属性</div><div class=\"line\">修改的对象属性</div><div class=\"line\">修改的对象属性</div></pre></td></tr></table></figure></p>\n"},{"title":"Python之序列：列表、元组","date":"2016-09-07T13:38:00.000Z","_content":"\n\n# 0X00 列表和元组\nPython里有个东西叫做**序列**，可以想象成一堆数据。可以简单的通过序列实现数组、链表、栈和队列等数据结构。\n序列有几种，常见的是列表和元组。\n\n# 0X01 序列分片\n我们可以从序列中截取一部分，这种操作被称为分片\n分片的时候我们可以选择起始点和结束点，还能选择步长，甚至乃能倒序\n分片使用`:`分隔开参数，一般情况下有两个参数，截取第一个参数到第二个参数，左开右闭\n如果参数是负数的话，则表示倒数第几个\n但是可以接受第三个参数，第三个参数表示步长。如果第二个参数是2那么就是接一跳一。\n如果参数为空则表示极限。  具体可以看下面的代码\n```python\n>>> username = 'hello,world'\n>>> print username[4:8]\t\t\t#截取从4到8，左开右闭\n\to,wo\n>>> print username[4:-2]\t\t#截取4到倒数第4的参数，如果想要包括最后一个是不能用-1的，要用下面的方式\n\to,wor\n>>> print username[2:]\t\t\t#截取包括最后一个的话不能用-1，因为-1是最后一个，然后区间是左开右闭，所有右边留空就表示极限了\n\tllo,world\n>>> print username[:]\t\t\t#两头取极限，就是完整的序列\n\thello,world\n>>> print username[1:8:2]\t\t#演示步长，此处步长为2\n\tel,o\n>>> print username[8:0:-1]\t\t#当步长为-1的时候，就是从后向前的\n\trow,olle\n```\n\n# 0X02 序列拼接\n序列拼接就和Java里的字符串拼接差不多，可以单纯的用一个加号连在一起。当然Python比Java方便的一点就是，不只是字符串，什么东西只要是在序列里就能用序列拼接到一起。\nPython中用加号的方式把序列拼接在一起是**返回一个新的序列**而不是直接修改其中的一个序列。\n```python\n>>> username = 'hello'\n>>> password = 'world'\n>>> print username + ',' + password\n\thello,world\n```\n\n序列不只能做加法，还能做乘法。序列乘n之后返回一个重复了n次的序列\n```python\n>>> username = 'hello,world'\n>>> print username * 3\n\thello,worldhello,worldhello,world\n```\n\n# 0X03 空序列\n空序列是空的，而不是值为0。也许现在不知道这东西干嘛用，等到时候用到了就豁然开朗了\n```Python\nusername = [None] * 10 #这样就生成了一个长度为10的空序列\n```\n\n# 0X04 成员判断\n成员判断就是判断一个元素是不是存在于一个序列里\n这里返回的是布尔值，True或者False\n```python\n>>> username = 'hello,world'\n>>> ',' in username\t\t#判断元素是不是在序列里\n\tTrue\n>>> 'hello' in username\t#判断序列是不是在序列里\n\tTrue\n>>> username = ['hello', 'world']\n>>> 'hello' in username\n\tTrue\n>>> 'hel' in username\n\tFalse\n```\n\n# 0X05 长度&统计\n可以统计一个序列的长度，还能计算出序列所有元素的最大和最小\n具体的排序方法可以去网上找找或者自己尝试一下，针对每种类型的排序方式是不一样的\n```python\n>>> username = 'hello,world'\t#获取长度\n>>> print len(username)\n\t12\n>>> number = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> print max(number)\t#统计最大\n\t9\n>>> print min(number)\t#统计平均\n\t1\n```\n\n# 0X06 列表赋值\n对列表的赋值和对其他编程语言里的数组赋值几乎是一样的\n```python\n>>> username = [0, 1, 2, 3, 4, 5]\n>>> username[3] = 33\n>>> username[5] = 55\n>>> print username\n\t[0, 1, 2, 33, 4, 55]\n```\n\n# 0X07 列表删除数据\n删除列表里的数据也非常易于理解\n```python\n>>> username = ['h', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'r', 'l', 'd']\n>>> del username[5]\t#删除索引为5的元素，也就是第6个\n>>> print username\n\t['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd'] #处在原来5的位置的逗号不在了\n```\n\n# 0X08 列表分片赋值\n分片赋值相当于把以前的部分数据盖上，写上新的数据\n```python\n>>> username = list('hello,world')\n>>> username[1:5] = list('++++++')\n>>> username[2:2] = list('------')\n>>> print username\t#数据添加成功\n\t['h', '+', '-', '-', '-', '-', '-', '-', '+', '+', '+', '+', '+', ',', 'w', 'o', 'r', 'l', 'd']\n>>> username[3:5] = []  #理论上可以通过这种方式去删除列表中的数据，不过非常不建议这么做，没人愿意看这种代码，包括几天之后的你自己\n```\n\n# 0X09 列表常用方法\n\n## append 和 extend\nappend()方法是 **向列表中添加一个元素**，而extend()则是扩展原有列表。这两个方法都是修改之前的列表，而不是返回一个新的列表。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nif __name__ == '__main__':\n\ta = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tb = ['a', 'b', 'c', 'd', 'e', 'f']\n\t# a.append(b)\n\ta.extend(b)\n\tprint a\n```\n上面的代码中，留下append()方法后运行结果如下，可以看到是向原来的列表中加入了一个元素\n```bash\n[1, 2, 3, 4, 5, 6, 7, 8, 9, ['a', 'b', 'c', 'd', 'e', 'f']]\n```\n\n留下extend()方法后运行结果如下，可以看到是将列表b中的元素扩展到了列表a中\n```bash\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']\n```\n\n## count 统计数据\n计数，统计一个列表在另一个列表里出现了多少次\n```python\n>>> username = 'hello,world'\n>>> username.count('l')\n\t3\n>>> username = ['hello', 'hello', 'world', 'test']\n>>> username.count('hello')\n\t2\n```\n\n## index 索引查找\n查找第一个匹配的位置，并返回索引位置。如果返回0则是在0的位置上找到了，而不是没找到。没找到的话会直接抛出异常\n```python\n>>> username = 'hello,world'\n>>> username.index('l')\t#返回位置\n\t2\n>>> username.index('h')\t#返回0的位置\n\t0\n>>> username.index('x') #找不到，抛出异常了\n\tTraceback (most recent call last):\n  \t\tFile \"<stdin>\", line 1, in <module>\n\tValueError: substring not found\n```\n## insert 插入数据-准\n向列表中插入数据，可选参数有插入位置和插入内容\n```python\n>>> username = [1, 2, 3, 4, 5, 6, 7]\n>>> username.insert(3, 666)\n>>> print username\t#向3的位置上插入666\n\t[1, 2, 3, 666, 4, 5, 6, 7]\n```\n## pop 弹出数据-出栈\n将列表中的最后一个数据弹出来，返回且删除它。  如果知道数据结构中的栈的话，就明白了，可以比喻成  出栈\n```python\n>>> username = [1, 2, 3, 4, 5, 6, 7, 8]\n>>> username.pop()\t#出栈\n\t8\n>>> username.pop(2)\t#选择删除\n\t3\n```\n## remove 匹配删除\n移除匹配到的第一项\n```python\n>>> username = [1, 2, 3, 4, 5, 6]\n>>> username.remove(2)\n>>> print username\n\t[1, 3, 4, 5, 6]\n```\n## sort 排序方法\n可以通过Python内置算法排序，甚至还可以自定义参数\n```python\n>>> username = [1, 5, 2, 5, 65, 23, 54675, 8, 34, 5568, 345]\n>>> username.sort()\n>>> print username\n\t[1, 2, 5, 5, 8, 23, 34, 65, 345, 5568, 54675]\n```\n## sorted 排序函数\n类似sort，不过这个是返回一个新的列表\n```python\n>>> username = [1, 5, 2, 234, 3465, 234, 4657, 5, 65, 23, 54675, 8, 34, 5568, 345]\n>>> sorted(username)\n\t[1, 2, 5, 5, 8, 23, 34, 65, 234, 234, 345, 3465, 4657, 5568, 54675]\n```\n## list(reversed(x)) 反向排序\n逆向\n```python\n>>> username = [1, 5, 2, 234, 3465, 234, 4657, 5, 65, 23, 54675, 8, 34, 5568, 345]\n>>> username = sorted(username)\n>>> print username\n\t[1, 2, 5, 5, 8, 23, 34, 65, 234, 234, 345, 3465, 4657, 5568, 54675]\n>>> list(reversed(username))\n\t[54675, 5568, 4657, 3465, 345, 234, 234, 65, 34, 23, 8, 5, 5, 2, 1]\n```\n# 0X0A 元组简介\n* 元组一般用括号表示\n* 元组和列表相比，列表可以修改而元组不能修改\n```python\n>>> username = ('h', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'r', 'l', 'd')\n>>> password = ('x', ) #创建一个只包含一个数据的元组\n```\n","source":"_posts/python_list_tumple.md","raw":"---\ntitle: Python之序列：列表、元组\ndate: 2016-09-07 21:38\ntags:\n  - Python\n  - 数据结构\n---\n\n\n# 0X00 列表和元组\nPython里有个东西叫做**序列**，可以想象成一堆数据。可以简单的通过序列实现数组、链表、栈和队列等数据结构。\n序列有几种，常见的是列表和元组。\n\n# 0X01 序列分片\n我们可以从序列中截取一部分，这种操作被称为分片\n分片的时候我们可以选择起始点和结束点，还能选择步长，甚至乃能倒序\n分片使用`:`分隔开参数，一般情况下有两个参数，截取第一个参数到第二个参数，左开右闭\n如果参数是负数的话，则表示倒数第几个\n但是可以接受第三个参数，第三个参数表示步长。如果第二个参数是2那么就是接一跳一。\n如果参数为空则表示极限。  具体可以看下面的代码\n```python\n>>> username = 'hello,world'\n>>> print username[4:8]\t\t\t#截取从4到8，左开右闭\n\to,wo\n>>> print username[4:-2]\t\t#截取4到倒数第4的参数，如果想要包括最后一个是不能用-1的，要用下面的方式\n\to,wor\n>>> print username[2:]\t\t\t#截取包括最后一个的话不能用-1，因为-1是最后一个，然后区间是左开右闭，所有右边留空就表示极限了\n\tllo,world\n>>> print username[:]\t\t\t#两头取极限，就是完整的序列\n\thello,world\n>>> print username[1:8:2]\t\t#演示步长，此处步长为2\n\tel,o\n>>> print username[8:0:-1]\t\t#当步长为-1的时候，就是从后向前的\n\trow,olle\n```\n\n# 0X02 序列拼接\n序列拼接就和Java里的字符串拼接差不多，可以单纯的用一个加号连在一起。当然Python比Java方便的一点就是，不只是字符串，什么东西只要是在序列里就能用序列拼接到一起。\nPython中用加号的方式把序列拼接在一起是**返回一个新的序列**而不是直接修改其中的一个序列。\n```python\n>>> username = 'hello'\n>>> password = 'world'\n>>> print username + ',' + password\n\thello,world\n```\n\n序列不只能做加法，还能做乘法。序列乘n之后返回一个重复了n次的序列\n```python\n>>> username = 'hello,world'\n>>> print username * 3\n\thello,worldhello,worldhello,world\n```\n\n# 0X03 空序列\n空序列是空的，而不是值为0。也许现在不知道这东西干嘛用，等到时候用到了就豁然开朗了\n```Python\nusername = [None] * 10 #这样就生成了一个长度为10的空序列\n```\n\n# 0X04 成员判断\n成员判断就是判断一个元素是不是存在于一个序列里\n这里返回的是布尔值，True或者False\n```python\n>>> username = 'hello,world'\n>>> ',' in username\t\t#判断元素是不是在序列里\n\tTrue\n>>> 'hello' in username\t#判断序列是不是在序列里\n\tTrue\n>>> username = ['hello', 'world']\n>>> 'hello' in username\n\tTrue\n>>> 'hel' in username\n\tFalse\n```\n\n# 0X05 长度&统计\n可以统计一个序列的长度，还能计算出序列所有元素的最大和最小\n具体的排序方法可以去网上找找或者自己尝试一下，针对每种类型的排序方式是不一样的\n```python\n>>> username = 'hello,world'\t#获取长度\n>>> print len(username)\n\t12\n>>> number = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> print max(number)\t#统计最大\n\t9\n>>> print min(number)\t#统计平均\n\t1\n```\n\n# 0X06 列表赋值\n对列表的赋值和对其他编程语言里的数组赋值几乎是一样的\n```python\n>>> username = [0, 1, 2, 3, 4, 5]\n>>> username[3] = 33\n>>> username[5] = 55\n>>> print username\n\t[0, 1, 2, 33, 4, 55]\n```\n\n# 0X07 列表删除数据\n删除列表里的数据也非常易于理解\n```python\n>>> username = ['h', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'r', 'l', 'd']\n>>> del username[5]\t#删除索引为5的元素，也就是第6个\n>>> print username\n\t['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd'] #处在原来5的位置的逗号不在了\n```\n\n# 0X08 列表分片赋值\n分片赋值相当于把以前的部分数据盖上，写上新的数据\n```python\n>>> username = list('hello,world')\n>>> username[1:5] = list('++++++')\n>>> username[2:2] = list('------')\n>>> print username\t#数据添加成功\n\t['h', '+', '-', '-', '-', '-', '-', '-', '+', '+', '+', '+', '+', ',', 'w', 'o', 'r', 'l', 'd']\n>>> username[3:5] = []  #理论上可以通过这种方式去删除列表中的数据，不过非常不建议这么做，没人愿意看这种代码，包括几天之后的你自己\n```\n\n# 0X09 列表常用方法\n\n## append 和 extend\nappend()方法是 **向列表中添加一个元素**，而extend()则是扩展原有列表。这两个方法都是修改之前的列表，而不是返回一个新的列表。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nif __name__ == '__main__':\n\ta = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tb = ['a', 'b', 'c', 'd', 'e', 'f']\n\t# a.append(b)\n\ta.extend(b)\n\tprint a\n```\n上面的代码中，留下append()方法后运行结果如下，可以看到是向原来的列表中加入了一个元素\n```bash\n[1, 2, 3, 4, 5, 6, 7, 8, 9, ['a', 'b', 'c', 'd', 'e', 'f']]\n```\n\n留下extend()方法后运行结果如下，可以看到是将列表b中的元素扩展到了列表a中\n```bash\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b', 'c', 'd', 'e', 'f']\n```\n\n## count 统计数据\n计数，统计一个列表在另一个列表里出现了多少次\n```python\n>>> username = 'hello,world'\n>>> username.count('l')\n\t3\n>>> username = ['hello', 'hello', 'world', 'test']\n>>> username.count('hello')\n\t2\n```\n\n## index 索引查找\n查找第一个匹配的位置，并返回索引位置。如果返回0则是在0的位置上找到了，而不是没找到。没找到的话会直接抛出异常\n```python\n>>> username = 'hello,world'\n>>> username.index('l')\t#返回位置\n\t2\n>>> username.index('h')\t#返回0的位置\n\t0\n>>> username.index('x') #找不到，抛出异常了\n\tTraceback (most recent call last):\n  \t\tFile \"<stdin>\", line 1, in <module>\n\tValueError: substring not found\n```\n## insert 插入数据-准\n向列表中插入数据，可选参数有插入位置和插入内容\n```python\n>>> username = [1, 2, 3, 4, 5, 6, 7]\n>>> username.insert(3, 666)\n>>> print username\t#向3的位置上插入666\n\t[1, 2, 3, 666, 4, 5, 6, 7]\n```\n## pop 弹出数据-出栈\n将列表中的最后一个数据弹出来，返回且删除它。  如果知道数据结构中的栈的话，就明白了，可以比喻成  出栈\n```python\n>>> username = [1, 2, 3, 4, 5, 6, 7, 8]\n>>> username.pop()\t#出栈\n\t8\n>>> username.pop(2)\t#选择删除\n\t3\n```\n## remove 匹配删除\n移除匹配到的第一项\n```python\n>>> username = [1, 2, 3, 4, 5, 6]\n>>> username.remove(2)\n>>> print username\n\t[1, 3, 4, 5, 6]\n```\n## sort 排序方法\n可以通过Python内置算法排序，甚至还可以自定义参数\n```python\n>>> username = [1, 5, 2, 5, 65, 23, 54675, 8, 34, 5568, 345]\n>>> username.sort()\n>>> print username\n\t[1, 2, 5, 5, 8, 23, 34, 65, 345, 5568, 54675]\n```\n## sorted 排序函数\n类似sort，不过这个是返回一个新的列表\n```python\n>>> username = [1, 5, 2, 234, 3465, 234, 4657, 5, 65, 23, 54675, 8, 34, 5568, 345]\n>>> sorted(username)\n\t[1, 2, 5, 5, 8, 23, 34, 65, 234, 234, 345, 3465, 4657, 5568, 54675]\n```\n## list(reversed(x)) 反向排序\n逆向\n```python\n>>> username = [1, 5, 2, 234, 3465, 234, 4657, 5, 65, 23, 54675, 8, 34, 5568, 345]\n>>> username = sorted(username)\n>>> print username\n\t[1, 2, 5, 5, 8, 23, 34, 65, 234, 234, 345, 3465, 4657, 5568, 54675]\n>>> list(reversed(username))\n\t[54675, 5568, 4657, 3465, 345, 234, 234, 65, 34, 23, 8, 5, 5, 2, 1]\n```\n# 0X0A 元组简介\n* 元组一般用括号表示\n* 元组和列表相比，列表可以修改而元组不能修改\n```python\n>>> username = ('h', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'r', 'l', 'd')\n>>> password = ('x', ) #创建一个只包含一个数据的元组\n```\n","slug":"python_list_tumple","published":1,"updated":"2017-09-02T14:48:14.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmee001lhnlpp1ee9wfs","content":"<h1 id=\"0X00-列表和元组\"><a href=\"#0X00-列表和元组\" class=\"headerlink\" title=\"0X00 列表和元组\"></a>0X00 列表和元组</h1><p>Python里有个东西叫做<strong>序列</strong>，可以想象成一堆数据。可以简单的通过序列实现数组、链表、栈和队列等数据结构。<br>序列有几种，常见的是列表和元组。</p>\n<h1 id=\"0X01-序列分片\"><a href=\"#0X01-序列分片\" class=\"headerlink\" title=\"0X01 序列分片\"></a>0X01 序列分片</h1><p>我们可以从序列中截取一部分，这种操作被称为分片<br>分片的时候我们可以选择起始点和结束点，还能选择步长，甚至乃能倒序<br>分片使用<code>:</code>分隔开参数，一般情况下有两个参数，截取第一个参数到第二个参数，左开右闭<br>如果参数是负数的话，则表示倒数第几个<br>但是可以接受第三个参数，第三个参数表示步长。如果第二个参数是2那么就是接一跳一。<br>如果参数为空则表示极限。  具体可以看下面的代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">4</span>:<span class=\"number\">8</span>]\t\t\t<span class=\"comment\">#截取从4到8，左开右闭</span></div><div class=\"line\">\to,wo</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">4</span>:<span class=\"number\">-2</span>]\t\t<span class=\"comment\">#截取4到倒数第4的参数，如果想要包括最后一个是不能用-1的，要用下面的方式</span></div><div class=\"line\">\to,wor</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">2</span>:]\t\t\t<span class=\"comment\">#截取包括最后一个的话不能用-1，因为-1是最后一个，然后区间是左开右闭，所有右边留空就表示极限了</span></div><div class=\"line\">\tllo,world</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[:]\t\t\t<span class=\"comment\">#两头取极限，就是完整的序列</span></div><div class=\"line\">\thello,world</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">1</span>:<span class=\"number\">8</span>:<span class=\"number\">2</span>]\t\t<span class=\"comment\">#演示步长，此处步长为2</span></div><div class=\"line\">\tel,o</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">8</span>:<span class=\"number\">0</span>:<span class=\"number\">-1</span>]\t\t<span class=\"comment\">#当步长为-1的时候，就是从后向前的</span></div><div class=\"line\">\trow,olle</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-序列拼接\"><a href=\"#0X02-序列拼接\" class=\"headerlink\" title=\"0X02 序列拼接\"></a>0X02 序列拼接</h1><p>序列拼接就和Java里的字符串拼接差不多，可以单纯的用一个加号连在一起。当然Python比Java方便的一点就是，不只是字符串，什么东西只要是在序列里就能用序列拼接到一起。<br>Python中用加号的方式把序列拼接在一起是<strong>返回一个新的序列</strong>而不是直接修改其中的一个序列。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>password = <span class=\"string\">'world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username + <span class=\"string\">','</span> + password</div><div class=\"line\">\thello,world</div></pre></td></tr></table></figure></p>\n<p>序列不只能做加法，还能做乘法。序列乘n之后返回一个重复了n次的序列<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username * <span class=\"number\">3</span></div><div class=\"line\">\thello,worldhello,worldhello,world</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-空序列\"><a href=\"#0X03-空序列\" class=\"headerlink\" title=\"0X03 空序列\"></a>0X03 空序列</h1><p>空序列是空的，而不是值为0。也许现在不知道这东西干嘛用，等到时候用到了就豁然开朗了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">username = [<span class=\"keyword\">None</span>] * <span class=\"number\">10</span> <span class=\"comment\">#这样就生成了一个长度为10的空序列</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-成员判断\"><a href=\"#0X04-成员判断\" class=\"headerlink\" title=\"0X04 成员判断\"></a>0X04 成员判断</h1><p>成员判断就是判断一个元素是不是存在于一个序列里<br>这里返回的是布尔值，True或者False<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">','</span> <span class=\"keyword\">in</span> username\t\t<span class=\"comment\">#判断元素是不是在序列里</span></div><div class=\"line\">\t<span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'hello'</span> <span class=\"keyword\">in</span> username\t<span class=\"comment\">#判断序列是不是在序列里</span></div><div class=\"line\">\t<span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'hello'</span> <span class=\"keyword\">in</span> username</div><div class=\"line\">\t<span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'hel'</span> <span class=\"keyword\">in</span> username</div><div class=\"line\">\t<span class=\"keyword\">False</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-长度-amp-统计\"><a href=\"#0X05-长度-amp-统计\" class=\"headerlink\" title=\"0X05 长度&amp;统计\"></a>0X05 长度&amp;统计</h1><p>可以统计一个序列的长度，还能计算出序列所有元素的最大和最小<br>具体的排序方法可以去网上找找或者自己尝试一下，针对每种类型的排序方式是不一样的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span>\t<span class=\"comment\">#获取长度</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> len(username)</div><div class=\"line\">\t<span class=\"number\">12</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> max(number)\t<span class=\"comment\">#统计最大</span></div><div class=\"line\">\t<span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> min(number)\t<span class=\"comment\">#统计平均</span></div><div class=\"line\">\t<span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-列表赋值\"><a href=\"#0X06-列表赋值\" class=\"headerlink\" title=\"0X06 列表赋值\"></a>0X06 列表赋值</h1><p>对列表的赋值和对其他编程语言里的数组赋值几乎是一样的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">3</span>] = <span class=\"number\">33</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">5</span>] = <span class=\"number\">55</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">33</span>, <span class=\"number\">4</span>, <span class=\"number\">55</span>]</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-列表删除数据\"><a href=\"#0X07-列表删除数据\" class=\"headerlink\" title=\"0X07 列表删除数据\"></a>0X07 列表删除数据</h1><p>删除列表里的数据也非常易于理解<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"string\">'h'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">','</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'d'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> username[<span class=\"number\">5</span>]\t<span class=\"comment\">#删除索引为5的元素，也就是第6个</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"string\">'h'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'d'</span>] <span class=\"comment\">#处在原来5的位置的逗号不在了</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-列表分片赋值\"><a href=\"#0X08-列表分片赋值\" class=\"headerlink\" title=\"0X08 列表分片赋值\"></a>0X08 列表分片赋值</h1><p>分片赋值相当于把以前的部分数据盖上，写上新的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = list(<span class=\"string\">'hello,world'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">1</span>:<span class=\"number\">5</span>] = list(<span class=\"string\">'++++++'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">2</span>:<span class=\"number\">2</span>] = list(<span class=\"string\">'------'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username\t<span class=\"comment\">#数据添加成功</span></div><div class=\"line\">\t[<span class=\"string\">'h'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">','</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'d'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">3</span>:<span class=\"number\">5</span>] = []  <span class=\"comment\">#理论上可以通过这种方式去删除列表中的数据，不过非常不建议这么做，没人愿意看这种代码，包括几天之后的你自己</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X09-列表常用方法\"><a href=\"#0X09-列表常用方法\" class=\"headerlink\" title=\"0X09 列表常用方法\"></a>0X09 列表常用方法</h1><h2 id=\"append-和-extend\"><a href=\"#append-和-extend\" class=\"headerlink\" title=\"append 和 extend\"></a>append 和 extend</h2><p>append()方法是 <strong>向列表中添加一个元素</strong>，而extend()则是扩展原有列表。这两个方法都是修改之前的列表，而不是返回一个新的列表。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\ta = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div><div class=\"line\">\tb = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>]</div><div class=\"line\">\t<span class=\"comment\"># a.append(b)</span></div><div class=\"line\">\ta.extend(b)</div><div class=\"line\">\t<span class=\"keyword\">print</span> a</div></pre></td></tr></table></figure></p>\n<p>上面的代码中，留下append()方法后运行结果如下，可以看到是向原来的列表中加入了一个元素<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1, 2, 3, 4, 5, 6, 7, 8, 9, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>]]</div></pre></td></tr></table></figure></p>\n<p>留下extend()方法后运行结果如下，可以看到是将列表b中的元素扩展到了列表a中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1, 2, 3, 4, 5, 6, 7, 8, 9, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"count-统计数据\"><a href=\"#count-统计数据\" class=\"headerlink\" title=\"count 统计数据\"></a>count 统计数据</h2><p>计数，统计一个列表在另一个列表里出现了多少次<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.count(<span class=\"string\">'l'</span>)</div><div class=\"line\">\t<span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"string\">'hello'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, <span class=\"string\">'test'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.count(<span class=\"string\">'hello'</span>)</div><div class=\"line\">\t<span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"index-索引查找\"><a href=\"#index-索引查找\" class=\"headerlink\" title=\"index 索引查找\"></a>index 索引查找</h2><p>查找第一个匹配的位置，并返回索引位置。如果返回0则是在0的位置上找到了，而不是没找到。没找到的话会直接抛出异常<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.index(<span class=\"string\">'l'</span>)\t<span class=\"comment\">#返回位置</span></div><div class=\"line\">\t<span class=\"number\">2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.index(<span class=\"string\">'h'</span>)\t<span class=\"comment\">#返回0的位置</span></div><div class=\"line\">\t<span class=\"number\">0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.index(<span class=\"string\">'x'</span>) <span class=\"comment\">#找不到，抛出异常了</span></div><div class=\"line\">\tTraceback (most recent call last):</div><div class=\"line\">  \t\tFile <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">\tValueError: substring <span class=\"keyword\">not</span> found</div></pre></td></tr></table></figure></p>\n<h2 id=\"insert-插入数据-准\"><a href=\"#insert-插入数据-准\" class=\"headerlink\" title=\"insert 插入数据-准\"></a>insert 插入数据-准</h2><p>向列表中插入数据，可选参数有插入位置和插入内容<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.insert(<span class=\"number\">3</span>, <span class=\"number\">666</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username\t<span class=\"comment\">#向3的位置上插入666</span></div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">666</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"pop-弹出数据-出栈\"><a href=\"#pop-弹出数据-出栈\" class=\"headerlink\" title=\"pop 弹出数据-出栈\"></a>pop 弹出数据-出栈</h2><p>将列表中的最后一个数据弹出来，返回且删除它。  如果知道数据结构中的栈的话，就明白了，可以比喻成  出栈<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.pop()\t<span class=\"comment\">#出栈</span></div><div class=\"line\">\t<span class=\"number\">8</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.pop(<span class=\"number\">2</span>)\t<span class=\"comment\">#选择删除</span></div><div class=\"line\">\t<span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"remove-匹配删除\"><a href=\"#remove-匹配删除\" class=\"headerlink\" title=\"remove 匹配删除\"></a>remove 匹配删除</h2><p>移除匹配到的第一项<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.remove(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"sort-排序方法\"><a href=\"#sort-排序方法\" class=\"headerlink\" title=\"sort 排序方法\"></a>sort 排序方法</h2><p>可以通过Python内置算法排序，甚至还可以自定义参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">54675</span>, <span class=\"number\">8</span>, <span class=\"number\">34</span>, <span class=\"number\">5568</span>, <span class=\"number\">345</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.sort()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">345</span>, <span class=\"number\">5568</span>, <span class=\"number\">54675</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"sorted-排序函数\"><a href=\"#sorted-排序函数\" class=\"headerlink\" title=\"sorted 排序函数\"></a>sorted 排序函数</h2><p>类似sort，不过这个是返回一个新的列表<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">234</span>, <span class=\"number\">3465</span>, <span class=\"number\">234</span>, <span class=\"number\">4657</span>, <span class=\"number\">5</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">54675</span>, <span class=\"number\">8</span>, <span class=\"number\">34</span>, <span class=\"number\">5568</span>, <span class=\"number\">345</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(username)</div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">234</span>, <span class=\"number\">234</span>, <span class=\"number\">345</span>, <span class=\"number\">3465</span>, <span class=\"number\">4657</span>, <span class=\"number\">5568</span>, <span class=\"number\">54675</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"list-reversed-x-反向排序\"><a href=\"#list-reversed-x-反向排序\" class=\"headerlink\" title=\"list(reversed(x)) 反向排序\"></a>list(reversed(x)) 反向排序</h2><p>逆向<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">234</span>, <span class=\"number\">3465</span>, <span class=\"number\">234</span>, <span class=\"number\">4657</span>, <span class=\"number\">5</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">54675</span>, <span class=\"number\">8</span>, <span class=\"number\">34</span>, <span class=\"number\">5568</span>, <span class=\"number\">345</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = sorted(username)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">234</span>, <span class=\"number\">234</span>, <span class=\"number\">345</span>, <span class=\"number\">3465</span>, <span class=\"number\">4657</span>, <span class=\"number\">5568</span>, <span class=\"number\">54675</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(reversed(username))</div><div class=\"line\">\t[<span class=\"number\">54675</span>, <span class=\"number\">5568</span>, <span class=\"number\">4657</span>, <span class=\"number\">3465</span>, <span class=\"number\">345</span>, <span class=\"number\">234</span>, <span class=\"number\">234</span>, <span class=\"number\">65</span>, <span class=\"number\">34</span>, <span class=\"number\">23</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0A-元组简介\"><a href=\"#0X0A-元组简介\" class=\"headerlink\" title=\"0X0A 元组简介\"></a>0X0A 元组简介</h1><ul>\n<li>元组一般用括号表示</li>\n<li>元组和列表相比，列表可以修改而元组不能修改<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = (<span class=\"string\">'h'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">','</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'d'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>password = (<span class=\"string\">'x'</span>, ) <span class=\"comment\">#创建一个只包含一个数据的元组</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-列表和元组\"><a href=\"#0X00-列表和元组\" class=\"headerlink\" title=\"0X00 列表和元组\"></a>0X00 列表和元组</h1><p>Python里有个东西叫做<strong>序列</strong>，可以想象成一堆数据。可以简单的通过序列实现数组、链表、栈和队列等数据结构。<br>序列有几种，常见的是列表和元组。</p>\n<h1 id=\"0X01-序列分片\"><a href=\"#0X01-序列分片\" class=\"headerlink\" title=\"0X01 序列分片\"></a>0X01 序列分片</h1><p>我们可以从序列中截取一部分，这种操作被称为分片<br>分片的时候我们可以选择起始点和结束点，还能选择步长，甚至乃能倒序<br>分片使用<code>:</code>分隔开参数，一般情况下有两个参数，截取第一个参数到第二个参数，左开右闭<br>如果参数是负数的话，则表示倒数第几个<br>但是可以接受第三个参数，第三个参数表示步长。如果第二个参数是2那么就是接一跳一。<br>如果参数为空则表示极限。  具体可以看下面的代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">4</span>:<span class=\"number\">8</span>]\t\t\t<span class=\"comment\">#截取从4到8，左开右闭</span></div><div class=\"line\">\to,wo</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">4</span>:<span class=\"number\">-2</span>]\t\t<span class=\"comment\">#截取4到倒数第4的参数，如果想要包括最后一个是不能用-1的，要用下面的方式</span></div><div class=\"line\">\to,wor</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">2</span>:]\t\t\t<span class=\"comment\">#截取包括最后一个的话不能用-1，因为-1是最后一个，然后区间是左开右闭，所有右边留空就表示极限了</span></div><div class=\"line\">\tllo,world</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[:]\t\t\t<span class=\"comment\">#两头取极限，就是完整的序列</span></div><div class=\"line\">\thello,world</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">1</span>:<span class=\"number\">8</span>:<span class=\"number\">2</span>]\t\t<span class=\"comment\">#演示步长，此处步长为2</span></div><div class=\"line\">\tel,o</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username[<span class=\"number\">8</span>:<span class=\"number\">0</span>:<span class=\"number\">-1</span>]\t\t<span class=\"comment\">#当步长为-1的时候，就是从后向前的</span></div><div class=\"line\">\trow,olle</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-序列拼接\"><a href=\"#0X02-序列拼接\" class=\"headerlink\" title=\"0X02 序列拼接\"></a>0X02 序列拼接</h1><p>序列拼接就和Java里的字符串拼接差不多，可以单纯的用一个加号连在一起。当然Python比Java方便的一点就是，不只是字符串，什么东西只要是在序列里就能用序列拼接到一起。<br>Python中用加号的方式把序列拼接在一起是<strong>返回一个新的序列</strong>而不是直接修改其中的一个序列。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>password = <span class=\"string\">'world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username + <span class=\"string\">','</span> + password</div><div class=\"line\">\thello,world</div></pre></td></tr></table></figure></p>\n<p>序列不只能做加法，还能做乘法。序列乘n之后返回一个重复了n次的序列<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username * <span class=\"number\">3</span></div><div class=\"line\">\thello,worldhello,worldhello,world</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-空序列\"><a href=\"#0X03-空序列\" class=\"headerlink\" title=\"0X03 空序列\"></a>0X03 空序列</h1><p>空序列是空的，而不是值为0。也许现在不知道这东西干嘛用，等到时候用到了就豁然开朗了<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">username = [<span class=\"keyword\">None</span>] * <span class=\"number\">10</span> <span class=\"comment\">#这样就生成了一个长度为10的空序列</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-成员判断\"><a href=\"#0X04-成员判断\" class=\"headerlink\" title=\"0X04 成员判断\"></a>0X04 成员判断</h1><p>成员判断就是判断一个元素是不是存在于一个序列里<br>这里返回的是布尔值，True或者False<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">','</span> <span class=\"keyword\">in</span> username\t\t<span class=\"comment\">#判断元素是不是在序列里</span></div><div class=\"line\">\t<span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'hello'</span> <span class=\"keyword\">in</span> username\t<span class=\"comment\">#判断序列是不是在序列里</span></div><div class=\"line\">\t<span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'hello'</span> <span class=\"keyword\">in</span> username</div><div class=\"line\">\t<span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'hel'</span> <span class=\"keyword\">in</span> username</div><div class=\"line\">\t<span class=\"keyword\">False</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-长度-amp-统计\"><a href=\"#0X05-长度-amp-统计\" class=\"headerlink\" title=\"0X05 长度&amp;统计\"></a>0X05 长度&amp;统计</h1><p>可以统计一个序列的长度，还能计算出序列所有元素的最大和最小<br>具体的排序方法可以去网上找找或者自己尝试一下，针对每种类型的排序方式是不一样的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span>\t<span class=\"comment\">#获取长度</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> len(username)</div><div class=\"line\">\t<span class=\"number\">12</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> max(number)\t<span class=\"comment\">#统计最大</span></div><div class=\"line\">\t<span class=\"number\">9</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> min(number)\t<span class=\"comment\">#统计平均</span></div><div class=\"line\">\t<span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-列表赋值\"><a href=\"#0X06-列表赋值\" class=\"headerlink\" title=\"0X06 列表赋值\"></a>0X06 列表赋值</h1><p>对列表的赋值和对其他编程语言里的数组赋值几乎是一样的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">3</span>] = <span class=\"number\">33</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">5</span>] = <span class=\"number\">55</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">33</span>, <span class=\"number\">4</span>, <span class=\"number\">55</span>]</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-列表删除数据\"><a href=\"#0X07-列表删除数据\" class=\"headerlink\" title=\"0X07 列表删除数据\"></a>0X07 列表删除数据</h1><p>删除列表里的数据也非常易于理解<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"string\">'h'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">','</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'d'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> username[<span class=\"number\">5</span>]\t<span class=\"comment\">#删除索引为5的元素，也就是第6个</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"string\">'h'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'d'</span>] <span class=\"comment\">#处在原来5的位置的逗号不在了</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-列表分片赋值\"><a href=\"#0X08-列表分片赋值\" class=\"headerlink\" title=\"0X08 列表分片赋值\"></a>0X08 列表分片赋值</h1><p>分片赋值相当于把以前的部分数据盖上，写上新的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = list(<span class=\"string\">'hello,world'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">1</span>:<span class=\"number\">5</span>] = list(<span class=\"string\">'++++++'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">2</span>:<span class=\"number\">2</span>] = list(<span class=\"string\">'------'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username\t<span class=\"comment\">#数据添加成功</span></div><div class=\"line\">\t[<span class=\"string\">'h'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">','</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'d'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username[<span class=\"number\">3</span>:<span class=\"number\">5</span>] = []  <span class=\"comment\">#理论上可以通过这种方式去删除列表中的数据，不过非常不建议这么做，没人愿意看这种代码，包括几天之后的你自己</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X09-列表常用方法\"><a href=\"#0X09-列表常用方法\" class=\"headerlink\" title=\"0X09 列表常用方法\"></a>0X09 列表常用方法</h1><h2 id=\"append-和-extend\"><a href=\"#append-和-extend\" class=\"headerlink\" title=\"append 和 extend\"></a>append 和 extend</h2><p>append()方法是 <strong>向列表中添加一个元素</strong>，而extend()则是扩展原有列表。这两个方法都是修改之前的列表，而不是返回一个新的列表。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\ta = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</div><div class=\"line\">\tb = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>]</div><div class=\"line\">\t<span class=\"comment\"># a.append(b)</span></div><div class=\"line\">\ta.extend(b)</div><div class=\"line\">\t<span class=\"keyword\">print</span> a</div></pre></td></tr></table></figure></p>\n<p>上面的代码中，留下append()方法后运行结果如下，可以看到是向原来的列表中加入了一个元素<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1, 2, 3, 4, 5, 6, 7, 8, 9, [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>]]</div></pre></td></tr></table></figure></p>\n<p>留下extend()方法后运行结果如下，可以看到是将列表b中的元素扩展到了列表a中<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1, 2, 3, 4, 5, 6, 7, 8, 9, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"count-统计数据\"><a href=\"#count-统计数据\" class=\"headerlink\" title=\"count 统计数据\"></a>count 统计数据</h2><p>计数，统计一个列表在另一个列表里出现了多少次<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.count(<span class=\"string\">'l'</span>)</div><div class=\"line\">\t<span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"string\">'hello'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, <span class=\"string\">'test'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.count(<span class=\"string\">'hello'</span>)</div><div class=\"line\">\t<span class=\"number\">2</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"index-索引查找\"><a href=\"#index-索引查找\" class=\"headerlink\" title=\"index 索引查找\"></a>index 索引查找</h2><p>查找第一个匹配的位置，并返回索引位置。如果返回0则是在0的位置上找到了，而不是没找到。没找到的话会直接抛出异常<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.index(<span class=\"string\">'l'</span>)\t<span class=\"comment\">#返回位置</span></div><div class=\"line\">\t<span class=\"number\">2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.index(<span class=\"string\">'h'</span>)\t<span class=\"comment\">#返回0的位置</span></div><div class=\"line\">\t<span class=\"number\">0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.index(<span class=\"string\">'x'</span>) <span class=\"comment\">#找不到，抛出异常了</span></div><div class=\"line\">\tTraceback (most recent call last):</div><div class=\"line\">  \t\tFile <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">\tValueError: substring <span class=\"keyword\">not</span> found</div></pre></td></tr></table></figure></p>\n<h2 id=\"insert-插入数据-准\"><a href=\"#insert-插入数据-准\" class=\"headerlink\" title=\"insert 插入数据-准\"></a>insert 插入数据-准</h2><p>向列表中插入数据，可选参数有插入位置和插入内容<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.insert(<span class=\"number\">3</span>, <span class=\"number\">666</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username\t<span class=\"comment\">#向3的位置上插入666</span></div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">666</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"pop-弹出数据-出栈\"><a href=\"#pop-弹出数据-出栈\" class=\"headerlink\" title=\"pop 弹出数据-出栈\"></a>pop 弹出数据-出栈</h2><p>将列表中的最后一个数据弹出来，返回且删除它。  如果知道数据结构中的栈的话，就明白了，可以比喻成  出栈<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.pop()\t<span class=\"comment\">#出栈</span></div><div class=\"line\">\t<span class=\"number\">8</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.pop(<span class=\"number\">2</span>)\t<span class=\"comment\">#选择删除</span></div><div class=\"line\">\t<span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"remove-匹配删除\"><a href=\"#remove-匹配删除\" class=\"headerlink\" title=\"remove 匹配删除\"></a>remove 匹配删除</h2><p>移除匹配到的第一项<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.remove(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"sort-排序方法\"><a href=\"#sort-排序方法\" class=\"headerlink\" title=\"sort 排序方法\"></a>sort 排序方法</h2><p>可以通过Python内置算法排序，甚至还可以自定义参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">54675</span>, <span class=\"number\">8</span>, <span class=\"number\">34</span>, <span class=\"number\">5568</span>, <span class=\"number\">345</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username.sort()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">345</span>, <span class=\"number\">5568</span>, <span class=\"number\">54675</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"sorted-排序函数\"><a href=\"#sorted-排序函数\" class=\"headerlink\" title=\"sorted 排序函数\"></a>sorted 排序函数</h2><p>类似sort，不过这个是返回一个新的列表<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">234</span>, <span class=\"number\">3465</span>, <span class=\"number\">234</span>, <span class=\"number\">4657</span>, <span class=\"number\">5</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">54675</span>, <span class=\"number\">8</span>, <span class=\"number\">34</span>, <span class=\"number\">5568</span>, <span class=\"number\">345</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(username)</div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">234</span>, <span class=\"number\">234</span>, <span class=\"number\">345</span>, <span class=\"number\">3465</span>, <span class=\"number\">4657</span>, <span class=\"number\">5568</span>, <span class=\"number\">54675</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"list-reversed-x-反向排序\"><a href=\"#list-reversed-x-反向排序\" class=\"headerlink\" title=\"list(reversed(x)) 反向排序\"></a>list(reversed(x)) 反向排序</h2><p>逆向<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">234</span>, <span class=\"number\">3465</span>, <span class=\"number\">234</span>, <span class=\"number\">4657</span>, <span class=\"number\">5</span>, <span class=\"number\">65</span>, <span class=\"number\">23</span>, <span class=\"number\">54675</span>, <span class=\"number\">8</span>, <span class=\"number\">34</span>, <span class=\"number\">5568</span>, <span class=\"number\">345</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = sorted(username)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> username</div><div class=\"line\">\t[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">23</span>, <span class=\"number\">34</span>, <span class=\"number\">65</span>, <span class=\"number\">234</span>, <span class=\"number\">234</span>, <span class=\"number\">345</span>, <span class=\"number\">3465</span>, <span class=\"number\">4657</span>, <span class=\"number\">5568</span>, <span class=\"number\">54675</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(reversed(username))</div><div class=\"line\">\t[<span class=\"number\">54675</span>, <span class=\"number\">5568</span>, <span class=\"number\">4657</span>, <span class=\"number\">3465</span>, <span class=\"number\">345</span>, <span class=\"number\">234</span>, <span class=\"number\">234</span>, <span class=\"number\">65</span>, <span class=\"number\">34</span>, <span class=\"number\">23</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0A-元组简介\"><a href=\"#0X0A-元组简介\" class=\"headerlink\" title=\"0X0A 元组简介\"></a>0X0A 元组简介</h1><ul>\n<li>元组一般用括号表示</li>\n<li>元组和列表相比，列表可以修改而元组不能修改<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>username = (<span class=\"string\">'h'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">','</span>, <span class=\"string\">'w'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'l'</span>, <span class=\"string\">'d'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>password = (<span class=\"string\">'x'</span>, ) <span class=\"comment\">#创建一个只包含一个数据的元组</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Python 奇技淫巧 (一) 列表、集合、字典","date":"2017-01-15T07:08:00.000Z","_content":"\n> ### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 \\*表达式\n从某个可迭代对象中分解出N个元素，但是这个可迭代的对象可能会超过N，会出现too many values to unpack异常。\n\n比如我这儿有N个统计信息，因为第一次和最后一次的信息不准确需要删除掉，而将中间的信息保留下来，那么就可以这么弄。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nif __name__ == '__main__':\n    grade = [23, 45, 42, 45, 78, 98, 89, 97, 69, 77, 88, 50, 65, 99, 98]\n    first, *new_grade, last = grade\n    print(new_grade)\n```\n这里的赋值就是将第一个和最后一个赋给了first和last，而中间的给了new_grade\n\n# 0X01 定长队列\n有一种情况：程序在运行的时候会记录日志，比如说web程序的访问历史。如果我们需要只保留最后的1W条数据，那么很快能想到使用一个列表，每次插入数据的时候判断长度，然后对应的append和del。但是有一个更简单且更快速的方法就是使用`collections.deque()`。下面的例子中有一个1024长的列表，我们列表里只存最新的7条。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n# 导入一个包\nimport collections\n\nif __name__ == '__main__':\n\t# 当做一种数据解雇来用就可以\n    auto_queue = collections.deque(maxlen=7)\n    my_list = range(1024)\n    for i in my_list:\n        auto_queue.append(i)\n    print(auto_queue)\n```\n运行之后可以看到，列表里只保存了最后插入的七条数据。\n\n# 0X02 最大最小的几个元素\n当我们有一个列表，需要找到列表里最大的N个元素时，一般会想到先排序然后分片，这想法当然不多，但是还有一个更好用的方法：\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport heapq\n\n\nif __name__ == '__main__':\n    my_list = [34, 234, 56, 56, 345, 456, 23, 213, 456, 8, 98, 43, 2, 67]\n    print('max: ', heapq.nlargest(3,  my_list))\t# 找到最大的三个\n    print('min: ', heapq.nsmallest(2, my_list)) # 找到最小的两个\n```\n我这里用列表来演示，但是这个方法支持更复杂的数据结构。比如我有一个列表，列表里包含很多个字典，字典里是学生考试信息，那么我就可以用考试分数来找到前三名：\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport heapq\n\n\nif __name__ == '__main__':\n    my_list = [{'name': '小明', 'grade': 56}, {'name': '小红', 'grade': 87}, {'name': '小刚', 'grade': 67},\n               {'name': '小志', 'grade': 46}, {'name': '小逗逼', 'grade': 99}, {'name': '小华', 'grade': 85},]\n    print('max: ', heapq.nlargest(3,  my_list, key=lambda s: s['grade']))\n    print('min: ', heapq.nsmallest(3, my_list, key=lambda s: s['grade']))\n```\nkey 后面的 `lambda s: s['grade']`是用了一个 **匿名函数** 。列表里唯一的值就是排序的关键字。更多关于[更多关于匿名函数](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431843456408652233b88b424613aa8ec2fe032fd85a000)\n\n如果N相对总数据量来说很小，可以用`heapq.heapify()`获得更好的性能。这个函数会将原来的集合转变成列表并以 **堆** 的形式排序。而堆最重要的一个特性就是最小的那个元素一定在第一位。所以我们可以利用这个性质来获取最小的前N个。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport heapq\n\n\nif __name__ == '__main__':\n    my_list = [234, 324, 456, 567, 345, 23, 546, 567, 98, 45, 2, 576]\n    heapq.heapify(my_list)\n    print(my_list)\t# 查看排序结果\n    print(heapq.heappop(my_list))\t# 取第一个元素，并重拍\n    print(heapq.heappop(my_list))\n    print(heapq.heappop(my_list))\n```\n\n# 0X03 优先级队列\n普通队列都是按照FIFO(first in first out)来增删数据，有些特殊情况需要给每个元素设定优先级，push元素的时候设定优先级，pop的时候找到优先级最高的。比如说操作系统的任务调度就是这样的，会给每个进程设置优先级。不过当然，不会使用Python实现的了。这里的内部也是用堆来实现的，所以在15行的位置用了`-priority`来让堆反向排、\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nimport heapq\n\n\n# 这个类就是队列类\nclass PriorityQueue:\n\n    def __init__(self):\n        self._queue = []    # 队列元素\n        self._index = 0     # 索引\n\n    def push(self, item, priority):\n        heapq.heappush(self._queue, (-priority, self._index, item))\n        self._index += 1\n\n    def pop(self):\n        return heapq.heappop(self._queue)[-1]\n\n\n# 队列中的数据类型\nclass Item:\n\n    def __init__(self, name):\n        self.name = name    # 只有一个属性、name\n\n    def __repr__(self):\n        return 'Item({!r})'.format(self.name)   # 将格式化好的字符串返回\n\nif __name__ == '__main__':\n    my_queue = PriorityQueue()  # 实例化一个优先级队列\n    my_queue.push(Item('内核'), 99)   # 内核的优先级最高了\n    my_queue.push(Item('文件复制'), 40)\n    my_queue.push(Item('CS:GO'), 75)\n    print(my_queue.pop())   # 找到优先级最高的\n```\n\n# 0X04 一键多值\n我们可以轻松的写出用一个键对应多个值的字典，只需要让键对应到列表或者集合就好了，但是要啰里啰嗦写一大堆东西。其实可以用一个内建的方法来解决这个问题。通过这个方法可以快速创建这种字典，也可以像操作普通列表一样操作里面的数据。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom collections import defaultdict\n\nif __name__ == '__main__':\n    my_dic = defaultdict(list)\n    my_dic['name'].append('李华')\n    my_dic['qq'].append('66666')\n    my_dic['qq'].append('23333')\n    my_dic['qq'].append('88888')\n    print(my_dic)\n```\n\n# 0X05 分片命名\nPython中分片非常好用，有的时候会在程序中出现很多分片，管理起来特别麻烦。可以通过这种方式给分片命名，下次再次调用的时候可以直接使用分片的名字。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    data = 'shawn 17 M'\n    name = slice(0, 5)\n    age  = slice(7, 8)\n    sex  = slice(9, 10)\n    print(data[name])\n    print(data[age])\n    print(data[sex])\n```\n\n# 0X06 词频统计\n从一个序列中找到出现次数最多的元素。`Counter`对象还可以进行简单的加减，比如a序列里出现了10次'hello'而b序列里出现了3次'hello'，那么a+b的话'hello'的值就会变成13。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom collections import Counter\n\n\nif __name__ == '__main__':\n    data = ['hello', 'world', 'hey', 'hello', 'world', 'jack', 'hey', 'york', 'hey', 'hello', 'hello']\n    word_count = Counter(data)\n    print(word_count.most_common(1))\t# 这个参数1可以更改，表示的是出现次数最多的几个元素\n```\n\n# 0X07 对字典列表排序\n比如我们从数据库中查询到了部分学生的成绩，每个学生的信息存成一个字典，多个字典组成一个列表。然后需要让列表按学生成绩排序。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom operator import itemgetter\n\n\nif __name__ == '__main__':\n    student = [\n        {'name': '小明', 'mark': 98},\n        {'name': '小红', 'mark': 87},\n        {'name': '小刚', 'mark': 58},\n        {'name': '李华', 'mark': 100}\n    ]\n\n    student = sorted(student, key=itemgetter('name'))\n\n    for i in student:\n        print(i)\n```\n\n# 0X08 筛选序列\n有一个列表，里面全是某次考试的成绩，需要成绩列表中找到所有的不及格成绩。可以轻松写出：定义空列表，for遍历成绩单，判断<60的就append。但是还有一个更方便的方案，就是使用 **列表推导式** 来完成。[更多关于列表推导式](https://eastlakeside.gitbooks.io/interpy-zh/content/Comprehensions/list-comprehensions.html)\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    my_list = [34, 56, 67, 78, 95, 23, 96, 23, 86, 78, 89, 45]\n    print([n for n in my_list if n <= 60])\n```\n\n也可以用同样的方式来从字典中筛选子字典。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    mark_list = {\n        '小明': 58,\n        '小红': 94,\n        '小刚': 67,\n        '小智': 76,\n        '小亮': 45\n    }\n\n    unpass = {key:value for key, value in mark_list.items() if value < 60}\n    print(unpass)\n```\n","source":"_posts/python_magic_1.md","raw":"---\ntitle: Python 奇技淫巧 (一) 列表、集合、字典\ndate: 2017-01-15 15:08\ntags:\n  - Python\n  - 数据结构\n  - Dict\n  - List\n---\n\n> ### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 \\*表达式\n从某个可迭代对象中分解出N个元素，但是这个可迭代的对象可能会超过N，会出现too many values to unpack异常。\n\n比如我这儿有N个统计信息，因为第一次和最后一次的信息不准确需要删除掉，而将中间的信息保留下来，那么就可以这么弄。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nif __name__ == '__main__':\n    grade = [23, 45, 42, 45, 78, 98, 89, 97, 69, 77, 88, 50, 65, 99, 98]\n    first, *new_grade, last = grade\n    print(new_grade)\n```\n这里的赋值就是将第一个和最后一个赋给了first和last，而中间的给了new_grade\n\n# 0X01 定长队列\n有一种情况：程序在运行的时候会记录日志，比如说web程序的访问历史。如果我们需要只保留最后的1W条数据，那么很快能想到使用一个列表，每次插入数据的时候判断长度，然后对应的append和del。但是有一个更简单且更快速的方法就是使用`collections.deque()`。下面的例子中有一个1024长的列表，我们列表里只存最新的7条。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n# 导入一个包\nimport collections\n\nif __name__ == '__main__':\n\t# 当做一种数据解雇来用就可以\n    auto_queue = collections.deque(maxlen=7)\n    my_list = range(1024)\n    for i in my_list:\n        auto_queue.append(i)\n    print(auto_queue)\n```\n运行之后可以看到，列表里只保存了最后插入的七条数据。\n\n# 0X02 最大最小的几个元素\n当我们有一个列表，需要找到列表里最大的N个元素时，一般会想到先排序然后分片，这想法当然不多，但是还有一个更好用的方法：\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport heapq\n\n\nif __name__ == '__main__':\n    my_list = [34, 234, 56, 56, 345, 456, 23, 213, 456, 8, 98, 43, 2, 67]\n    print('max: ', heapq.nlargest(3,  my_list))\t# 找到最大的三个\n    print('min: ', heapq.nsmallest(2, my_list)) # 找到最小的两个\n```\n我这里用列表来演示，但是这个方法支持更复杂的数据结构。比如我有一个列表，列表里包含很多个字典，字典里是学生考试信息，那么我就可以用考试分数来找到前三名：\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport heapq\n\n\nif __name__ == '__main__':\n    my_list = [{'name': '小明', 'grade': 56}, {'name': '小红', 'grade': 87}, {'name': '小刚', 'grade': 67},\n               {'name': '小志', 'grade': 46}, {'name': '小逗逼', 'grade': 99}, {'name': '小华', 'grade': 85},]\n    print('max: ', heapq.nlargest(3,  my_list, key=lambda s: s['grade']))\n    print('min: ', heapq.nsmallest(3, my_list, key=lambda s: s['grade']))\n```\nkey 后面的 `lambda s: s['grade']`是用了一个 **匿名函数** 。列表里唯一的值就是排序的关键字。更多关于[更多关于匿名函数](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431843456408652233b88b424613aa8ec2fe032fd85a000)\n\n如果N相对总数据量来说很小，可以用`heapq.heapify()`获得更好的性能。这个函数会将原来的集合转变成列表并以 **堆** 的形式排序。而堆最重要的一个特性就是最小的那个元素一定在第一位。所以我们可以利用这个性质来获取最小的前N个。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport heapq\n\n\nif __name__ == '__main__':\n    my_list = [234, 324, 456, 567, 345, 23, 546, 567, 98, 45, 2, 576]\n    heapq.heapify(my_list)\n    print(my_list)\t# 查看排序结果\n    print(heapq.heappop(my_list))\t# 取第一个元素，并重拍\n    print(heapq.heappop(my_list))\n    print(heapq.heappop(my_list))\n```\n\n# 0X03 优先级队列\n普通队列都是按照FIFO(first in first out)来增删数据，有些特殊情况需要给每个元素设定优先级，push元素的时候设定优先级，pop的时候找到优先级最高的。比如说操作系统的任务调度就是这样的，会给每个进程设置优先级。不过当然，不会使用Python实现的了。这里的内部也是用堆来实现的，所以在15行的位置用了`-priority`来让堆反向排、\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nimport heapq\n\n\n# 这个类就是队列类\nclass PriorityQueue:\n\n    def __init__(self):\n        self._queue = []    # 队列元素\n        self._index = 0     # 索引\n\n    def push(self, item, priority):\n        heapq.heappush(self._queue, (-priority, self._index, item))\n        self._index += 1\n\n    def pop(self):\n        return heapq.heappop(self._queue)[-1]\n\n\n# 队列中的数据类型\nclass Item:\n\n    def __init__(self, name):\n        self.name = name    # 只有一个属性、name\n\n    def __repr__(self):\n        return 'Item({!r})'.format(self.name)   # 将格式化好的字符串返回\n\nif __name__ == '__main__':\n    my_queue = PriorityQueue()  # 实例化一个优先级队列\n    my_queue.push(Item('内核'), 99)   # 内核的优先级最高了\n    my_queue.push(Item('文件复制'), 40)\n    my_queue.push(Item('CS:GO'), 75)\n    print(my_queue.pop())   # 找到优先级最高的\n```\n\n# 0X04 一键多值\n我们可以轻松的写出用一个键对应多个值的字典，只需要让键对应到列表或者集合就好了，但是要啰里啰嗦写一大堆东西。其实可以用一个内建的方法来解决这个问题。通过这个方法可以快速创建这种字典，也可以像操作普通列表一样操作里面的数据。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom collections import defaultdict\n\nif __name__ == '__main__':\n    my_dic = defaultdict(list)\n    my_dic['name'].append('李华')\n    my_dic['qq'].append('66666')\n    my_dic['qq'].append('23333')\n    my_dic['qq'].append('88888')\n    print(my_dic)\n```\n\n# 0X05 分片命名\nPython中分片非常好用，有的时候会在程序中出现很多分片，管理起来特别麻烦。可以通过这种方式给分片命名，下次再次调用的时候可以直接使用分片的名字。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    data = 'shawn 17 M'\n    name = slice(0, 5)\n    age  = slice(7, 8)\n    sex  = slice(9, 10)\n    print(data[name])\n    print(data[age])\n    print(data[sex])\n```\n\n# 0X06 词频统计\n从一个序列中找到出现次数最多的元素。`Counter`对象还可以进行简单的加减，比如a序列里出现了10次'hello'而b序列里出现了3次'hello'，那么a+b的话'hello'的值就会变成13。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom collections import Counter\n\n\nif __name__ == '__main__':\n    data = ['hello', 'world', 'hey', 'hello', 'world', 'jack', 'hey', 'york', 'hey', 'hello', 'hello']\n    word_count = Counter(data)\n    print(word_count.most_common(1))\t# 这个参数1可以更改，表示的是出现次数最多的几个元素\n```\n\n# 0X07 对字典列表排序\n比如我们从数据库中查询到了部分学生的成绩，每个学生的信息存成一个字典，多个字典组成一个列表。然后需要让列表按学生成绩排序。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom operator import itemgetter\n\n\nif __name__ == '__main__':\n    student = [\n        {'name': '小明', 'mark': 98},\n        {'name': '小红', 'mark': 87},\n        {'name': '小刚', 'mark': 58},\n        {'name': '李华', 'mark': 100}\n    ]\n\n    student = sorted(student, key=itemgetter('name'))\n\n    for i in student:\n        print(i)\n```\n\n# 0X08 筛选序列\n有一个列表，里面全是某次考试的成绩，需要成绩列表中找到所有的不及格成绩。可以轻松写出：定义空列表，for遍历成绩单，判断<60的就append。但是还有一个更方便的方案，就是使用 **列表推导式** 来完成。[更多关于列表推导式](https://eastlakeside.gitbooks.io/interpy-zh/content/Comprehensions/list-comprehensions.html)\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    my_list = [34, 56, 67, 78, 95, 23, 96, 23, 86, 78, 89, 45]\n    print([n for n in my_list if n <= 60])\n```\n\n也可以用同样的方式来从字典中筛选子字典。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    mark_list = {\n        '小明': 58,\n        '小红': 94,\n        '小刚': 67,\n        '小智': 76,\n        '小亮': 45\n    }\n\n    unpass = {key:value for key, value in mark_list.items() if value < 60}\n    print(unpass)\n```\n","slug":"python_magic_1","published":1,"updated":"2017-09-02T14:48:38.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmef001nhnlp0bb3ttsv","content":"<blockquote>\n<h3 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h3></blockquote>\n<h1 id=\"0X00-表达式\"><a href=\"#0X00-表达式\" class=\"headerlink\" title=\"0X00 *表达式\"></a>0X00 *表达式</h1><p>从某个可迭代对象中分解出N个元素，但是这个可迭代的对象可能会超过N，会出现too many values to unpack异常。</p>\n<p>比如我这儿有N个统计信息，因为第一次和最后一次的信息不准确需要删除掉，而将中间的信息保留下来，那么就可以这么弄。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    grade = [<span class=\"number\">23</span>, <span class=\"number\">45</span>, <span class=\"number\">42</span>, <span class=\"number\">45</span>, <span class=\"number\">78</span>, <span class=\"number\">98</span>, <span class=\"number\">89</span>, <span class=\"number\">97</span>, <span class=\"number\">69</span>, <span class=\"number\">77</span>, <span class=\"number\">88</span>, <span class=\"number\">50</span>, <span class=\"number\">65</span>, <span class=\"number\">99</span>, <span class=\"number\">98</span>]</div><div class=\"line\">    first, *new_grade, last = grade</div><div class=\"line\">    print(new_grade)</div></pre></td></tr></table></figure></p>\n<p>这里的赋值就是将第一个和最后一个赋给了first和last，而中间的给了new_grade</p>\n<h1 id=\"0X01-定长队列\"><a href=\"#0X01-定长队列\" class=\"headerlink\" title=\"0X01 定长队列\"></a>0X01 定长队列</h1><p>有一种情况：程序在运行的时候会记录日志，比如说web程序的访问历史。如果我们需要只保留最后的1W条数据，那么很快能想到使用一个列表，每次插入数据的时候判断长度，然后对应的append和del。但是有一个更简单且更快速的方法就是使用<code>collections.deque()</code>。下面的例子中有一个1024长的列表，我们列表里只存最新的7条。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 导入一个包</span></div><div class=\"line\"><span class=\"keyword\">import</span> collections</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"comment\"># 当做一种数据解雇来用就可以</span></div><div class=\"line\">    auto_queue = collections.deque(maxlen=<span class=\"number\">7</span>)</div><div class=\"line\">    my_list = range(<span class=\"number\">1024</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> my_list:</div><div class=\"line\">        auto_queue.append(i)</div><div class=\"line\">    print(auto_queue)</div></pre></td></tr></table></figure></p>\n<p>运行之后可以看到，列表里只保存了最后插入的七条数据。</p>\n<h1 id=\"0X02-最大最小的几个元素\"><a href=\"#0X02-最大最小的几个元素\" class=\"headerlink\" title=\"0X02 最大最小的几个元素\"></a>0X02 最大最小的几个元素</h1><p>当我们有一个列表，需要找到列表里最大的N个元素时，一般会想到先排序然后分片，这想法当然不多，但是还有一个更好用的方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> heapq</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_list = [<span class=\"number\">34</span>, <span class=\"number\">234</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">345</span>, <span class=\"number\">456</span>, <span class=\"number\">23</span>, <span class=\"number\">213</span>, <span class=\"number\">456</span>, <span class=\"number\">8</span>, <span class=\"number\">98</span>, <span class=\"number\">43</span>, <span class=\"number\">2</span>, <span class=\"number\">67</span>]</div><div class=\"line\">    print(<span class=\"string\">'max: '</span>, heapq.nlargest(<span class=\"number\">3</span>,  my_list))\t<span class=\"comment\"># 找到最大的三个</span></div><div class=\"line\">    print(<span class=\"string\">'min: '</span>, heapq.nsmallest(<span class=\"number\">2</span>, my_list)) <span class=\"comment\"># 找到最小的两个</span></div></pre></td></tr></table></figure></p>\n<p>我这里用列表来演示，但是这个方法支持更复杂的数据结构。比如我有一个列表，列表里包含很多个字典，字典里是学生考试信息，那么我就可以用考试分数来找到前三名：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> heapq</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_list = [&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小明'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">56</span>&#125;, &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小红'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">87</span>&#125;, &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小刚'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">67</span>&#125;,</div><div class=\"line\">               &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小志'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">46</span>&#125;, &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小逗逼'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">99</span>&#125;, &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小华'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">85</span>&#125;,]</div><div class=\"line\">    print(<span class=\"string\">'max: '</span>, heapq.nlargest(<span class=\"number\">3</span>,  my_list, key=<span class=\"keyword\">lambda</span> s: s[<span class=\"string\">'grade'</span>]))</div><div class=\"line\">    print(<span class=\"string\">'min: '</span>, heapq.nsmallest(<span class=\"number\">3</span>, my_list, key=<span class=\"keyword\">lambda</span> s: s[<span class=\"string\">'grade'</span>]))</div></pre></td></tr></table></figure></p>\n<p>key 后面的 <code>lambda s: s[&#39;grade&#39;]</code>是用了一个 <strong>匿名函数</strong> 。列表里唯一的值就是排序的关键字。更多关于<a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431843456408652233b88b424613aa8ec2fe032fd85a000\" target=\"_blank\" rel=\"external\">更多关于匿名函数</a></p>\n<p>如果N相对总数据量来说很小，可以用<code>heapq.heapify()</code>获得更好的性能。这个函数会将原来的集合转变成列表并以 <strong>堆</strong> 的形式排序。而堆最重要的一个特性就是最小的那个元素一定在第一位。所以我们可以利用这个性质来获取最小的前N个。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> heapq</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_list = [<span class=\"number\">234</span>, <span class=\"number\">324</span>, <span class=\"number\">456</span>, <span class=\"number\">567</span>, <span class=\"number\">345</span>, <span class=\"number\">23</span>, <span class=\"number\">546</span>, <span class=\"number\">567</span>, <span class=\"number\">98</span>, <span class=\"number\">45</span>, <span class=\"number\">2</span>, <span class=\"number\">576</span>]</div><div class=\"line\">    heapq.heapify(my_list)</div><div class=\"line\">    print(my_list)\t<span class=\"comment\"># 查看排序结果</span></div><div class=\"line\">    print(heapq.heappop(my_list))\t<span class=\"comment\"># 取第一个元素，并重拍</span></div><div class=\"line\">    print(heapq.heappop(my_list))</div><div class=\"line\">    print(heapq.heappop(my_list))</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-优先级队列\"><a href=\"#0X03-优先级队列\" class=\"headerlink\" title=\"0X03 优先级队列\"></a>0X03 优先级队列</h1><p>普通队列都是按照FIFO(first in first out)来增删数据，有些特殊情况需要给每个元素设定优先级，push元素的时候设定优先级，pop的时候找到优先级最高的。比如说操作系统的任务调度就是这样的，会给每个进程设置优先级。不过当然，不会使用Python实现的了。这里的内部也是用堆来实现的，所以在15行的位置用了<code>-priority</code>来让堆反向排、<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> heapq</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 这个类就是队列类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityQueue</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self._queue = []    <span class=\"comment\"># 队列元素</span></div><div class=\"line\">        self._index = <span class=\"number\">0</span>     <span class=\"comment\"># 索引</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, item, priority)</span>:</span></div><div class=\"line\">        heapq.heappush(self._queue, (-priority, self._index, item))</div><div class=\"line\">        self._index += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> heapq.heappop(self._queue)[<span class=\"number\">-1</span>]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 队列中的数据类型</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.name = name    <span class=\"comment\"># 只有一个属性、name</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Item(&#123;!r&#125;)'</span>.format(self.name)   <span class=\"comment\"># 将格式化好的字符串返回</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_queue = PriorityQueue()  <span class=\"comment\"># 实例化一个优先级队列</span></div><div class=\"line\">    my_queue.push(Item(<span class=\"string\">'内核'</span>), <span class=\"number\">99</span>)   <span class=\"comment\"># 内核的优先级最高了</span></div><div class=\"line\">    my_queue.push(Item(<span class=\"string\">'文件复制'</span>), <span class=\"number\">40</span>)</div><div class=\"line\">    my_queue.push(Item(<span class=\"string\">'CS:GO'</span>), <span class=\"number\">75</span>)</div><div class=\"line\">    print(my_queue.pop())   <span class=\"comment\"># 找到优先级最高的</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-一键多值\"><a href=\"#0X04-一键多值\" class=\"headerlink\" title=\"0X04 一键多值\"></a>0X04 一键多值</h1><p>我们可以轻松的写出用一个键对应多个值的字典，只需要让键对应到列表或者集合就好了，但是要啰里啰嗦写一大堆东西。其实可以用一个内建的方法来解决这个问题。通过这个方法可以快速创建这种字典，也可以像操作普通列表一样操作里面的数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_dic = defaultdict(list)</div><div class=\"line\">    my_dic[<span class=\"string\">'name'</span>].append(<span class=\"string\">'李华'</span>)</div><div class=\"line\">    my_dic[<span class=\"string\">'qq'</span>].append(<span class=\"string\">'66666'</span>)</div><div class=\"line\">    my_dic[<span class=\"string\">'qq'</span>].append(<span class=\"string\">'23333'</span>)</div><div class=\"line\">    my_dic[<span class=\"string\">'qq'</span>].append(<span class=\"string\">'88888'</span>)</div><div class=\"line\">    print(my_dic)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-分片命名\"><a href=\"#0X05-分片命名\" class=\"headerlink\" title=\"0X05 分片命名\"></a>0X05 分片命名</h1><p>Python中分片非常好用，有的时候会在程序中出现很多分片，管理起来特别麻烦。可以通过这种方式给分片命名，下次再次调用的时候可以直接使用分片的名字。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    data = <span class=\"string\">'shawn 17 M'</span></div><div class=\"line\">    name = slice(<span class=\"number\">0</span>, <span class=\"number\">5</span>)</div><div class=\"line\">    age  = slice(<span class=\"number\">7</span>, <span class=\"number\">8</span>)</div><div class=\"line\">    sex  = slice(<span class=\"number\">9</span>, <span class=\"number\">10</span>)</div><div class=\"line\">    print(data[name])</div><div class=\"line\">    print(data[age])</div><div class=\"line\">    print(data[sex])</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-词频统计\"><a href=\"#0X06-词频统计\" class=\"headerlink\" title=\"0X06 词频统计\"></a>0X06 词频统计</h1><p>从一个序列中找到出现次数最多的元素。<code>Counter</code>对象还可以进行简单的加减，比如a序列里出现了10次’hello’而b序列里出现了3次’hello’，那么a+b的话’hello’的值就会变成13。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    data = [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, <span class=\"string\">'hey'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, <span class=\"string\">'jack'</span>, <span class=\"string\">'hey'</span>, <span class=\"string\">'york'</span>, <span class=\"string\">'hey'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'hello'</span>]</div><div class=\"line\">    word_count = Counter(data)</div><div class=\"line\">    print(word_count.most_common(<span class=\"number\">1</span>))\t<span class=\"comment\"># 这个参数1可以更改，表示的是出现次数最多的几个元素</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-对字典列表排序\"><a href=\"#0X07-对字典列表排序\" class=\"headerlink\" title=\"0X07 对字典列表排序\"></a>0X07 对字典列表排序</h1><p>比如我们从数据库中查询到了部分学生的成绩，每个学生的信息存成一个字典，多个字典组成一个列表。然后需要让列表按学生成绩排序。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    student = [</div><div class=\"line\">        &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小明'</span>, <span class=\"string\">'mark'</span>: <span class=\"number\">98</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小红'</span>, <span class=\"string\">'mark'</span>: <span class=\"number\">87</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小刚'</span>, <span class=\"string\">'mark'</span>: <span class=\"number\">58</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'李华'</span>, <span class=\"string\">'mark'</span>: <span class=\"number\">100</span>&#125;</div><div class=\"line\">    ]</div><div class=\"line\"></div><div class=\"line\">    student = sorted(student, key=itemgetter(<span class=\"string\">'name'</span>))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> student:</div><div class=\"line\">        print(i)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-筛选序列\"><a href=\"#0X08-筛选序列\" class=\"headerlink\" title=\"0X08 筛选序列\"></a>0X08 筛选序列</h1><p>有一个列表，里面全是某次考试的成绩，需要成绩列表中找到所有的不及格成绩。可以轻松写出：定义空列表，for遍历成绩单，判断<60的就append。但是还有一个更方便的方案，就是使用 **列表推导式**=\"\" 来完成。[更多关于列表推导式](https:=\"\" eastlakeside.gitbooks.io=\"\" interpy-zh=\"\" content=\"\" comprehensions=\"\" list-comprehensions.html)=\"\" <figure=\"\" class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_list = [<span class=\"number\">34</span>, <span class=\"number\">56</span>, <span class=\"number\">67</span>, <span class=\"number\">78</span>, <span class=\"number\">95</span>, <span class=\"number\">23</span>, <span class=\"number\">96</span>, <span class=\"number\">23</span>, <span class=\"number\">86</span>, <span class=\"number\">78</span>, <span class=\"number\">89</span>, <span class=\"number\">45</span>]</div><div class=\"line\">    print([n <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> my_list <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">60</span>])</div></pre></td></tr></table></60的就append。但是还有一个更方便的方案，就是使用></p>\n<p>也可以用同样的方式来从字典中筛选子字典。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    mark_list = &#123;</div><div class=\"line\">        <span class=\"string\">'小明'</span>: <span class=\"number\">58</span>,</div><div class=\"line\">        <span class=\"string\">'小红'</span>: <span class=\"number\">94</span>,</div><div class=\"line\">        <span class=\"string\">'小刚'</span>: <span class=\"number\">67</span>,</div><div class=\"line\">        <span class=\"string\">'小智'</span>: <span class=\"number\">76</span>,</div><div class=\"line\">        <span class=\"string\">'小亮'</span>: <span class=\"number\">45</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    unpass = &#123;key:value <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> mark_list.items() <span class=\"keyword\">if</span> value &lt; <span class=\"number\">60</span>&#125;</div><div class=\"line\">    print(unpass)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h3 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h3></blockquote>\n<h1 id=\"0X00-表达式\"><a href=\"#0X00-表达式\" class=\"headerlink\" title=\"0X00 *表达式\"></a>0X00 *表达式</h1><p>从某个可迭代对象中分解出N个元素，但是这个可迭代的对象可能会超过N，会出现too many values to unpack异常。</p>\n<p>比如我这儿有N个统计信息，因为第一次和最后一次的信息不准确需要删除掉，而将中间的信息保留下来，那么就可以这么弄。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    grade = [<span class=\"number\">23</span>, <span class=\"number\">45</span>, <span class=\"number\">42</span>, <span class=\"number\">45</span>, <span class=\"number\">78</span>, <span class=\"number\">98</span>, <span class=\"number\">89</span>, <span class=\"number\">97</span>, <span class=\"number\">69</span>, <span class=\"number\">77</span>, <span class=\"number\">88</span>, <span class=\"number\">50</span>, <span class=\"number\">65</span>, <span class=\"number\">99</span>, <span class=\"number\">98</span>]</div><div class=\"line\">    first, *new_grade, last = grade</div><div class=\"line\">    print(new_grade)</div></pre></td></tr></table></figure></p>\n<p>这里的赋值就是将第一个和最后一个赋给了first和last，而中间的给了new_grade</p>\n<h1 id=\"0X01-定长队列\"><a href=\"#0X01-定长队列\" class=\"headerlink\" title=\"0X01 定长队列\"></a>0X01 定长队列</h1><p>有一种情况：程序在运行的时候会记录日志，比如说web程序的访问历史。如果我们需要只保留最后的1W条数据，那么很快能想到使用一个列表，每次插入数据的时候判断长度，然后对应的append和del。但是有一个更简单且更快速的方法就是使用<code>collections.deque()</code>。下面的例子中有一个1024长的列表，我们列表里只存最新的7条。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 导入一个包</span></div><div class=\"line\"><span class=\"keyword\">import</span> collections</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">\t<span class=\"comment\"># 当做一种数据解雇来用就可以</span></div><div class=\"line\">    auto_queue = collections.deque(maxlen=<span class=\"number\">7</span>)</div><div class=\"line\">    my_list = range(<span class=\"number\">1024</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> my_list:</div><div class=\"line\">        auto_queue.append(i)</div><div class=\"line\">    print(auto_queue)</div></pre></td></tr></table></figure></p>\n<p>运行之后可以看到，列表里只保存了最后插入的七条数据。</p>\n<h1 id=\"0X02-最大最小的几个元素\"><a href=\"#0X02-最大最小的几个元素\" class=\"headerlink\" title=\"0X02 最大最小的几个元素\"></a>0X02 最大最小的几个元素</h1><p>当我们有一个列表，需要找到列表里最大的N个元素时，一般会想到先排序然后分片，这想法当然不多，但是还有一个更好用的方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> heapq</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_list = [<span class=\"number\">34</span>, <span class=\"number\">234</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>, <span class=\"number\">345</span>, <span class=\"number\">456</span>, <span class=\"number\">23</span>, <span class=\"number\">213</span>, <span class=\"number\">456</span>, <span class=\"number\">8</span>, <span class=\"number\">98</span>, <span class=\"number\">43</span>, <span class=\"number\">2</span>, <span class=\"number\">67</span>]</div><div class=\"line\">    print(<span class=\"string\">'max: '</span>, heapq.nlargest(<span class=\"number\">3</span>,  my_list))\t<span class=\"comment\"># 找到最大的三个</span></div><div class=\"line\">    print(<span class=\"string\">'min: '</span>, heapq.nsmallest(<span class=\"number\">2</span>, my_list)) <span class=\"comment\"># 找到最小的两个</span></div></pre></td></tr></table></figure></p>\n<p>我这里用列表来演示，但是这个方法支持更复杂的数据结构。比如我有一个列表，列表里包含很多个字典，字典里是学生考试信息，那么我就可以用考试分数来找到前三名：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> heapq</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_list = [&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小明'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">56</span>&#125;, &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小红'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">87</span>&#125;, &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小刚'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">67</span>&#125;,</div><div class=\"line\">               &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小志'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">46</span>&#125;, &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小逗逼'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">99</span>&#125;, &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小华'</span>, <span class=\"string\">'grade'</span>: <span class=\"number\">85</span>&#125;,]</div><div class=\"line\">    print(<span class=\"string\">'max: '</span>, heapq.nlargest(<span class=\"number\">3</span>,  my_list, key=<span class=\"keyword\">lambda</span> s: s[<span class=\"string\">'grade'</span>]))</div><div class=\"line\">    print(<span class=\"string\">'min: '</span>, heapq.nsmallest(<span class=\"number\">3</span>, my_list, key=<span class=\"keyword\">lambda</span> s: s[<span class=\"string\">'grade'</span>]))</div></pre></td></tr></table></figure></p>\n<p>key 后面的 <code>lambda s: s[&#39;grade&#39;]</code>是用了一个 <strong>匿名函数</strong> 。列表里唯一的值就是排序的关键字。更多关于<a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431843456408652233b88b424613aa8ec2fe032fd85a000\" target=\"_blank\" rel=\"external\">更多关于匿名函数</a></p>\n<p>如果N相对总数据量来说很小，可以用<code>heapq.heapify()</code>获得更好的性能。这个函数会将原来的集合转变成列表并以 <strong>堆</strong> 的形式排序。而堆最重要的一个特性就是最小的那个元素一定在第一位。所以我们可以利用这个性质来获取最小的前N个。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> heapq</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_list = [<span class=\"number\">234</span>, <span class=\"number\">324</span>, <span class=\"number\">456</span>, <span class=\"number\">567</span>, <span class=\"number\">345</span>, <span class=\"number\">23</span>, <span class=\"number\">546</span>, <span class=\"number\">567</span>, <span class=\"number\">98</span>, <span class=\"number\">45</span>, <span class=\"number\">2</span>, <span class=\"number\">576</span>]</div><div class=\"line\">    heapq.heapify(my_list)</div><div class=\"line\">    print(my_list)\t<span class=\"comment\"># 查看排序结果</span></div><div class=\"line\">    print(heapq.heappop(my_list))\t<span class=\"comment\"># 取第一个元素，并重拍</span></div><div class=\"line\">    print(heapq.heappop(my_list))</div><div class=\"line\">    print(heapq.heappop(my_list))</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-优先级队列\"><a href=\"#0X03-优先级队列\" class=\"headerlink\" title=\"0X03 优先级队列\"></a>0X03 优先级队列</h1><p>普通队列都是按照FIFO(first in first out)来增删数据，有些特殊情况需要给每个元素设定优先级，push元素的时候设定优先级，pop的时候找到优先级最高的。比如说操作系统的任务调度就是这样的，会给每个进程设置优先级。不过当然，不会使用Python实现的了。这里的内部也是用堆来实现的，所以在15行的位置用了<code>-priority</code>来让堆反向排、<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> heapq</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 这个类就是队列类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityQueue</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self._queue = []    <span class=\"comment\"># 队列元素</span></div><div class=\"line\">        self._index = <span class=\"number\">0</span>     <span class=\"comment\"># 索引</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, item, priority)</span>:</span></div><div class=\"line\">        heapq.heappush(self._queue, (-priority, self._index, item))</div><div class=\"line\">        self._index += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> heapq.heappop(self._queue)[<span class=\"number\">-1</span>]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 队列中的数据类型</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.name = name    <span class=\"comment\"># 只有一个属性、name</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Item(&#123;!r&#125;)'</span>.format(self.name)   <span class=\"comment\"># 将格式化好的字符串返回</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_queue = PriorityQueue()  <span class=\"comment\"># 实例化一个优先级队列</span></div><div class=\"line\">    my_queue.push(Item(<span class=\"string\">'内核'</span>), <span class=\"number\">99</span>)   <span class=\"comment\"># 内核的优先级最高了</span></div><div class=\"line\">    my_queue.push(Item(<span class=\"string\">'文件复制'</span>), <span class=\"number\">40</span>)</div><div class=\"line\">    my_queue.push(Item(<span class=\"string\">'CS:GO'</span>), <span class=\"number\">75</span>)</div><div class=\"line\">    print(my_queue.pop())   <span class=\"comment\"># 找到优先级最高的</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-一键多值\"><a href=\"#0X04-一键多值\" class=\"headerlink\" title=\"0X04 一键多值\"></a>0X04 一键多值</h1><p>我们可以轻松的写出用一个键对应多个值的字典，只需要让键对应到列表或者集合就好了，但是要啰里啰嗦写一大堆东西。其实可以用一个内建的方法来解决这个问题。通过这个方法可以快速创建这种字典，也可以像操作普通列表一样操作里面的数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_dic = defaultdict(list)</div><div class=\"line\">    my_dic[<span class=\"string\">'name'</span>].append(<span class=\"string\">'李华'</span>)</div><div class=\"line\">    my_dic[<span class=\"string\">'qq'</span>].append(<span class=\"string\">'66666'</span>)</div><div class=\"line\">    my_dic[<span class=\"string\">'qq'</span>].append(<span class=\"string\">'23333'</span>)</div><div class=\"line\">    my_dic[<span class=\"string\">'qq'</span>].append(<span class=\"string\">'88888'</span>)</div><div class=\"line\">    print(my_dic)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-分片命名\"><a href=\"#0X05-分片命名\" class=\"headerlink\" title=\"0X05 分片命名\"></a>0X05 分片命名</h1><p>Python中分片非常好用，有的时候会在程序中出现很多分片，管理起来特别麻烦。可以通过这种方式给分片命名，下次再次调用的时候可以直接使用分片的名字。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    data = <span class=\"string\">'shawn 17 M'</span></div><div class=\"line\">    name = slice(<span class=\"number\">0</span>, <span class=\"number\">5</span>)</div><div class=\"line\">    age  = slice(<span class=\"number\">7</span>, <span class=\"number\">8</span>)</div><div class=\"line\">    sex  = slice(<span class=\"number\">9</span>, <span class=\"number\">10</span>)</div><div class=\"line\">    print(data[name])</div><div class=\"line\">    print(data[age])</div><div class=\"line\">    print(data[sex])</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-词频统计\"><a href=\"#0X06-词频统计\" class=\"headerlink\" title=\"0X06 词频统计\"></a>0X06 词频统计</h1><p>从一个序列中找到出现次数最多的元素。<code>Counter</code>对象还可以进行简单的加减，比如a序列里出现了10次’hello’而b序列里出现了3次’hello’，那么a+b的话’hello’的值就会变成13。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    data = [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, <span class=\"string\">'hey'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>, <span class=\"string\">'jack'</span>, <span class=\"string\">'hey'</span>, <span class=\"string\">'york'</span>, <span class=\"string\">'hey'</span>, <span class=\"string\">'hello'</span>, <span class=\"string\">'hello'</span>]</div><div class=\"line\">    word_count = Counter(data)</div><div class=\"line\">    print(word_count.most_common(<span class=\"number\">1</span>))\t<span class=\"comment\"># 这个参数1可以更改，表示的是出现次数最多的几个元素</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-对字典列表排序\"><a href=\"#0X07-对字典列表排序\" class=\"headerlink\" title=\"0X07 对字典列表排序\"></a>0X07 对字典列表排序</h1><p>比如我们从数据库中查询到了部分学生的成绩，每个学生的信息存成一个字典，多个字典组成一个列表。然后需要让列表按学生成绩排序。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    student = [</div><div class=\"line\">        &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小明'</span>, <span class=\"string\">'mark'</span>: <span class=\"number\">98</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小红'</span>, <span class=\"string\">'mark'</span>: <span class=\"number\">87</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'小刚'</span>, <span class=\"string\">'mark'</span>: <span class=\"number\">58</span>&#125;,</div><div class=\"line\">        &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'李华'</span>, <span class=\"string\">'mark'</span>: <span class=\"number\">100</span>&#125;</div><div class=\"line\">    ]</div><div class=\"line\"></div><div class=\"line\">    student = sorted(student, key=itemgetter(<span class=\"string\">'name'</span>))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> student:</div><div class=\"line\">        print(i)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-筛选序列\"><a href=\"#0X08-筛选序列\" class=\"headerlink\" title=\"0X08 筛选序列\"></a>0X08 筛选序列</h1><p>有一个列表，里面全是某次考试的成绩，需要成绩列表中找到所有的不及格成绩。可以轻松写出：定义空列表，for遍历成绩单，判断<60的就append。但是还有一个更方便的方案，就是使用 **列表推导式**=\"\" 来完成。[更多关于列表推导式](https:=\"\" eastlakeside.gitbooks.io=\"\" interpy-zh=\"\" content=\"\" comprehensions=\"\" list-comprehensions.html)=\"\" <figure=\"\" class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_list = [<span class=\"number\">34</span>, <span class=\"number\">56</span>, <span class=\"number\">67</span>, <span class=\"number\">78</span>, <span class=\"number\">95</span>, <span class=\"number\">23</span>, <span class=\"number\">96</span>, <span class=\"number\">23</span>, <span class=\"number\">86</span>, <span class=\"number\">78</span>, <span class=\"number\">89</span>, <span class=\"number\">45</span>]</div><div class=\"line\">    print([n <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> my_list <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">60</span>])</div></pre></td></tr></table></60的就append。但是还有一个更方便的方案，就是使用></p>\n<p>也可以用同样的方式来从字典中筛选子字典。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    mark_list = &#123;</div><div class=\"line\">        <span class=\"string\">'小明'</span>: <span class=\"number\">58</span>,</div><div class=\"line\">        <span class=\"string\">'小红'</span>: <span class=\"number\">94</span>,</div><div class=\"line\">        <span class=\"string\">'小刚'</span>: <span class=\"number\">67</span>,</div><div class=\"line\">        <span class=\"string\">'小智'</span>: <span class=\"number\">76</span>,</div><div class=\"line\">        <span class=\"string\">'小亮'</span>: <span class=\"number\">45</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    unpass = &#123;key:value <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> mark_list.items() <span class=\"keyword\">if</span> value &lt; <span class=\"number\">60</span>&#125;</div><div class=\"line\">    print(unpass)</div></pre></td></tr></table></figure></p>\n"},{"title":"Python 奇技淫巧 (三) 函数","date":"2017-01-21T13:52:00.000Z","_content":"\n\n> ##### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 任意个参数\nPython中一般定义函数是这样的`def add(a, b)`，参数的个数是固定的，那么怎么才可以接收任意多个参数就像`rm 1.txt 2.jpg 3.mp3 4.cpp`这样？很简单，使用`*`和`**`就可以。下面代码里第一个参数a接收到了`hello,world`而`*b`则接收到了其余所有的参数，将其作为一个元组。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\ndef add(a, *b):\n    print(a)\n    return b\n\n\nif __name__ == '__main__':\n    x = add('hello,world', 2, 3, 4, 5)\n    print(x)\n```\n\n# 0X01 添加注解\n在Python中定义函数的同时可以也给函数添加注解，注解可以帮助我们在调用函数的时候起到一个提醒的作用。虽然几十行的代码不会遇到看不懂的情况，但是在修改别人代码或者编写一个大项目的时候必然会有这种问题。我们可以直接在代码中加注释来解释说明，但是使用注解还是要比注释来得简单方便。不过通过注解注解指定的类型不像是C语言那样有实际意义，就算是你传入的参数和返回的值不是按照注解来的也不会报错。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\ndef add(a: int, b: int) -> int:\t# 这里声明了a和b都是int型，返回值也是int型\n    return a + b\n\nif __name__ == '__main__':\n    print(add(3, 5))\n```\n\n# 0X02 默认参数\n我们常用的一些内置函数是有好多个可选参数的，不过我们不需要每个参数都要传入，因为Python可以给参数设置默认值，如果没有传入那个参数就会选择使用默认值，比如下面这个`add`函数。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\ndef add(a = 3, b = 5):\n    return a + b\n\n\nif __name__ == '__main__':\n    print(add())\t\t# 没有任何参数，默认使用３和５，最后结果则为8\n    print(add(1))\t\t# 传入了参数a为1，最后结果则为6\n    print(add(4, 6))\t# 传入了参数a和b分别为4和6，最后结果为10\n\tprint(add(b = 3))\t# 值传入了b参数为3，所以最后结果为6\n\tprint(add(b = 3, a = 10))\t# 指定参数的话也可以不按顺序\n```\n\n# 0X03 函数mini 匿名函数\n这里称之为匿名函数感觉还是有点别扭，因为这儿定义的函数并不是真的匿名，也是有名字的，因为函数自身非常短小倒不如称之为函数mini。在Python中有一个关键字`lambda`，可以定义一个匿名函数，使用这个关键字定义函数的时候函数声明、返回值、函数体只能写成一行。这样的函数功能肯定不能很强大，不过确实能减少代码量，少写好多重复的代码。正式代码的第一行就定义了一个函数，名为add，参数是x和y，返回值是x+y。所以说标准是这样的`函数名 = lambda 参数 ： 返回值`。这里还有个例子：`my_sqrt = lambda x : math.sqrt(x)`。注意，在匿名函数里什么`if-else`、`while`、`try-except`都是不能用的，总之你的函数就只能写一行。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    add = lambda x, y : x + y\n    print(add(3, 5))\n    print(add(2, 7))\n    print(add(1, 9))\n```\n\n","source":"_posts/python_magic_3.md","raw":"---\ntitle: Python 奇技淫巧 (三) 函数\ndate: 2017-01-21 21:52\ntags:\n  - Python\n  - function\n---\n\n\n> ##### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 任意个参数\nPython中一般定义函数是这样的`def add(a, b)`，参数的个数是固定的，那么怎么才可以接收任意多个参数就像`rm 1.txt 2.jpg 3.mp3 4.cpp`这样？很简单，使用`*`和`**`就可以。下面代码里第一个参数a接收到了`hello,world`而`*b`则接收到了其余所有的参数，将其作为一个元组。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\ndef add(a, *b):\n    print(a)\n    return b\n\n\nif __name__ == '__main__':\n    x = add('hello,world', 2, 3, 4, 5)\n    print(x)\n```\n\n# 0X01 添加注解\n在Python中定义函数的同时可以也给函数添加注解，注解可以帮助我们在调用函数的时候起到一个提醒的作用。虽然几十行的代码不会遇到看不懂的情况，但是在修改别人代码或者编写一个大项目的时候必然会有这种问题。我们可以直接在代码中加注释来解释说明，但是使用注解还是要比注释来得简单方便。不过通过注解注解指定的类型不像是C语言那样有实际意义，就算是你传入的参数和返回的值不是按照注解来的也不会报错。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\ndef add(a: int, b: int) -> int:\t# 这里声明了a和b都是int型，返回值也是int型\n    return a + b\n\nif __name__ == '__main__':\n    print(add(3, 5))\n```\n\n# 0X02 默认参数\n我们常用的一些内置函数是有好多个可选参数的，不过我们不需要每个参数都要传入，因为Python可以给参数设置默认值，如果没有传入那个参数就会选择使用默认值，比如下面这个`add`函数。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\ndef add(a = 3, b = 5):\n    return a + b\n\n\nif __name__ == '__main__':\n    print(add())\t\t# 没有任何参数，默认使用３和５，最后结果则为8\n    print(add(1))\t\t# 传入了参数a为1，最后结果则为6\n    print(add(4, 6))\t# 传入了参数a和b分别为4和6，最后结果为10\n\tprint(add(b = 3))\t# 值传入了b参数为3，所以最后结果为6\n\tprint(add(b = 3, a = 10))\t# 指定参数的话也可以不按顺序\n```\n\n# 0X03 函数mini 匿名函数\n这里称之为匿名函数感觉还是有点别扭，因为这儿定义的函数并不是真的匿名，也是有名字的，因为函数自身非常短小倒不如称之为函数mini。在Python中有一个关键字`lambda`，可以定义一个匿名函数，使用这个关键字定义函数的时候函数声明、返回值、函数体只能写成一行。这样的函数功能肯定不能很强大，不过确实能减少代码量，少写好多重复的代码。正式代码的第一行就定义了一个函数，名为add，参数是x和y，返回值是x+y。所以说标准是这样的`函数名 = lambda 参数 ： 返回值`。这里还有个例子：`my_sqrt = lambda x : math.sqrt(x)`。注意，在匿名函数里什么`if-else`、`while`、`try-except`都是不能用的，总之你的函数就只能写一行。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    add = lambda x, y : x + y\n    print(add(3, 5))\n    print(add(2, 7))\n    print(add(1, 9))\n```\n\n","slug":"python_magic_3","published":1,"updated":"2017-09-02T14:49:06.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmeg001ohnlplpjf4c5l","content":"<blockquote>\n<h5 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h5></blockquote>\n<h1 id=\"0X00-任意个参数\"><a href=\"#0X00-任意个参数\" class=\"headerlink\" title=\"0X00 任意个参数\"></a>0X00 任意个参数</h1><p>Python中一般定义函数是这样的<code>def add(a, b)</code>，参数的个数是固定的，那么怎么才可以接收任意多个参数就像<code>rm 1.txt 2.jpg 3.mp3 4.cpp</code>这样？很简单，使用<code>*</code>和<code>**</code>就可以。下面代码里第一个参数a接收到了<code>hello,world</code>而<code>*b</code>则接收到了其余所有的参数，将其作为一个元组。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(a, *b)</span>:</span></div><div class=\"line\">    print(a)</div><div class=\"line\">    <span class=\"keyword\">return</span> b</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    x = add(<span class=\"string\">'hello,world'</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\">    print(x)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X01-添加注解\"><a href=\"#0X01-添加注解\" class=\"headerlink\" title=\"0X01 添加注解\"></a>0X01 添加注解</h1><p>在Python中定义函数的同时可以也给函数添加注解，注解可以帮助我们在调用函数的时候起到一个提醒的作用。虽然几十行的代码不会遇到看不懂的情况，但是在修改别人代码或者编写一个大项目的时候必然会有这种问题。我们可以直接在代码中加注释来解释说明，但是使用注解还是要比注释来得简单方便。不过通过注解注解指定的类型不像是C语言那样有实际意义，就算是你传入的参数和返回的值不是按照注解来的也不会报错。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(a: int, b: int)</span> -&gt; int:</span>\t<span class=\"comment\"># 这里声明了a和b都是int型，返回值也是int型</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a + b</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(add(<span class=\"number\">3</span>, <span class=\"number\">5</span>))</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-默认参数\"><a href=\"#0X02-默认参数\" class=\"headerlink\" title=\"0X02 默认参数\"></a>0X02 默认参数</h1><p>我们常用的一些内置函数是有好多个可选参数的，不过我们不需要每个参数都要传入，因为Python可以给参数设置默认值，如果没有传入那个参数就会选择使用默认值，比如下面这个<code>add</code>函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(a = <span class=\"number\">3</span>, b = <span class=\"number\">5</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a + b</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(add())\t\t<span class=\"comment\"># 没有任何参数，默认使用３和５，最后结果则为8</span></div><div class=\"line\">    print(add(<span class=\"number\">1</span>))\t\t<span class=\"comment\"># 传入了参数a为1，最后结果则为6</span></div><div class=\"line\">    print(add(<span class=\"number\">4</span>, <span class=\"number\">6</span>))\t<span class=\"comment\"># 传入了参数a和b分别为4和6，最后结果为10</span></div><div class=\"line\">\tprint(add(b = <span class=\"number\">3</span>))\t<span class=\"comment\"># 值传入了b参数为3，所以最后结果为6</span></div><div class=\"line\">\tprint(add(b = <span class=\"number\">3</span>, a = <span class=\"number\">10</span>))\t<span class=\"comment\"># 指定参数的话也可以不按顺序</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-函数mini-匿名函数\"><a href=\"#0X03-函数mini-匿名函数\" class=\"headerlink\" title=\"0X03 函数mini 匿名函数\"></a>0X03 函数mini 匿名函数</h1><p>这里称之为匿名函数感觉还是有点别扭，因为这儿定义的函数并不是真的匿名，也是有名字的，因为函数自身非常短小倒不如称之为函数mini。在Python中有一个关键字<code>lambda</code>，可以定义一个匿名函数，使用这个关键字定义函数的时候函数声明、返回值、函数体只能写成一行。这样的函数功能肯定不能很强大，不过确实能减少代码量，少写好多重复的代码。正式代码的第一行就定义了一个函数，名为add，参数是x和y，返回值是x+y。所以说标准是这样的<code>函数名 = lambda 参数 ： 返回值</code>。这里还有个例子：<code>my_sqrt = lambda x : math.sqrt(x)</code>。注意，在匿名函数里什么<code>if-else</code>、<code>while</code>、<code>try-except</code>都是不能用的，总之你的函数就只能写一行。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    add = <span class=\"keyword\">lambda</span> x, y : x + y</div><div class=\"line\">    print(add(<span class=\"number\">3</span>, <span class=\"number\">5</span>))</div><div class=\"line\">    print(add(<span class=\"number\">2</span>, <span class=\"number\">7</span>))</div><div class=\"line\">    print(add(<span class=\"number\">1</span>, <span class=\"number\">9</span>))</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h5 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h5></blockquote>\n<h1 id=\"0X00-任意个参数\"><a href=\"#0X00-任意个参数\" class=\"headerlink\" title=\"0X00 任意个参数\"></a>0X00 任意个参数</h1><p>Python中一般定义函数是这样的<code>def add(a, b)</code>，参数的个数是固定的，那么怎么才可以接收任意多个参数就像<code>rm 1.txt 2.jpg 3.mp3 4.cpp</code>这样？很简单，使用<code>*</code>和<code>**</code>就可以。下面代码里第一个参数a接收到了<code>hello,world</code>而<code>*b</code>则接收到了其余所有的参数，将其作为一个元组。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(a, *b)</span>:</span></div><div class=\"line\">    print(a)</div><div class=\"line\">    <span class=\"keyword\">return</span> b</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    x = add(<span class=\"string\">'hello,world'</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\">    print(x)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X01-添加注解\"><a href=\"#0X01-添加注解\" class=\"headerlink\" title=\"0X01 添加注解\"></a>0X01 添加注解</h1><p>在Python中定义函数的同时可以也给函数添加注解，注解可以帮助我们在调用函数的时候起到一个提醒的作用。虽然几十行的代码不会遇到看不懂的情况，但是在修改别人代码或者编写一个大项目的时候必然会有这种问题。我们可以直接在代码中加注释来解释说明，但是使用注解还是要比注释来得简单方便。不过通过注解注解指定的类型不像是C语言那样有实际意义，就算是你传入的参数和返回的值不是按照注解来的也不会报错。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(a: int, b: int)</span> -&gt; int:</span>\t<span class=\"comment\"># 这里声明了a和b都是int型，返回值也是int型</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a + b</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(add(<span class=\"number\">3</span>, <span class=\"number\">5</span>))</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-默认参数\"><a href=\"#0X02-默认参数\" class=\"headerlink\" title=\"0X02 默认参数\"></a>0X02 默认参数</h1><p>我们常用的一些内置函数是有好多个可选参数的，不过我们不需要每个参数都要传入，因为Python可以给参数设置默认值，如果没有传入那个参数就会选择使用默认值，比如下面这个<code>add</code>函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(a = <span class=\"number\">3</span>, b = <span class=\"number\">5</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a + b</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(add())\t\t<span class=\"comment\"># 没有任何参数，默认使用３和５，最后结果则为8</span></div><div class=\"line\">    print(add(<span class=\"number\">1</span>))\t\t<span class=\"comment\"># 传入了参数a为1，最后结果则为6</span></div><div class=\"line\">    print(add(<span class=\"number\">4</span>, <span class=\"number\">6</span>))\t<span class=\"comment\"># 传入了参数a和b分别为4和6，最后结果为10</span></div><div class=\"line\">\tprint(add(b = <span class=\"number\">3</span>))\t<span class=\"comment\"># 值传入了b参数为3，所以最后结果为6</span></div><div class=\"line\">\tprint(add(b = <span class=\"number\">3</span>, a = <span class=\"number\">10</span>))\t<span class=\"comment\"># 指定参数的话也可以不按顺序</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-函数mini-匿名函数\"><a href=\"#0X03-函数mini-匿名函数\" class=\"headerlink\" title=\"0X03 函数mini 匿名函数\"></a>0X03 函数mini 匿名函数</h1><p>这里称之为匿名函数感觉还是有点别扭，因为这儿定义的函数并不是真的匿名，也是有名字的，因为函数自身非常短小倒不如称之为函数mini。在Python中有一个关键字<code>lambda</code>，可以定义一个匿名函数，使用这个关键字定义函数的时候函数声明、返回值、函数体只能写成一行。这样的函数功能肯定不能很强大，不过确实能减少代码量，少写好多重复的代码。正式代码的第一行就定义了一个函数，名为add，参数是x和y，返回值是x+y。所以说标准是这样的<code>函数名 = lambda 参数 ： 返回值</code>。这里还有个例子：<code>my_sqrt = lambda x : math.sqrt(x)</code>。注意，在匿名函数里什么<code>if-else</code>、<code>while</code>、<code>try-except</code>都是不能用的，总之你的函数就只能写一行。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    add = <span class=\"keyword\">lambda</span> x, y : x + y</div><div class=\"line\">    print(add(<span class=\"number\">3</span>, <span class=\"number\">5</span>))</div><div class=\"line\">    print(add(<span class=\"number\">2</span>, <span class=\"number\">7</span>))</div><div class=\"line\">    print(add(<span class=\"number\">1</span>, <span class=\"number\">9</span>))</div></pre></td></tr></table></figure></p>\n"},{"title":"Python 奇技淫巧 (二) 字符串、文本","date":"2017-01-19T06:51:00.000Z","_content":"\n> ##### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 split升级\n字符串有一个`split`方法，可以用某个字符或字符串把源字符串切开。但是存在一个弊端，切割位置是固定的，不能灵活切割。有这样一个需求，将这个字符串`hello 1 wrld 2 python 3 linux`切割开，以每个数字为分隔符。这样标准的`str.split`就不能完成任务了。但是在`re`模块中有一个`re.split`可以完成这任务。这个方法的分隔符不是使用准确不变的字符/串而是使用正则表达式。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nimport re\n\nif __name__ == '__main__':\n    my_str = 'hello 1 wrld 2 python 3 linux'\n    res = re.split('[0-9]', my_str)\n    print(res)\n```\n这里使用的正则表达式就是普通的字符串形式，而不需要`re.compile`进行编译。有了这个方法就可以更加灵活地切割字符串了。\n\n# 0X01 字符串开头结尾的匹配\n当我们有一堆的url，想在url中找到http开头且.jpg结尾的图片文件，以前我总是直接`str.strip('http://') == str`来判断开头是不是'http://'但是这样太蠢了，而且也不是很靠谱、因为万一开头不是而结尾是的话就会误判。这里有两个方法可以非常简单地做出这种判断：`str.startswith()`和`str.endswitch()`两个。一个是用来判断字符串是否以xxx开头、另一个是用来判断字符串是否以xxx结尾。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    url = 'http://blog.just666.cn/img/01.jpg'\n    print(url.startswith('http://'))\n    print(url.endswith('.jpg'))\n```\n这种方式可以有一个简单的改变，使用列表推导式来批量判断。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    url_list = ['http://hey.sdf.we/sdfw.jpg',\n                'http://asdf.ser.x/zxvw.jpg',\n                'http://sdf.re.xcv/ind.html',\n                'http://zx.er.cxv/held.html',\n                'http://zx.sdf.vs/hell.jpg']\n\t# 这里是列表推导式\n    jpg_list = [jpg for jpg in url_list if jpg.endswith('.jpg')]\n    print(jpg_list)\n```\n也可以将后两行换成`print(all(jpg.startswith('.jpg') for jpg in url_list))`就会输出`False`因为并不是所有都以'.jpg'结尾。\n还可以使用匹配的方式，比如你需要在N多url中找到'http/ftp'这两个协议的url，可以这么写\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    choices = ['http://', 'ftp://']\n    choices = tuple(choices)\t# 这里必须要使用元组类型\n\n    url = 'http://www.baidu.com'\n    print(url.startswith(choices))\n\n    url = 'ftp://192.168.1.2'\n    print(url.startswith(choices))\n\n    url = 'https://www.taoba.com'\n    print(url.startswith(choices))\n```\n`startswith`和`endswitch`两个函数完全可以被正则表达式替代，但是对于简单匹配来说没必要用正则表达式，这两个函数比正则要快且可读性搞书写快。\n\n# 0X02 Shell通配符\n在匹配字符串的时候不仅可以使用比较复杂的正则表达式，还可以用比较简单的通配符。使用通配符需要注意的一个问题就是大小写。在Linux/Unix/Mac上要区分大小写，在Windows上不区分大小写。`fnmatch`下有两个方法，`fnmatch`按操作系统来判断到底区不区分大小写，而`fnmatchcase`则强制区分大小写。使用方法如下：\n```Python\n>>> from fnmatch import fnmatch, fnmatchcase\n>>> filename = 'hello.c'\n>>> fnmatch(filename, '*.c')\nTrue\n>>> fnmatch(filename, 'hell?.c')\nTrue\n>>> fnmatch(filename, 'hellO.c')\nFalse\n>>> fnmatch(filename, 'hello.c')\nTrue\n```\n\n# 0X03 查找替换\n将字符串A中所有的某个子字符串B替换为另外的字符串C，可以简单的使用字符串的`replace`函数\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    text = 'hello world hello python'\n    print(text.replace('hello', 'hey'))\n```\n还有一种使用`re`模块的方案，可以使用正则匹配来查找并替换。`re.sub()`方法可以做到这一点。这里sub的第一个参数是匹配的正则表达式，第二个参数是替换的字符串（其中\\1 \\2 \\3表示匹配的编号），第三个参数就是待匹配替换的字符串了。这个例子将`1/19/2017`转变为`2017/1/19`\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport re\n\n\nif __name__ == '__main__':\n    text = 'hello world 1/19/2017'\n    print(re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text))\n```\n\n\n# 0X04 Unicode大法好\n我们有的时候会遇到一些奇怪的字符串问题，比如看起来明明完全一样的两个字符串在对比的时候居然不相等。得益于Python3使用的Unicode我们可以简单的对字符串统一规范。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport unicodedata\n\n\nif __name__ == '__main__':\n    s1 = 'char: \\u00f1'\n    s2 = 'char: n\\u0303'\n    print(s1)\n    print(s2)\n    print(s1 == s2, '   ', len(s1), '   ', len(s2))\n    \n    # 改一下编码\n    s1 = unicodedata.normalize('NFC', s1)\n    s2 = unicodedata.normalize('NFC', s2)\n    print(s1)\n    print(s2)\n    print(s1 == s2, '   ', len(s1), '   ', len(s2))\n```\n这里面用到的那个奇怪的字符我也不知道是什么，是在《Python Cookbok》这本书上找的例子。就是说看起来`\\u00f1`这个字符和`n\\u0303`是一样的，但是很明显前者是一个字符而后者是两个字符，所以我们在对比的时候才会出现字符串不相同甚至长度不同的问题。然后引入了`unicodedata`模块之后用里面的`normalize`方法可以将字符串规范化，`s1 = unicodedata.normalize('NFC', s1)`就是将s1采用NFC方式规范。所谓NFC方式就是 **全组成** 也就是说“如果可能的话就是用单个代码点，也就是s1那种方式”（这里和近场通讯的NFC很明显没半点关系）。可选的除了NFC还有NFD（尽量使用组合字符，也就是s2那种方式），还支持NFKC和NFKD这里就自行Google一下吧。\n\n\n# 0X05 字符串对齐\n有的时候我们需要对字符串进行对齐操作，比如在终端中模拟界面之类的。可以使用C语言风格的%10S这种去替代，但是有更好用简单的方法，就是使用字符串内置的`ljust/rjust/center`方法。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    text = 'Main Menu'\n    print('左对齐：', text.ljust(30))\n    print('右对齐：', text.rjust(30))\n    print('中对齐：', text.center(30))\n\n    print('左对齐填充：', text.ljust(30, '+'))\n    print('右对齐填充：', text.rjust(30, '='))\n    print('中对齐填充：', text.center(30, '*'))\n```\n还有一个炫酷的融合函数叫`format`。这个函数接收两个参数，第一个参数是待处理字符串，第二个参数是选项。具体选项如下：其中'^'是居中，'>'是右对齐，'<'是左对齐，后面跟着的数字是宽度，对齐字符前面是填充字符。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    text = 'Main Menu'\n    print(format(text, '>20'))\n    print(format(text, '<20'))\n    print(format(text, '^20'))\n\n    print(format(text, '->20'))\n    print(format(text, '=<20'))\n    print(format(text, '*^20'))\n```\n\n","source":"_posts/python_magic_2.md","raw":"---\ntitle: Python 奇技淫巧 (二) 字符串、文本\ndate: 2017-01-19 14:51\ntags:\n  - Python\n  - String\n---\n\n> ##### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 split升级\n字符串有一个`split`方法，可以用某个字符或字符串把源字符串切开。但是存在一个弊端，切割位置是固定的，不能灵活切割。有这样一个需求，将这个字符串`hello 1 wrld 2 python 3 linux`切割开，以每个数字为分隔符。这样标准的`str.split`就不能完成任务了。但是在`re`模块中有一个`re.split`可以完成这任务。这个方法的分隔符不是使用准确不变的字符/串而是使用正则表达式。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nimport re\n\nif __name__ == '__main__':\n    my_str = 'hello 1 wrld 2 python 3 linux'\n    res = re.split('[0-9]', my_str)\n    print(res)\n```\n这里使用的正则表达式就是普通的字符串形式，而不需要`re.compile`进行编译。有了这个方法就可以更加灵活地切割字符串了。\n\n# 0X01 字符串开头结尾的匹配\n当我们有一堆的url，想在url中找到http开头且.jpg结尾的图片文件，以前我总是直接`str.strip('http://') == str`来判断开头是不是'http://'但是这样太蠢了，而且也不是很靠谱、因为万一开头不是而结尾是的话就会误判。这里有两个方法可以非常简单地做出这种判断：`str.startswith()`和`str.endswitch()`两个。一个是用来判断字符串是否以xxx开头、另一个是用来判断字符串是否以xxx结尾。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    url = 'http://blog.just666.cn/img/01.jpg'\n    print(url.startswith('http://'))\n    print(url.endswith('.jpg'))\n```\n这种方式可以有一个简单的改变，使用列表推导式来批量判断。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    url_list = ['http://hey.sdf.we/sdfw.jpg',\n                'http://asdf.ser.x/zxvw.jpg',\n                'http://sdf.re.xcv/ind.html',\n                'http://zx.er.cxv/held.html',\n                'http://zx.sdf.vs/hell.jpg']\n\t# 这里是列表推导式\n    jpg_list = [jpg for jpg in url_list if jpg.endswith('.jpg')]\n    print(jpg_list)\n```\n也可以将后两行换成`print(all(jpg.startswith('.jpg') for jpg in url_list))`就会输出`False`因为并不是所有都以'.jpg'结尾。\n还可以使用匹配的方式，比如你需要在N多url中找到'http/ftp'这两个协议的url，可以这么写\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    choices = ['http://', 'ftp://']\n    choices = tuple(choices)\t# 这里必须要使用元组类型\n\n    url = 'http://www.baidu.com'\n    print(url.startswith(choices))\n\n    url = 'ftp://192.168.1.2'\n    print(url.startswith(choices))\n\n    url = 'https://www.taoba.com'\n    print(url.startswith(choices))\n```\n`startswith`和`endswitch`两个函数完全可以被正则表达式替代，但是对于简单匹配来说没必要用正则表达式，这两个函数比正则要快且可读性搞书写快。\n\n# 0X02 Shell通配符\n在匹配字符串的时候不仅可以使用比较复杂的正则表达式，还可以用比较简单的通配符。使用通配符需要注意的一个问题就是大小写。在Linux/Unix/Mac上要区分大小写，在Windows上不区分大小写。`fnmatch`下有两个方法，`fnmatch`按操作系统来判断到底区不区分大小写，而`fnmatchcase`则强制区分大小写。使用方法如下：\n```Python\n>>> from fnmatch import fnmatch, fnmatchcase\n>>> filename = 'hello.c'\n>>> fnmatch(filename, '*.c')\nTrue\n>>> fnmatch(filename, 'hell?.c')\nTrue\n>>> fnmatch(filename, 'hellO.c')\nFalse\n>>> fnmatch(filename, 'hello.c')\nTrue\n```\n\n# 0X03 查找替换\n将字符串A中所有的某个子字符串B替换为另外的字符串C，可以简单的使用字符串的`replace`函数\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    text = 'hello world hello python'\n    print(text.replace('hello', 'hey'))\n```\n还有一种使用`re`模块的方案，可以使用正则匹配来查找并替换。`re.sub()`方法可以做到这一点。这里sub的第一个参数是匹配的正则表达式，第二个参数是替换的字符串（其中\\1 \\2 \\3表示匹配的编号），第三个参数就是待匹配替换的字符串了。这个例子将`1/19/2017`转变为`2017/1/19`\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport re\n\n\nif __name__ == '__main__':\n    text = 'hello world 1/19/2017'\n    print(re.sub(r'(\\d+)/(\\d+)/(\\d+)', r'\\3-\\1-\\2', text))\n```\n\n\n# 0X04 Unicode大法好\n我们有的时候会遇到一些奇怪的字符串问题，比如看起来明明完全一样的两个字符串在对比的时候居然不相等。得益于Python3使用的Unicode我们可以简单的对字符串统一规范。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport unicodedata\n\n\nif __name__ == '__main__':\n    s1 = 'char: \\u00f1'\n    s2 = 'char: n\\u0303'\n    print(s1)\n    print(s2)\n    print(s1 == s2, '   ', len(s1), '   ', len(s2))\n    \n    # 改一下编码\n    s1 = unicodedata.normalize('NFC', s1)\n    s2 = unicodedata.normalize('NFC', s2)\n    print(s1)\n    print(s2)\n    print(s1 == s2, '   ', len(s1), '   ', len(s2))\n```\n这里面用到的那个奇怪的字符我也不知道是什么，是在《Python Cookbok》这本书上找的例子。就是说看起来`\\u00f1`这个字符和`n\\u0303`是一样的，但是很明显前者是一个字符而后者是两个字符，所以我们在对比的时候才会出现字符串不相同甚至长度不同的问题。然后引入了`unicodedata`模块之后用里面的`normalize`方法可以将字符串规范化，`s1 = unicodedata.normalize('NFC', s1)`就是将s1采用NFC方式规范。所谓NFC方式就是 **全组成** 也就是说“如果可能的话就是用单个代码点，也就是s1那种方式”（这里和近场通讯的NFC很明显没半点关系）。可选的除了NFC还有NFD（尽量使用组合字符，也就是s2那种方式），还支持NFKC和NFKD这里就自行Google一下吧。\n\n\n# 0X05 字符串对齐\n有的时候我们需要对字符串进行对齐操作，比如在终端中模拟界面之类的。可以使用C语言风格的%10S这种去替代，但是有更好用简单的方法，就是使用字符串内置的`ljust/rjust/center`方法。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    text = 'Main Menu'\n    print('左对齐：', text.ljust(30))\n    print('右对齐：', text.rjust(30))\n    print('中对齐：', text.center(30))\n\n    print('左对齐填充：', text.ljust(30, '+'))\n    print('右对齐填充：', text.rjust(30, '='))\n    print('中对齐填充：', text.center(30, '*'))\n```\n还有一个炫酷的融合函数叫`format`。这个函数接收两个参数，第一个参数是待处理字符串，第二个参数是选项。具体选项如下：其中'^'是居中，'>'是右对齐，'<'是左对齐，后面跟着的数字是宽度，对齐字符前面是填充字符。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    text = 'Main Menu'\n    print(format(text, '>20'))\n    print(format(text, '<20'))\n    print(format(text, '^20'))\n\n    print(format(text, '->20'))\n    print(format(text, '=<20'))\n    print(format(text, '*^20'))\n```\n\n","slug":"python_magic_2","published":1,"updated":"2017-09-02T14:48:51.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmeh001qhnlponxjmk7s","content":"<blockquote>\n<h5 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h5></blockquote>\n<h1 id=\"0X00-split升级\"><a href=\"#0X00-split升级\" class=\"headerlink\" title=\"0X00 split升级\"></a>0X00 split升级</h1><p>字符串有一个<code>split</code>方法，可以用某个字符或字符串把源字符串切开。但是存在一个弊端，切割位置是固定的，不能灵活切割。有这样一个需求，将这个字符串<code>hello 1 wrld 2 python 3 linux</code>切割开，以每个数字为分隔符。这样标准的<code>str.split</code>就不能完成任务了。但是在<code>re</code>模块中有一个<code>re.split</code>可以完成这任务。这个方法的分隔符不是使用准确不变的字符/串而是使用正则表达式。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_str = <span class=\"string\">'hello 1 wrld 2 python 3 linux'</span></div><div class=\"line\">    res = re.split(<span class=\"string\">'[0-9]'</span>, my_str)</div><div class=\"line\">    print(res)</div></pre></td></tr></table></figure></p>\n<p>这里使用的正则表达式就是普通的字符串形式，而不需要<code>re.compile</code>进行编译。有了这个方法就可以更加灵活地切割字符串了。</p>\n<h1 id=\"0X01-字符串开头结尾的匹配\"><a href=\"#0X01-字符串开头结尾的匹配\" class=\"headerlink\" title=\"0X01 字符串开头结尾的匹配\"></a>0X01 字符串开头结尾的匹配</h1><p>当我们有一堆的url，想在url中找到http开头且.jpg结尾的图片文件，以前我总是直接<code>str.strip(&#39;http://&#39;) == str</code>来判断开头是不是’<a href=\"http://&#39;但是这样太蠢了，而且也不是很靠谱、因为万一开头不是而结尾是的话就会误判。这里有两个方法可以非常简单地做出这种判断：`str.startswith()`和`str.endswitch()`两个。一个是用来判断字符串是否以xxx开头、另一个是用来判断字符串是否以xxx结尾。\" target=\"_blank\" rel=\"external\">http://&#39;但是这样太蠢了，而且也不是很靠谱、因为万一开头不是而结尾是的话就会误判。这里有两个方法可以非常简单地做出这种判断：`str.startswith()`和`str.endswitch()`两个。一个是用来判断字符串是否以xxx开头、另一个是用来判断字符串是否以xxx结尾。</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    url = <span class=\"string\">'http://blog.just666.cn/img/01.jpg'</span></div><div class=\"line\">    print(url.startswith(<span class=\"string\">'http://'</span>))</div><div class=\"line\">    print(url.endswith(<span class=\"string\">'.jpg'</span>))</div></pre></td></tr></table></figure></p>\n<p>这种方式可以有一个简单的改变，使用列表推导式来批量判断。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    url_list = [<span class=\"string\">'http://hey.sdf.we/sdfw.jpg'</span>,</div><div class=\"line\">                <span class=\"string\">'http://asdf.ser.x/zxvw.jpg'</span>,</div><div class=\"line\">                <span class=\"string\">'http://sdf.re.xcv/ind.html'</span>,</div><div class=\"line\">                <span class=\"string\">'http://zx.er.cxv/held.html'</span>,</div><div class=\"line\">                <span class=\"string\">'http://zx.sdf.vs/hell.jpg'</span>]</div><div class=\"line\">\t<span class=\"comment\"># 这里是列表推导式</span></div><div class=\"line\">    jpg_list = [jpg <span class=\"keyword\">for</span> jpg <span class=\"keyword\">in</span> url_list <span class=\"keyword\">if</span> jpg.endswith(<span class=\"string\">'.jpg'</span>)]</div><div class=\"line\">    print(jpg_list)</div></pre></td></tr></table></figure></p>\n<p>也可以将后两行换成<code>print(all(jpg.startswith(&#39;.jpg&#39;) for jpg in url_list))</code>就会输出<code>False</code>因为并不是所有都以’.jpg’结尾。<br>还可以使用匹配的方式，比如你需要在N多url中找到’http/ftp’这两个协议的url，可以这么写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    choices = [<span class=\"string\">'http://'</span>, <span class=\"string\">'ftp://'</span>]</div><div class=\"line\">    choices = tuple(choices)\t<span class=\"comment\"># 这里必须要使用元组类型</span></div><div class=\"line\"></div><div class=\"line\">    url = <span class=\"string\">'http://www.baidu.com'</span></div><div class=\"line\">    print(url.startswith(choices))</div><div class=\"line\"></div><div class=\"line\">    url = <span class=\"string\">'ftp://192.168.1.2'</span></div><div class=\"line\">    print(url.startswith(choices))</div><div class=\"line\"></div><div class=\"line\">    url = <span class=\"string\">'https://www.taoba.com'</span></div><div class=\"line\">    print(url.startswith(choices))</div></pre></td></tr></table></figure></p>\n<p><code>startswith</code>和<code>endswitch</code>两个函数完全可以被正则表达式替代，但是对于简单匹配来说没必要用正则表达式，这两个函数比正则要快且可读性搞书写快。</p>\n<h1 id=\"0X02-Shell通配符\"><a href=\"#0X02-Shell通配符\" class=\"headerlink\" title=\"0X02 Shell通配符\"></a>0X02 Shell通配符</h1><p>在匹配字符串的时候不仅可以使用比较复杂的正则表达式，还可以用比较简单的通配符。使用通配符需要注意的一个问题就是大小写。在Linux/Unix/Mac上要区分大小写，在Windows上不区分大小写。<code>fnmatch</code>下有两个方法，<code>fnmatch</code>按操作系统来判断到底区不区分大小写，而<code>fnmatchcase</code>则强制区分大小写。使用方法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> fnmatch <span class=\"keyword\">import</span> fnmatch, fnmatchcase</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>filename = <span class=\"string\">'hello.c'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fnmatch(filename, <span class=\"string\">'*.c'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fnmatch(filename, <span class=\"string\">'hell?.c'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fnmatch(filename, <span class=\"string\">'hellO.c'</span>)</div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fnmatch(filename, <span class=\"string\">'hello.c'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-查找替换\"><a href=\"#0X03-查找替换\" class=\"headerlink\" title=\"0X03 查找替换\"></a>0X03 查找替换</h1><p>将字符串A中所有的某个子字符串B替换为另外的字符串C，可以简单的使用字符串的<code>replace</code>函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    text = <span class=\"string\">'hello world hello python'</span></div><div class=\"line\">    print(text.replace(<span class=\"string\">'hello'</span>, <span class=\"string\">'hey'</span>))</div></pre></td></tr></table></figure></p>\n<p>还有一种使用<code>re</code>模块的方案，可以使用正则匹配来查找并替换。<code>re.sub()</code>方法可以做到这一点。这里sub的第一个参数是匹配的正则表达式，第二个参数是替换的字符串（其中\\1 \\2 \\3表示匹配的编号），第三个参数就是待匹配替换的字符串了。这个例子将<code>1/19/2017</code>转变为<code>2017/1/19</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    text = <span class=\"string\">'hello world 1/19/2017'</span></div><div class=\"line\">    print(re.sub(<span class=\"string\">r'(\\d+)/(\\d+)/(\\d+)'</span>, <span class=\"string\">r'\\3-\\1-\\2'</span>, text))</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-Unicode大法好\"><a href=\"#0X04-Unicode大法好\" class=\"headerlink\" title=\"0X04 Unicode大法好\"></a>0X04 Unicode大法好</h1><p>我们有的时候会遇到一些奇怪的字符串问题，比如看起来明明完全一样的两个字符串在对比的时候居然不相等。得益于Python3使用的Unicode我们可以简单的对字符串统一规范。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> unicodedata</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    s1 = <span class=\"string\">'char: \\u00f1'</span></div><div class=\"line\">    s2 = <span class=\"string\">'char: n\\u0303'</span></div><div class=\"line\">    print(s1)</div><div class=\"line\">    print(s2)</div><div class=\"line\">    print(s1 == s2, <span class=\"string\">'   '</span>, len(s1), <span class=\"string\">'   '</span>, len(s2))</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 改一下编码</span></div><div class=\"line\">    s1 = unicodedata.normalize(<span class=\"string\">'NFC'</span>, s1)</div><div class=\"line\">    s2 = unicodedata.normalize(<span class=\"string\">'NFC'</span>, s2)</div><div class=\"line\">    print(s1)</div><div class=\"line\">    print(s2)</div><div class=\"line\">    print(s1 == s2, <span class=\"string\">'   '</span>, len(s1), <span class=\"string\">'   '</span>, len(s2))</div></pre></td></tr></table></figure></p>\n<p>这里面用到的那个奇怪的字符我也不知道是什么，是在《Python Cookbok》这本书上找的例子。就是说看起来<code>\\u00f1</code>这个字符和<code>n\\u0303</code>是一样的，但是很明显前者是一个字符而后者是两个字符，所以我们在对比的时候才会出现字符串不相同甚至长度不同的问题。然后引入了<code>unicodedata</code>模块之后用里面的<code>normalize</code>方法可以将字符串规范化，<code>s1 = unicodedata.normalize(&#39;NFC&#39;, s1)</code>就是将s1采用NFC方式规范。所谓NFC方式就是 <strong>全组成</strong> 也就是说“如果可能的话就是用单个代码点，也就是s1那种方式”（这里和近场通讯的NFC很明显没半点关系）。可选的除了NFC还有NFD（尽量使用组合字符，也就是s2那种方式），还支持NFKC和NFKD这里就自行Google一下吧。</p>\n<h1 id=\"0X05-字符串对齐\"><a href=\"#0X05-字符串对齐\" class=\"headerlink\" title=\"0X05 字符串对齐\"></a>0X05 字符串对齐</h1><p>有的时候我们需要对字符串进行对齐操作，比如在终端中模拟界面之类的。可以使用C语言风格的%10S这种去替代，但是有更好用简单的方法，就是使用字符串内置的<code>ljust/rjust/center</code>方法。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    text = <span class=\"string\">'Main Menu'</span></div><div class=\"line\">    print(<span class=\"string\">'左对齐：'</span>, text.ljust(<span class=\"number\">30</span>))</div><div class=\"line\">    print(<span class=\"string\">'右对齐：'</span>, text.rjust(<span class=\"number\">30</span>))</div><div class=\"line\">    print(<span class=\"string\">'中对齐：'</span>, text.center(<span class=\"number\">30</span>))</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'左对齐填充：'</span>, text.ljust(<span class=\"number\">30</span>, <span class=\"string\">'+'</span>))</div><div class=\"line\">    print(<span class=\"string\">'右对齐填充：'</span>, text.rjust(<span class=\"number\">30</span>, <span class=\"string\">'='</span>))</div><div class=\"line\">    print(<span class=\"string\">'中对齐填充：'</span>, text.center(<span class=\"number\">30</span>, <span class=\"string\">'*'</span>))</div></pre></td></tr></table></figure></p>\n<p>还有一个炫酷的融合函数叫<code>format</code>。这个函数接收两个参数，第一个参数是待处理字符串，第二个参数是选项。具体选项如下：其中’^’是居中，’&gt;’是右对齐，’&lt;’是左对齐，后面跟着的数字是宽度，对齐字符前面是填充字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    text = <span class=\"string\">'Main Menu'</span></div><div class=\"line\">    print(format(text, <span class=\"string\">'&gt;20'</span>))</div><div class=\"line\">    print(format(text, <span class=\"string\">'&lt;20'</span>))</div><div class=\"line\">    print(format(text, <span class=\"string\">'^20'</span>))</div><div class=\"line\"></div><div class=\"line\">    print(format(text, <span class=\"string\">'-&gt;20'</span>))</div><div class=\"line\">    print(format(text, <span class=\"string\">'=&lt;20'</span>))</div><div class=\"line\">    print(format(text, <span class=\"string\">'*^20'</span>))</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h5 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h5></blockquote>\n<h1 id=\"0X00-split升级\"><a href=\"#0X00-split升级\" class=\"headerlink\" title=\"0X00 split升级\"></a>0X00 split升级</h1><p>字符串有一个<code>split</code>方法，可以用某个字符或字符串把源字符串切开。但是存在一个弊端，切割位置是固定的，不能灵活切割。有这样一个需求，将这个字符串<code>hello 1 wrld 2 python 3 linux</code>切割开，以每个数字为分隔符。这样标准的<code>str.split</code>就不能完成任务了。但是在<code>re</code>模块中有一个<code>re.split</code>可以完成这任务。这个方法的分隔符不是使用准确不变的字符/串而是使用正则表达式。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_str = <span class=\"string\">'hello 1 wrld 2 python 3 linux'</span></div><div class=\"line\">    res = re.split(<span class=\"string\">'[0-9]'</span>, my_str)</div><div class=\"line\">    print(res)</div></pre></td></tr></table></figure></p>\n<p>这里使用的正则表达式就是普通的字符串形式，而不需要<code>re.compile</code>进行编译。有了这个方法就可以更加灵活地切割字符串了。</p>\n<h1 id=\"0X01-字符串开头结尾的匹配\"><a href=\"#0X01-字符串开头结尾的匹配\" class=\"headerlink\" title=\"0X01 字符串开头结尾的匹配\"></a>0X01 字符串开头结尾的匹配</h1><p>当我们有一堆的url，想在url中找到http开头且.jpg结尾的图片文件，以前我总是直接<code>str.strip(&#39;http://&#39;) == str</code>来判断开头是不是’<a href=\"http://&#39;但是这样太蠢了，而且也不是很靠谱、因为万一开头不是而结尾是的话就会误判。这里有两个方法可以非常简单地做出这种判断：`str.startswith()`和`str.endswitch()`两个。一个是用来判断字符串是否以xxx开头、另一个是用来判断字符串是否以xxx结尾。\" target=\"_blank\" rel=\"external\">http://&#39;但是这样太蠢了，而且也不是很靠谱、因为万一开头不是而结尾是的话就会误判。这里有两个方法可以非常简单地做出这种判断：`str.startswith()`和`str.endswitch()`两个。一个是用来判断字符串是否以xxx开头、另一个是用来判断字符串是否以xxx结尾。</a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    url = <span class=\"string\">'http://blog.just666.cn/img/01.jpg'</span></div><div class=\"line\">    print(url.startswith(<span class=\"string\">'http://'</span>))</div><div class=\"line\">    print(url.endswith(<span class=\"string\">'.jpg'</span>))</div></pre></td></tr></table></figure></p>\n<p>这种方式可以有一个简单的改变，使用列表推导式来批量判断。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    url_list = [<span class=\"string\">'http://hey.sdf.we/sdfw.jpg'</span>,</div><div class=\"line\">                <span class=\"string\">'http://asdf.ser.x/zxvw.jpg'</span>,</div><div class=\"line\">                <span class=\"string\">'http://sdf.re.xcv/ind.html'</span>,</div><div class=\"line\">                <span class=\"string\">'http://zx.er.cxv/held.html'</span>,</div><div class=\"line\">                <span class=\"string\">'http://zx.sdf.vs/hell.jpg'</span>]</div><div class=\"line\">\t<span class=\"comment\"># 这里是列表推导式</span></div><div class=\"line\">    jpg_list = [jpg <span class=\"keyword\">for</span> jpg <span class=\"keyword\">in</span> url_list <span class=\"keyword\">if</span> jpg.endswith(<span class=\"string\">'.jpg'</span>)]</div><div class=\"line\">    print(jpg_list)</div></pre></td></tr></table></figure></p>\n<p>也可以将后两行换成<code>print(all(jpg.startswith(&#39;.jpg&#39;) for jpg in url_list))</code>就会输出<code>False</code>因为并不是所有都以’.jpg’结尾。<br>还可以使用匹配的方式，比如你需要在N多url中找到’http/ftp’这两个协议的url，可以这么写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    choices = [<span class=\"string\">'http://'</span>, <span class=\"string\">'ftp://'</span>]</div><div class=\"line\">    choices = tuple(choices)\t<span class=\"comment\"># 这里必须要使用元组类型</span></div><div class=\"line\"></div><div class=\"line\">    url = <span class=\"string\">'http://www.baidu.com'</span></div><div class=\"line\">    print(url.startswith(choices))</div><div class=\"line\"></div><div class=\"line\">    url = <span class=\"string\">'ftp://192.168.1.2'</span></div><div class=\"line\">    print(url.startswith(choices))</div><div class=\"line\"></div><div class=\"line\">    url = <span class=\"string\">'https://www.taoba.com'</span></div><div class=\"line\">    print(url.startswith(choices))</div></pre></td></tr></table></figure></p>\n<p><code>startswith</code>和<code>endswitch</code>两个函数完全可以被正则表达式替代，但是对于简单匹配来说没必要用正则表达式，这两个函数比正则要快且可读性搞书写快。</p>\n<h1 id=\"0X02-Shell通配符\"><a href=\"#0X02-Shell通配符\" class=\"headerlink\" title=\"0X02 Shell通配符\"></a>0X02 Shell通配符</h1><p>在匹配字符串的时候不仅可以使用比较复杂的正则表达式，还可以用比较简单的通配符。使用通配符需要注意的一个问题就是大小写。在Linux/Unix/Mac上要区分大小写，在Windows上不区分大小写。<code>fnmatch</code>下有两个方法，<code>fnmatch</code>按操作系统来判断到底区不区分大小写，而<code>fnmatchcase</code>则强制区分大小写。使用方法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> fnmatch <span class=\"keyword\">import</span> fnmatch, fnmatchcase</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>filename = <span class=\"string\">'hello.c'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fnmatch(filename, <span class=\"string\">'*.c'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fnmatch(filename, <span class=\"string\">'hell?.c'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fnmatch(filename, <span class=\"string\">'hellO.c'</span>)</div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fnmatch(filename, <span class=\"string\">'hello.c'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-查找替换\"><a href=\"#0X03-查找替换\" class=\"headerlink\" title=\"0X03 查找替换\"></a>0X03 查找替换</h1><p>将字符串A中所有的某个子字符串B替换为另外的字符串C，可以简单的使用字符串的<code>replace</code>函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    text = <span class=\"string\">'hello world hello python'</span></div><div class=\"line\">    print(text.replace(<span class=\"string\">'hello'</span>, <span class=\"string\">'hey'</span>))</div></pre></td></tr></table></figure></p>\n<p>还有一种使用<code>re</code>模块的方案，可以使用正则匹配来查找并替换。<code>re.sub()</code>方法可以做到这一点。这里sub的第一个参数是匹配的正则表达式，第二个参数是替换的字符串（其中\\1 \\2 \\3表示匹配的编号），第三个参数就是待匹配替换的字符串了。这个例子将<code>1/19/2017</code>转变为<code>2017/1/19</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    text = <span class=\"string\">'hello world 1/19/2017'</span></div><div class=\"line\">    print(re.sub(<span class=\"string\">r'(\\d+)/(\\d+)/(\\d+)'</span>, <span class=\"string\">r'\\3-\\1-\\2'</span>, text))</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-Unicode大法好\"><a href=\"#0X04-Unicode大法好\" class=\"headerlink\" title=\"0X04 Unicode大法好\"></a>0X04 Unicode大法好</h1><p>我们有的时候会遇到一些奇怪的字符串问题，比如看起来明明完全一样的两个字符串在对比的时候居然不相等。得益于Python3使用的Unicode我们可以简单的对字符串统一规范。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> unicodedata</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    s1 = <span class=\"string\">'char: \\u00f1'</span></div><div class=\"line\">    s2 = <span class=\"string\">'char: n\\u0303'</span></div><div class=\"line\">    print(s1)</div><div class=\"line\">    print(s2)</div><div class=\"line\">    print(s1 == s2, <span class=\"string\">'   '</span>, len(s1), <span class=\"string\">'   '</span>, len(s2))</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 改一下编码</span></div><div class=\"line\">    s1 = unicodedata.normalize(<span class=\"string\">'NFC'</span>, s1)</div><div class=\"line\">    s2 = unicodedata.normalize(<span class=\"string\">'NFC'</span>, s2)</div><div class=\"line\">    print(s1)</div><div class=\"line\">    print(s2)</div><div class=\"line\">    print(s1 == s2, <span class=\"string\">'   '</span>, len(s1), <span class=\"string\">'   '</span>, len(s2))</div></pre></td></tr></table></figure></p>\n<p>这里面用到的那个奇怪的字符我也不知道是什么，是在《Python Cookbok》这本书上找的例子。就是说看起来<code>\\u00f1</code>这个字符和<code>n\\u0303</code>是一样的，但是很明显前者是一个字符而后者是两个字符，所以我们在对比的时候才会出现字符串不相同甚至长度不同的问题。然后引入了<code>unicodedata</code>模块之后用里面的<code>normalize</code>方法可以将字符串规范化，<code>s1 = unicodedata.normalize(&#39;NFC&#39;, s1)</code>就是将s1采用NFC方式规范。所谓NFC方式就是 <strong>全组成</strong> 也就是说“如果可能的话就是用单个代码点，也就是s1那种方式”（这里和近场通讯的NFC很明显没半点关系）。可选的除了NFC还有NFD（尽量使用组合字符，也就是s2那种方式），还支持NFKC和NFKD这里就自行Google一下吧。</p>\n<h1 id=\"0X05-字符串对齐\"><a href=\"#0X05-字符串对齐\" class=\"headerlink\" title=\"0X05 字符串对齐\"></a>0X05 字符串对齐</h1><p>有的时候我们需要对字符串进行对齐操作，比如在终端中模拟界面之类的。可以使用C语言风格的%10S这种去替代，但是有更好用简单的方法，就是使用字符串内置的<code>ljust/rjust/center</code>方法。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    text = <span class=\"string\">'Main Menu'</span></div><div class=\"line\">    print(<span class=\"string\">'左对齐：'</span>, text.ljust(<span class=\"number\">30</span>))</div><div class=\"line\">    print(<span class=\"string\">'右对齐：'</span>, text.rjust(<span class=\"number\">30</span>))</div><div class=\"line\">    print(<span class=\"string\">'中对齐：'</span>, text.center(<span class=\"number\">30</span>))</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'左对齐填充：'</span>, text.ljust(<span class=\"number\">30</span>, <span class=\"string\">'+'</span>))</div><div class=\"line\">    print(<span class=\"string\">'右对齐填充：'</span>, text.rjust(<span class=\"number\">30</span>, <span class=\"string\">'='</span>))</div><div class=\"line\">    print(<span class=\"string\">'中对齐填充：'</span>, text.center(<span class=\"number\">30</span>, <span class=\"string\">'*'</span>))</div></pre></td></tr></table></figure></p>\n<p>还有一个炫酷的融合函数叫<code>format</code>。这个函数接收两个参数，第一个参数是待处理字符串，第二个参数是选项。具体选项如下：其中’^’是居中，’&gt;’是右对齐，’&lt;’是左对齐，后面跟着的数字是宽度，对齐字符前面是填充字符。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    text = <span class=\"string\">'Main Menu'</span></div><div class=\"line\">    print(format(text, <span class=\"string\">'&gt;20'</span>))</div><div class=\"line\">    print(format(text, <span class=\"string\">'&lt;20'</span>))</div><div class=\"line\">    print(format(text, <span class=\"string\">'^20'</span>))</div><div class=\"line\"></div><div class=\"line\">    print(format(text, <span class=\"string\">'-&gt;20'</span>))</div><div class=\"line\">    print(format(text, <span class=\"string\">'=&lt;20'</span>))</div><div class=\"line\">    print(format(text, <span class=\"string\">'*^20'</span>))</div></pre></td></tr></table></figure></p>\n"},{"title":"Python 奇技淫巧 (四) 文件&I/O","date":"2017-01-24T13:43:00.000Z","_content":"\n> ##### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 指定编码\n每个文本文件都是以某一编码格式保存的，如果解码格式和文本格式不同就会出现乱码，在Python中可以简单的控制用什么编码来打开文件以读写文件。使用`open`打开文件的时候指定一个`encoding`参数就可以使用其他而非默认编码打开文件了。这里用到了一个打开文件的方式是`with open() as f:`这样，这样做的话在这个with下面的代码块中可以直接调用f这个文件对象，并且执行到with代码块之外的时候会自动关闭文件，不需要再手动关闭文件。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    \n    # 使用utf-8编码，写模式，打开文件D:/test.txt\n    with open('D:/test.txt', 'w', encoding='utf-8') as f:\n        f.write('你好，世界')    # 写一行汉子\n    \n    # 使用utf-8编码，读模式，打开文件D:/test.txt\n    with open('D:/test.txt', 'r', encoding='utf-8') as f:\n        print(f.read())       # 因为是编码相同所以可以正常读出文字\n    \n    # 使用latin-1编码，读模式，打开文件D:/test.txt\n    with open('D:/test.txt', 'r', encoding='latin-1') as f:\n        print(f.read())       # 因为使用的编码格式不同，所以会出现乱码\n```\n\n# 0X01 输出重定向\n在Linux中可以对命令的输出进行重定向，将本应该输出到屏幕的东西输出到指定的文件里，在Python中也是可以简单做到这一点的。假设一个已经用写入模式打开的文件对象f，在输出文字的时候就可以直接这样调用`print('hello,world', file=f)`就可以直接将输出的内容重定向到文件中。这里需要注意的就是文件必须已经用可写模式打开，且是文本模式。\n\n# 0X02 指定分隔符和结尾\n我们可以使用这样一条语句打印多个字符串`print('hello', 'world', 'hello', 'python')`，会直接将字符串连接到一起，默认没有分隔符且使用系统默认作为结尾符号。可以给`print()`指定两个参数来设置分隔符和结尾符。`print('hello,', world', 'hello', 'python', sep=',', end='\\n')`这里指定了使用逗号分隔开这些字符串，并且使用`\\n`作为结尾符号。如果使用空字符串作为结尾符号，输出的时候最后就不自动换行。\n\n# 0X03 读写二进制文件\n有一个最常见的二进制文件读写实例：从网上下载东西到本地。比如有一个url是`http://blog.just666.cn/usr/themes/Themia/img/sj/134.jpg`，那怎么把这个图片下载到本地呢？可以使用下面这段代码。先找到url，然后使用urlopen打开这个网络文件并获取到文件内容，最后用二进制模式写入到新的本地文件就可以了。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom urllib.request import urlopen\n\n\nif __name__ == '__main__':\n    web_img = urlopen('http://blog.just666.cn/usr/themes/Themia/img/sj/134.jpg')\t# 使用urlopen打开一个url\n    web_img = web_img.read()\t# 获得文件内容，当然这里是二进制的所以没有可读性\n\t# 新打开一个文件，使用二进制写入模式\n    with open('D:/hey.jpg', 'wb') as f:\t# 在w后面指定一个b也就是二进制写入模式\n        f.write(web_img)\t# 将新文件写入进去\n```\n\n# 0X04 路径名\n在Python中可以使用`os.path`处理路径名的问题，比较常用的三个方法`os.path.basename()`、`os.path.dirname()`、`os.path.join()`，分别用来显示一个完整地址的最后文件名、显示某完整地址文件的目录地址、将目录和文件拼接起来。因为Python比较强大，所以可以做到容错效果，比如说在Windows中地址是这样的`D:\\game\\steam\\steamapps\\csgo`，但是如果我写成了Linux下的格式`D:/game/steam/steamapps/csgo`也是没有问题的，照样可以用这些方法处理，没有影响。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nimport os\n\n\nif __name__ == '__main__':\n    path = '/var/www/html/index.html'\t# 这里是一个完整地址的文件\n    print(os.path.basename(path))\t\t# 可以显示文件名  index.html\n    print(os.path.dirname(path))\t\t# 可以显示当前文件的地址位置 /var/www/html/\n    print(os.path.join('D:/', 'hehe.exe'))\t# 将连接拼起来编程 D:/hehe.exe\n```\n\n# 0X05 小技巧\n检验文件是否存在：`os.path.exists('D:/test.txt')`如果文件存在则返回True否则就是False\n获取文件元数据：`os.path.getatime('D:/test.txt')`查看修改时间   `getsize`获取文件大小\n\n\n","source":"_posts/python_magic_4.md","raw":"---\ntitle: Python 奇技淫巧 (四) 文件&I/O\ndate: 2017-01-24 21:43\ntags:\n  - Python\n  - I/O\n---\n\n> ##### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 指定编码\n每个文本文件都是以某一编码格式保存的，如果解码格式和文本格式不同就会出现乱码，在Python中可以简单的控制用什么编码来打开文件以读写文件。使用`open`打开文件的时候指定一个`encoding`参数就可以使用其他而非默认编码打开文件了。这里用到了一个打开文件的方式是`with open() as f:`这样，这样做的话在这个with下面的代码块中可以直接调用f这个文件对象，并且执行到with代码块之外的时候会自动关闭文件，不需要再手动关闭文件。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\n\nif __name__ == '__main__':\n    \n    # 使用utf-8编码，写模式，打开文件D:/test.txt\n    with open('D:/test.txt', 'w', encoding='utf-8') as f:\n        f.write('你好，世界')    # 写一行汉子\n    \n    # 使用utf-8编码，读模式，打开文件D:/test.txt\n    with open('D:/test.txt', 'r', encoding='utf-8') as f:\n        print(f.read())       # 因为是编码相同所以可以正常读出文字\n    \n    # 使用latin-1编码，读模式，打开文件D:/test.txt\n    with open('D:/test.txt', 'r', encoding='latin-1') as f:\n        print(f.read())       # 因为使用的编码格式不同，所以会出现乱码\n```\n\n# 0X01 输出重定向\n在Linux中可以对命令的输出进行重定向，将本应该输出到屏幕的东西输出到指定的文件里，在Python中也是可以简单做到这一点的。假设一个已经用写入模式打开的文件对象f，在输出文字的时候就可以直接这样调用`print('hello,world', file=f)`就可以直接将输出的内容重定向到文件中。这里需要注意的就是文件必须已经用可写模式打开，且是文本模式。\n\n# 0X02 指定分隔符和结尾\n我们可以使用这样一条语句打印多个字符串`print('hello', 'world', 'hello', 'python')`，会直接将字符串连接到一起，默认没有分隔符且使用系统默认作为结尾符号。可以给`print()`指定两个参数来设置分隔符和结尾符。`print('hello,', world', 'hello', 'python', sep=',', end='\\n')`这里指定了使用逗号分隔开这些字符串，并且使用`\\n`作为结尾符号。如果使用空字符串作为结尾符号，输出的时候最后就不自动换行。\n\n# 0X03 读写二进制文件\n有一个最常见的二进制文件读写实例：从网上下载东西到本地。比如有一个url是`http://blog.just666.cn/usr/themes/Themia/img/sj/134.jpg`，那怎么把这个图片下载到本地呢？可以使用下面这段代码。先找到url，然后使用urlopen打开这个网络文件并获取到文件内容，最后用二进制模式写入到新的本地文件就可以了。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom urllib.request import urlopen\n\n\nif __name__ == '__main__':\n    web_img = urlopen('http://blog.just666.cn/usr/themes/Themia/img/sj/134.jpg')\t# 使用urlopen打开一个url\n    web_img = web_img.read()\t# 获得文件内容，当然这里是二进制的所以没有可读性\n\t# 新打开一个文件，使用二进制写入模式\n    with open('D:/hey.jpg', 'wb') as f:\t# 在w后面指定一个b也就是二进制写入模式\n        f.write(web_img)\t# 将新文件写入进去\n```\n\n# 0X04 路径名\n在Python中可以使用`os.path`处理路径名的问题，比较常用的三个方法`os.path.basename()`、`os.path.dirname()`、`os.path.join()`，分别用来显示一个完整地址的最后文件名、显示某完整地址文件的目录地址、将目录和文件拼接起来。因为Python比较强大，所以可以做到容错效果，比如说在Windows中地址是这样的`D:\\game\\steam\\steamapps\\csgo`，但是如果我写成了Linux下的格式`D:/game/steam/steamapps/csgo`也是没有问题的，照样可以用这些方法处理，没有影响。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nimport os\n\n\nif __name__ == '__main__':\n    path = '/var/www/html/index.html'\t# 这里是一个完整地址的文件\n    print(os.path.basename(path))\t\t# 可以显示文件名  index.html\n    print(os.path.dirname(path))\t\t# 可以显示当前文件的地址位置 /var/www/html/\n    print(os.path.join('D:/', 'hehe.exe'))\t# 将连接拼起来编程 D:/hehe.exe\n```\n\n# 0X05 小技巧\n检验文件是否存在：`os.path.exists('D:/test.txt')`如果文件存在则返回True否则就是False\n获取文件元数据：`os.path.getatime('D:/test.txt')`查看修改时间   `getsize`获取文件大小\n\n\n","slug":"python_magic_4","published":1,"updated":"2017-09-02T14:49:25.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmei001rhnlp94js38ao","content":"<blockquote>\n<h5 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h5></blockquote>\n<h1 id=\"0X00-指定编码\"><a href=\"#0X00-指定编码\" class=\"headerlink\" title=\"0X00 指定编码\"></a>0X00 指定编码</h1><p>每个文本文件都是以某一编码格式保存的，如果解码格式和文本格式不同就会出现乱码，在Python中可以简单的控制用什么编码来打开文件以读写文件。使用<code>open</code>打开文件的时候指定一个<code>encoding</code>参数就可以使用其他而非默认编码打开文件了。这里用到了一个打开文件的方式是<code>with open() as f:</code>这样，这样做的话在这个with下面的代码块中可以直接调用f这个文件对象，并且执行到with代码块之外的时候会自动关闭文件，不需要再手动关闭文件。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 使用utf-8编码，写模式，打开文件D:/test.txt</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'D:/test.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(<span class=\"string\">'你好，世界'</span>)    <span class=\"comment\"># 写一行汉子</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 使用utf-8编码，读模式，打开文件D:/test.txt</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'D:/test.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        print(f.read())       <span class=\"comment\"># 因为是编码相同所以可以正常读出文字</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 使用latin-1编码，读模式，打开文件D:/test.txt</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'D:/test.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'latin-1'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        print(f.read())       <span class=\"comment\"># 因为使用的编码格式不同，所以会出现乱码</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X01-输出重定向\"><a href=\"#0X01-输出重定向\" class=\"headerlink\" title=\"0X01 输出重定向\"></a>0X01 输出重定向</h1><p>在Linux中可以对命令的输出进行重定向，将本应该输出到屏幕的东西输出到指定的文件里，在Python中也是可以简单做到这一点的。假设一个已经用写入模式打开的文件对象f，在输出文字的时候就可以直接这样调用<code>print(&#39;hello,world&#39;, file=f)</code>就可以直接将输出的内容重定向到文件中。这里需要注意的就是文件必须已经用可写模式打开，且是文本模式。</p>\n<h1 id=\"0X02-指定分隔符和结尾\"><a href=\"#0X02-指定分隔符和结尾\" class=\"headerlink\" title=\"0X02 指定分隔符和结尾\"></a>0X02 指定分隔符和结尾</h1><p>我们可以使用这样一条语句打印多个字符串<code>print(&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;python&#39;)</code>，会直接将字符串连接到一起，默认没有分隔符且使用系统默认作为结尾符号。可以给<code>print()</code>指定两个参数来设置分隔符和结尾符。<code>print(&#39;hello,&#39;, world&#39;, &#39;hello&#39;, &#39;python&#39;, sep=&#39;,&#39;, end=&#39;\\n&#39;)</code>这里指定了使用逗号分隔开这些字符串，并且使用<code>\\n</code>作为结尾符号。如果使用空字符串作为结尾符号，输出的时候最后就不自动换行。</p>\n<h1 id=\"0X03-读写二进制文件\"><a href=\"#0X03-读写二进制文件\" class=\"headerlink\" title=\"0X03 读写二进制文件\"></a>0X03 读写二进制文件</h1><p>有一个最常见的二进制文件读写实例：从网上下载东西到本地。比如有一个url是<code>http://blog.just666.cn/usr/themes/Themia/img/sj/134.jpg</code>，那怎么把这个图片下载到本地呢？可以使用下面这段代码。先找到url，然后使用urlopen打开这个网络文件并获取到文件内容，最后用二进制模式写入到新的本地文件就可以了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> urllib.request <span class=\"keyword\">import</span> urlopen</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    web_img = urlopen(<span class=\"string\">'http://blog.just666.cn/usr/themes/Themia/img/sj/134.jpg'</span>)\t<span class=\"comment\"># 使用urlopen打开一个url</span></div><div class=\"line\">    web_img = web_img.read()\t<span class=\"comment\"># 获得文件内容，当然这里是二进制的所以没有可读性</span></div><div class=\"line\">\t<span class=\"comment\"># 新打开一个文件，使用二进制写入模式</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'D:/hey.jpg'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:\t<span class=\"comment\"># 在w后面指定一个b也就是二进制写入模式</span></div><div class=\"line\">        f.write(web_img)\t<span class=\"comment\"># 将新文件写入进去</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-路径名\"><a href=\"#0X04-路径名\" class=\"headerlink\" title=\"0X04 路径名\"></a>0X04 路径名</h1><p>在Python中可以使用<code>os.path</code>处理路径名的问题，比较常用的三个方法<code>os.path.basename()</code>、<code>os.path.dirname()</code>、<code>os.path.join()</code>，分别用来显示一个完整地址的最后文件名、显示某完整地址文件的目录地址、将目录和文件拼接起来。因为Python比较强大，所以可以做到容错效果，比如说在Windows中地址是这样的<code>D:\\game\\steam\\steamapps\\csgo</code>，但是如果我写成了Linux下的格式<code>D:/game/steam/steamapps/csgo</code>也是没有问题的，照样可以用这些方法处理，没有影响。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    path = <span class=\"string\">'/var/www/html/index.html'</span>\t<span class=\"comment\"># 这里是一个完整地址的文件</span></div><div class=\"line\">    print(os.path.basename(path))\t\t<span class=\"comment\"># 可以显示文件名  index.html</span></div><div class=\"line\">    print(os.path.dirname(path))\t\t<span class=\"comment\"># 可以显示当前文件的地址位置 /var/www/html/</span></div><div class=\"line\">    print(os.path.join(<span class=\"string\">'D:/'</span>, <span class=\"string\">'hehe.exe'</span>))\t<span class=\"comment\"># 将连接拼起来编程 D:/hehe.exe</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-小技巧\"><a href=\"#0X05-小技巧\" class=\"headerlink\" title=\"0X05 小技巧\"></a>0X05 小技巧</h1><p>检验文件是否存在：<code>os.path.exists(&#39;D:/test.txt&#39;)</code>如果文件存在则返回True否则就是False<br>获取文件元数据：<code>os.path.getatime(&#39;D:/test.txt&#39;)</code>查看修改时间   <code>getsize</code>获取文件大小</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h5 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h5></blockquote>\n<h1 id=\"0X00-指定编码\"><a href=\"#0X00-指定编码\" class=\"headerlink\" title=\"0X00 指定编码\"></a>0X00 指定编码</h1><p>每个文本文件都是以某一编码格式保存的，如果解码格式和文本格式不同就会出现乱码，在Python中可以简单的控制用什么编码来打开文件以读写文件。使用<code>open</code>打开文件的时候指定一个<code>encoding</code>参数就可以使用其他而非默认编码打开文件了。这里用到了一个打开文件的方式是<code>with open() as f:</code>这样，这样做的话在这个with下面的代码块中可以直接调用f这个文件对象，并且执行到with代码块之外的时候会自动关闭文件，不需要再手动关闭文件。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 使用utf-8编码，写模式，打开文件D:/test.txt</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'D:/test.txt'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(<span class=\"string\">'你好，世界'</span>)    <span class=\"comment\"># 写一行汉子</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 使用utf-8编码，读模式，打开文件D:/test.txt</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'D:/test.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        print(f.read())       <span class=\"comment\"># 因为是编码相同所以可以正常读出文字</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 使用latin-1编码，读模式，打开文件D:/test.txt</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'D:/test.txt'</span>, <span class=\"string\">'r'</span>, encoding=<span class=\"string\">'latin-1'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        print(f.read())       <span class=\"comment\"># 因为使用的编码格式不同，所以会出现乱码</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X01-输出重定向\"><a href=\"#0X01-输出重定向\" class=\"headerlink\" title=\"0X01 输出重定向\"></a>0X01 输出重定向</h1><p>在Linux中可以对命令的输出进行重定向，将本应该输出到屏幕的东西输出到指定的文件里，在Python中也是可以简单做到这一点的。假设一个已经用写入模式打开的文件对象f，在输出文字的时候就可以直接这样调用<code>print(&#39;hello,world&#39;, file=f)</code>就可以直接将输出的内容重定向到文件中。这里需要注意的就是文件必须已经用可写模式打开，且是文本模式。</p>\n<h1 id=\"0X02-指定分隔符和结尾\"><a href=\"#0X02-指定分隔符和结尾\" class=\"headerlink\" title=\"0X02 指定分隔符和结尾\"></a>0X02 指定分隔符和结尾</h1><p>我们可以使用这样一条语句打印多个字符串<code>print(&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;python&#39;)</code>，会直接将字符串连接到一起，默认没有分隔符且使用系统默认作为结尾符号。可以给<code>print()</code>指定两个参数来设置分隔符和结尾符。<code>print(&#39;hello,&#39;, world&#39;, &#39;hello&#39;, &#39;python&#39;, sep=&#39;,&#39;, end=&#39;\\n&#39;)</code>这里指定了使用逗号分隔开这些字符串，并且使用<code>\\n</code>作为结尾符号。如果使用空字符串作为结尾符号，输出的时候最后就不自动换行。</p>\n<h1 id=\"0X03-读写二进制文件\"><a href=\"#0X03-读写二进制文件\" class=\"headerlink\" title=\"0X03 读写二进制文件\"></a>0X03 读写二进制文件</h1><p>有一个最常见的二进制文件读写实例：从网上下载东西到本地。比如有一个url是<code>http://blog.just666.cn/usr/themes/Themia/img/sj/134.jpg</code>，那怎么把这个图片下载到本地呢？可以使用下面这段代码。先找到url，然后使用urlopen打开这个网络文件并获取到文件内容，最后用二进制模式写入到新的本地文件就可以了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> urllib.request <span class=\"keyword\">import</span> urlopen</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    web_img = urlopen(<span class=\"string\">'http://blog.just666.cn/usr/themes/Themia/img/sj/134.jpg'</span>)\t<span class=\"comment\"># 使用urlopen打开一个url</span></div><div class=\"line\">    web_img = web_img.read()\t<span class=\"comment\"># 获得文件内容，当然这里是二进制的所以没有可读性</span></div><div class=\"line\">\t<span class=\"comment\"># 新打开一个文件，使用二进制写入模式</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'D:/hey.jpg'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:\t<span class=\"comment\"># 在w后面指定一个b也就是二进制写入模式</span></div><div class=\"line\">        f.write(web_img)\t<span class=\"comment\"># 将新文件写入进去</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-路径名\"><a href=\"#0X04-路径名\" class=\"headerlink\" title=\"0X04 路径名\"></a>0X04 路径名</h1><p>在Python中可以使用<code>os.path</code>处理路径名的问题，比较常用的三个方法<code>os.path.basename()</code>、<code>os.path.dirname()</code>、<code>os.path.join()</code>，分别用来显示一个完整地址的最后文件名、显示某完整地址文件的目录地址、将目录和文件拼接起来。因为Python比较强大，所以可以做到容错效果，比如说在Windows中地址是这样的<code>D:\\game\\steam\\steamapps\\csgo</code>，但是如果我写成了Linux下的格式<code>D:/game/steam/steamapps/csgo</code>也是没有问题的，照样可以用这些方法处理，没有影响。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    path = <span class=\"string\">'/var/www/html/index.html'</span>\t<span class=\"comment\"># 这里是一个完整地址的文件</span></div><div class=\"line\">    print(os.path.basename(path))\t\t<span class=\"comment\"># 可以显示文件名  index.html</span></div><div class=\"line\">    print(os.path.dirname(path))\t\t<span class=\"comment\"># 可以显示当前文件的地址位置 /var/www/html/</span></div><div class=\"line\">    print(os.path.join(<span class=\"string\">'D:/'</span>, <span class=\"string\">'hehe.exe'</span>))\t<span class=\"comment\"># 将连接拼起来编程 D:/hehe.exe</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-小技巧\"><a href=\"#0X05-小技巧\" class=\"headerlink\" title=\"0X05 小技巧\"></a>0X05 小技巧</h1><p>检验文件是否存在：<code>os.path.exists(&#39;D:/test.txt&#39;)</code>如果文件存在则返回True否则就是False<br>获取文件元数据：<code>os.path.getatime(&#39;D:/test.txt&#39;)</code>查看修改时间   <code>getsize</code>获取文件大小</p>\n"},{"title":"Python之面向对象","date":"2016-09-14T13:53:00.000Z","_content":"\n\n# 0X00 创建一个类\nPython也是一个和C++、Java一样的面向对象编程语言，所以Python里也有类和对象。\n```python\nclass Person:   #这是一个类\n    def sayHello(self):     #这是一个方法\n        print 'hello,world'\n\n    def setName(self, inputName):\n        self.name = inputName\n\n    def getName(self):\n        return self.getName()\n```\n在类中创建的方法使用def关键字定义，每个方法有一个或以上的参数，selft就是实例化的对象自己。需要返回值就return一个，不需要就可以不写return\n> Python的类和Java的类还是有点区别，Java的类里主要写的是属性和方法，Python里不写属性，因为Java的变量需要定义而Python的变量并不需要定义，最多也就是在前面个各个属性一个变量名并赋初值\n\n# 0X01 实例化一个对象\n类是一个很抽象的概念，可以由类实例化好多个对象出来。Java中我们习惯说成 new一个对象，而Python中并不需要new\n```python\nxiaoming = Person() #实例化了一个类\nxiaoming.setName('xiaoming')  #调用一个方法\nprint xiaoming.getName()\nxiaoming.sayHello()\n```\n> 此段代码接着上面的类声明\n\n# 0X02 Python的私有\nJava和其他好多面向对象编程语言中会有一个private关键字，将属性和方法约束为私有的。然而Python并不能直接支持private，间接地支持也不是真正的private。在Python中的private由一种诡异的方式模拟，在方法前加上连续的两个下划线\n```python\nclass Person:\n    def __hello(self):\n        return 'hello,world'\n\n    def sayHello(self):\n        print self.__hello()\n\nxiaoming = Person()\nxiaoming.sayHello()\nxiaoming.__hello()\n```\n运行起来就是这样的，前面的`xiaoming.sayHello()`因为是可以直接调用的，然后在方法里调用了私有的`__hello()`方法，所以可以正常执行；后面的`xiaoming.__hello()`因为不能直接调用，所以报错了。\n```bash\nhello,world\nTraceback (most recent call last):\n  File \"./hello.py\", line 12, in <module>\n    xiaoming.__hello()\nAttributeError: Person instance has no attribute '__hello'\n```\n其实在方法前面加了两个下划线并没有真的把方法改了个名字而已，改成了`_Class__name`的类型，一个下划线+类名+两个下划线+方法名，当我们知道了这个问题之后就可以这样调用‘私有’方法了，但是既然我们都将其设为了’私有’就不要这么用了。\n```python\n>>> xiaoming = Person()\n>>> print xiaoming._Person__hello() #不要这样做，虽然可行\n    hello,world\n```\n\n# 0X03 继承\n面向对象编程的特性之一：继承。Python中的继承和Java的语法差异还是挺大的，像下面这样可以声明两个类，让 一个类继承自另一个\n```python\n#!/usr/bin/python\n\nclass Person:\n\n    def sayHello(self):\n        print \"hello, I'm person\"\n\nclass Jack:\n\n    def sayHello(self):\n        print \"helo, I'm Jack\"\n\nperson = Person()\njack   = Jack()\n\nperson.sayHello()\njack.sayHello()\n```\n输出是这样的\n```bash\nhello, I'm person\nhelo, I'm Jack\n```\n这也体现了面向对象的覆盖的思想\n\n# 0X04 多继承\n一个类可以继承自另一个类，也可以继承自其他好多个类。\n```python\nclass Student:  #一个父类\n    def learn(self):\n        print \"i'can learn\"\n\n\nclass Coder:    #另一个父类\n    def programming(self):\n        print \"I'can programming\"\n\nclass Jack(Student, Coder): #继承自两个雷的子类\n    pass\n\njack = Jack()\n\n#可以调用两个父类中的方法\njack.learn()\njack.programming()\n```\n> 书写多继承的时候要注意一个问题，如果某类继承自两个类，且那两个类有相同的方法，那么就会造成覆盖（重写）\n> 是这样一个情况，如果我上面的Student和Coder类都有一个名为eat的方法，但是Student类里的eat方法是输出‘student can eat’但是‘Coder’类中eat方法是输出’coder can eat’，那么在写子类的时候就要格外小心\n> 如果子类这样写`class Jack(Student, Coder)`那么这个子类的ear方法就会是’Coder‘’中的方法，输出‘Coder can eat’，如果这样写`class Jack(Coder, Student)`的话，输出就是’Student can eat‘’\n\n# 0X05 构造方法\n我们实例化一个对象的时候是这样做的`xiaoming = Person()`其内部是调用了Person类的构造方法并返回给了xiaoming这个变量。在Java中在java中构造方法是一个没有返回类型的与类名同名的方法，但是在Python中所有构造方法都叫`__init__()`。自己不手动写构造方法的话Python就会自动生成一个，这点和Java相同。当然我们也可以自己手写构造方法\n```python\nclass Person:\n    def __init__(self):\n        print 'new a person'\n\nxiaoming = Person()\n```\n会输出一个`new a person` 这就能证明确实在实例化对象的时候回先调用这个类的构造方法。构造方法可以加参数，就像下面这样\n```python\nclass Person:\n    def __init__(self, say='new a person'):\n        print say\n```\n如果我实例化对象的时候这么写`xiaoming = Person()`那么就会输出一个'new a person'的字符串，因为我没传入参数，所以就使用了默认值，但是如果我这样实例化对象`xiaohong = Person('xiaohong')`就会输出一个'xiaohong'的字符串，因为我给构造方法传入参数了。\n在Python中还有一个叫析构方法的`__del__`但是我们最好不要去碰它，因为Python里有像Java类似的自动垃圾回收，所以几乎不会需要我们自己去析构一个对象，但是如果真的有需要，也可以像C++一样手动析构\n\n# 0X06 方法的重写\n如果有一个类A，A中有一个sayHello的方法，然后有一个B类继承了A类，那么自然就也有了sayHello的方法，但是如果我们给B类单独设定sayHello方法会怎么样呢\n```python\nclass Person:\n    def sayHello(self):\n        print \"i'm Person\"\n\nclass Man(Person):\n    def sayHello(self):\n        print \"i'm Man\"\n\nxiaoming = Man()\nxiaoming.sayHello()\n```\n输出的是\"i'm Man\"而不是\"i'm Person\"。这就是方法的重写，子类中写了一个和父类中相同名的方法，就会把已经继承过来的方法重写掉\n\n\n","source":"_posts/python_oop.md","raw":"---\ntitle: Python之面向对象\ndate: 2016-09-14 21:53\ntags:\n  - Python\n  - OOP\n---\n\n\n# 0X00 创建一个类\nPython也是一个和C++、Java一样的面向对象编程语言，所以Python里也有类和对象。\n```python\nclass Person:   #这是一个类\n    def sayHello(self):     #这是一个方法\n        print 'hello,world'\n\n    def setName(self, inputName):\n        self.name = inputName\n\n    def getName(self):\n        return self.getName()\n```\n在类中创建的方法使用def关键字定义，每个方法有一个或以上的参数，selft就是实例化的对象自己。需要返回值就return一个，不需要就可以不写return\n> Python的类和Java的类还是有点区别，Java的类里主要写的是属性和方法，Python里不写属性，因为Java的变量需要定义而Python的变量并不需要定义，最多也就是在前面个各个属性一个变量名并赋初值\n\n# 0X01 实例化一个对象\n类是一个很抽象的概念，可以由类实例化好多个对象出来。Java中我们习惯说成 new一个对象，而Python中并不需要new\n```python\nxiaoming = Person() #实例化了一个类\nxiaoming.setName('xiaoming')  #调用一个方法\nprint xiaoming.getName()\nxiaoming.sayHello()\n```\n> 此段代码接着上面的类声明\n\n# 0X02 Python的私有\nJava和其他好多面向对象编程语言中会有一个private关键字，将属性和方法约束为私有的。然而Python并不能直接支持private，间接地支持也不是真正的private。在Python中的private由一种诡异的方式模拟，在方法前加上连续的两个下划线\n```python\nclass Person:\n    def __hello(self):\n        return 'hello,world'\n\n    def sayHello(self):\n        print self.__hello()\n\nxiaoming = Person()\nxiaoming.sayHello()\nxiaoming.__hello()\n```\n运行起来就是这样的，前面的`xiaoming.sayHello()`因为是可以直接调用的，然后在方法里调用了私有的`__hello()`方法，所以可以正常执行；后面的`xiaoming.__hello()`因为不能直接调用，所以报错了。\n```bash\nhello,world\nTraceback (most recent call last):\n  File \"./hello.py\", line 12, in <module>\n    xiaoming.__hello()\nAttributeError: Person instance has no attribute '__hello'\n```\n其实在方法前面加了两个下划线并没有真的把方法改了个名字而已，改成了`_Class__name`的类型，一个下划线+类名+两个下划线+方法名，当我们知道了这个问题之后就可以这样调用‘私有’方法了，但是既然我们都将其设为了’私有’就不要这么用了。\n```python\n>>> xiaoming = Person()\n>>> print xiaoming._Person__hello() #不要这样做，虽然可行\n    hello,world\n```\n\n# 0X03 继承\n面向对象编程的特性之一：继承。Python中的继承和Java的语法差异还是挺大的，像下面这样可以声明两个类，让 一个类继承自另一个\n```python\n#!/usr/bin/python\n\nclass Person:\n\n    def sayHello(self):\n        print \"hello, I'm person\"\n\nclass Jack:\n\n    def sayHello(self):\n        print \"helo, I'm Jack\"\n\nperson = Person()\njack   = Jack()\n\nperson.sayHello()\njack.sayHello()\n```\n输出是这样的\n```bash\nhello, I'm person\nhelo, I'm Jack\n```\n这也体现了面向对象的覆盖的思想\n\n# 0X04 多继承\n一个类可以继承自另一个类，也可以继承自其他好多个类。\n```python\nclass Student:  #一个父类\n    def learn(self):\n        print \"i'can learn\"\n\n\nclass Coder:    #另一个父类\n    def programming(self):\n        print \"I'can programming\"\n\nclass Jack(Student, Coder): #继承自两个雷的子类\n    pass\n\njack = Jack()\n\n#可以调用两个父类中的方法\njack.learn()\njack.programming()\n```\n> 书写多继承的时候要注意一个问题，如果某类继承自两个类，且那两个类有相同的方法，那么就会造成覆盖（重写）\n> 是这样一个情况，如果我上面的Student和Coder类都有一个名为eat的方法，但是Student类里的eat方法是输出‘student can eat’但是‘Coder’类中eat方法是输出’coder can eat’，那么在写子类的时候就要格外小心\n> 如果子类这样写`class Jack(Student, Coder)`那么这个子类的ear方法就会是’Coder‘’中的方法，输出‘Coder can eat’，如果这样写`class Jack(Coder, Student)`的话，输出就是’Student can eat‘’\n\n# 0X05 构造方法\n我们实例化一个对象的时候是这样做的`xiaoming = Person()`其内部是调用了Person类的构造方法并返回给了xiaoming这个变量。在Java中在java中构造方法是一个没有返回类型的与类名同名的方法，但是在Python中所有构造方法都叫`__init__()`。自己不手动写构造方法的话Python就会自动生成一个，这点和Java相同。当然我们也可以自己手写构造方法\n```python\nclass Person:\n    def __init__(self):\n        print 'new a person'\n\nxiaoming = Person()\n```\n会输出一个`new a person` 这就能证明确实在实例化对象的时候回先调用这个类的构造方法。构造方法可以加参数，就像下面这样\n```python\nclass Person:\n    def __init__(self, say='new a person'):\n        print say\n```\n如果我实例化对象的时候这么写`xiaoming = Person()`那么就会输出一个'new a person'的字符串，因为我没传入参数，所以就使用了默认值，但是如果我这样实例化对象`xiaohong = Person('xiaohong')`就会输出一个'xiaohong'的字符串，因为我给构造方法传入参数了。\n在Python中还有一个叫析构方法的`__del__`但是我们最好不要去碰它，因为Python里有像Java类似的自动垃圾回收，所以几乎不会需要我们自己去析构一个对象，但是如果真的有需要，也可以像C++一样手动析构\n\n# 0X06 方法的重写\n如果有一个类A，A中有一个sayHello的方法，然后有一个B类继承了A类，那么自然就也有了sayHello的方法，但是如果我们给B类单独设定sayHello方法会怎么样呢\n```python\nclass Person:\n    def sayHello(self):\n        print \"i'm Person\"\n\nclass Man(Person):\n    def sayHello(self):\n        print \"i'm Man\"\n\nxiaoming = Man()\nxiaoming.sayHello()\n```\n输出的是\"i'm Man\"而不是\"i'm Person\"。这就是方法的重写，子类中写了一个和父类中相同名的方法，就会把已经继承过来的方法重写掉\n\n\n","slug":"python_oop","published":1,"updated":"2017-09-02T14:49:57.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmej001thnlpuys514aw","content":"<h1 id=\"0X00-创建一个类\"><a href=\"#0X00-创建一个类\" class=\"headerlink\" title=\"0X00 创建一个类\"></a>0X00 创建一个类</h1><p>Python也是一个和C++、Java一样的面向对象编程语言，所以Python里也有类和对象。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span>   <span class=\"comment\">#这是一个类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span>     <span class=\"comment\">#这是一个方法</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setName</span><span class=\"params\">(self, inputName)</span>:</span></div><div class=\"line\">        self.name = inputName</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.getName()</div></pre></td></tr></table></figure></p>\n<p>在类中创建的方法使用def关键字定义，每个方法有一个或以上的参数，selft就是实例化的对象自己。需要返回值就return一个，不需要就可以不写return</p>\n<blockquote>\n<p>Python的类和Java的类还是有点区别，Java的类里主要写的是属性和方法，Python里不写属性，因为Java的变量需要定义而Python的变量并不需要定义，最多也就是在前面个各个属性一个变量名并赋初值</p>\n</blockquote>\n<h1 id=\"0X01-实例化一个对象\"><a href=\"#0X01-实例化一个对象\" class=\"headerlink\" title=\"0X01 实例化一个对象\"></a>0X01 实例化一个对象</h1><p>类是一个很抽象的概念，可以由类实例化好多个对象出来。Java中我们习惯说成 new一个对象，而Python中并不需要new<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">xiaoming = Person() <span class=\"comment\">#实例化了一个类</span></div><div class=\"line\">xiaoming.setName(<span class=\"string\">'xiaoming'</span>)  <span class=\"comment\">#调用一个方法</span></div><div class=\"line\"><span class=\"keyword\">print</span> xiaoming.getName()</div><div class=\"line\">xiaoming.sayHello()</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此段代码接着上面的类声明</p>\n</blockquote>\n<h1 id=\"0X02-Python的私有\"><a href=\"#0X02-Python的私有\" class=\"headerlink\" title=\"0X02 Python的私有\"></a>0X02 Python的私有</h1><p>Java和其他好多面向对象编程语言中会有一个private关键字，将属性和方法约束为私有的。然而Python并不能直接支持private，间接地支持也不是真正的private。在Python中的private由一种诡异的方式模拟，在方法前加上连续的两个下划线<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> self.__hello()</div><div class=\"line\"></div><div class=\"line\">xiaoming = Person()</div><div class=\"line\">xiaoming.sayHello()</div><div class=\"line\">xiaoming.__hello()</div></pre></td></tr></table></figure></p>\n<p>运行起来就是这样的，前面的<code>xiaoming.sayHello()</code>因为是可以直接调用的，然后在方法里调用了私有的<code>__hello()</code>方法，所以可以正常执行；后面的<code>xiaoming.__hello()</code>因为不能直接调用，所以报错了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello,world</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 12, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    xiaoming.__hello()</div><div class=\"line\">AttributeError: Person instance has no attribute <span class=\"string\">'__hello'</span></div></pre></td></tr></table></figure></p>\n<p>其实在方法前面加了两个下划线并没有真的把方法改了个名字而已，改成了<code>_Class__name</code>的类型，一个下划线+类名+两个下划线+方法名，当我们知道了这个问题之后就可以这样调用‘私有’方法了，但是既然我们都将其设为了’私有’就不要这么用了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>xiaoming = Person()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> xiaoming._Person__hello() <span class=\"comment\">#不要这样做，虽然可行</span></div><div class=\"line\">    hello,world</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-继承\"><a href=\"#0X03-继承\" class=\"headerlink\" title=\"0X03 继承\"></a>0X03 继承</h1><p>面向对象编程的特性之一：继承。Python中的继承和Java的语法差异还是挺大的，像下面这样可以声明两个类，让 一个类继承自另一个<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"hello, I'm person\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jack</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"helo, I'm Jack\"</span></div><div class=\"line\"></div><div class=\"line\">person = Person()</div><div class=\"line\">jack   = Jack()</div><div class=\"line\"></div><div class=\"line\">person.sayHello()</div><div class=\"line\">jack.sayHello()</div></pre></td></tr></table></figure></p>\n<p>输出是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello, I<span class=\"string\">'m person</span></div><div class=\"line\"><span class=\"string\">helo, I'</span>m Jack</div></pre></td></tr></table></figure></p>\n<p>这也体现了面向对象的覆盖的思想</p>\n<h1 id=\"0X04-多继承\"><a href=\"#0X04-多继承\" class=\"headerlink\" title=\"0X04 多继承\"></a>0X04 多继承</h1><p>一个类可以继承自另一个类，也可以继承自其他好多个类。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span>  <span class=\"comment\">#一个父类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">learn</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"i'can learn\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coder</span>:</span>    <span class=\"comment\">#另一个父类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">programming</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"I'can programming\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jack</span><span class=\"params\">(Student, Coder)</span>:</span> <span class=\"comment\">#继承自两个雷的子类</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">jack = Jack()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#可以调用两个父类中的方法</span></div><div class=\"line\">jack.learn()</div><div class=\"line\">jack.programming()</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>书写多继承的时候要注意一个问题，如果某类继承自两个类，且那两个类有相同的方法，那么就会造成覆盖（重写）<br>是这样一个情况，如果我上面的Student和Coder类都有一个名为eat的方法，但是Student类里的eat方法是输出‘student can eat’但是‘Coder’类中eat方法是输出’coder can eat’，那么在写子类的时候就要格外小心<br>如果子类这样写<code>class Jack(Student, Coder)</code>那么这个子类的ear方法就会是’Coder‘’中的方法，输出‘Coder can eat’，如果这样写<code>class Jack(Coder, Student)</code>的话，输出就是’Student can eat‘’</p>\n</blockquote>\n<h1 id=\"0X05-构造方法\"><a href=\"#0X05-构造方法\" class=\"headerlink\" title=\"0X05 构造方法\"></a>0X05 构造方法</h1><p>我们实例化一个对象的时候是这样做的<code>xiaoming = Person()</code>其内部是调用了Person类的构造方法并返回给了xiaoming这个变量。在Java中在java中构造方法是一个没有返回类型的与类名同名的方法，但是在Python中所有构造方法都叫<code>__init__()</code>。自己不手动写构造方法的话Python就会自动生成一个，这点和Java相同。当然我们也可以自己手写构造方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'new a person'</span></div><div class=\"line\"></div><div class=\"line\">xiaoming = Person()</div></pre></td></tr></table></figure></p>\n<p>会输出一个<code>new a person</code> 这就能证明确实在实例化对象的时候回先调用这个类的构造方法。构造方法可以加参数，就像下面这样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, say=<span class=\"string\">'new a person'</span>)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> say</div></pre></td></tr></table></figure></p>\n<p>如果我实例化对象的时候这么写<code>xiaoming = Person()</code>那么就会输出一个’new a person’的字符串，因为我没传入参数，所以就使用了默认值，但是如果我这样实例化对象<code>xiaohong = Person(&#39;xiaohong&#39;)</code>就会输出一个’xiaohong’的字符串，因为我给构造方法传入参数了。<br>在Python中还有一个叫析构方法的<code>__del__</code>但是我们最好不要去碰它，因为Python里有像Java类似的自动垃圾回收，所以几乎不会需要我们自己去析构一个对象，但是如果真的有需要，也可以像C++一样手动析构</p>\n<h1 id=\"0X06-方法的重写\"><a href=\"#0X06-方法的重写\" class=\"headerlink\" title=\"0X06 方法的重写\"></a>0X06 方法的重写</h1><p>如果有一个类A，A中有一个sayHello的方法，然后有一个B类继承了A类，那么自然就也有了sayHello的方法，但是如果我们给B类单独设定sayHello方法会怎么样呢<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"i'm Person\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span><span class=\"params\">(Person)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"i'm Man\"</span></div><div class=\"line\"></div><div class=\"line\">xiaoming = Man()</div><div class=\"line\">xiaoming.sayHello()</div></pre></td></tr></table></figure></p>\n<p>输出的是”i’m Man”而不是”i’m Person”。这就是方法的重写，子类中写了一个和父类中相同名的方法，就会把已经继承过来的方法重写掉</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-创建一个类\"><a href=\"#0X00-创建一个类\" class=\"headerlink\" title=\"0X00 创建一个类\"></a>0X00 创建一个类</h1><p>Python也是一个和C++、Java一样的面向对象编程语言，所以Python里也有类和对象。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span>   <span class=\"comment\">#这是一个类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span>     <span class=\"comment\">#这是一个方法</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setName</span><span class=\"params\">(self, inputName)</span>:</span></div><div class=\"line\">        self.name = inputName</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getName</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.getName()</div></pre></td></tr></table></figure></p>\n<p>在类中创建的方法使用def关键字定义，每个方法有一个或以上的参数，selft就是实例化的对象自己。需要返回值就return一个，不需要就可以不写return</p>\n<blockquote>\n<p>Python的类和Java的类还是有点区别，Java的类里主要写的是属性和方法，Python里不写属性，因为Java的变量需要定义而Python的变量并不需要定义，最多也就是在前面个各个属性一个变量名并赋初值</p>\n</blockquote>\n<h1 id=\"0X01-实例化一个对象\"><a href=\"#0X01-实例化一个对象\" class=\"headerlink\" title=\"0X01 实例化一个对象\"></a>0X01 实例化一个对象</h1><p>类是一个很抽象的概念，可以由类实例化好多个对象出来。Java中我们习惯说成 new一个对象，而Python中并不需要new<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">xiaoming = Person() <span class=\"comment\">#实例化了一个类</span></div><div class=\"line\">xiaoming.setName(<span class=\"string\">'xiaoming'</span>)  <span class=\"comment\">#调用一个方法</span></div><div class=\"line\"><span class=\"keyword\">print</span> xiaoming.getName()</div><div class=\"line\">xiaoming.sayHello()</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此段代码接着上面的类声明</p>\n</blockquote>\n<h1 id=\"0X02-Python的私有\"><a href=\"#0X02-Python的私有\" class=\"headerlink\" title=\"0X02 Python的私有\"></a>0X02 Python的私有</h1><p>Java和其他好多面向对象编程语言中会有一个private关键字，将属性和方法约束为私有的。然而Python并不能直接支持private，间接地支持也不是真正的private。在Python中的private由一种诡异的方式模拟，在方法前加上连续的两个下划线<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> self.__hello()</div><div class=\"line\"></div><div class=\"line\">xiaoming = Person()</div><div class=\"line\">xiaoming.sayHello()</div><div class=\"line\">xiaoming.__hello()</div></pre></td></tr></table></figure></p>\n<p>运行起来就是这样的，前面的<code>xiaoming.sayHello()</code>因为是可以直接调用的，然后在方法里调用了私有的<code>__hello()</code>方法，所以可以正常执行；后面的<code>xiaoming.__hello()</code>因为不能直接调用，所以报错了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello,world</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"./hello.py\"</span>, line 12, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    xiaoming.__hello()</div><div class=\"line\">AttributeError: Person instance has no attribute <span class=\"string\">'__hello'</span></div></pre></td></tr></table></figure></p>\n<p>其实在方法前面加了两个下划线并没有真的把方法改了个名字而已，改成了<code>_Class__name</code>的类型，一个下划线+类名+两个下划线+方法名，当我们知道了这个问题之后就可以这样调用‘私有’方法了，但是既然我们都将其设为了’私有’就不要这么用了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>xiaoming = Person()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> xiaoming._Person__hello() <span class=\"comment\">#不要这样做，虽然可行</span></div><div class=\"line\">    hello,world</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-继承\"><a href=\"#0X03-继承\" class=\"headerlink\" title=\"0X03 继承\"></a>0X03 继承</h1><p>面向对象编程的特性之一：继承。Python中的继承和Java的语法差异还是挺大的，像下面这样可以声明两个类，让 一个类继承自另一个<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"hello, I'm person\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jack</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"helo, I'm Jack\"</span></div><div class=\"line\"></div><div class=\"line\">person = Person()</div><div class=\"line\">jack   = Jack()</div><div class=\"line\"></div><div class=\"line\">person.sayHello()</div><div class=\"line\">jack.sayHello()</div></pre></td></tr></table></figure></p>\n<p>输出是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hello, I<span class=\"string\">'m person</span></div><div class=\"line\"><span class=\"string\">helo, I'</span>m Jack</div></pre></td></tr></table></figure></p>\n<p>这也体现了面向对象的覆盖的思想</p>\n<h1 id=\"0X04-多继承\"><a href=\"#0X04-多继承\" class=\"headerlink\" title=\"0X04 多继承\"></a>0X04 多继承</h1><p>一个类可以继承自另一个类，也可以继承自其他好多个类。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>:</span>  <span class=\"comment\">#一个父类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">learn</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"i'can learn\"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coder</span>:</span>    <span class=\"comment\">#另一个父类</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">programming</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"I'can programming\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Jack</span><span class=\"params\">(Student, Coder)</span>:</span> <span class=\"comment\">#继承自两个雷的子类</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">jack = Jack()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#可以调用两个父类中的方法</span></div><div class=\"line\">jack.learn()</div><div class=\"line\">jack.programming()</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>书写多继承的时候要注意一个问题，如果某类继承自两个类，且那两个类有相同的方法，那么就会造成覆盖（重写）<br>是这样一个情况，如果我上面的Student和Coder类都有一个名为eat的方法，但是Student类里的eat方法是输出‘student can eat’但是‘Coder’类中eat方法是输出’coder can eat’，那么在写子类的时候就要格外小心<br>如果子类这样写<code>class Jack(Student, Coder)</code>那么这个子类的ear方法就会是’Coder‘’中的方法，输出‘Coder can eat’，如果这样写<code>class Jack(Coder, Student)</code>的话，输出就是’Student can eat‘’</p>\n</blockquote>\n<h1 id=\"0X05-构造方法\"><a href=\"#0X05-构造方法\" class=\"headerlink\" title=\"0X05 构造方法\"></a>0X05 构造方法</h1><p>我们实例化一个对象的时候是这样做的<code>xiaoming = Person()</code>其内部是调用了Person类的构造方法并返回给了xiaoming这个变量。在Java中在java中构造方法是一个没有返回类型的与类名同名的方法，但是在Python中所有构造方法都叫<code>__init__()</code>。自己不手动写构造方法的话Python就会自动生成一个，这点和Java相同。当然我们也可以自己手写构造方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'new a person'</span></div><div class=\"line\"></div><div class=\"line\">xiaoming = Person()</div></pre></td></tr></table></figure></p>\n<p>会输出一个<code>new a person</code> 这就能证明确实在实例化对象的时候回先调用这个类的构造方法。构造方法可以加参数，就像下面这样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, say=<span class=\"string\">'new a person'</span>)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> say</div></pre></td></tr></table></figure></p>\n<p>如果我实例化对象的时候这么写<code>xiaoming = Person()</code>那么就会输出一个’new a person’的字符串，因为我没传入参数，所以就使用了默认值，但是如果我这样实例化对象<code>xiaohong = Person(&#39;xiaohong&#39;)</code>就会输出一个’xiaohong’的字符串，因为我给构造方法传入参数了。<br>在Python中还有一个叫析构方法的<code>__del__</code>但是我们最好不要去碰它，因为Python里有像Java类似的自动垃圾回收，所以几乎不会需要我们自己去析构一个对象，但是如果真的有需要，也可以像C++一样手动析构</p>\n<h1 id=\"0X06-方法的重写\"><a href=\"#0X06-方法的重写\" class=\"headerlink\" title=\"0X06 方法的重写\"></a>0X06 方法的重写</h1><p>如果有一个类A，A中有一个sayHello的方法，然后有一个B类继承了A类，那么自然就也有了sayHello的方法，但是如果我们给B类单独设定sayHello方法会怎么样呢<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"i'm Person\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span><span class=\"params\">(Person)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sayHello</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"i'm Man\"</span></div><div class=\"line\"></div><div class=\"line\">xiaoming = Man()</div><div class=\"line\">xiaoming.sayHello()</div></pre></td></tr></table></figure></p>\n<p>输出的是”i’m Man”而不是”i’m Person”。这就是方法的重写，子类中写了一个和父类中相同名的方法，就会把已经继承过来的方法重写掉</p>\n"},{"title":"Python之字符串","date":"2016-09-05T02:12:00.000Z","_content":"\n# 0X00 如何定义一个字符串\n**Python不需要定义**其实就是这样的。。在Python中的字符串通常这么写\n```python\n>>> str1 = 'hello,world'\n>>> str2 = \"It's work\"\n>>> str3 = \"\"\" Jack:\"oh shit\" \"\"\"\n```\nstr1 的声明方式是最普通的声明方式\nstr2 的声明方式可以在字符串中存在单引号‘\nstr3 的声明方式可以在字符串中存在双引号 “ 还能在字符串中换行\n\n# 0X01 拼接字符串\n```python\n>>> str1 = \"hello\"\n>>> str2 = \",\"\n>>> str3 = \"world\"\n>>> print str1 + str2 + str3\n\thello,world\n```\n注意：\n连接的时候加号左右都要是字符串，如果是字符串加数字就不行了。除非把数字转成字符串格式\n\n# 0X02 输入字符串\n标准输入就是直接把你输入的东西写到代码里，甚至可以用变量名\n原始输入就是直接输入字符串，纯字符串\n具体情况可以从下面的Demo中看到效果\n```python\n>>> hello = \"hello,world\"\n>>> str1 = input(\"what's your name:\")   #获取标准输入\n\thello\n>>> str2 = raw_input(\"what's your name:\")\t#获取原始输入\n\t\"hello\"\n>>> print str1\n\thello,world\n>>> print str2\n\thello\n```\n\n# 0X03 字符串格式化\n学过C的能迅速的理解Python里的字符串格式化，没学过C的可以快速的理解Python里的字符串格式化  +_+\n```python\n>>> from string import Template\n>>> text = Template(\"1---$a  2---$b   3---$c   4---$$\")\t# $a $b $c 都是字符串占位符，先写好后赋值\n>>> text.substitute(a=\"hello,\", b=\"world\", c=\"wow\")\n\t'1---hello,  2---world   3---wow   4---$'\n\n#  %s  是字符串占位符，将后面的字符串加到前面\n>>> print \"hello, %s\" % (\"world\")\n\thello, world\n\n# %15s  是将字符串向前扩充打15位\n>>> print \"hello, %15s\" % (\"world\")\n\thello,           world\n>>> print \"%15s, world\" % (\"hello\")\n    hello, world\n\n# %-15s 是将字符串向后扩充到15位\n>>> print \"%-15s, world\" % (\"hello\")\n\thello          , world\n```\n\n# 0X04 字符串处理函数\n## find 字符串查找\n从一个字符串中查找另一个字符串，返回最左端索引，找不到就返回 -1\n```python\n>>> str = \"hello,world\"\n>>> str.find(\",\")\n\t5\n>>> str = \"hello,hello,world,world\"\n>>> str.find(\",\", 8, 12)\n\t11\n```\n> 如果find函数返回了0，并不是没找到，而是在0的位置找到了。毕竟程序员的世界从来都是从0开始数数的\n\n## join 连接\n连接序列中的元素\n```python\n>>> str1 = ['hello', 'world']\n>>> str2 = \"---\".join(str1)\n>>> print str2\n\thello---world\n```\n> 注意这里是  str.join(list)  而不是  list.join(str)\n\n## lower 我要小写\n返回字符串的全小写版\n```python\n>>> str1 = \"HELLO,WORLD\"\n>>> str2 = str1.lower()\n>>> print str2\n\thello,world\n```\n\n## replace 查找并替换\n查找并替换全部\n```python\n>>> str1 = \"my world, my house, my phone\"\n>>> str2 = str1.replace(\"my\", \"your\")\t#我就这么把所有东西过户给了你+_+\n>>> print str2\n\tyour world, your house, your phone\n```\n\n## split 分割\n分割字符串\n```python\n>>> str1 = \"hello,world\"\n>>> str2 = str1.split(\",\")\n>>> print str2\n\t['hello', 'world']\t#返回了一个列表\n```\n\n## strip 清理字符串\n去除两侧的东西\nstrip默认去除两侧的空格，当然也可以加参数\n```python\n>>>\tstr1 = \"  hello,world  \"\n>>>\tstr2 = str1.strip()\t#默认去除空格\n>>>\tprint str2\n\thello,world\n\n\n>>> str1 = \"aaahello,worldaaa\"\n>>> str2 = str1.srtip(\"a\")  #加了参数就删除两侧的参数里的内容\n>>> print str2\n\thello,world\n```\n","source":"_posts/python_str.md","raw":"---\ntitle: Python之字符串\ndate: 2016-09-05 10:12\ntags:\n  - Python\n  - String\n---\n\n# 0X00 如何定义一个字符串\n**Python不需要定义**其实就是这样的。。在Python中的字符串通常这么写\n```python\n>>> str1 = 'hello,world'\n>>> str2 = \"It's work\"\n>>> str3 = \"\"\" Jack:\"oh shit\" \"\"\"\n```\nstr1 的声明方式是最普通的声明方式\nstr2 的声明方式可以在字符串中存在单引号‘\nstr3 的声明方式可以在字符串中存在双引号 “ 还能在字符串中换行\n\n# 0X01 拼接字符串\n```python\n>>> str1 = \"hello\"\n>>> str2 = \",\"\n>>> str3 = \"world\"\n>>> print str1 + str2 + str3\n\thello,world\n```\n注意：\n连接的时候加号左右都要是字符串，如果是字符串加数字就不行了。除非把数字转成字符串格式\n\n# 0X02 输入字符串\n标准输入就是直接把你输入的东西写到代码里，甚至可以用变量名\n原始输入就是直接输入字符串，纯字符串\n具体情况可以从下面的Demo中看到效果\n```python\n>>> hello = \"hello,world\"\n>>> str1 = input(\"what's your name:\")   #获取标准输入\n\thello\n>>> str2 = raw_input(\"what's your name:\")\t#获取原始输入\n\t\"hello\"\n>>> print str1\n\thello,world\n>>> print str2\n\thello\n```\n\n# 0X03 字符串格式化\n学过C的能迅速的理解Python里的字符串格式化，没学过C的可以快速的理解Python里的字符串格式化  +_+\n```python\n>>> from string import Template\n>>> text = Template(\"1---$a  2---$b   3---$c   4---$$\")\t# $a $b $c 都是字符串占位符，先写好后赋值\n>>> text.substitute(a=\"hello,\", b=\"world\", c=\"wow\")\n\t'1---hello,  2---world   3---wow   4---$'\n\n#  %s  是字符串占位符，将后面的字符串加到前面\n>>> print \"hello, %s\" % (\"world\")\n\thello, world\n\n# %15s  是将字符串向前扩充打15位\n>>> print \"hello, %15s\" % (\"world\")\n\thello,           world\n>>> print \"%15s, world\" % (\"hello\")\n    hello, world\n\n# %-15s 是将字符串向后扩充到15位\n>>> print \"%-15s, world\" % (\"hello\")\n\thello          , world\n```\n\n# 0X04 字符串处理函数\n## find 字符串查找\n从一个字符串中查找另一个字符串，返回最左端索引，找不到就返回 -1\n```python\n>>> str = \"hello,world\"\n>>> str.find(\",\")\n\t5\n>>> str = \"hello,hello,world,world\"\n>>> str.find(\",\", 8, 12)\n\t11\n```\n> 如果find函数返回了0，并不是没找到，而是在0的位置找到了。毕竟程序员的世界从来都是从0开始数数的\n\n## join 连接\n连接序列中的元素\n```python\n>>> str1 = ['hello', 'world']\n>>> str2 = \"---\".join(str1)\n>>> print str2\n\thello---world\n```\n> 注意这里是  str.join(list)  而不是  list.join(str)\n\n## lower 我要小写\n返回字符串的全小写版\n```python\n>>> str1 = \"HELLO,WORLD\"\n>>> str2 = str1.lower()\n>>> print str2\n\thello,world\n```\n\n## replace 查找并替换\n查找并替换全部\n```python\n>>> str1 = \"my world, my house, my phone\"\n>>> str2 = str1.replace(\"my\", \"your\")\t#我就这么把所有东西过户给了你+_+\n>>> print str2\n\tyour world, your house, your phone\n```\n\n## split 分割\n分割字符串\n```python\n>>> str1 = \"hello,world\"\n>>> str2 = str1.split(\",\")\n>>> print str2\n\t['hello', 'world']\t#返回了一个列表\n```\n\n## strip 清理字符串\n去除两侧的东西\nstrip默认去除两侧的空格，当然也可以加参数\n```python\n>>>\tstr1 = \"  hello,world  \"\n>>>\tstr2 = str1.strip()\t#默认去除空格\n>>>\tprint str2\n\thello,world\n\n\n>>> str1 = \"aaahello,worldaaa\"\n>>> str2 = str1.srtip(\"a\")  #加了参数就删除两侧的参数里的内容\n>>> print str2\n\thello,world\n```\n","slug":"python_str","published":1,"updated":"2017-09-02T14:50:55.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmek001uhnlpoc10fhdl","content":"<h1 id=\"0X00-如何定义一个字符串\"><a href=\"#0X00-如何定义一个字符串\" class=\"headerlink\" title=\"0X00 如何定义一个字符串\"></a>0X00 如何定义一个字符串</h1><p><strong>Python不需要定义</strong>其实就是这样的。。在Python中的字符串通常这么写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = <span class=\"string\">\"It's work\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str3 = <span class=\"string\">\"\"\" Jack:\"oh shit\" \"\"\"</span></div></pre></td></tr></table></figure></p>\n<p>str1 的声明方式是最普通的声明方式<br>str2 的声明方式可以在字符串中存在单引号‘<br>str3 的声明方式可以在字符串中存在双引号 “ 还能在字符串中换行</p>\n<h1 id=\"0X01-拼接字符串\"><a href=\"#0X01-拼接字符串\" class=\"headerlink\" title=\"0X01 拼接字符串\"></a>0X01 拼接字符串</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = <span class=\"string\">\",\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str3 = <span class=\"string\">\"world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str1 + str2 + str3</div><div class=\"line\">\thello,world</div></pre></td></tr></table></figure>\n<p>注意：<br>连接的时候加号左右都要是字符串，如果是字符串加数字就不行了。除非把数字转成字符串格式</p>\n<h1 id=\"0X02-输入字符串\"><a href=\"#0X02-输入字符串\" class=\"headerlink\" title=\"0X02 输入字符串\"></a>0X02 输入字符串</h1><p>标准输入就是直接把你输入的东西写到代码里，甚至可以用变量名<br>原始输入就是直接输入字符串，纯字符串<br>具体情况可以从下面的Demo中看到效果<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = input(<span class=\"string\">\"what's your name:\"</span>)   <span class=\"comment\">#获取标准输入</span></div><div class=\"line\">\thello</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = raw_input(<span class=\"string\">\"what's your name:\"</span>)\t<span class=\"comment\">#获取原始输入</span></div><div class=\"line\">\t<span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str1</div><div class=\"line\">\thello,world</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-字符串格式化\"><a href=\"#0X03-字符串格式化\" class=\"headerlink\" title=\"0X03 字符串格式化\"></a>0X03 字符串格式化</h1><p>学过C的能迅速的理解Python里的字符串格式化，没学过C的可以快速的理解Python里的字符串格式化  +_+<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text = Template(<span class=\"string\">\"1---$a  2---$b   3---$c   4---$$\"</span>)\t<span class=\"comment\"># $a $b $c 都是字符串占位符，先写好后赋值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text.substitute(a=<span class=\"string\">\"hello,\"</span>, b=<span class=\"string\">\"world\"</span>, c=<span class=\"string\">\"wow\"</span>)</div><div class=\"line\">\t<span class=\"string\">'1---hello,  2---world   3---wow   4---$'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#  %s  是字符串占位符，将后面的字符串加到前面</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">\"hello, %s\"</span> % (<span class=\"string\">\"world\"</span>)</div><div class=\"line\">\thello, world</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># %15s  是将字符串向前扩充打15位</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">\"hello, %15s\"</span> % (<span class=\"string\">\"world\"</span>)</div><div class=\"line\">\thello,           world</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">\"%15s, world\"</span> % (<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">    hello, world</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># %-15s 是将字符串向后扩充到15位</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">\"%-15s, world\"</span> % (<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">\thello          , world</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-字符串处理函数\"><a href=\"#0X04-字符串处理函数\" class=\"headerlink\" title=\"0X04 字符串处理函数\"></a>0X04 字符串处理函数</h1><h2 id=\"find-字符串查找\"><a href=\"#find-字符串查找\" class=\"headerlink\" title=\"find 字符串查找\"></a>find 字符串查找</h2><p>从一个字符串中查找另一个字符串，返回最左端索引，找不到就返回 -1<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">\",\"</span>)</div><div class=\"line\">\t<span class=\"number\">5</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello,hello,world,world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">\",\"</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>)</div><div class=\"line\">\t<span class=\"number\">11</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果find函数返回了0，并不是没找到，而是在0的位置找到了。毕竟程序员的世界从来都是从0开始数数的</p>\n</blockquote>\n<h2 id=\"join-连接\"><a href=\"#join-连接\" class=\"headerlink\" title=\"join 连接\"></a>join 连接</h2><p>连接序列中的元素<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = <span class=\"string\">\"---\"</span>.join(str1)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello---world</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意这里是  str.join(list)  而不是  list.join(str)</p>\n</blockquote>\n<h2 id=\"lower-我要小写\"><a href=\"#lower-我要小写\" class=\"headerlink\" title=\"lower 我要小写\"></a>lower 我要小写</h2><p>返回字符串的全小写版<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"HELLO,WORLD\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = str1.lower()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello,world</div></pre></td></tr></table></figure></p>\n<h2 id=\"replace-查找并替换\"><a href=\"#replace-查找并替换\" class=\"headerlink\" title=\"replace 查找并替换\"></a>replace 查找并替换</h2><p>查找并替换全部<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"my world, my house, my phone\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = str1.replace(<span class=\"string\">\"my\"</span>, <span class=\"string\">\"your\"</span>)\t<span class=\"comment\">#我就这么把所有东西过户给了你+_+</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\tyour world, your house, your phone</div></pre></td></tr></table></figure></p>\n<h2 id=\"split-分割\"><a href=\"#split-分割\" class=\"headerlink\" title=\"split 分割\"></a>split 分割</h2><p>分割字符串<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = str1.split(<span class=\"string\">\",\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\t[<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]\t<span class=\"comment\">#返回了一个列表</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"strip-清理字符串\"><a href=\"#strip-清理字符串\" class=\"headerlink\" title=\"strip 清理字符串\"></a>strip 清理字符串</h2><p>去除两侧的东西<br>strip默认去除两侧的空格，当然也可以加参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;\tstr1 = <span class=\"string\">\"  hello,world  \"</span></div><div class=\"line\">&gt;&gt;&gt;\tstr2 = str1.strip()\t<span class=\"comment\">#默认去除空格</span></div><div class=\"line\">&gt;&gt;&gt;\t<span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello,world</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"aaahello,worldaaa\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = str1.srtip(<span class=\"string\">\"a\"</span>)  <span class=\"comment\">#加了参数就删除两侧的参数里的内容</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello,world</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-如何定义一个字符串\"><a href=\"#0X00-如何定义一个字符串\" class=\"headerlink\" title=\"0X00 如何定义一个字符串\"></a>0X00 如何定义一个字符串</h1><p><strong>Python不需要定义</strong>其实就是这样的。。在Python中的字符串通常这么写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">'hello,world'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = <span class=\"string\">\"It's work\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str3 = <span class=\"string\">\"\"\" Jack:\"oh shit\" \"\"\"</span></div></pre></td></tr></table></figure></p>\n<p>str1 的声明方式是最普通的声明方式<br>str2 的声明方式可以在字符串中存在单引号‘<br>str3 的声明方式可以在字符串中存在双引号 “ 还能在字符串中换行</p>\n<h1 id=\"0X01-拼接字符串\"><a href=\"#0X01-拼接字符串\" class=\"headerlink\" title=\"0X01 拼接字符串\"></a>0X01 拼接字符串</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = <span class=\"string\">\",\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str3 = <span class=\"string\">\"world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str1 + str2 + str3</div><div class=\"line\">\thello,world</div></pre></td></tr></table></figure>\n<p>注意：<br>连接的时候加号左右都要是字符串，如果是字符串加数字就不行了。除非把数字转成字符串格式</p>\n<h1 id=\"0X02-输入字符串\"><a href=\"#0X02-输入字符串\" class=\"headerlink\" title=\"0X02 输入字符串\"></a>0X02 输入字符串</h1><p>标准输入就是直接把你输入的东西写到代码里，甚至可以用变量名<br>原始输入就是直接输入字符串，纯字符串<br>具体情况可以从下面的Demo中看到效果<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hello = <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = input(<span class=\"string\">\"what's your name:\"</span>)   <span class=\"comment\">#获取标准输入</span></div><div class=\"line\">\thello</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = raw_input(<span class=\"string\">\"what's your name:\"</span>)\t<span class=\"comment\">#获取原始输入</span></div><div class=\"line\">\t<span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str1</div><div class=\"line\">\thello,world</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-字符串格式化\"><a href=\"#0X03-字符串格式化\" class=\"headerlink\" title=\"0X03 字符串格式化\"></a>0X03 字符串格式化</h1><p>学过C的能迅速的理解Python里的字符串格式化，没学过C的可以快速的理解Python里的字符串格式化  +_+<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text = Template(<span class=\"string\">\"1---$a  2---$b   3---$c   4---$$\"</span>)\t<span class=\"comment\"># $a $b $c 都是字符串占位符，先写好后赋值</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>text.substitute(a=<span class=\"string\">\"hello,\"</span>, b=<span class=\"string\">\"world\"</span>, c=<span class=\"string\">\"wow\"</span>)</div><div class=\"line\">\t<span class=\"string\">'1---hello,  2---world   3---wow   4---$'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#  %s  是字符串占位符，将后面的字符串加到前面</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">\"hello, %s\"</span> % (<span class=\"string\">\"world\"</span>)</div><div class=\"line\">\thello, world</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># %15s  是将字符串向前扩充打15位</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">\"hello, %15s\"</span> % (<span class=\"string\">\"world\"</span>)</div><div class=\"line\">\thello,           world</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">\"%15s, world\"</span> % (<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">    hello, world</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># %-15s 是将字符串向后扩充到15位</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> <span class=\"string\">\"%-15s, world\"</span> % (<span class=\"string\">\"hello\"</span>)</div><div class=\"line\">\thello          , world</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-字符串处理函数\"><a href=\"#0X04-字符串处理函数\" class=\"headerlink\" title=\"0X04 字符串处理函数\"></a>0X04 字符串处理函数</h1><h2 id=\"find-字符串查找\"><a href=\"#find-字符串查找\" class=\"headerlink\" title=\"find 字符串查找\"></a>find 字符串查找</h2><p>从一个字符串中查找另一个字符串，返回最左端索引，找不到就返回 -1<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">\",\"</span>)</div><div class=\"line\">\t<span class=\"number\">5</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str = <span class=\"string\">\"hello,hello,world,world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str.find(<span class=\"string\">\",\"</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>)</div><div class=\"line\">\t<span class=\"number\">11</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果find函数返回了0，并不是没找到，而是在0的位置找到了。毕竟程序员的世界从来都是从0开始数数的</p>\n</blockquote>\n<h2 id=\"join-连接\"><a href=\"#join-连接\" class=\"headerlink\" title=\"join 连接\"></a>join 连接</h2><p>连接序列中的元素<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = [<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = <span class=\"string\">\"---\"</span>.join(str1)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello---world</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意这里是  str.join(list)  而不是  list.join(str)</p>\n</blockquote>\n<h2 id=\"lower-我要小写\"><a href=\"#lower-我要小写\" class=\"headerlink\" title=\"lower 我要小写\"></a>lower 我要小写</h2><p>返回字符串的全小写版<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"HELLO,WORLD\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = str1.lower()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello,world</div></pre></td></tr></table></figure></p>\n<h2 id=\"replace-查找并替换\"><a href=\"#replace-查找并替换\" class=\"headerlink\" title=\"replace 查找并替换\"></a>replace 查找并替换</h2><p>查找并替换全部<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"my world, my house, my phone\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = str1.replace(<span class=\"string\">\"my\"</span>, <span class=\"string\">\"your\"</span>)\t<span class=\"comment\">#我就这么把所有东西过户给了你+_+</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\tyour world, your house, your phone</div></pre></td></tr></table></figure></p>\n<h2 id=\"split-分割\"><a href=\"#split-分割\" class=\"headerlink\" title=\"split 分割\"></a>split 分割</h2><p>分割字符串<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = str1.split(<span class=\"string\">\",\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\t[<span class=\"string\">'hello'</span>, <span class=\"string\">'world'</span>]\t<span class=\"comment\">#返回了一个列表</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"strip-清理字符串\"><a href=\"#strip-清理字符串\" class=\"headerlink\" title=\"strip 清理字符串\"></a>strip 清理字符串</h2><p>去除两侧的东西<br>strip默认去除两侧的空格，当然也可以加参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;\tstr1 = <span class=\"string\">\"  hello,world  \"</span></div><div class=\"line\">&gt;&gt;&gt;\tstr2 = str1.strip()\t<span class=\"comment\">#默认去除空格</span></div><div class=\"line\">&gt;&gt;&gt;\t<span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello,world</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str1 = <span class=\"string\">\"aaahello,worldaaa\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str2 = str1.srtip(<span class=\"string\">\"a\"</span>)  <span class=\"comment\">#加了参数就删除两侧的参数里的内容</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> str2</div><div class=\"line\">\thello,world</div></pre></td></tr></table></figure></p>\n"},{"title":"使用Python操作消息队列RabbitMQ","date":"2017-06-13T12:56:00.000Z","_content":"\n内容参考自[python - 操作RabbitMQ](http://www.cnblogs.com/pangguoping/p/5720134.html)\n\n# 0X00 安装环境\n首先是在Linux上安装rabbitmq\n```bash\n# 环境为CentOS 7\nyum install rabbitmq-server\t# 安装RabbitMQ\nsystemctl start rabbitmq-server\t# 启动\nsystemctl enable rabbitmq-server\t# 开机自启\nsystemctl stop firewall-cmd\t\t# 临时关闭防火墙\n```\n\n然后用pip安装Python3的开发包\n```bash\npip3 install pika\n```\n\n安装好软件之后可以访问`http://115.xx.xx.xx:15672/`来访问自带的web页面来查看和管理RabbitMQ。默认管理员的用户密码都是`guest`\n\n# 0X01 简单的向队列中加入消息\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/13 19:25\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : RabbitMQ_Producer\n\nimport pika\n\n# 创建连接对象\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='115.xx.xx.xx'))\n\n# 创建频道对象\nchannel = connection.channel()\n\n# 指定一个队列，如果该队列不存在则创建\nchannel.queue_declare(queue='test_queue')\n\n# 提交消息\nfor i in range(10):\n    channel.basic_publish(exchange='', routing_key='test_queue', body='hello,world' + str(i))\n    print(\"sent...\")\n\n# 关闭连接\nconnection.close()\n```\n\n# 0X02 简单的从队列中获取消息\n\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/13 19:40\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : RabbitMQ_Consumer\n\nimport pika\n\ncredentials = pika.PlainCredentials('guest', 'guest')\n\n# 连接到RabbitMQ服务器\nconnection = pika.BlockingConnection(pika.ConnectionParameters('115.xx.xx.xx', 5672, '/', credentials))\nchannel = connection.channel()\n\n# 指定一个队列，如果该队列不存在则创建\nchannel.queue_declare(queue='test_queue')\n\n# 定义一个回调函数\ndef callback(ch, method, properties, body):\n    print(body.decode('utf-8'))\n\n\n# 告诉RabbitMQ使用callback来接收信息\nchannel.basic_consume(callback, queue='test_queue', no_ack=False)\n\nprint('waiting...')\n\n# 开始接收信息，并进入阻塞状态，队列里有信息才会调用callback进行处理。按ctrl+c退出。\nchannel.start_consuming()\n```\n# 0X03 万一消费者掉线了\n想象这样一种情况：\n\n消费者从消息队列中获取了n条数据，正要处理呢结果宕机了，那该怎么办？在RabbieMQ中有一个ACK可以用来确认消费者处理结束。就有点类似网络中的ACK，消费者每次从队列中获取了数据之后队列不会立刻将数据移除，而是等待对应的ACK。消费者获取到数据并处理完成之后会向队列发送一个ACK包，通知RabbitMQ这堆消息已经处理妥当了，可以删除了，这时候RabbitMQ才会将数据从队列中移除。所以这种情况下即使消费者掉线也没有什么问题，数据依旧会在队列中存在，留给其他消费者处理。\n\n在Python中这样实现：\n\n消费者有这样一行代码`channel.basic_consume(callback, queue='test_queue', no_ack=False)`，其中`no_ack=False`表示不发送确认包。将其修改为`no_ack=True`就会在每次处理完之后向RabbitMQ发送一个确认包，以确认消息处理完毕。\n\n# 0X04 万一RabbitMQ宕机了呢\n虽然有了ACK包，但是万一RabbitMQ挂了那数据还是会损失。所以我们可以给RabbitMQ设置一个数据持久化存储。RabbitMQ会将数据持久化存储到磁盘上，保证下次再启动的时候队列还在。\n\n在Python中这样实现：\n\n我们声明一个队列是这样的`channel.queue_declare(queue='test_queue')`，如果需要持久化一个队列可以这样声明`channel.queue_declare(queue='test_queue', durable=True)`。不过这行直接放在代码中是不能执行的，因为以前已经有了一个名为`test_queue`的队列，RabbitMQ不允许用不同的方式声明同一个队列，所以可以换一个队列名新建来指定数据持久化存储。不过如果只是这样声明的话，在RabbitMQ宕机重启后确实队列还在，不过队列里的数据就没有了。除非我们这样来声明队列`channel.basic_publish(exchange='', routing_key=\"test_queue\", body=message, properties=pika.BasicProperties(delivery_mode = 2,))`。\n\n# 0X05 最简单的发布订阅\n最简单的发布订阅在RabbitMQ中称之为`Fanout模式`。也就是说订阅者订阅某个频道，然后发布者向这个频道中发布消息，所有订阅者就都能接收到这条消息。不过因为发布者需要使用订阅者创建的随机队列所以需要先启动订阅者才能启动发布者。\n\n发布者代码：\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/13 20:21\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : RabbitMQ_Publisher\n\nimport pika\n\n# 创建连接对象\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='115.xx.xx.xx'))\n\n# 创建频道对象\nchannel = connection.channel()\n\n# 定义交换机，exchange表示交换机名称，type表示类型\nchannel.exchange_declare(exchange='my_fanout',\n                         type='fanout')\n\nmessage = 'Hello Python'\n# 将消息发送到交换机\nchannel.basic_publish(exchange='my_fanout',  # 指定exchange\n                      routing_key='',  # fanout下不需要配置，配置了也不会生效\n                      body=message)\nconnection.close()\n```\n\n订阅者代码：\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/13 20:20\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : RabbitMQ_Subscriber\n\nimport pika\n\ncredentials = pika.PlainCredentials('guest', 'guest')\n\n# 连接到RabbitMQ\nconnection = pika.BlockingConnection(pika.ConnectionParameters('115.xx.xx.xx', 5672, '/', credentials))\nchannel = connection.channel()\n\n# 定义交换机，进行exchange声明，exchange表示交换机名称，type表示类型\nchannel.exchange_declare(exchange='my_fanout',\n                         type='fanout')\n\n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)  # exclusive=True表示建立临时队列，当consumer关闭后，该队列就会被删除\nqueue_name = result.method.queue\n\n# 将队列与exchange进行绑定\nchannel.queue_bind(exchange='my_fanout',\n                   queue=queue_name)\n\n# 定义回调方法\ndef callback(ch, method, properties, body):\n    print(body.decode('utf-8'))\n\n\n# 从队列获取信息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)\n\nchannel.start_consuming()\n```\n","source":"_posts/python_rabbitmq.md","raw":"---\ntitle: 使用Python操作消息队列RabbitMQ\ndate: 2017-06-13 20:56\ntags:\n  - Python\n  - RabbieMQ\n  - 消息队列\n  - demo\n---\n\n内容参考自[python - 操作RabbitMQ](http://www.cnblogs.com/pangguoping/p/5720134.html)\n\n# 0X00 安装环境\n首先是在Linux上安装rabbitmq\n```bash\n# 环境为CentOS 7\nyum install rabbitmq-server\t# 安装RabbitMQ\nsystemctl start rabbitmq-server\t# 启动\nsystemctl enable rabbitmq-server\t# 开机自启\nsystemctl stop firewall-cmd\t\t# 临时关闭防火墙\n```\n\n然后用pip安装Python3的开发包\n```bash\npip3 install pika\n```\n\n安装好软件之后可以访问`http://115.xx.xx.xx:15672/`来访问自带的web页面来查看和管理RabbitMQ。默认管理员的用户密码都是`guest`\n\n# 0X01 简单的向队列中加入消息\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/13 19:25\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : RabbitMQ_Producer\n\nimport pika\n\n# 创建连接对象\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='115.xx.xx.xx'))\n\n# 创建频道对象\nchannel = connection.channel()\n\n# 指定一个队列，如果该队列不存在则创建\nchannel.queue_declare(queue='test_queue')\n\n# 提交消息\nfor i in range(10):\n    channel.basic_publish(exchange='', routing_key='test_queue', body='hello,world' + str(i))\n    print(\"sent...\")\n\n# 关闭连接\nconnection.close()\n```\n\n# 0X02 简单的从队列中获取消息\n\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/13 19:40\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : RabbitMQ_Consumer\n\nimport pika\n\ncredentials = pika.PlainCredentials('guest', 'guest')\n\n# 连接到RabbitMQ服务器\nconnection = pika.BlockingConnection(pika.ConnectionParameters('115.xx.xx.xx', 5672, '/', credentials))\nchannel = connection.channel()\n\n# 指定一个队列，如果该队列不存在则创建\nchannel.queue_declare(queue='test_queue')\n\n# 定义一个回调函数\ndef callback(ch, method, properties, body):\n    print(body.decode('utf-8'))\n\n\n# 告诉RabbitMQ使用callback来接收信息\nchannel.basic_consume(callback, queue='test_queue', no_ack=False)\n\nprint('waiting...')\n\n# 开始接收信息，并进入阻塞状态，队列里有信息才会调用callback进行处理。按ctrl+c退出。\nchannel.start_consuming()\n```\n# 0X03 万一消费者掉线了\n想象这样一种情况：\n\n消费者从消息队列中获取了n条数据，正要处理呢结果宕机了，那该怎么办？在RabbieMQ中有一个ACK可以用来确认消费者处理结束。就有点类似网络中的ACK，消费者每次从队列中获取了数据之后队列不会立刻将数据移除，而是等待对应的ACK。消费者获取到数据并处理完成之后会向队列发送一个ACK包，通知RabbitMQ这堆消息已经处理妥当了，可以删除了，这时候RabbitMQ才会将数据从队列中移除。所以这种情况下即使消费者掉线也没有什么问题，数据依旧会在队列中存在，留给其他消费者处理。\n\n在Python中这样实现：\n\n消费者有这样一行代码`channel.basic_consume(callback, queue='test_queue', no_ack=False)`，其中`no_ack=False`表示不发送确认包。将其修改为`no_ack=True`就会在每次处理完之后向RabbitMQ发送一个确认包，以确认消息处理完毕。\n\n# 0X04 万一RabbitMQ宕机了呢\n虽然有了ACK包，但是万一RabbitMQ挂了那数据还是会损失。所以我们可以给RabbitMQ设置一个数据持久化存储。RabbitMQ会将数据持久化存储到磁盘上，保证下次再启动的时候队列还在。\n\n在Python中这样实现：\n\n我们声明一个队列是这样的`channel.queue_declare(queue='test_queue')`，如果需要持久化一个队列可以这样声明`channel.queue_declare(queue='test_queue', durable=True)`。不过这行直接放在代码中是不能执行的，因为以前已经有了一个名为`test_queue`的队列，RabbitMQ不允许用不同的方式声明同一个队列，所以可以换一个队列名新建来指定数据持久化存储。不过如果只是这样声明的话，在RabbitMQ宕机重启后确实队列还在，不过队列里的数据就没有了。除非我们这样来声明队列`channel.basic_publish(exchange='', routing_key=\"test_queue\", body=message, properties=pika.BasicProperties(delivery_mode = 2,))`。\n\n# 0X05 最简单的发布订阅\n最简单的发布订阅在RabbitMQ中称之为`Fanout模式`。也就是说订阅者订阅某个频道，然后发布者向这个频道中发布消息，所有订阅者就都能接收到这条消息。不过因为发布者需要使用订阅者创建的随机队列所以需要先启动订阅者才能启动发布者。\n\n发布者代码：\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/13 20:21\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : RabbitMQ_Publisher\n\nimport pika\n\n# 创建连接对象\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host='115.xx.xx.xx'))\n\n# 创建频道对象\nchannel = connection.channel()\n\n# 定义交换机，exchange表示交换机名称，type表示类型\nchannel.exchange_declare(exchange='my_fanout',\n                         type='fanout')\n\nmessage = 'Hello Python'\n# 将消息发送到交换机\nchannel.basic_publish(exchange='my_fanout',  # 指定exchange\n                      routing_key='',  # fanout下不需要配置，配置了也不会生效\n                      body=message)\nconnection.close()\n```\n\n订阅者代码：\n```python\n#!/usr/bin/env python3\n# coding=utf-8\n# @Time    : 2017/6/13 20:20\n# @Author  : Shawn\n# @Blog    : https://blog.just666.cn\n# @Email   : shawnbluce@gmail.com\n# @purpose : RabbitMQ_Subscriber\n\nimport pika\n\ncredentials = pika.PlainCredentials('guest', 'guest')\n\n# 连接到RabbitMQ\nconnection = pika.BlockingConnection(pika.ConnectionParameters('115.xx.xx.xx', 5672, '/', credentials))\nchannel = connection.channel()\n\n# 定义交换机，进行exchange声明，exchange表示交换机名称，type表示类型\nchannel.exchange_declare(exchange='my_fanout',\n                         type='fanout')\n\n# 随机创建队列\nresult = channel.queue_declare(exclusive=True)  # exclusive=True表示建立临时队列，当consumer关闭后，该队列就会被删除\nqueue_name = result.method.queue\n\n# 将队列与exchange进行绑定\nchannel.queue_bind(exchange='my_fanout',\n                   queue=queue_name)\n\n# 定义回调方法\ndef callback(ch, method, properties, body):\n    print(body.decode('utf-8'))\n\n\n# 从队列获取信息\nchannel.basic_consume(callback,\n                      queue=queue_name,\n                      no_ack=True)\n\nchannel.start_consuming()\n```\n","slug":"python_rabbitmq","published":1,"updated":"2017-09-02T14:50:47.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmel001whnlplxugi3ic","content":"<p>内容参考自<a href=\"http://www.cnblogs.com/pangguoping/p/5720134.html\" target=\"_blank\" rel=\"external\">python - 操作RabbitMQ</a></p>\n<h1 id=\"0X00-安装环境\"><a href=\"#0X00-安装环境\" class=\"headerlink\" title=\"0X00 安装环境\"></a>0X00 安装环境</h1><p>首先是在Linux上安装rabbitmq<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 环境为CentOS 7</span></div><div class=\"line\">yum install rabbitmq-server\t<span class=\"comment\"># 安装RabbitMQ</span></div><div class=\"line\">systemctl start rabbitmq-server\t<span class=\"comment\"># 启动</span></div><div class=\"line\">systemctl <span class=\"built_in\">enable</span> rabbitmq-server\t<span class=\"comment\"># 开机自启</span></div><div class=\"line\">systemctl stop firewall-cmd\t\t<span class=\"comment\"># 临时关闭防火墙</span></div></pre></td></tr></table></figure></p>\n<p>然后用pip安装Python3的开发包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install pika</div></pre></td></tr></table></figure></p>\n<p>安装好软件之后可以访问<code>http://115.xx.xx.xx:15672/</code>来访问自带的web页面来查看和管理RabbitMQ。默认管理员的用户密码都是<code>guest</code></p>\n<h1 id=\"0X01-简单的向队列中加入消息\"><a href=\"#0X01-简单的向队列中加入消息\" class=\"headerlink\" title=\"0X01 简单的向队列中加入消息\"></a>0X01 简单的向队列中加入消息</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/13 19:25</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : RabbitMQ_Producer</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建连接对象</span></div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'115.xx.xx.xx'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建频道对象</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 指定一个队列，如果该队列不存在则创建</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">'test_queue'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交消息</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>, routing_key=<span class=\"string\">'test_queue'</span>, body=<span class=\"string\">'hello,world'</span> + str(i))</div><div class=\"line\">    print(<span class=\"string\">\"sent...\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure>\n<h1 id=\"0X02-简单的从队列中获取消息\"><a href=\"#0X02-简单的从队列中获取消息\" class=\"headerlink\" title=\"0X02 简单的从队列中获取消息\"></a>0X02 简单的从队列中获取消息</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/13 19:40</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : RabbitMQ_Consumer</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"></div><div class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 连接到RabbitMQ服务器</span></div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'115.xx.xx.xx'</span>, <span class=\"number\">5672</span>, <span class=\"string\">'/'</span>, credentials))</div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 指定一个队列，如果该队列不存在则创建</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">'test_queue'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义一个回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(body.decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 告诉RabbitMQ使用callback来接收信息</span></div><div class=\"line\">channel.basic_consume(callback, queue=<span class=\"string\">'test_queue'</span>, no_ack=<span class=\"keyword\">False</span>)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'waiting...'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 开始接收信息，并进入阻塞状态，队列里有信息才会调用callback进行处理。按ctrl+c退出。</span></div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure>\n<h1 id=\"0X03-万一消费者掉线了\"><a href=\"#0X03-万一消费者掉线了\" class=\"headerlink\" title=\"0X03 万一消费者掉线了\"></a>0X03 万一消费者掉线了</h1><p>想象这样一种情况：</p>\n<p>消费者从消息队列中获取了n条数据，正要处理呢结果宕机了，那该怎么办？在RabbieMQ中有一个ACK可以用来确认消费者处理结束。就有点类似网络中的ACK，消费者每次从队列中获取了数据之后队列不会立刻将数据移除，而是等待对应的ACK。消费者获取到数据并处理完成之后会向队列发送一个ACK包，通知RabbitMQ这堆消息已经处理妥当了，可以删除了，这时候RabbitMQ才会将数据从队列中移除。所以这种情况下即使消费者掉线也没有什么问题，数据依旧会在队列中存在，留给其他消费者处理。</p>\n<p>在Python中这样实现：</p>\n<p>消费者有这样一行代码<code>channel.basic_consume(callback, queue=&#39;test_queue&#39;, no_ack=False)</code>，其中<code>no_ack=False</code>表示不发送确认包。将其修改为<code>no_ack=True</code>就会在每次处理完之后向RabbitMQ发送一个确认包，以确认消息处理完毕。</p>\n<h1 id=\"0X04-万一RabbitMQ宕机了呢\"><a href=\"#0X04-万一RabbitMQ宕机了呢\" class=\"headerlink\" title=\"0X04 万一RabbitMQ宕机了呢\"></a>0X04 万一RabbitMQ宕机了呢</h1><p>虽然有了ACK包，但是万一RabbitMQ挂了那数据还是会损失。所以我们可以给RabbitMQ设置一个数据持久化存储。RabbitMQ会将数据持久化存储到磁盘上，保证下次再启动的时候队列还在。</p>\n<p>在Python中这样实现：</p>\n<p>我们声明一个队列是这样的<code>channel.queue_declare(queue=&#39;test_queue&#39;)</code>，如果需要持久化一个队列可以这样声明<code>channel.queue_declare(queue=&#39;test_queue&#39;, durable=True)</code>。不过这行直接放在代码中是不能执行的，因为以前已经有了一个名为<code>test_queue</code>的队列，RabbitMQ不允许用不同的方式声明同一个队列，所以可以换一个队列名新建来指定数据持久化存储。不过如果只是这样声明的话，在RabbitMQ宕机重启后确实队列还在，不过队列里的数据就没有了。除非我们这样来声明队列<code>channel.basic_publish(exchange=&#39;&#39;, routing_key=&quot;test_queue&quot;, body=message, properties=pika.BasicProperties(delivery_mode = 2,))</code>。</p>\n<h1 id=\"0X05-最简单的发布订阅\"><a href=\"#0X05-最简单的发布订阅\" class=\"headerlink\" title=\"0X05 最简单的发布订阅\"></a>0X05 最简单的发布订阅</h1><p>最简单的发布订阅在RabbitMQ中称之为<code>Fanout模式</code>。也就是说订阅者订阅某个频道，然后发布者向这个频道中发布消息，所有订阅者就都能接收到这条消息。不过因为发布者需要使用订阅者创建的随机队列所以需要先启动订阅者才能启动发布者。</p>\n<p>发布者代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/13 20:21</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : RabbitMQ_Publisher</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建连接对象</span></div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'115.xx.xx.xx'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建频道对象</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义交换机，exchange表示交换机名称，type表示类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'my_fanout'</span>,</div><div class=\"line\">                         type=<span class=\"string\">'fanout'</span>)</div><div class=\"line\"></div><div class=\"line\">message = <span class=\"string\">'Hello Python'</span></div><div class=\"line\"><span class=\"comment\"># 将消息发送到交换机</span></div><div class=\"line\">channel.basic_publish(exchange=<span class=\"string\">'my_fanout'</span>,  <span class=\"comment\"># 指定exchange</span></div><div class=\"line\">                      routing_key=<span class=\"string\">''</span>,  <span class=\"comment\"># fanout下不需要配置，配置了也不会生效</span></div><div class=\"line\">                      body=message)</div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>订阅者代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/13 20:20</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : RabbitMQ_Subscriber</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"></div><div class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 连接到RabbitMQ</span></div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'115.xx.xx.xx'</span>, <span class=\"number\">5672</span>, <span class=\"string\">'/'</span>, credentials))</div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义交换机，进行exchange声明，exchange表示交换机名称，type表示类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'my_fanout'</span>,</div><div class=\"line\">                         type=<span class=\"string\">'fanout'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)  <span class=\"comment\"># exclusive=True表示建立临时队列，当consumer关闭后，该队列就会被删除</span></div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将队列与exchange进行绑定</span></div><div class=\"line\">channel.queue_bind(exchange=<span class=\"string\">'my_fanout'</span>,</div><div class=\"line\">                   queue=queue_name)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义回调方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(body.decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 从队列获取信息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>内容参考自<a href=\"http://www.cnblogs.com/pangguoping/p/5720134.html\" target=\"_blank\" rel=\"external\">python - 操作RabbitMQ</a></p>\n<h1 id=\"0X00-安装环境\"><a href=\"#0X00-安装环境\" class=\"headerlink\" title=\"0X00 安装环境\"></a>0X00 安装环境</h1><p>首先是在Linux上安装rabbitmq<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 环境为CentOS 7</span></div><div class=\"line\">yum install rabbitmq-server\t<span class=\"comment\"># 安装RabbitMQ</span></div><div class=\"line\">systemctl start rabbitmq-server\t<span class=\"comment\"># 启动</span></div><div class=\"line\">systemctl <span class=\"built_in\">enable</span> rabbitmq-server\t<span class=\"comment\"># 开机自启</span></div><div class=\"line\">systemctl stop firewall-cmd\t\t<span class=\"comment\"># 临时关闭防火墙</span></div></pre></td></tr></table></figure></p>\n<p>然后用pip安装Python3的开发包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install pika</div></pre></td></tr></table></figure></p>\n<p>安装好软件之后可以访问<code>http://115.xx.xx.xx:15672/</code>来访问自带的web页面来查看和管理RabbitMQ。默认管理员的用户密码都是<code>guest</code></p>\n<h1 id=\"0X01-简单的向队列中加入消息\"><a href=\"#0X01-简单的向队列中加入消息\" class=\"headerlink\" title=\"0X01 简单的向队列中加入消息\"></a>0X01 简单的向队列中加入消息</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/13 19:25</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : RabbitMQ_Producer</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建连接对象</span></div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'115.xx.xx.xx'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建频道对象</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 指定一个队列，如果该队列不存在则创建</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">'test_queue'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 提交消息</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">    channel.basic_publish(exchange=<span class=\"string\">''</span>, routing_key=<span class=\"string\">'test_queue'</span>, body=<span class=\"string\">'hello,world'</span> + str(i))</div><div class=\"line\">    print(<span class=\"string\">\"sent...\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 关闭连接</span></div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure>\n<h1 id=\"0X02-简单的从队列中获取消息\"><a href=\"#0X02-简单的从队列中获取消息\" class=\"headerlink\" title=\"0X02 简单的从队列中获取消息\"></a>0X02 简单的从队列中获取消息</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/13 19:40</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : RabbitMQ_Consumer</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"></div><div class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 连接到RabbitMQ服务器</span></div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'115.xx.xx.xx'</span>, <span class=\"number\">5672</span>, <span class=\"string\">'/'</span>, credentials))</div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 指定一个队列，如果该队列不存在则创建</span></div><div class=\"line\">channel.queue_declare(queue=<span class=\"string\">'test_queue'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义一个回调函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(body.decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 告诉RabbitMQ使用callback来接收信息</span></div><div class=\"line\">channel.basic_consume(callback, queue=<span class=\"string\">'test_queue'</span>, no_ack=<span class=\"keyword\">False</span>)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'waiting...'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 开始接收信息，并进入阻塞状态，队列里有信息才会调用callback进行处理。按ctrl+c退出。</span></div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure>\n<h1 id=\"0X03-万一消费者掉线了\"><a href=\"#0X03-万一消费者掉线了\" class=\"headerlink\" title=\"0X03 万一消费者掉线了\"></a>0X03 万一消费者掉线了</h1><p>想象这样一种情况：</p>\n<p>消费者从消息队列中获取了n条数据，正要处理呢结果宕机了，那该怎么办？在RabbieMQ中有一个ACK可以用来确认消费者处理结束。就有点类似网络中的ACK，消费者每次从队列中获取了数据之后队列不会立刻将数据移除，而是等待对应的ACK。消费者获取到数据并处理完成之后会向队列发送一个ACK包，通知RabbitMQ这堆消息已经处理妥当了，可以删除了，这时候RabbitMQ才会将数据从队列中移除。所以这种情况下即使消费者掉线也没有什么问题，数据依旧会在队列中存在，留给其他消费者处理。</p>\n<p>在Python中这样实现：</p>\n<p>消费者有这样一行代码<code>channel.basic_consume(callback, queue=&#39;test_queue&#39;, no_ack=False)</code>，其中<code>no_ack=False</code>表示不发送确认包。将其修改为<code>no_ack=True</code>就会在每次处理完之后向RabbitMQ发送一个确认包，以确认消息处理完毕。</p>\n<h1 id=\"0X04-万一RabbitMQ宕机了呢\"><a href=\"#0X04-万一RabbitMQ宕机了呢\" class=\"headerlink\" title=\"0X04 万一RabbitMQ宕机了呢\"></a>0X04 万一RabbitMQ宕机了呢</h1><p>虽然有了ACK包，但是万一RabbitMQ挂了那数据还是会损失。所以我们可以给RabbitMQ设置一个数据持久化存储。RabbitMQ会将数据持久化存储到磁盘上，保证下次再启动的时候队列还在。</p>\n<p>在Python中这样实现：</p>\n<p>我们声明一个队列是这样的<code>channel.queue_declare(queue=&#39;test_queue&#39;)</code>，如果需要持久化一个队列可以这样声明<code>channel.queue_declare(queue=&#39;test_queue&#39;, durable=True)</code>。不过这行直接放在代码中是不能执行的，因为以前已经有了一个名为<code>test_queue</code>的队列，RabbitMQ不允许用不同的方式声明同一个队列，所以可以换一个队列名新建来指定数据持久化存储。不过如果只是这样声明的话，在RabbitMQ宕机重启后确实队列还在，不过队列里的数据就没有了。除非我们这样来声明队列<code>channel.basic_publish(exchange=&#39;&#39;, routing_key=&quot;test_queue&quot;, body=message, properties=pika.BasicProperties(delivery_mode = 2,))</code>。</p>\n<h1 id=\"0X05-最简单的发布订阅\"><a href=\"#0X05-最简单的发布订阅\" class=\"headerlink\" title=\"0X05 最简单的发布订阅\"></a>0X05 最简单的发布订阅</h1><p>最简单的发布订阅在RabbitMQ中称之为<code>Fanout模式</code>。也就是说订阅者订阅某个频道，然后发布者向这个频道中发布消息，所有订阅者就都能接收到这条消息。不过因为发布者需要使用订阅者创建的随机队列所以需要先启动订阅者才能启动发布者。</p>\n<p>发布者代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/13 20:21</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : RabbitMQ_Publisher</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建连接对象</span></div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class=\"string\">'115.xx.xx.xx'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建频道对象</span></div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义交换机，exchange表示交换机名称，type表示类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'my_fanout'</span>,</div><div class=\"line\">                         type=<span class=\"string\">'fanout'</span>)</div><div class=\"line\"></div><div class=\"line\">message = <span class=\"string\">'Hello Python'</span></div><div class=\"line\"><span class=\"comment\"># 将消息发送到交换机</span></div><div class=\"line\">channel.basic_publish(exchange=<span class=\"string\">'my_fanout'</span>,  <span class=\"comment\"># 指定exchange</span></div><div class=\"line\">                      routing_key=<span class=\"string\">''</span>,  <span class=\"comment\"># fanout下不需要配置，配置了也不会生效</span></div><div class=\"line\">                      body=message)</div><div class=\"line\">connection.close()</div></pre></td></tr></table></figure></p>\n<p>订阅者代码：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"><span class=\"comment\"># @Time    : 2017/6/13 20:20</span></div><div class=\"line\"><span class=\"comment\"># @Author  : Shawn</span></div><div class=\"line\"><span class=\"comment\"># @Blog    : https://blog.just666.cn</span></div><div class=\"line\"><span class=\"comment\"># @Email   : shawnbluce@gmail.com</span></div><div class=\"line\"><span class=\"comment\"># @purpose : RabbitMQ_Subscriber</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pika</div><div class=\"line\"></div><div class=\"line\">credentials = pika.PlainCredentials(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 连接到RabbitMQ</span></div><div class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class=\"string\">'115.xx.xx.xx'</span>, <span class=\"number\">5672</span>, <span class=\"string\">'/'</span>, credentials))</div><div class=\"line\">channel = connection.channel()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义交换机，进行exchange声明，exchange表示交换机名称，type表示类型</span></div><div class=\"line\">channel.exchange_declare(exchange=<span class=\"string\">'my_fanout'</span>,</div><div class=\"line\">                         type=<span class=\"string\">'fanout'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 随机创建队列</span></div><div class=\"line\">result = channel.queue_declare(exclusive=<span class=\"keyword\">True</span>)  <span class=\"comment\"># exclusive=True表示建立临时队列，当consumer关闭后，该队列就会被删除</span></div><div class=\"line\">queue_name = result.method.queue</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 将队列与exchange进行绑定</span></div><div class=\"line\">channel.queue_bind(exchange=<span class=\"string\">'my_fanout'</span>,</div><div class=\"line\">                   queue=queue_name)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义回调方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">callback</span><span class=\"params\">(ch, method, properties, body)</span>:</span></div><div class=\"line\">    print(body.decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 从队列获取信息</span></div><div class=\"line\">channel.basic_consume(callback,</div><div class=\"line\">                      queue=queue_name,</div><div class=\"line\">                      no_ack=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">channel.start_consuming()</div></pre></td></tr></table></figure></p>\n"},{"title":"Python中Virtualenv和pip的简单用法","date":"2017-08-17T16:19:00.000Z","_content":"\n# 0X00 安装环境\n我们在Python开发和学习过程中需要用到各种库，然后在各个不同的项目和作品里可能用的版本还不一样，正因为有这种问题的存在才催生了`virtualenv`的诞生。virtualenv可以在电脑上创建一个虚拟环境，可以针对每一个项目创建一个虚拟环境，这样就不用担心各个不同的项目用不同版本的库的时候出现的冲突了。 ** 下面的内容只适用于Linux/OSX，未经Windows环境测试 **\n\n要使用这个功能还是需要安装，安装virtualenv肯定就得直接用pip安装了，`pip install virtualenv`就可以轻松装上了。装好之后我们就可以来测试一波了。\n\n# 0X01 初始化一个空的工作环境\n首先在一个空的环境中执行`virtualenv --no-site-packages test_env`，就是在当前目录创建一个名为test_env的虚拟环境。这里`--no-site-packages`参数是指不从全局的Python中携带任何第三方库。就比如说你在全局Python中安装了xxx库，在不用这个参数来创建虚拟环境时，虚拟环境中也会带着这个库；但是加上了这个参数，虚拟环境中就是一个纯净的Python，没有这些库。\n```bash\nroot in ~ λ virtualenv --no-site-packages test_env\nNew python executable in /root/test_env/bin/python\nPlease make sure you remove any previous custom paths from your /root/.pydistutils.cfg file.\nInstalling setuptools, pip, wheel...done.\n```\n然后可以通过`source test_env/bin/activate`可以进入（激活）到这个虚拟环境里去。进入到虚拟环境中之后，通常情况下你的命令提示符最前面会出现一个括号，括号里面写着你虚拟环境的名字。\n> 这里说是虚拟环境，其实一切都是真实的。只是说你在激活了这个环境，在这个环境下用pip安装的库都放在 `test_env` 中。\n\n也可以通过`deactivate`来退出这个环境。\n\n# 0X02 批量导出和安装库\n比如我们开发了一个项目，里面用到了pymongo/requests/flask/pymysql等等等等十几二十个库，还要指定特定的版本，那么当把一个项目从机器A迁移到机器B的时候就会很麻烦。需要手动记录每个库和版本，还要逐个去安装，非常麻烦。所以针对这个问题pip已经有了非常完善的解决方案。\n\n```bash\n(test_env) root in ~ λ pip freeze > requirements.txt  # 导出已安装的库\n```\n这个命令可以导出当前环境中安装好的所有第三方库，并且是以一个标准的格式导出的。所以一般一个标准的python项目的根目录都会有这个名为`requirements.txt`的依赖文件。\n\n既然可以一次性导出，那么必然可以一次性安装喽。通过这种方式就可以将上面导出的特定版本的所有库一次性全装上。配合virtualenv可以快速的部署一个Python项目，并且不会搞乱其他的Python项目环境。\n```bash\n(test_env_1) root in ~ λ pip install -r requirements.txt\n```\n\n","source":"_posts/python_pip_virtualenv.md","raw":"---\ntitle: Python中Virtualenv和pip的简单用法\ndate: 2017-08-18 00:19\ntags:\n  - Python\n  - pip\n  - virtualenv\n---\n\n# 0X00 安装环境\n我们在Python开发和学习过程中需要用到各种库，然后在各个不同的项目和作品里可能用的版本还不一样，正因为有这种问题的存在才催生了`virtualenv`的诞生。virtualenv可以在电脑上创建一个虚拟环境，可以针对每一个项目创建一个虚拟环境，这样就不用担心各个不同的项目用不同版本的库的时候出现的冲突了。 ** 下面的内容只适用于Linux/OSX，未经Windows环境测试 **\n\n要使用这个功能还是需要安装，安装virtualenv肯定就得直接用pip安装了，`pip install virtualenv`就可以轻松装上了。装好之后我们就可以来测试一波了。\n\n# 0X01 初始化一个空的工作环境\n首先在一个空的环境中执行`virtualenv --no-site-packages test_env`，就是在当前目录创建一个名为test_env的虚拟环境。这里`--no-site-packages`参数是指不从全局的Python中携带任何第三方库。就比如说你在全局Python中安装了xxx库，在不用这个参数来创建虚拟环境时，虚拟环境中也会带着这个库；但是加上了这个参数，虚拟环境中就是一个纯净的Python，没有这些库。\n```bash\nroot in ~ λ virtualenv --no-site-packages test_env\nNew python executable in /root/test_env/bin/python\nPlease make sure you remove any previous custom paths from your /root/.pydistutils.cfg file.\nInstalling setuptools, pip, wheel...done.\n```\n然后可以通过`source test_env/bin/activate`可以进入（激活）到这个虚拟环境里去。进入到虚拟环境中之后，通常情况下你的命令提示符最前面会出现一个括号，括号里面写着你虚拟环境的名字。\n> 这里说是虚拟环境，其实一切都是真实的。只是说你在激活了这个环境，在这个环境下用pip安装的库都放在 `test_env` 中。\n\n也可以通过`deactivate`来退出这个环境。\n\n# 0X02 批量导出和安装库\n比如我们开发了一个项目，里面用到了pymongo/requests/flask/pymysql等等等等十几二十个库，还要指定特定的版本，那么当把一个项目从机器A迁移到机器B的时候就会很麻烦。需要手动记录每个库和版本，还要逐个去安装，非常麻烦。所以针对这个问题pip已经有了非常完善的解决方案。\n\n```bash\n(test_env) root in ~ λ pip freeze > requirements.txt  # 导出已安装的库\n```\n这个命令可以导出当前环境中安装好的所有第三方库，并且是以一个标准的格式导出的。所以一般一个标准的python项目的根目录都会有这个名为`requirements.txt`的依赖文件。\n\n既然可以一次性导出，那么必然可以一次性安装喽。通过这种方式就可以将上面导出的特定版本的所有库一次性全装上。配合virtualenv可以快速的部署一个Python项目，并且不会搞乱其他的Python项目环境。\n```bash\n(test_env_1) root in ~ λ pip install -r requirements.txt\n```\n\n","slug":"python_pip_virtualenv","published":1,"updated":"2017-09-02T14:50:27.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmel001yhnlpp5njltjh","content":"<h1 id=\"0X00-安装环境\"><a href=\"#0X00-安装环境\" class=\"headerlink\" title=\"0X00 安装环境\"></a>0X00 安装环境</h1><p>我们在Python开发和学习过程中需要用到各种库，然后在各个不同的项目和作品里可能用的版本还不一样，正因为有这种问题的存在才催生了<code>virtualenv</code>的诞生。virtualenv可以在电脑上创建一个虚拟环境，可以针对每一个项目创建一个虚拟环境，这样就不用担心各个不同的项目用不同版本的库的时候出现的冲突了。 <strong> 下面的内容只适用于Linux/OSX，未经Windows环境测试 </strong></p>\n<p>要使用这个功能还是需要安装，安装virtualenv肯定就得直接用pip安装了，<code>pip install virtualenv</code>就可以轻松装上了。装好之后我们就可以来测试一波了。</p>\n<h1 id=\"0X01-初始化一个空的工作环境\"><a href=\"#0X01-初始化一个空的工作环境\" class=\"headerlink\" title=\"0X01 初始化一个空的工作环境\"></a>0X01 初始化一个空的工作环境</h1><p>首先在一个空的环境中执行<code>virtualenv --no-site-packages test_env</code>，就是在当前目录创建一个名为test_env的虚拟环境。这里<code>--no-site-packages</code>参数是指不从全局的Python中携带任何第三方库。就比如说你在全局Python中安装了xxx库，在不用这个参数来创建虚拟环境时，虚拟环境中也会带着这个库；但是加上了这个参数，虚拟环境中就是一个纯净的Python，没有这些库。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root <span class=\"keyword\">in</span> ~ λ virtualenv --no-site-packages test_env</div><div class=\"line\">New python executable <span class=\"keyword\">in</span> /root/test_env/bin/python</div><div class=\"line\">Please make sure you remove any previous custom paths from your /root/.pydistutils.cfg file.</div><div class=\"line\">Installing setuptools, pip, wheel...done.</div></pre></td></tr></table></figure></p>\n<p>然后可以通过<code>source test_env/bin/activate</code>可以进入（激活）到这个虚拟环境里去。进入到虚拟环境中之后，通常情况下你的命令提示符最前面会出现一个括号，括号里面写着你虚拟环境的名字。</p>\n<blockquote>\n<p>这里说是虚拟环境，其实一切都是真实的。只是说你在激活了这个环境，在这个环境下用pip安装的库都放在 <code>test_env</code> 中。</p>\n</blockquote>\n<p>也可以通过<code>deactivate</code>来退出这个环境。</p>\n<h1 id=\"0X02-批量导出和安装库\"><a href=\"#0X02-批量导出和安装库\" class=\"headerlink\" title=\"0X02 批量导出和安装库\"></a>0X02 批量导出和安装库</h1><p>比如我们开发了一个项目，里面用到了pymongo/requests/flask/pymysql等等等等十几二十个库，还要指定特定的版本，那么当把一个项目从机器A迁移到机器B的时候就会很麻烦。需要手动记录每个库和版本，还要逐个去安装，非常麻烦。所以针对这个问题pip已经有了非常完善的解决方案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(test_env) root <span class=\"keyword\">in</span> ~ λ pip freeze &gt; requirements.txt  <span class=\"comment\"># 导出已安装的库</span></div></pre></td></tr></table></figure>\n<p>这个命令可以导出当前环境中安装好的所有第三方库，并且是以一个标准的格式导出的。所以一般一个标准的python项目的根目录都会有这个名为<code>requirements.txt</code>的依赖文件。</p>\n<p>既然可以一次性导出，那么必然可以一次性安装喽。通过这种方式就可以将上面导出的特定版本的所有库一次性全装上。配合virtualenv可以快速的部署一个Python项目，并且不会搞乱其他的Python项目环境。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(test_env_1) root <span class=\"keyword\">in</span> ~ λ pip install -r requirements.txt</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-安装环境\"><a href=\"#0X00-安装环境\" class=\"headerlink\" title=\"0X00 安装环境\"></a>0X00 安装环境</h1><p>我们在Python开发和学习过程中需要用到各种库，然后在各个不同的项目和作品里可能用的版本还不一样，正因为有这种问题的存在才催生了<code>virtualenv</code>的诞生。virtualenv可以在电脑上创建一个虚拟环境，可以针对每一个项目创建一个虚拟环境，这样就不用担心各个不同的项目用不同版本的库的时候出现的冲突了。 <strong> 下面的内容只适用于Linux/OSX，未经Windows环境测试 </strong></p>\n<p>要使用这个功能还是需要安装，安装virtualenv肯定就得直接用pip安装了，<code>pip install virtualenv</code>就可以轻松装上了。装好之后我们就可以来测试一波了。</p>\n<h1 id=\"0X01-初始化一个空的工作环境\"><a href=\"#0X01-初始化一个空的工作环境\" class=\"headerlink\" title=\"0X01 初始化一个空的工作环境\"></a>0X01 初始化一个空的工作环境</h1><p>首先在一个空的环境中执行<code>virtualenv --no-site-packages test_env</code>，就是在当前目录创建一个名为test_env的虚拟环境。这里<code>--no-site-packages</code>参数是指不从全局的Python中携带任何第三方库。就比如说你在全局Python中安装了xxx库，在不用这个参数来创建虚拟环境时，虚拟环境中也会带着这个库；但是加上了这个参数，虚拟环境中就是一个纯净的Python，没有这些库。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root <span class=\"keyword\">in</span> ~ λ virtualenv --no-site-packages test_env</div><div class=\"line\">New python executable <span class=\"keyword\">in</span> /root/test_env/bin/python</div><div class=\"line\">Please make sure you remove any previous custom paths from your /root/.pydistutils.cfg file.</div><div class=\"line\">Installing setuptools, pip, wheel...done.</div></pre></td></tr></table></figure></p>\n<p>然后可以通过<code>source test_env/bin/activate</code>可以进入（激活）到这个虚拟环境里去。进入到虚拟环境中之后，通常情况下你的命令提示符最前面会出现一个括号，括号里面写着你虚拟环境的名字。</p>\n<blockquote>\n<p>这里说是虚拟环境，其实一切都是真实的。只是说你在激活了这个环境，在这个环境下用pip安装的库都放在 <code>test_env</code> 中。</p>\n</blockquote>\n<p>也可以通过<code>deactivate</code>来退出这个环境。</p>\n<h1 id=\"0X02-批量导出和安装库\"><a href=\"#0X02-批量导出和安装库\" class=\"headerlink\" title=\"0X02 批量导出和安装库\"></a>0X02 批量导出和安装库</h1><p>比如我们开发了一个项目，里面用到了pymongo/requests/flask/pymysql等等等等十几二十个库，还要指定特定的版本，那么当把一个项目从机器A迁移到机器B的时候就会很麻烦。需要手动记录每个库和版本，还要逐个去安装，非常麻烦。所以针对这个问题pip已经有了非常完善的解决方案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(test_env) root <span class=\"keyword\">in</span> ~ λ pip freeze &gt; requirements.txt  <span class=\"comment\"># 导出已安装的库</span></div></pre></td></tr></table></figure>\n<p>这个命令可以导出当前环境中安装好的所有第三方库，并且是以一个标准的格式导出的。所以一般一个标准的python项目的根目录都会有这个名为<code>requirements.txt</code>的依赖文件。</p>\n<p>既然可以一次性导出，那么必然可以一次性安装喽。通过这种方式就可以将上面导出的特定版本的所有库一次性全装上。配合virtualenv可以快速的部署一个Python项目，并且不会搞乱其他的Python项目环境。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(test_env_1) root <span class=\"keyword\">in</span> ~ λ pip install -r requirements.txt</div></pre></td></tr></table></figure></p>\n"},{"title":"Python使用threading实现多线程","date":"2016-12-12T07:39:00.000Z","_content":"\n# 0X00 多线程\n多线程是个提高程序运行效率的好办法，本来要顺序执行的程序现在可以并行执行，可想而知效率要提高很多。但是多线程也不是能提高所有程序的效率。程序的两个极端是‘CPU密集型’和‘I/O密集型’两种，多线程技术比较适用于后者，因为在串行结构中当你去读写磁盘或者网络通信的时候CPU是闲着的，毕竟网络比磁盘要慢几个数量级，磁盘比内存慢几个数量级，内存又比CPU慢几个数量级。多线程技术就可以同时执行，比如你的程序需要发送N个http数据包（10秒），还需要将文件从一个位置复制到另一个位置（20秒），然后还需要统计另一个文件中'hello,world'字符串的出现次数（4秒），现在一共是要用34秒。但是因为这些操作之间没有关联，所以可以写成多线程程序，几乎只需要20秒就完成了。这是针对I/O密集型的，如果是CPU密集型的就不行了。比如我的程序要计算1000的阶乘（10秒），还要计算100000的累加（5秒），那么即使程序是并行的，还是会要用15秒，甚至更多。因为当程序使用CPU的时候CPU是通过轮转来执行的，IO密集型的程序可以在IO的同时用CPU计算，但是这里的CPU密集型就只能先执行一会儿线程1再执行一会儿线程2。所以就需要15秒，甚至会更多，因为CPU在切换的时候需要耗时。解决CPU密集型程序的多线程问题就是CPU的事情了，比如Intel的超线程技术，可以在同一个核心上真正的并行两个线程，所以称之为‘双核四线程’或者‘四核八线程’，我们这里具体的先不谈，谈我也不知道。\n\n# 0X01 Python骗人\n说了这么多多线程的好处，但是其实Python不支持真正意义上的多线程编程。在Python中有一个叫做GIL的东西，中文是 *全局解释器锁* ，这东西控制了Python，让Python只能同时运行一个线程。相当于说真正意义上的多线程是由CPU来控制的，Python中的多线程由GIL控制。如果有一个CPU密集型程序，用C语言写的，运行在一个四核处理器上，采用多线程技术的话最多可以获得4倍的效率提升，但是如果用Python写的话并不会有提高，甚至会变慢，因为线程切换的问题。所以Python多线程相对更加适合写I/O密集型程序，再说了真正的对效率要求很高的CPU密集型程序都用C/C++去了。\n\n# 0X02 第一个多线程\nPython中多线程的库一般用`thread`和`threading`这两个，`thread`不推荐新手和一般人使用，`threading`模块就相当够用了。\n有一个程序，如下。两个循环，分别休眠3秒和5秒，串行执行的话需要8秒。\n```Python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport time\n\n\ndef sleep_3():\n    time.sleep(3)\n\n\ndef sleep_5():\n    time.sleep(5)\n\nif __name__ == '__main__':\n    start_time = time.time()\n    print 'start sleep 3'\n    sleep_3()\n    print 'start sleep 5'\n    sleep_5()\n    end_time = time.time()\n    print str(end_time - start_time) + ' s'\n```\n输出是这样的\n```bash\nstart sleep 3\nstart sleep 5\n8.00100016594 s\n```\n然后我们对它进行修改，使其变成多线程程序，虽然改动没有几行。首先引入了threading的库，然后实例化一个threading.Thread对象，将一个函数传进构造方法就行了。然后调用Thread的start方法开始一个线程。join()方法可以等待该线程结束，就像我下面用的，如果我不加那两个等待线程结束的代码，那么就会直接执行输出时间的语句，这样一来统计的时间就不对了。\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport time\nimport threading    # 引入threading\n\n\ndef sleep_3():\n    time.sleep(3)\n\n\ndef sleep_5():\n    time.sleep(5)\n\nif __name__ == '__main__':\n    start_time = time.time()\n    print 'start sleep 3'\n    thread_1 = threading.Thread(target=sleep_3)     # 实例化一个线程对象，使线程执行这个函数\n    thread_1.start()        # 启动这个线程\n    print 'start sleep 5'\n    thread_2 = threading.Thread(target=sleep_5)     # 实例化一个线程对象，使线程执行这个函数\n    thread_2.start()        # 启动这个线程\n    thread_1.join()     # 等待thread_1结束\n    thread_2.join()     # 等待thread_2结束\n    end_time = time.time()\n    print str(end_time - start_time) + ' s'\n```\n执行结果是这样的\n```bash\nstart sleep 3\nstart sleep 5\n5.00099992752 s\n```\n\n# 0X03 daemon 守护线程\n在我们理解中守护线程应该是很重要的，类比于Linux中的守护进程。但是在`threading.Thread`中偏偏不是。\n> 如果把一个线程设置为守护线程，就表示这个线程是不重要的，进程退出的时候不需要等待这个线程执行完成。 ---------《Python核心编程 第三版》\n\n在Thread对象中默认所有线程都是非守护线程，这里有两个例子说明区别。这段代码执行的时候就没指定`my_thread`的`daemon`属性，所以默认为非守护，所以进程等待他结束。最后就可以看到100个hello,world\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport threading\n\n\ndef hello_world():\n    for i in range(100):\n        print 'hello,world'\n\n\nif __name__ == '__main__':\n    my_thread = threading.Thread(target=hello_world)\n    my_thread.start()\n```\n这里设置了`my_thread`为守护线程，所以进程直接就退出了，并没有等待他的结束，所以我们看不到100个hello,world只有几个而已。甚至还会抛出一个异常告诉我们有线程没结束。\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport threading\n\n\ndef hello_world():\n    for i in range(100):\n        print 'hello,world'\n\n\nif __name__ == '__main__':\n    my_thread = threading.Thread(target=hello_world)\n    my_thread.daemon = True   # 设置了标志位True\n    my_thread.start()\n```\n\n# 0X04 传个参数\n之前的代码都是直接执行一段代码，没有过参数的传递，那么怎么传递参数呢？其实还是很简单的。`threading.Thread(target=hello_world, args=('hello,', 'world'))`就可以了。args后面跟的是一个元组，如果没有参数可以不写，如果有参数就直接在元组里按顺序添加就行了。\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport threading\n\n\ndef hello_world(str_1, str_2):\n    for i in range(10):\n        print str_1 + str_2\n\nif __name__ == '__main__':\n    my_thread = threading.Thread(target=hello_world, args=('hello,', 'world'))    # 这里传递参数\n    my_thread.start()\n```\n\n\n# 0X05 再来个多线程\nthreading有三种创建Thread对象的方式，但是一般只会用到两种，一种是上面`0X02`说的传个函数进去，另一种就是这里说的继承`threading.Thread`。在这儿我们自己定义了两个类，类里重写了run()方法，也就是调用start()之后执行的代码，开启线程就和之前开启是一样的。之前的方式更面向过程，这个更面向对象。\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport threading\n\n\nclass MyThreadHello(threading.Thread):\n\n    def run(self):\n        for i in range(100):\n            print 'hello'\n\n\nclass MyThreadWorld(threading.Thread):\n\n    def run(self):\n        for i in range(100):\n            print 'world'\n\nif __name__ == '__main__':\n    thread_hello = MyThreadHello()\n    thread_world = MyThreadWorld()\n    thread_hello.start()\n    thread_world.start()\n```\n","source":"_posts/python_threading.md","raw":"---\ntitle: Python使用threading实现多线程\ndate: 2016-12-12 15:39\n---\n\n# 0X00 多线程\n多线程是个提高程序运行效率的好办法，本来要顺序执行的程序现在可以并行执行，可想而知效率要提高很多。但是多线程也不是能提高所有程序的效率。程序的两个极端是‘CPU密集型’和‘I/O密集型’两种，多线程技术比较适用于后者，因为在串行结构中当你去读写磁盘或者网络通信的时候CPU是闲着的，毕竟网络比磁盘要慢几个数量级，磁盘比内存慢几个数量级，内存又比CPU慢几个数量级。多线程技术就可以同时执行，比如你的程序需要发送N个http数据包（10秒），还需要将文件从一个位置复制到另一个位置（20秒），然后还需要统计另一个文件中'hello,world'字符串的出现次数（4秒），现在一共是要用34秒。但是因为这些操作之间没有关联，所以可以写成多线程程序，几乎只需要20秒就完成了。这是针对I/O密集型的，如果是CPU密集型的就不行了。比如我的程序要计算1000的阶乘（10秒），还要计算100000的累加（5秒），那么即使程序是并行的，还是会要用15秒，甚至更多。因为当程序使用CPU的时候CPU是通过轮转来执行的，IO密集型的程序可以在IO的同时用CPU计算，但是这里的CPU密集型就只能先执行一会儿线程1再执行一会儿线程2。所以就需要15秒，甚至会更多，因为CPU在切换的时候需要耗时。解决CPU密集型程序的多线程问题就是CPU的事情了，比如Intel的超线程技术，可以在同一个核心上真正的并行两个线程，所以称之为‘双核四线程’或者‘四核八线程’，我们这里具体的先不谈，谈我也不知道。\n\n# 0X01 Python骗人\n说了这么多多线程的好处，但是其实Python不支持真正意义上的多线程编程。在Python中有一个叫做GIL的东西，中文是 *全局解释器锁* ，这东西控制了Python，让Python只能同时运行一个线程。相当于说真正意义上的多线程是由CPU来控制的，Python中的多线程由GIL控制。如果有一个CPU密集型程序，用C语言写的，运行在一个四核处理器上，采用多线程技术的话最多可以获得4倍的效率提升，但是如果用Python写的话并不会有提高，甚至会变慢，因为线程切换的问题。所以Python多线程相对更加适合写I/O密集型程序，再说了真正的对效率要求很高的CPU密集型程序都用C/C++去了。\n\n# 0X02 第一个多线程\nPython中多线程的库一般用`thread`和`threading`这两个，`thread`不推荐新手和一般人使用，`threading`模块就相当够用了。\n有一个程序，如下。两个循环，分别休眠3秒和5秒，串行执行的话需要8秒。\n```Python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport time\n\n\ndef sleep_3():\n    time.sleep(3)\n\n\ndef sleep_5():\n    time.sleep(5)\n\nif __name__ == '__main__':\n    start_time = time.time()\n    print 'start sleep 3'\n    sleep_3()\n    print 'start sleep 5'\n    sleep_5()\n    end_time = time.time()\n    print str(end_time - start_time) + ' s'\n```\n输出是这样的\n```bash\nstart sleep 3\nstart sleep 5\n8.00100016594 s\n```\n然后我们对它进行修改，使其变成多线程程序，虽然改动没有几行。首先引入了threading的库，然后实例化一个threading.Thread对象，将一个函数传进构造方法就行了。然后调用Thread的start方法开始一个线程。join()方法可以等待该线程结束，就像我下面用的，如果我不加那两个等待线程结束的代码，那么就会直接执行输出时间的语句，这样一来统计的时间就不对了。\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport time\nimport threading    # 引入threading\n\n\ndef sleep_3():\n    time.sleep(3)\n\n\ndef sleep_5():\n    time.sleep(5)\n\nif __name__ == '__main__':\n    start_time = time.time()\n    print 'start sleep 3'\n    thread_1 = threading.Thread(target=sleep_3)     # 实例化一个线程对象，使线程执行这个函数\n    thread_1.start()        # 启动这个线程\n    print 'start sleep 5'\n    thread_2 = threading.Thread(target=sleep_5)     # 实例化一个线程对象，使线程执行这个函数\n    thread_2.start()        # 启动这个线程\n    thread_1.join()     # 等待thread_1结束\n    thread_2.join()     # 等待thread_2结束\n    end_time = time.time()\n    print str(end_time - start_time) + ' s'\n```\n执行结果是这样的\n```bash\nstart sleep 3\nstart sleep 5\n5.00099992752 s\n```\n\n# 0X03 daemon 守护线程\n在我们理解中守护线程应该是很重要的，类比于Linux中的守护进程。但是在`threading.Thread`中偏偏不是。\n> 如果把一个线程设置为守护线程，就表示这个线程是不重要的，进程退出的时候不需要等待这个线程执行完成。 ---------《Python核心编程 第三版》\n\n在Thread对象中默认所有线程都是非守护线程，这里有两个例子说明区别。这段代码执行的时候就没指定`my_thread`的`daemon`属性，所以默认为非守护，所以进程等待他结束。最后就可以看到100个hello,world\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport threading\n\n\ndef hello_world():\n    for i in range(100):\n        print 'hello,world'\n\n\nif __name__ == '__main__':\n    my_thread = threading.Thread(target=hello_world)\n    my_thread.start()\n```\n这里设置了`my_thread`为守护线程，所以进程直接就退出了，并没有等待他的结束，所以我们看不到100个hello,world只有几个而已。甚至还会抛出一个异常告诉我们有线程没结束。\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport threading\n\n\ndef hello_world():\n    for i in range(100):\n        print 'hello,world'\n\n\nif __name__ == '__main__':\n    my_thread = threading.Thread(target=hello_world)\n    my_thread.daemon = True   # 设置了标志位True\n    my_thread.start()\n```\n\n# 0X04 传个参数\n之前的代码都是直接执行一段代码，没有过参数的传递，那么怎么传递参数呢？其实还是很简单的。`threading.Thread(target=hello_world, args=('hello,', 'world'))`就可以了。args后面跟的是一个元组，如果没有参数可以不写，如果有参数就直接在元组里按顺序添加就行了。\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport threading\n\n\ndef hello_world(str_1, str_2):\n    for i in range(10):\n        print str_1 + str_2\n\nif __name__ == '__main__':\n    my_thread = threading.Thread(target=hello_world, args=('hello,', 'world'))    # 这里传递参数\n    my_thread.start()\n```\n\n\n# 0X05 再来个多线程\nthreading有三种创建Thread对象的方式，但是一般只会用到两种，一种是上面`0X02`说的传个函数进去，另一种就是这里说的继承`threading.Thread`。在这儿我们自己定义了两个类，类里重写了run()方法，也就是调用start()之后执行的代码，开启线程就和之前开启是一样的。之前的方式更面向过程，这个更面向对象。\n```python\n#!/usr/bin/env python\n# coding=utf-8\n\nimport threading\n\n\nclass MyThreadHello(threading.Thread):\n\n    def run(self):\n        for i in range(100):\n            print 'hello'\n\n\nclass MyThreadWorld(threading.Thread):\n\n    def run(self):\n        for i in range(100):\n            print 'world'\n\nif __name__ == '__main__':\n    thread_hello = MyThreadHello()\n    thread_world = MyThreadWorld()\n    thread_hello.start()\n    thread_world.start()\n```\n","slug":"python_threading","published":1,"updated":"2017-09-02T14:20:27.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmem0021hnlpljeo1pqk","content":"<h1 id=\"0X00-多线程\"><a href=\"#0X00-多线程\" class=\"headerlink\" title=\"0X00 多线程\"></a>0X00 多线程</h1><p>多线程是个提高程序运行效率的好办法，本来要顺序执行的程序现在可以并行执行，可想而知效率要提高很多。但是多线程也不是能提高所有程序的效率。程序的两个极端是‘CPU密集型’和‘I/O密集型’两种，多线程技术比较适用于后者，因为在串行结构中当你去读写磁盘或者网络通信的时候CPU是闲着的，毕竟网络比磁盘要慢几个数量级，磁盘比内存慢几个数量级，内存又比CPU慢几个数量级。多线程技术就可以同时执行，比如你的程序需要发送N个http数据包（10秒），还需要将文件从一个位置复制到另一个位置（20秒），然后还需要统计另一个文件中’hello,world’字符串的出现次数（4秒），现在一共是要用34秒。但是因为这些操作之间没有关联，所以可以写成多线程程序，几乎只需要20秒就完成了。这是针对I/O密集型的，如果是CPU密集型的就不行了。比如我的程序要计算1000的阶乘（10秒），还要计算100000的累加（5秒），那么即使程序是并行的，还是会要用15秒，甚至更多。因为当程序使用CPU的时候CPU是通过轮转来执行的，IO密集型的程序可以在IO的同时用CPU计算，但是这里的CPU密集型就只能先执行一会儿线程1再执行一会儿线程2。所以就需要15秒，甚至会更多，因为CPU在切换的时候需要耗时。解决CPU密集型程序的多线程问题就是CPU的事情了，比如Intel的超线程技术，可以在同一个核心上真正的并行两个线程，所以称之为‘双核四线程’或者‘四核八线程’，我们这里具体的先不谈，谈我也不知道。</p>\n<h1 id=\"0X01-Python骗人\"><a href=\"#0X01-Python骗人\" class=\"headerlink\" title=\"0X01 Python骗人\"></a>0X01 Python骗人</h1><p>说了这么多多线程的好处，但是其实Python不支持真正意义上的多线程编程。在Python中有一个叫做GIL的东西，中文是 <em>全局解释器锁</em> ，这东西控制了Python，让Python只能同时运行一个线程。相当于说真正意义上的多线程是由CPU来控制的，Python中的多线程由GIL控制。如果有一个CPU密集型程序，用C语言写的，运行在一个四核处理器上，采用多线程技术的话最多可以获得4倍的效率提升，但是如果用Python写的话并不会有提高，甚至会变慢，因为线程切换的问题。所以Python多线程相对更加适合写I/O密集型程序，再说了真正的对效率要求很高的CPU密集型程序都用C/C++去了。</p>\n<h1 id=\"0X02-第一个多线程\"><a href=\"#0X02-第一个多线程\" class=\"headerlink\" title=\"0X02 第一个多线程\"></a>0X02 第一个多线程</h1><p>Python中多线程的库一般用<code>thread</code>和<code>threading</code>这两个，<code>thread</code>不推荐新手和一般人使用，<code>threading</code>模块就相当够用了。<br>有一个程序，如下。两个循环，分别休眠3秒和5秒，串行执行的话需要8秒。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep_3</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep_5</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    start_time = time.time()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'start sleep 3'</span></div><div class=\"line\">    sleep_3()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'start sleep 5'</span></div><div class=\"line\">    sleep_5()</div><div class=\"line\">    end_time = time.time()</div><div class=\"line\">    <span class=\"keyword\">print</span> str(end_time - start_time) + <span class=\"string\">' s'</span></div></pre></td></tr></table></figure></p>\n<p>输出是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">start sleep 3</div><div class=\"line\">start sleep 5</div><div class=\"line\">8.00100016594 s</div></pre></td></tr></table></figure></p>\n<p>然后我们对它进行修改，使其变成多线程程序，虽然改动没有几行。首先引入了threading的库，然后实例化一个threading.Thread对象，将一个函数传进构造方法就行了。然后调用Thread的start方法开始一个线程。join()方法可以等待该线程结束，就像我下面用的，如果我不加那两个等待线程结束的代码，那么就会直接执行输出时间的语句，这样一来统计的时间就不对了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> threading    <span class=\"comment\"># 引入threading</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep_3</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep_5</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    start_time = time.time()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'start sleep 3'</span></div><div class=\"line\">    thread_1 = threading.Thread(target=sleep_3)     <span class=\"comment\"># 实例化一个线程对象，使线程执行这个函数</span></div><div class=\"line\">    thread_1.start()        <span class=\"comment\"># 启动这个线程</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'start sleep 5'</span></div><div class=\"line\">    thread_2 = threading.Thread(target=sleep_5)     <span class=\"comment\"># 实例化一个线程对象，使线程执行这个函数</span></div><div class=\"line\">    thread_2.start()        <span class=\"comment\"># 启动这个线程</span></div><div class=\"line\">    thread_1.join()     <span class=\"comment\"># 等待thread_1结束</span></div><div class=\"line\">    thread_2.join()     <span class=\"comment\"># 等待thread_2结束</span></div><div class=\"line\">    end_time = time.time()</div><div class=\"line\">    <span class=\"keyword\">print</span> str(end_time - start_time) + <span class=\"string\">' s'</span></div></pre></td></tr></table></figure></p>\n<p>执行结果是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">start sleep 3</div><div class=\"line\">start sleep 5</div><div class=\"line\">5.00099992752 s</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-daemon-守护线程\"><a href=\"#0X03-daemon-守护线程\" class=\"headerlink\" title=\"0X03 daemon 守护线程\"></a>0X03 daemon 守护线程</h1><p>在我们理解中守护线程应该是很重要的，类比于Linux中的守护进程。但是在<code>threading.Thread</code>中偏偏不是。</p>\n<blockquote>\n<p>如果把一个线程设置为守护线程，就表示这个线程是不重要的，进程退出的时候不需要等待这个线程执行完成。 ———《Python核心编程 第三版》</p>\n</blockquote>\n<p>在Thread对象中默认所有线程都是非守护线程，这里有两个例子说明区别。这段代码执行的时候就没指定<code>my_thread</code>的<code>daemon</code>属性，所以默认为非守护，所以进程等待他结束。最后就可以看到100个hello,world<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_thread = threading.Thread(target=hello_world)</div><div class=\"line\">    my_thread.start()</div></pre></td></tr></table></figure></p>\n<p>这里设置了<code>my_thread</code>为守护线程，所以进程直接就退出了，并没有等待他的结束，所以我们看不到100个hello,world只有几个而已。甚至还会抛出一个异常告诉我们有线程没结束。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_thread = threading.Thread(target=hello_world)</div><div class=\"line\">    my_thread.daemon = <span class=\"keyword\">True</span>   <span class=\"comment\"># 设置了标志位True</span></div><div class=\"line\">    my_thread.start()</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-传个参数\"><a href=\"#0X04-传个参数\" class=\"headerlink\" title=\"0X04 传个参数\"></a>0X04 传个参数</h1><p>之前的代码都是直接执行一段代码，没有过参数的传递，那么怎么传递参数呢？其实还是很简单的。<code>threading.Thread(target=hello_world, args=(&#39;hello,&#39;, &#39;world&#39;))</code>就可以了。args后面跟的是一个元组，如果没有参数可以不写，如果有参数就直接在元组里按顺序添加就行了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">(str_1, str_2)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> str_1 + str_2</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_thread = threading.Thread(target=hello_world, args=(<span class=\"string\">'hello,'</span>, <span class=\"string\">'world'</span>))    <span class=\"comment\"># 这里传递参数</span></div><div class=\"line\">    my_thread.start()</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-再来个多线程\"><a href=\"#0X05-再来个多线程\" class=\"headerlink\" title=\"0X05 再来个多线程\"></a>0X05 再来个多线程</h1><p>threading有三种创建Thread对象的方式，但是一般只会用到两种，一种是上面<code>0X02</code>说的传个函数进去，另一种就是这里说的继承<code>threading.Thread</code>。在这儿我们自己定义了两个类，类里重写了run()方法，也就是调用start()之后执行的代码，开启线程就和之前开启是一样的。之前的方式更面向过程，这个更面向对象。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadHello</span><span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'hello'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadWorld</span><span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'world'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    thread_hello = MyThreadHello()</div><div class=\"line\">    thread_world = MyThreadWorld()</div><div class=\"line\">    thread_hello.start()</div><div class=\"line\">    thread_world.start()</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-多线程\"><a href=\"#0X00-多线程\" class=\"headerlink\" title=\"0X00 多线程\"></a>0X00 多线程</h1><p>多线程是个提高程序运行效率的好办法，本来要顺序执行的程序现在可以并行执行，可想而知效率要提高很多。但是多线程也不是能提高所有程序的效率。程序的两个极端是‘CPU密集型’和‘I/O密集型’两种，多线程技术比较适用于后者，因为在串行结构中当你去读写磁盘或者网络通信的时候CPU是闲着的，毕竟网络比磁盘要慢几个数量级，磁盘比内存慢几个数量级，内存又比CPU慢几个数量级。多线程技术就可以同时执行，比如你的程序需要发送N个http数据包（10秒），还需要将文件从一个位置复制到另一个位置（20秒），然后还需要统计另一个文件中’hello,world’字符串的出现次数（4秒），现在一共是要用34秒。但是因为这些操作之间没有关联，所以可以写成多线程程序，几乎只需要20秒就完成了。这是针对I/O密集型的，如果是CPU密集型的就不行了。比如我的程序要计算1000的阶乘（10秒），还要计算100000的累加（5秒），那么即使程序是并行的，还是会要用15秒，甚至更多。因为当程序使用CPU的时候CPU是通过轮转来执行的，IO密集型的程序可以在IO的同时用CPU计算，但是这里的CPU密集型就只能先执行一会儿线程1再执行一会儿线程2。所以就需要15秒，甚至会更多，因为CPU在切换的时候需要耗时。解决CPU密集型程序的多线程问题就是CPU的事情了，比如Intel的超线程技术，可以在同一个核心上真正的并行两个线程，所以称之为‘双核四线程’或者‘四核八线程’，我们这里具体的先不谈，谈我也不知道。</p>\n<h1 id=\"0X01-Python骗人\"><a href=\"#0X01-Python骗人\" class=\"headerlink\" title=\"0X01 Python骗人\"></a>0X01 Python骗人</h1><p>说了这么多多线程的好处，但是其实Python不支持真正意义上的多线程编程。在Python中有一个叫做GIL的东西，中文是 <em>全局解释器锁</em> ，这东西控制了Python，让Python只能同时运行一个线程。相当于说真正意义上的多线程是由CPU来控制的，Python中的多线程由GIL控制。如果有一个CPU密集型程序，用C语言写的，运行在一个四核处理器上，采用多线程技术的话最多可以获得4倍的效率提升，但是如果用Python写的话并不会有提高，甚至会变慢，因为线程切换的问题。所以Python多线程相对更加适合写I/O密集型程序，再说了真正的对效率要求很高的CPU密集型程序都用C/C++去了。</p>\n<h1 id=\"0X02-第一个多线程\"><a href=\"#0X02-第一个多线程\" class=\"headerlink\" title=\"0X02 第一个多线程\"></a>0X02 第一个多线程</h1><p>Python中多线程的库一般用<code>thread</code>和<code>threading</code>这两个，<code>thread</code>不推荐新手和一般人使用，<code>threading</code>模块就相当够用了。<br>有一个程序，如下。两个循环，分别休眠3秒和5秒，串行执行的话需要8秒。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep_3</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep_5</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    start_time = time.time()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'start sleep 3'</span></div><div class=\"line\">    sleep_3()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'start sleep 5'</span></div><div class=\"line\">    sleep_5()</div><div class=\"line\">    end_time = time.time()</div><div class=\"line\">    <span class=\"keyword\">print</span> str(end_time - start_time) + <span class=\"string\">' s'</span></div></pre></td></tr></table></figure></p>\n<p>输出是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">start sleep 3</div><div class=\"line\">start sleep 5</div><div class=\"line\">8.00100016594 s</div></pre></td></tr></table></figure></p>\n<p>然后我们对它进行修改，使其变成多线程程序，虽然改动没有几行。首先引入了threading的库，然后实例化一个threading.Thread对象，将一个函数传进构造方法就行了。然后调用Thread的start方法开始一个线程。join()方法可以等待该线程结束，就像我下面用的，如果我不加那两个等待线程结束的代码，那么就会直接执行输出时间的语句，这样一来统计的时间就不对了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> threading    <span class=\"comment\"># 引入threading</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep_3</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sleep_5</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    time.sleep(<span class=\"number\">5</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    start_time = time.time()</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'start sleep 3'</span></div><div class=\"line\">    thread_1 = threading.Thread(target=sleep_3)     <span class=\"comment\"># 实例化一个线程对象，使线程执行这个函数</span></div><div class=\"line\">    thread_1.start()        <span class=\"comment\"># 启动这个线程</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'start sleep 5'</span></div><div class=\"line\">    thread_2 = threading.Thread(target=sleep_5)     <span class=\"comment\"># 实例化一个线程对象，使线程执行这个函数</span></div><div class=\"line\">    thread_2.start()        <span class=\"comment\"># 启动这个线程</span></div><div class=\"line\">    thread_1.join()     <span class=\"comment\"># 等待thread_1结束</span></div><div class=\"line\">    thread_2.join()     <span class=\"comment\"># 等待thread_2结束</span></div><div class=\"line\">    end_time = time.time()</div><div class=\"line\">    <span class=\"keyword\">print</span> str(end_time - start_time) + <span class=\"string\">' s'</span></div></pre></td></tr></table></figure></p>\n<p>执行结果是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">start sleep 3</div><div class=\"line\">start sleep 5</div><div class=\"line\">5.00099992752 s</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-daemon-守护线程\"><a href=\"#0X03-daemon-守护线程\" class=\"headerlink\" title=\"0X03 daemon 守护线程\"></a>0X03 daemon 守护线程</h1><p>在我们理解中守护线程应该是很重要的，类比于Linux中的守护进程。但是在<code>threading.Thread</code>中偏偏不是。</p>\n<blockquote>\n<p>如果把一个线程设置为守护线程，就表示这个线程是不重要的，进程退出的时候不需要等待这个线程执行完成。 ———《Python核心编程 第三版》</p>\n</blockquote>\n<p>在Thread对象中默认所有线程都是非守护线程，这里有两个例子说明区别。这段代码执行的时候就没指定<code>my_thread</code>的<code>daemon</code>属性，所以默认为非守护，所以进程等待他结束。最后就可以看到100个hello,world<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_thread = threading.Thread(target=hello_world)</div><div class=\"line\">    my_thread.start()</div></pre></td></tr></table></figure></p>\n<p>这里设置了<code>my_thread</code>为守护线程，所以进程直接就退出了，并没有等待他的结束，所以我们看不到100个hello,world只有几个而已。甚至还会抛出一个异常告诉我们有线程没结束。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'hello,world'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_thread = threading.Thread(target=hello_world)</div><div class=\"line\">    my_thread.daemon = <span class=\"keyword\">True</span>   <span class=\"comment\"># 设置了标志位True</span></div><div class=\"line\">    my_thread.start()</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-传个参数\"><a href=\"#0X04-传个参数\" class=\"headerlink\" title=\"0X04 传个参数\"></a>0X04 传个参数</h1><p>之前的代码都是直接执行一段代码，没有过参数的传递，那么怎么传递参数呢？其实还是很简单的。<code>threading.Thread(target=hello_world, args=(&#39;hello,&#39;, &#39;world&#39;))</code>就可以了。args后面跟的是一个元组，如果没有参数可以不写，如果有参数就直接在元组里按顺序添加就行了。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">(str_1, str_2)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">        <span class=\"keyword\">print</span> str_1 + str_2</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    my_thread = threading.Thread(target=hello_world, args=(<span class=\"string\">'hello,'</span>, <span class=\"string\">'world'</span>))    <span class=\"comment\"># 这里传递参数</span></div><div class=\"line\">    my_thread.start()</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-再来个多线程\"><a href=\"#0X05-再来个多线程\" class=\"headerlink\" title=\"0X05 再来个多线程\"></a>0X05 再来个多线程</h1><p>threading有三种创建Thread对象的方式，但是一般只会用到两种，一种是上面<code>0X02</code>说的传个函数进去，另一种就是这里说的继承<code>threading.Thread</code>。在这儿我们自己定义了两个类，类里重写了run()方法，也就是调用start()之后执行的代码，开启线程就和之前开启是一样的。之前的方式更面向过程，这个更面向对象。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadHello</span><span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'hello'</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThreadWorld</span><span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</div><div class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">'world'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    thread_hello = MyThreadHello()</div><div class=\"line\">    thread_world = MyThreadWorld()</div><div class=\"line\">    thread_hello.start()</div><div class=\"line\">    thread_world.start()</div></pre></td></tr></table></figure></p>\n"},{"title":"python_virtualenvwapper","date":"2017-09-19T16:52:50.000Z","_content":"\n# 0X00 virtualenv好用但有瓶颈\nvirtualenv固然好用，可以给你每一个Python项目创建一个独立的Python环境互不干扰。有三五个Python项目的时候用的很开心，有十几个项目的时候还凑合，如果有更多的项目virtualenv就会出现瓶颈。因为virtualenv会给每一个Python虚拟环境创建一个目录来保存相关文件，项目一多这个虚拟环境的目录也就多了起来，每次在多个环境之间`source ../../../xxx/bin/active` 和 `deactive` 也挺烦的，并且很容易把某些环境搞丢。不过开源世界最不缺的就是解决问题的方法了，既然有人遇到了这个问题，那么八成就已经有了解决这个问题的好办法。\n\n\n# 0X01 virtualenvwrapper\n这个东西名字确实有点长，顾名思义就是把virtualenv包装起来。首先来安装一波这个东西\n```\nsudo apt install virtualenvwrapper  # Debian系\n\nsudo yum install virtualenvwrapper  # RHEL系\n```\n安装好后要进行简单的配置\n```\nvim ~/.bashrc # 添加一条环境变量，可以根据自己用的shell来修改\n```\n向文件中添加 `WORKON_HOME=~/Envs` 表示将未来所有的虚拟环境都放在 `~/Envs` 中。然后创建这个目录 `mkdir -p $WORKON_HOME` 。最后`source`一下安装文件，`source /usr/bin/virtualenvwrapper.sh` 会显示创建了很多文件，到这里就安装完成了。\n如果`source`的时候没有这个`virtualenvwrapper.sh`文件，那就用`which virtualenvwrapper.sh`找一下，不过八成都是在`/usr/bin/virtualenvwrapper.sh`\n\n\n# 0X02 把它用起来\n以前用`virtualenv`的时候要每次`source xxx/bin/active`，用完了再`deactive`，这次就方便多了。下面列出几个常用命令。\n\n| 命令 | 功能 |\n| -- |\n| mkvirtualenv blog | 创建一个名为blog的虚拟环境，并切换过去 |\n| workon blog | 切换到名为blog的虚拟环境中 |\n| workon | 列出当前所有的虚拟环境 |\n| rmvirtualenv blog | 删除名为blog的虚拟环境 |\n| deactive | 退出当前所处的虚拟环境 |\n\n下面演示一下这个用法\n```bash\n# 创建一个新的虚拟环境，名为blog\n[root@localhost ~]# mkvirtualenv blog\nNew python executable in blog/bin/python\nInstalling Setuptools..............................................................................................................................................................................................................................done.\nInstalling Pip.....................................................................................................................................................................................................................................................................................................................................done.\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/predeactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/postdeactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/preactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/postactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/get_env_details\n\n# 创建一个新的虚拟环境，名为student_admin\n(blog)[root@localhost ~]# mkvirtualenv student_admin\nNew python executable in student_admin/bin/python\nInstalling Setuptools..............................................................................................................................................................................................................................done.\nInstalling Pip.....................................................................................................................................................................................................................................................................................................................................done.\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/predeactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/postdeactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/preactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/postactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/get_env_details\n\n# 查看所有的虚拟环境\n(student_admin)[root@localhost ~]# workon\nblog\nstudent_admin\n\n# 切换到blog环境\n(student_admin)[root@localhost ~]# workon blog\n\n# 删除student_admin环境\n(blog)[root@localhost ~]# rmvirtualenv student_admin\nRemoving student_admin...\n\n# 再看一下所有环境，student_admin已经不在了\n(blog)[root@localhost ~]# workon\nblog\n\n# 退出当前环境\n(blog)[root@localhost ~]# deactivate \n[root@localhost ~]# \n```\n`` ````\n","source":"_posts/python_virtualenvwapper.md","raw":"---\ntitle: python_virtualenvwapper\ndate: 2017-09-20 00:52:50\ntags:\n    - Python\n    - Virtualenvwapper\n---\n\n# 0X00 virtualenv好用但有瓶颈\nvirtualenv固然好用，可以给你每一个Python项目创建一个独立的Python环境互不干扰。有三五个Python项目的时候用的很开心，有十几个项目的时候还凑合，如果有更多的项目virtualenv就会出现瓶颈。因为virtualenv会给每一个Python虚拟环境创建一个目录来保存相关文件，项目一多这个虚拟环境的目录也就多了起来，每次在多个环境之间`source ../../../xxx/bin/active` 和 `deactive` 也挺烦的，并且很容易把某些环境搞丢。不过开源世界最不缺的就是解决问题的方法了，既然有人遇到了这个问题，那么八成就已经有了解决这个问题的好办法。\n\n\n# 0X01 virtualenvwrapper\n这个东西名字确实有点长，顾名思义就是把virtualenv包装起来。首先来安装一波这个东西\n```\nsudo apt install virtualenvwrapper  # Debian系\n\nsudo yum install virtualenvwrapper  # RHEL系\n```\n安装好后要进行简单的配置\n```\nvim ~/.bashrc # 添加一条环境变量，可以根据自己用的shell来修改\n```\n向文件中添加 `WORKON_HOME=~/Envs` 表示将未来所有的虚拟环境都放在 `~/Envs` 中。然后创建这个目录 `mkdir -p $WORKON_HOME` 。最后`source`一下安装文件，`source /usr/bin/virtualenvwrapper.sh` 会显示创建了很多文件，到这里就安装完成了。\n如果`source`的时候没有这个`virtualenvwrapper.sh`文件，那就用`which virtualenvwrapper.sh`找一下，不过八成都是在`/usr/bin/virtualenvwrapper.sh`\n\n\n# 0X02 把它用起来\n以前用`virtualenv`的时候要每次`source xxx/bin/active`，用完了再`deactive`，这次就方便多了。下面列出几个常用命令。\n\n| 命令 | 功能 |\n| -- |\n| mkvirtualenv blog | 创建一个名为blog的虚拟环境，并切换过去 |\n| workon blog | 切换到名为blog的虚拟环境中 |\n| workon | 列出当前所有的虚拟环境 |\n| rmvirtualenv blog | 删除名为blog的虚拟环境 |\n| deactive | 退出当前所处的虚拟环境 |\n\n下面演示一下这个用法\n```bash\n# 创建一个新的虚拟环境，名为blog\n[root@localhost ~]# mkvirtualenv blog\nNew python executable in blog/bin/python\nInstalling Setuptools..............................................................................................................................................................................................................................done.\nInstalling Pip.....................................................................................................................................................................................................................................................................................................................................done.\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/predeactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/postdeactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/preactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/postactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/blog/bin/get_env_details\n\n# 创建一个新的虚拟环境，名为student_admin\n(blog)[root@localhost ~]# mkvirtualenv student_admin\nNew python executable in student_admin/bin/python\nInstalling Setuptools..............................................................................................................................................................................................................................done.\nInstalling Pip.....................................................................................................................................................................................................................................................................................................................................done.\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/predeactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/postdeactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/preactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/postactivate\nvirtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/get_env_details\n\n# 查看所有的虚拟环境\n(student_admin)[root@localhost ~]# workon\nblog\nstudent_admin\n\n# 切换到blog环境\n(student_admin)[root@localhost ~]# workon blog\n\n# 删除student_admin环境\n(blog)[root@localhost ~]# rmvirtualenv student_admin\nRemoving student_admin...\n\n# 再看一下所有环境，student_admin已经不在了\n(blog)[root@localhost ~]# workon\nblog\n\n# 退出当前环境\n(blog)[root@localhost ~]# deactivate \n[root@localhost ~]# \n```\n`` ````\n","slug":"python_virtualenvwapper","published":1,"updated":"2017-09-19T16:54:30.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmem0023hnlp4wdpxrbg","content":"<h1 id=\"0X00-virtualenv好用但有瓶颈\"><a href=\"#0X00-virtualenv好用但有瓶颈\" class=\"headerlink\" title=\"0X00 virtualenv好用但有瓶颈\"></a>0X00 virtualenv好用但有瓶颈</h1><p>virtualenv固然好用，可以给你每一个Python项目创建一个独立的Python环境互不干扰。有三五个Python项目的时候用的很开心，有十几个项目的时候还凑合，如果有更多的项目virtualenv就会出现瓶颈。因为virtualenv会给每一个Python虚拟环境创建一个目录来保存相关文件，项目一多这个虚拟环境的目录也就多了起来，每次在多个环境之间<code>source ../../../xxx/bin/active</code> 和 <code>deactive</code> 也挺烦的，并且很容易把某些环境搞丢。不过开源世界最不缺的就是解决问题的方法了，既然有人遇到了这个问题，那么八成就已经有了解决这个问题的好办法。</p>\n<h1 id=\"0X01-virtualenvwrapper\"><a href=\"#0X01-virtualenvwrapper\" class=\"headerlink\" title=\"0X01 virtualenvwrapper\"></a>0X01 virtualenvwrapper</h1><p>这个东西名字确实有点长，顾名思义就是把virtualenv包装起来。首先来安装一波这个东西<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install virtualenvwrapper  # Debian系</div><div class=\"line\"></div><div class=\"line\">sudo yum install virtualenvwrapper  # RHEL系</div></pre></td></tr></table></figure></p>\n<p>安装好后要进行简单的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.bashrc # 添加一条环境变量，可以根据自己用的shell来修改</div></pre></td></tr></table></figure></p>\n<p>向文件中添加 <code>WORKON_HOME=~/Envs</code> 表示将未来所有的虚拟环境都放在 <code>~/Envs</code> 中。然后创建这个目录 <code>mkdir -p $WORKON_HOME</code> 。最后<code>source</code>一下安装文件，<code>source /usr/bin/virtualenvwrapper.sh</code> 会显示创建了很多文件，到这里就安装完成了。<br>如果<code>source</code>的时候没有这个<code>virtualenvwrapper.sh</code>文件，那就用<code>which virtualenvwrapper.sh</code>找一下，不过八成都是在<code>/usr/bin/virtualenvwrapper.sh</code></p>\n<h1 id=\"0X02-把它用起来\"><a href=\"#0X02-把它用起来\" class=\"headerlink\" title=\"0X02 把它用起来\"></a>0X02 把它用起来</h1><p>以前用<code>virtualenv</code>的时候要每次<code>source xxx/bin/active</code>，用完了再<code>deactive</code>，这次就方便多了。下面列出几个常用命令。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mkvirtualenv blog</td>\n<td>创建一个名为blog的虚拟环境，并切换过去</td>\n</tr>\n<tr>\n<td>workon blog</td>\n<td>切换到名为blog的虚拟环境中</td>\n</tr>\n<tr>\n<td>workon</td>\n<td>列出当前所有的虚拟环境</td>\n</tr>\n<tr>\n<td>rmvirtualenv blog</td>\n<td>删除名为blog的虚拟环境</td>\n</tr>\n<tr>\n<td>deactive</td>\n<td>退出当前所处的虚拟环境</td>\n</tr>\n</tbody>\n</table>\n<p>下面演示一下这个用法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建一个新的虚拟环境，名为blog</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># mkvirtualenv blog</span></div><div class=\"line\">New python executable <span class=\"keyword\">in</span> blog/bin/python</div><div class=\"line\">Installing Setuptools..............................................................................................................................................................................................................................done.</div><div class=\"line\">Installing Pip.....................................................................................................................................................................................................................................................................................................................................done.</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/predeactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/postdeactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/preactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/postactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/get_env_details</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建一个新的虚拟环境，名为student_admin</span></div><div class=\"line\">(blog)[root@localhost ~]<span class=\"comment\"># mkvirtualenv student_admin</span></div><div class=\"line\">New python executable <span class=\"keyword\">in</span> student_admin/bin/python</div><div class=\"line\">Installing Setuptools..............................................................................................................................................................................................................................done.</div><div class=\"line\">Installing Pip.....................................................................................................................................................................................................................................................................................................................................done.</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/predeactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/postdeactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/preactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/postactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/get_env_details</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看所有的虚拟环境</span></div><div class=\"line\">(student_admin)[root@localhost ~]<span class=\"comment\"># workon</span></div><div class=\"line\">blog</div><div class=\"line\">student_admin</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 切换到blog环境</span></div><div class=\"line\">(student_admin)[root@localhost ~]<span class=\"comment\"># workon blog</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除student_admin环境</span></div><div class=\"line\">(blog)[root@localhost ~]<span class=\"comment\"># rmvirtualenv student_admin</span></div><div class=\"line\">Removing student_admin...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 再看一下所有环境，student_admin已经不在了</span></div><div class=\"line\">(blog)[root@localhost ~]<span class=\"comment\"># workon</span></div><div class=\"line\">blog</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 退出当前环境</span></div><div class=\"line\">(blog)[root@localhost ~]<span class=\"comment\"># deactivate </span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<p>`` ````</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-virtualenv好用但有瓶颈\"><a href=\"#0X00-virtualenv好用但有瓶颈\" class=\"headerlink\" title=\"0X00 virtualenv好用但有瓶颈\"></a>0X00 virtualenv好用但有瓶颈</h1><p>virtualenv固然好用，可以给你每一个Python项目创建一个独立的Python环境互不干扰。有三五个Python项目的时候用的很开心，有十几个项目的时候还凑合，如果有更多的项目virtualenv就会出现瓶颈。因为virtualenv会给每一个Python虚拟环境创建一个目录来保存相关文件，项目一多这个虚拟环境的目录也就多了起来，每次在多个环境之间<code>source ../../../xxx/bin/active</code> 和 <code>deactive</code> 也挺烦的，并且很容易把某些环境搞丢。不过开源世界最不缺的就是解决问题的方法了，既然有人遇到了这个问题，那么八成就已经有了解决这个问题的好办法。</p>\n<h1 id=\"0X01-virtualenvwrapper\"><a href=\"#0X01-virtualenvwrapper\" class=\"headerlink\" title=\"0X01 virtualenvwrapper\"></a>0X01 virtualenvwrapper</h1><p>这个东西名字确实有点长，顾名思义就是把virtualenv包装起来。首先来安装一波这个东西<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install virtualenvwrapper  # Debian系</div><div class=\"line\"></div><div class=\"line\">sudo yum install virtualenvwrapper  # RHEL系</div></pre></td></tr></table></figure></p>\n<p>安装好后要进行简单的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.bashrc # 添加一条环境变量，可以根据自己用的shell来修改</div></pre></td></tr></table></figure></p>\n<p>向文件中添加 <code>WORKON_HOME=~/Envs</code> 表示将未来所有的虚拟环境都放在 <code>~/Envs</code> 中。然后创建这个目录 <code>mkdir -p $WORKON_HOME</code> 。最后<code>source</code>一下安装文件，<code>source /usr/bin/virtualenvwrapper.sh</code> 会显示创建了很多文件，到这里就安装完成了。<br>如果<code>source</code>的时候没有这个<code>virtualenvwrapper.sh</code>文件，那就用<code>which virtualenvwrapper.sh</code>找一下，不过八成都是在<code>/usr/bin/virtualenvwrapper.sh</code></p>\n<h1 id=\"0X02-把它用起来\"><a href=\"#0X02-把它用起来\" class=\"headerlink\" title=\"0X02 把它用起来\"></a>0X02 把它用起来</h1><p>以前用<code>virtualenv</code>的时候要每次<code>source xxx/bin/active</code>，用完了再<code>deactive</code>，这次就方便多了。下面列出几个常用命令。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mkvirtualenv blog</td>\n<td>创建一个名为blog的虚拟环境，并切换过去</td>\n</tr>\n<tr>\n<td>workon blog</td>\n<td>切换到名为blog的虚拟环境中</td>\n</tr>\n<tr>\n<td>workon</td>\n<td>列出当前所有的虚拟环境</td>\n</tr>\n<tr>\n<td>rmvirtualenv blog</td>\n<td>删除名为blog的虚拟环境</td>\n</tr>\n<tr>\n<td>deactive</td>\n<td>退出当前所处的虚拟环境</td>\n</tr>\n</tbody>\n</table>\n<p>下面演示一下这个用法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 创建一个新的虚拟环境，名为blog</span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\"># mkvirtualenv blog</span></div><div class=\"line\">New python executable <span class=\"keyword\">in</span> blog/bin/python</div><div class=\"line\">Installing Setuptools..............................................................................................................................................................................................................................done.</div><div class=\"line\">Installing Pip.....................................................................................................................................................................................................................................................................................................................................done.</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/predeactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/postdeactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/preactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/postactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/blog/bin/get_env_details</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建一个新的虚拟环境，名为student_admin</span></div><div class=\"line\">(blog)[root@localhost ~]<span class=\"comment\"># mkvirtualenv student_admin</span></div><div class=\"line\">New python executable <span class=\"keyword\">in</span> student_admin/bin/python</div><div class=\"line\">Installing Setuptools..............................................................................................................................................................................................................................done.</div><div class=\"line\">Installing Pip.....................................................................................................................................................................................................................................................................................................................................done.</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/predeactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/postdeactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/preactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/postactivate</div><div class=\"line\">virtualenvwrapper.user_scripts creating /root/Envs/student_admin/bin/get_env_details</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 查看所有的虚拟环境</span></div><div class=\"line\">(student_admin)[root@localhost ~]<span class=\"comment\"># workon</span></div><div class=\"line\">blog</div><div class=\"line\">student_admin</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 切换到blog环境</span></div><div class=\"line\">(student_admin)[root@localhost ~]<span class=\"comment\"># workon blog</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 删除student_admin环境</span></div><div class=\"line\">(blog)[root@localhost ~]<span class=\"comment\"># rmvirtualenv student_admin</span></div><div class=\"line\">Removing student_admin...</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 再看一下所有环境，student_admin已经不在了</span></div><div class=\"line\">(blog)[root@localhost ~]<span class=\"comment\"># workon</span></div><div class=\"line\">blog</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 退出当前环境</span></div><div class=\"line\">(blog)[root@localhost ~]<span class=\"comment\"># deactivate </span></div><div class=\"line\">[root@localhost ~]<span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<p>`` ````</p>\n"},{"title":"Shadowsocks 如何科学上网 搭梯子 简明教程","date":"2016-07-23T04:12:00.000Z","_content":"\n# 0X00 准备工作\n1.一台海外或者香港的服务器/虚拟主机（后面统称VPS），要有独立IP\n2.VPS的带宽和流量不能太小\n3.一个连接VPS的软件，LInux/Mac可以用终端，Windows用户可以用XShell或者putty\n4.VPS要使用Linux系统，Debian/Ubuntu/CentOS都行\n\n>开工之前最好有Linux适用基础\n>没有VPS的推荐一个购买地址，便宜好用[banwagong](http://banwagong.cn/gonglue.html)\n>这个网站不是官网，但是起到了类似中文官网的作用，可以按照里面的推荐和教程去购买适合自己的VPS\n>VPS买回来不止可以干这个、配置高一点的话还可以搭建一个独立博客和一些其他的服务\n\n# 0X01 简述工作原理\n**不通过伟大防火墙时**我们访问某网站，流量从我们的机器一路跑到网站服务器，然后服务器响应数据再一路跑回来。\n现在**有了伟大的防火墙**不让我们和某些网站交流了，我们可以搭一个**梯子**，让流量通过梯子。其实用**镜子**比喻会更好一点。\n**有了镜子**之后，我们的流量一路跑到镜子那里，镜子替我们将流量一路跑到网站服务器，然后网站服务器将数据一路发送到镜子，镜子再转发给我们。\n所以造成下面几个问题：\n1.你终端（电脑、手机等设备）产生的数据流量（代理流量）都要从梯子那里经过，所以梯子也要走一份流量。\n2.你的网速同时取决于 你的速度、VPS的速度、网站服务器的速度\n3.你的延迟同时取决于 你到VPS的延迟，VPS到网站服务器的延迟\n\n# 0X02 安装软件\nDebian/Ubuntu\n```bash\nsudo apt-get update\t\t\t\t#更新系统\nsudo apt-get install python-pip #安装Python-pip\nsudo pip install shadowsocks \t#安装shadowsocks\n```\n\nCentOS\n```bash\nsudo yum update\t\t\t\t\t#更新系统\nsudo yum install python-setuptools && easy_install pip\nsudo pip install shadowsocks\t#安装shadowsocks\n```\n\n# 0X03 修改配置文件\n配置文件默认不存在，我们直接创建一个就行`vim /etc/shadowsocks.json`\n这里配置文件使用Json解析，看起来很清晰，便于识别修改\n```json\n{\n\t    \"server\":\"my_server_ip\",\n\t    \"server_port\":8388,\n\t    \"local_address\": \"127.0.0.1\",\n\t    \"local_port\":1080,\n\t    \"password\":\"mypassword\",\n\t    \"timeout\":300,\n\t    \"method\":\"aes-256-cfb\",\n\t    \"fast_open\": false\n}\n```\n>server 修改成你VPS的外网ip\n>server_port 是服务端用的端口，没有特殊需要就不用改了\n>local_address 本地地址，使用默认的127.0.0.1就行\n>local_port 客户机端口，使用默认的1080就行\n>password 设置密码\n>timeout 超时时间，使用默认即可\n>method 加密算法，使用默认aes-256-cfb即可，改用rc4-md5也行，不过客户端也要跟着改\n>fast_open 默认即可\n\n# 0X04 如何开启关闭服务\n这样开启服务`ssserver -c /etc/shadowsocks.json -d start`\n这样关闭服务`ssserver -c /etc/shadowsocks.json -d stop`\n这样重启服务`关了再开就是重启+_+`\n\n### 0X04 下载客户端\n[点击下载WIndows环境下的Shadowsocks客户端](http://o7bn7vqpt.bkt.clouddn.com/%2Fdownload%2Fshadowsocks-windows.7z)\n[点击下载Android环境下的Shadowsocks客户端](http://o7bn7vqpt.bkt.clouddn.com/%2Fdownload%2Fshadowsocks-android.7z)\nIOS版本的客户端在AppStore里有，不过要收费。也有免费的解决方案，因为不用IOS所以不清楚，自己去找找吧。\n\n# 0X05 优化速度\n**注意：**\n1.前提是你的VPS限制流量但不限制带宽且你有足够的流量\n2.所谓速度优化只针对大文件下载和在线视频有明显效果\n3.速度优化之后会双倍流量发送，所以只有流量充足的用户适用\n\nDebian/Ubuntu:\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/tennfy/debian_netspeeder_tennfy/master/debian_netspeeder_tennfy.sh\nchmod a+x debian_netspeeder_tennfy.sh\nbash debian_netspeeder_tennfy.sh\n```\n\nCentOS:\n```bash\nwget --no-check-certificate https://gist.github.com/LazyZhu/dc3f2f84c336a08fd6a5/raw/d8aa4bcf955409e28a262ccf52921a65fe49da99/net_speeder_lazyinstall.sh\nsudo sh net_speeder_lazyinstall.sh\n```\n\n启动加速`\tnohup /usr/local/net_speeder/net_speeder venet0 \"ip\" >/dev/null 2>&1 &`\n","source":"_posts/shadowsocks_build.md","raw":"---\ntitle: Shadowsocks 如何科学上网 搭梯子 简明教程\ndate: 2016-07-23 12:12\ntags:\n  - Shadowsocks\n  - 梯子\n  - 代理\n  - VPS\n---\n\n# 0X00 准备工作\n1.一台海外或者香港的服务器/虚拟主机（后面统称VPS），要有独立IP\n2.VPS的带宽和流量不能太小\n3.一个连接VPS的软件，LInux/Mac可以用终端，Windows用户可以用XShell或者putty\n4.VPS要使用Linux系统，Debian/Ubuntu/CentOS都行\n\n>开工之前最好有Linux适用基础\n>没有VPS的推荐一个购买地址，便宜好用[banwagong](http://banwagong.cn/gonglue.html)\n>这个网站不是官网，但是起到了类似中文官网的作用，可以按照里面的推荐和教程去购买适合自己的VPS\n>VPS买回来不止可以干这个、配置高一点的话还可以搭建一个独立博客和一些其他的服务\n\n# 0X01 简述工作原理\n**不通过伟大防火墙时**我们访问某网站，流量从我们的机器一路跑到网站服务器，然后服务器响应数据再一路跑回来。\n现在**有了伟大的防火墙**不让我们和某些网站交流了，我们可以搭一个**梯子**，让流量通过梯子。其实用**镜子**比喻会更好一点。\n**有了镜子**之后，我们的流量一路跑到镜子那里，镜子替我们将流量一路跑到网站服务器，然后网站服务器将数据一路发送到镜子，镜子再转发给我们。\n所以造成下面几个问题：\n1.你终端（电脑、手机等设备）产生的数据流量（代理流量）都要从梯子那里经过，所以梯子也要走一份流量。\n2.你的网速同时取决于 你的速度、VPS的速度、网站服务器的速度\n3.你的延迟同时取决于 你到VPS的延迟，VPS到网站服务器的延迟\n\n# 0X02 安装软件\nDebian/Ubuntu\n```bash\nsudo apt-get update\t\t\t\t#更新系统\nsudo apt-get install python-pip #安装Python-pip\nsudo pip install shadowsocks \t#安装shadowsocks\n```\n\nCentOS\n```bash\nsudo yum update\t\t\t\t\t#更新系统\nsudo yum install python-setuptools && easy_install pip\nsudo pip install shadowsocks\t#安装shadowsocks\n```\n\n# 0X03 修改配置文件\n配置文件默认不存在，我们直接创建一个就行`vim /etc/shadowsocks.json`\n这里配置文件使用Json解析，看起来很清晰，便于识别修改\n```json\n{\n\t    \"server\":\"my_server_ip\",\n\t    \"server_port\":8388,\n\t    \"local_address\": \"127.0.0.1\",\n\t    \"local_port\":1080,\n\t    \"password\":\"mypassword\",\n\t    \"timeout\":300,\n\t    \"method\":\"aes-256-cfb\",\n\t    \"fast_open\": false\n}\n```\n>server 修改成你VPS的外网ip\n>server_port 是服务端用的端口，没有特殊需要就不用改了\n>local_address 本地地址，使用默认的127.0.0.1就行\n>local_port 客户机端口，使用默认的1080就行\n>password 设置密码\n>timeout 超时时间，使用默认即可\n>method 加密算法，使用默认aes-256-cfb即可，改用rc4-md5也行，不过客户端也要跟着改\n>fast_open 默认即可\n\n# 0X04 如何开启关闭服务\n这样开启服务`ssserver -c /etc/shadowsocks.json -d start`\n这样关闭服务`ssserver -c /etc/shadowsocks.json -d stop`\n这样重启服务`关了再开就是重启+_+`\n\n### 0X04 下载客户端\n[点击下载WIndows环境下的Shadowsocks客户端](http://o7bn7vqpt.bkt.clouddn.com/%2Fdownload%2Fshadowsocks-windows.7z)\n[点击下载Android环境下的Shadowsocks客户端](http://o7bn7vqpt.bkt.clouddn.com/%2Fdownload%2Fshadowsocks-android.7z)\nIOS版本的客户端在AppStore里有，不过要收费。也有免费的解决方案，因为不用IOS所以不清楚，自己去找找吧。\n\n# 0X05 优化速度\n**注意：**\n1.前提是你的VPS限制流量但不限制带宽且你有足够的流量\n2.所谓速度优化只针对大文件下载和在线视频有明显效果\n3.速度优化之后会双倍流量发送，所以只有流量充足的用户适用\n\nDebian/Ubuntu:\n```bash\nwget --no-check-certificate https://raw.githubusercontent.com/tennfy/debian_netspeeder_tennfy/master/debian_netspeeder_tennfy.sh\nchmod a+x debian_netspeeder_tennfy.sh\nbash debian_netspeeder_tennfy.sh\n```\n\nCentOS:\n```bash\nwget --no-check-certificate https://gist.github.com/LazyZhu/dc3f2f84c336a08fd6a5/raw/d8aa4bcf955409e28a262ccf52921a65fe49da99/net_speeder_lazyinstall.sh\nsudo sh net_speeder_lazyinstall.sh\n```\n\n启动加速`\tnohup /usr/local/net_speeder/net_speeder venet0 \"ip\" >/dev/null 2>&1 &`\n","slug":"shadowsocks_build","published":1,"updated":"2017-09-02T14:51:18.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmen0026hnlp8qw3on6f","content":"<h1 id=\"0X00-准备工作\"><a href=\"#0X00-准备工作\" class=\"headerlink\" title=\"0X00 准备工作\"></a>0X00 准备工作</h1><p>1.一台海外或者香港的服务器/虚拟主机（后面统称VPS），要有独立IP<br>2.VPS的带宽和流量不能太小<br>3.一个连接VPS的软件，LInux/Mac可以用终端，Windows用户可以用XShell或者putty<br>4.VPS要使用Linux系统，Debian/Ubuntu/CentOS都行</p>\n<blockquote>\n<p>开工之前最好有Linux适用基础<br>没有VPS的推荐一个购买地址，便宜好用<a href=\"http://banwagong.cn/gonglue.html\" target=\"_blank\" rel=\"external\">banwagong</a><br>这个网站不是官网，但是起到了类似中文官网的作用，可以按照里面的推荐和教程去购买适合自己的VPS<br>VPS买回来不止可以干这个、配置高一点的话还可以搭建一个独立博客和一些其他的服务</p>\n</blockquote>\n<h1 id=\"0X01-简述工作原理\"><a href=\"#0X01-简述工作原理\" class=\"headerlink\" title=\"0X01 简述工作原理\"></a>0X01 简述工作原理</h1><p><strong>不通过伟大防火墙时</strong>我们访问某网站，流量从我们的机器一路跑到网站服务器，然后服务器响应数据再一路跑回来。<br>现在<strong>有了伟大的防火墙</strong>不让我们和某些网站交流了，我们可以搭一个<strong>梯子</strong>，让流量通过梯子。其实用<strong>镜子</strong>比喻会更好一点。<br><strong>有了镜子</strong>之后，我们的流量一路跑到镜子那里，镜子替我们将流量一路跑到网站服务器，然后网站服务器将数据一路发送到镜子，镜子再转发给我们。<br>所以造成下面几个问题：<br>1.你终端（电脑、手机等设备）产生的数据流量（代理流量）都要从梯子那里经过，所以梯子也要走一份流量。<br>2.你的网速同时取决于 你的速度、VPS的速度、网站服务器的速度<br>3.你的延迟同时取决于 你到VPS的延迟，VPS到网站服务器的延迟</p>\n<h1 id=\"0X02-安装软件\"><a href=\"#0X02-安装软件\" class=\"headerlink\" title=\"0X02 安装软件\"></a>0X02 安装软件</h1><p>Debian/Ubuntu<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update\t\t\t\t<span class=\"comment\">#更新系统</span></div><div class=\"line\">sudo apt-get install python-pip <span class=\"comment\">#安装Python-pip</span></div><div class=\"line\">sudo pip install shadowsocks \t<span class=\"comment\">#安装shadowsocks</span></div></pre></td></tr></table></figure></p>\n<p>CentOS<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum update\t\t\t\t\t<span class=\"comment\">#更新系统</span></div><div class=\"line\">sudo yum install python-setuptools &amp;&amp; easy_install pip</div><div class=\"line\">sudo pip install shadowsocks\t<span class=\"comment\">#安装shadowsocks</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-修改配置文件\"><a href=\"#0X03-修改配置文件\" class=\"headerlink\" title=\"0X03 修改配置文件\"></a>0X03 修改配置文件</h1><p>配置文件默认不存在，我们直接创建一个就行<code>vim /etc/shadowsocks.json</code><br>这里配置文件使用Json解析，看起来很清晰，便于识别修改<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"my_server_ip\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"server_port\"</span>:<span class=\"number\">8388</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"mypassword\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"fast_open\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>server 修改成你VPS的外网ip<br>server_port 是服务端用的端口，没有特殊需要就不用改了<br>local_address 本地地址，使用默认的127.0.0.1就行<br>local_port 客户机端口，使用默认的1080就行<br>password 设置密码<br>timeout 超时时间，使用默认即可<br>method 加密算法，使用默认aes-256-cfb即可，改用rc4-md5也行，不过客户端也要跟着改<br>fast_open 默认即可</p>\n</blockquote>\n<h1 id=\"0X04-如何开启关闭服务\"><a href=\"#0X04-如何开启关闭服务\" class=\"headerlink\" title=\"0X04 如何开启关闭服务\"></a>0X04 如何开启关闭服务</h1><p>这样开启服务<code>ssserver -c /etc/shadowsocks.json -d start</code><br>这样关闭服务<code>ssserver -c /etc/shadowsocks.json -d stop</code><br>这样重启服务<code>关了再开就是重启+_+</code></p>\n<h3 id=\"0X04-下载客户端\"><a href=\"#0X04-下载客户端\" class=\"headerlink\" title=\"0X04 下载客户端\"></a>0X04 下载客户端</h3><p><a href=\"http://o7bn7vqpt.bkt.clouddn.com/%2Fdownload%2Fshadowsocks-windows.7z\" target=\"_blank\" rel=\"external\">点击下载WIndows环境下的Shadowsocks客户端</a><br><a href=\"http://o7bn7vqpt.bkt.clouddn.com/%2Fdownload%2Fshadowsocks-android.7z\" target=\"_blank\" rel=\"external\">点击下载Android环境下的Shadowsocks客户端</a><br>IOS版本的客户端在AppStore里有，不过要收费。也有免费的解决方案，因为不用IOS所以不清楚，自己去找找吧。</p>\n<h1 id=\"0X05-优化速度\"><a href=\"#0X05-优化速度\" class=\"headerlink\" title=\"0X05 优化速度\"></a>0X05 优化速度</h1><p><strong>注意：</strong><br>1.前提是你的VPS限制流量但不限制带宽且你有足够的流量<br>2.所谓速度优化只针对大文件下载和在线视频有明显效果<br>3.速度优化之后会双倍流量发送，所以只有流量充足的用户适用</p>\n<p>Debian/Ubuntu:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/tennfy/debian_netspeeder_tennfy/master/debian_netspeeder_tennfy.sh</div><div class=\"line\">chmod a+x debian_netspeeder_tennfy.sh</div><div class=\"line\">bash debian_netspeeder_tennfy.sh</div></pre></td></tr></table></figure></p>\n<p>CentOS:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget --no-check-certificate https://gist.github.com/LazyZhu/dc3f2f84c336a08fd6a5/raw/d8aa4bcf955409e28a262ccf52921a65fe49da99/net_speeder_lazyinstall.sh</div><div class=\"line\">sudo sh net_speeder_lazyinstall.sh</div></pre></td></tr></table></figure></p>\n<p>启动加速<code>nohup /usr/local/net_speeder/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-准备工作\"><a href=\"#0X00-准备工作\" class=\"headerlink\" title=\"0X00 准备工作\"></a>0X00 准备工作</h1><p>1.一台海外或者香港的服务器/虚拟主机（后面统称VPS），要有独立IP<br>2.VPS的带宽和流量不能太小<br>3.一个连接VPS的软件，LInux/Mac可以用终端，Windows用户可以用XShell或者putty<br>4.VPS要使用Linux系统，Debian/Ubuntu/CentOS都行</p>\n<blockquote>\n<p>开工之前最好有Linux适用基础<br>没有VPS的推荐一个购买地址，便宜好用<a href=\"http://banwagong.cn/gonglue.html\" target=\"_blank\" rel=\"external\">banwagong</a><br>这个网站不是官网，但是起到了类似中文官网的作用，可以按照里面的推荐和教程去购买适合自己的VPS<br>VPS买回来不止可以干这个、配置高一点的话还可以搭建一个独立博客和一些其他的服务</p>\n</blockquote>\n<h1 id=\"0X01-简述工作原理\"><a href=\"#0X01-简述工作原理\" class=\"headerlink\" title=\"0X01 简述工作原理\"></a>0X01 简述工作原理</h1><p><strong>不通过伟大防火墙时</strong>我们访问某网站，流量从我们的机器一路跑到网站服务器，然后服务器响应数据再一路跑回来。<br>现在<strong>有了伟大的防火墙</strong>不让我们和某些网站交流了，我们可以搭一个<strong>梯子</strong>，让流量通过梯子。其实用<strong>镜子</strong>比喻会更好一点。<br><strong>有了镜子</strong>之后，我们的流量一路跑到镜子那里，镜子替我们将流量一路跑到网站服务器，然后网站服务器将数据一路发送到镜子，镜子再转发给我们。<br>所以造成下面几个问题：<br>1.你终端（电脑、手机等设备）产生的数据流量（代理流量）都要从梯子那里经过，所以梯子也要走一份流量。<br>2.你的网速同时取决于 你的速度、VPS的速度、网站服务器的速度<br>3.你的延迟同时取决于 你到VPS的延迟，VPS到网站服务器的延迟</p>\n<h1 id=\"0X02-安装软件\"><a href=\"#0X02-安装软件\" class=\"headerlink\" title=\"0X02 安装软件\"></a>0X02 安装软件</h1><p>Debian/Ubuntu<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update\t\t\t\t<span class=\"comment\">#更新系统</span></div><div class=\"line\">sudo apt-get install python-pip <span class=\"comment\">#安装Python-pip</span></div><div class=\"line\">sudo pip install shadowsocks \t<span class=\"comment\">#安装shadowsocks</span></div></pre></td></tr></table></figure></p>\n<p>CentOS<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum update\t\t\t\t\t<span class=\"comment\">#更新系统</span></div><div class=\"line\">sudo yum install python-setuptools &amp;&amp; easy_install pip</div><div class=\"line\">sudo pip install shadowsocks\t<span class=\"comment\">#安装shadowsocks</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-修改配置文件\"><a href=\"#0X03-修改配置文件\" class=\"headerlink\" title=\"0X03 修改配置文件\"></a>0X03 修改配置文件</h1><p>配置文件默认不存在，我们直接创建一个就行<code>vim /etc/shadowsocks.json</code><br>这里配置文件使用Json解析，看起来很清晰，便于识别修改<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"my_server_ip\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"server_port\"</span>:<span class=\"number\">8388</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"mypassword\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">\"fast_open\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>server 修改成你VPS的外网ip<br>server_port 是服务端用的端口，没有特殊需要就不用改了<br>local_address 本地地址，使用默认的127.0.0.1就行<br>local_port 客户机端口，使用默认的1080就行<br>password 设置密码<br>timeout 超时时间，使用默认即可<br>method 加密算法，使用默认aes-256-cfb即可，改用rc4-md5也行，不过客户端也要跟着改<br>fast_open 默认即可</p>\n</blockquote>\n<h1 id=\"0X04-如何开启关闭服务\"><a href=\"#0X04-如何开启关闭服务\" class=\"headerlink\" title=\"0X04 如何开启关闭服务\"></a>0X04 如何开启关闭服务</h1><p>这样开启服务<code>ssserver -c /etc/shadowsocks.json -d start</code><br>这样关闭服务<code>ssserver -c /etc/shadowsocks.json -d stop</code><br>这样重启服务<code>关了再开就是重启+_+</code></p>\n<h3 id=\"0X04-下载客户端\"><a href=\"#0X04-下载客户端\" class=\"headerlink\" title=\"0X04 下载客户端\"></a>0X04 下载客户端</h3><p><a href=\"http://o7bn7vqpt.bkt.clouddn.com/%2Fdownload%2Fshadowsocks-windows.7z\" target=\"_blank\" rel=\"external\">点击下载WIndows环境下的Shadowsocks客户端</a><br><a href=\"http://o7bn7vqpt.bkt.clouddn.com/%2Fdownload%2Fshadowsocks-android.7z\" target=\"_blank\" rel=\"external\">点击下载Android环境下的Shadowsocks客户端</a><br>IOS版本的客户端在AppStore里有，不过要收费。也有免费的解决方案，因为不用IOS所以不清楚，自己去找找吧。</p>\n<h1 id=\"0X05-优化速度\"><a href=\"#0X05-优化速度\" class=\"headerlink\" title=\"0X05 优化速度\"></a>0X05 优化速度</h1><p><strong>注意：</strong><br>1.前提是你的VPS限制流量但不限制带宽且你有足够的流量<br>2.所谓速度优化只针对大文件下载和在线视频有明显效果<br>3.速度优化之后会双倍流量发送，所以只有流量充足的用户适用</p>\n<p>Debian/Ubuntu:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget --no-check-certificate https://raw.githubusercontent.com/tennfy/debian_netspeeder_tennfy/master/debian_netspeeder_tennfy.sh</div><div class=\"line\">chmod a+x debian_netspeeder_tennfy.sh</div><div class=\"line\">bash debian_netspeeder_tennfy.sh</div></pre></td></tr></table></figure></p>\n<p>CentOS:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget --no-check-certificate https://gist.github.com/LazyZhu/dc3f2f84c336a08fd6a5/raw/d8aa4bcf955409e28a262ccf52921a65fe49da99/net_speeder_lazyinstall.sh</div><div class=\"line\">sudo sh net_speeder_lazyinstall.sh</div></pre></td></tr></table></figure></p>\n<p>启动加速<code>nohup /usr/local/net_speeder/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;</code></p>\n"},{"title":"Shell编程入门笔记  新手教程","date":"2016-10-02T10:03:00.000Z","_content":"\n# 0X00 hello,world\n从一本*The C Programming Language*开始，我们就开始了几十年的'hello,world'之路。从那以后，机会所有的教程都从输出一句'hello,world'开始，这次也不例外。\n```bash\n#!/bin/bash\n\necho \"hello,world\"\n```\n这里的第一行是注释，这个注释是很特殊的，他会告诉系统我们使用哪个解释器来运行下面的代码，这里我们用的是`/bin/bash`，当然Python的代码就要加上`#!/usr/bin/python`。\n第二行就是输出一句'hello,world'。`echo`就是输出语句。\n```\n[root@mail shell]# chmod +x test.sh\n[root@mail shell]# ./test.sh\nhello,world\n```\n\n## 运行脚本\n执行之前要给脚本一个x权限，也就是执行权限。然后直接运行就行了。还有一种运行方式是`/bin/bash test.sh` 这样就是执行bash这个命令，将test.sh作为参数传进去，这样就可以不必写第一行的解释器声明。但是建议使用第一种方式执行脚本。\n\n# 0X01 使用变量\n既然是编程，那一定会有变量。Shell编程里的变量和C、Java不同，我们不需要声明一个变量就能直接赋值，想下面这样。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\necho $str\n```\n> 这里需要注意一点，我们在写一些代码的时候，可能习惯了像这样使用操作符`str = \"hello,world\"`,也就是在操作符两端加上空格。但是在Shell编程里这样做是被禁止的，加了空格就会导致语法错误。所以Shell编程里的空格限制是很严格的。\n\n给一个新的变量赋值的时候我们可以直接写变量名，但是我们调用这个变量的时候要给变量名前面加上一个`$`符号，就像上面我写的那样。当然最好写成下面这种形式`${str}`因为这样会更加清晰的显示出变量名。\n\n## 只读变量\n在Shell中有一种变量叫‘只读变量’，顾名思义，这种变量的值不会被改变，是固定的，我们这样来声明一个只读变量`readonly str`。只读变量之前也是可以随意更改的，只是在后面给它加上了一个只读属性而已，就像下面这样。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\nreadonly str\nstr=\"hey,world\"\necho str\n```\n就会报错：'./hello.sh: line 5: str: readonly variable'\n\n## 删除变量\n当我们不再使用一个变量的时候，可以把这个变量删除掉\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\nunset str\necho str\n```\n这里什么都不会输出，因为并没有str这个变量。在Shell中输出一个并不存在的变量不会有提示。\n\n# 0X02 执行一行命令\n既然是Shell编程，那么执行命令是最重要的事情了。所以在Shell编程里执行命令也是非常简单的，直接把要执行的命令写到这里就行了。\n```bash\n#!/bin/bash\n\nlscpu  #这个命令是查看CPU相关信息的\n```\n\n# 0X03 字符串\n字符串可以用单引号包起来，也可以用双引号包起来。单引号包起来的字符串会原封不动，会忽略转义字符和变量；双引号包起来的字符串会识别转义字符和变量。\n```bash\n#!/bin/bash\n\na=\"hello\"\nstr1='$a, world'  #单引号字符串\nstr2=\"$a, world\"  #双引号字符串\necho $str1\necho $str2\n```\n\n输出是这样的\n```bash\n[root@mail shell]# ./hello.sh\n$a, wrld        #可以看到这里没有识别到变量\nhello, world    #这里是识别到了变量的\n```\n\n## 字符串拼接\nShell里拼接字符串的语法非常简陋，直接把两个字符串变量写在一起就行了。\n```bash\n#!/bin/bash\n\nstr1=\"hello,\"\nstr2=\"world\"\necho $str1$str2  #就这么简单粗暴\n```\n这样就可以输出一个'hello,world'了\n\n## 获取长度\n在Shell编程里获取字符串长度不是通过一个len方法或者.length属性获取，而是通过下面这种并不直观的方式获取长度。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\nstr_len=${#str}\necho $str_len\n```\n\n## 部分截取\n在Shell编程里我们可以截取一个字符串中的某一段，只需要两个参数，一个来指定开始位置，一个来指定结束位置。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\necho ${str:1:4}\n```\n这样可以截取str字符串从1到4的部分。是一个闭区间，从0开始计数。\n\n## 查找位置\n我们经常会需要从一段字符串里找到某个字符出现的位置，可以通过下面的方法来查找。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\nindex=`expr index \"$str\" lo` #查找l或者o这个字符首次出现在字符串的哪个位置\n```\n\n\n# 0X04 搞个数组\n既然是编程，那么当然要有数组这个最基本的数据结构了。但是Shell只支持一维数组，并不支持二维和多维数组。\n\n```bash\n#!/bin/bash\n\narray_str=(\"hello\" \"hey\" \"nihao\")\necho ${array_str[2]} #定义的时候用的是小括号，调用的时候是大括号\necho ${array_str[@]} #这里的一个@表示数组里的所有内容\n```\n\n## 获取数组的长度\n获取数组长度的方式和获取字符串长度的方式差不太多。\n```bash\n#!/bin/bash\n\narray_str=(\"hello\" \"hey\" \"nihao\")\nlength=${#array_str[@]} #获取数组长度\necho $length\nlength=${#array_str[2]} #获取数组中某个元素的长度\necho $length\n```\n\n# 0X05 别忘了注释\n编程的时候给关键代码加上注释是一个非常好的习惯。Shell编程里只支持单行注释，不支持多行注释。单行注释是这样的\n```bash\n#!/bin/bash\n\nstr=\"hello\"\n#str=\"world\"\necho $str\n```\n这样输出的结果是'hello'而不是'world'因为哪一行被注释掉了，并不会执行。\n那么我们需要多行注释怎么办呢？其实也不是不可以，我们可以用一个诡异的方式来实现多行注释：把需要注释掉的代码改写成一个函数，只要我们在后面不去调用这个函数，那不就和被注释掉是一样的效果了嘛。关于函数的问题下面会说的。\n\n# 0X06 Shell参数\n我们的Shell脚本经常是需要传入参数进来的，那么应该怎么传进来呢？我们有下面一段代码：\n```bash\n#!/bin/bash\n\necho \"1. $1\"\necho \"2. $2\"\necho \"3. $3\"\necho \"all is $#\"\necho \"pid is $$\"\n```\n我们运行一下这段代码，并传入两个参数\n```bash\n[root@mail shell]# ./hello.sh hello world\n1. hello\n2. world\n3. \nall is 2\npid is 22017\n```\n> $1 $2 $3 这些参数表示：传入的第几个参数\n> $# 表示传入的参数总数\n> $$ 表示这个脚本运行的PID  （进程号）\n\n# 0X07 运算符\n运算符示例\n```bash\n#!/bin/bash\n\nval=`expr 1 + 1` #注意空格问题\necho $val\n```\n最常见的 `+` `-` `*` `/` `=` `==` 全都有的，不过注意的一点是，运算符两边一定要加空格，一定。\n\n## bool布尔运算\n`!`  非\n`-o` 或\n`-a` 且\n-eq 是‘判断是否相等，相等则true’\n```bash\n#!/bin/bash\n\na=1\nb=2\n\nif [ $a -eq $b -o $a == 1 ]\nthen\n    echo \"ok\"\nelse\n    echo \"not ok\"\nfi\n```\n这段代码输出的是'ok'因为虽然$a和$b并不相等，但是后面的`-o`表示或，或后面的`$a == 1`成立了，所以还是输出了ok\n\n## 逻辑运算\n`&&` and\n`||` or\n下面这段Demo代码和上面的效果几乎是一样的\n```bash\n#!/bin/bash\n\na=1\nb=2\n\nif [[ $a -eq $b || $a == 1 ]] #这里比上面多了一组中括号\nthen\n    echo \"ok\"\nelse\n    echo \"not ok\"\nfi\n```\n\n## 字符串运算符\n`=`  这里不是赋值，是判断两个字符串是否相等\n`!=` 这里是判断不相等\n`-n` 检测字符串长度，不为0则返回true\n`-z` 检测字符串长度，为0则返回true\n`str` 检测字符串是否为空，这里的str表示一切字符串或者变量\n\n## 运算符总结：\n\n### 算术运算符\n```\n\n运算符\t说明\t                                        举例\n+\t     加法\t                                    `expr $a + $b` 结果为 30。\n-\t     减法\t                                    `expr $a - $b` 结果为 -10。\n*\t     乘法\t                                    `expr $a \\* $b` 结果为  200。\n/\t     除法\t                                    `expr $b / $a` 结果为 2。\n%\t     取余\t                                    `expr $b % $a` 结果为 0。\n=\t     赋值\ta=$b 将把变量 b 的值赋给 a。\n==\t     相等。用于比较两个数字，相同则返回 true。\t[ $a == $b ] 返回 false。\n!=\t     不相等。用于比较两个数字，不相同则返回 true。[ $a != $b ] 返回 true。\n```\n### 关系运算符\n```\n运算符\t说明\t                                      举例\n-eq\t   检测两个数是否相等，相等返回 true。\t [ $a -eq $b ] 返回 false。\n-ne\t   检测两个数是否相等，不相等返回 true。[ $a -ne $b ] 返回 true。\n-gt\t   检测左边的数是否大于右边的，如果是，则返回 true。[ $a -gt $b ] 返回 false。\n-lt\t   检测左边的数是否小于右边的，如果是，则返回 true。[ $a -lt $b ] 返回 true。\n-ge\t   检测左边的数是否大等于右边的，如果是，则返回 true。[ $a -ge $b ] 返回 false。\n-le\t   检测左边的数是否小于等于右边的，如果是，则返回 true。[ $a -le $b ] 返回 true。\n```\n\n### 布尔运算符\n```\n运算符\t说明\t                                             举例\n!\t     非运算，表达式为 true 则返回 false，否则返回 true。[ ! false ] 返回 true。\n-o\t    或运算，有一个表达式为 true 则返回 true。          [ $a -lt 20 -o $b -gt 100 ] 返回 true。\n-a\t    与运算，两个表达式都为 true 才返回 true。\t         [ $a -lt 20 -a $b -gt 100 ] 返回 false。\n```\n\n### 逻辑运算符\n```\n运算符\t说明\t      举例\n&&\t    逻辑的 AND\t[[ $a -lt 100 && $b -gt 100 ]] 返回 false\n||\t    逻辑的 OR\t [[ $a -lt 100 || $b -gt 100 ]] 返回 true\n```\n\n### 字符串运算符\n```\n运算符\t说明\t                                   举例\n=\t     检测两个字符串是否相等，相等返回 true。  [ $a = $b ] 返回 false。\n!=\t    检测两个字符串是否相等，不相等返回 true。[ $a != $b ] 返回 true。\n-z\t    检测字符串长度是否为0，为0返回 true。    [ -z $a ] 返回 false。\n-n\t    检测字符串长度是否为0，不为0返回 true。  [ -n $a ] 返回 true。\nstr   \t检测字符串是否为空，不为空返回 true。\t   [ $a ] 返回 true。\n```\n\n### 文件测试运算符\n```\n操作符\t 说明\t                                             举例\n-b file\t检测文件是否是块设备文件，如果是，则返回 true。\t   [ -b $file ] 返回 false。\n-c file\t检测文件是否是字符设备文件，如果是，则返回 true。\t [ -c $file ] 返回 false。\n-d file\t检测文件是否是目录，如果是，则返回 true。\t         [ -d $file ] 返回 false。\n-f file\t检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。[ -f $file ] 返回 true。\n-g file\t检测文件是否设置了 SGID 位，如果是，则返回 true。\t [ -g $file ] 返回 false。\n-k file\t检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。[ -k $file ] 返回 false。\n-p file\t检测文件是否是具名管道，如果是，则返回 true。\t     [ -p $file ] 返回 false。\n-u file\t检测文件是否设置了 SUID 位，如果是，则返回 true。\t [ -u $file ] 返回 false。\n-r file\t检测文件是否可读，如果是，则返回 true。\t           [ -r $file ] 返回 true。\n-w file\t检测文件是否可写，如果是，则返回 true。\t           [ -w $file ] 返回 true。\n-x file\t检测文件是否可执行，如果是，则返回 true。\t         [ -x $file ] 返回 true。\n-s file\t检测文件是否为空（文件大小是否大于0），不为空返回 true。[ -s $file ] 返回 true。\n-e file\t检测文件（包括目录）是否存在，如果是，则返回 true。[ -e $file ] 返回 true。\n```\n\n# 0X08 条件判断语句\n## if-else\nShell 编程里的if语句和平时接触的编程语言有点区别\n1. if后面要加一个中括号，中括号之间是条件，而且中括号前后都要有一个空格；\n2. if调节写好之后要写一个then表示接下来执行什么\n3. then结束之后如果没有别的条件了的话就接一个if的逆字符串fi来表示if语句结束\n4. 如果还有其他条件那就用elif，然后也是一个中括号里写条件，then后面接要执行的语句\n5. 最后的else可写可不写，表示上面的条件没达成的话要执行的语句。\n6. if语句的最后一定是一个fi，表示if语句的结束\n\n```bash\n#!/bin/bash\n\nif [ $1 == \"1\" ]\nthen\n    echo \"input is 1\"\nelif [ $1 == \"2\" ]\nthen\n    echo \"input is 2\"\nelif [ $1 == \"3\" ]\nthen\n    echo \"input is 3\"\nelse\n    echo \"input is big\"\nfi\n```\n运行起来是这样的，比如我运行的参数是`./hello.sh 2 `，那么就会输出'2'\n\n## case\n跟if一起的一般还有一个switch-case语句，但是Shell里没有switch这个关键字，但是功能是一样的。`case $1 in`表示的是$1这个变量去对比下面的选项。下面的每一个选项都要加一个回括号，然后写上要执行的语句，再加上两个连续的分号，表示这一段结束，最后的`* )`表示匹配其他全部没有匹配到的可能。\n```bash\n#!/bin/bash\n\ncase $1 in\n    \"1\" )\n        echo \"word is 1\"\n        ;;\n    \"2\" )\n        echo \"word is 2\"\n        ;;\n    * )\n        echo \"word is other\"\n        ;;\nesac\n```\n\n# 0X09 几种循环\n## for\n在Shell编程里有我们非常熟悉的for循环，但是语法个其他编程语言还是有一定的出入。\n在Shell里用for循环的话，要给每一段循环体加上`do...done`，表示这之间的代码是循环体，注意for的一行后面没有冒号，像Python的话就会有个冒号。\n```bash\n#!/bin/bash\n\nfor a in \"hello,wrld\"\t#循环输出字符串中的每个字符\ndo\n    echo $a\ndone\n\nfor a in 1 2 3 4 5      #循环输出列表中的每一个数据\ndo\n    echo $a\ndone\n```\n`in`关键字前面是一个a后面是一堆数据，我们可以理解成把a从后面的一堆数据上走一遍，也就是说相当于Python代码中这样\n```python\n#!/usr/bin/python\n\nfor i in ['123', '234', '345', '456']:\n\tprint i\n```\n## while\n```bash\n#!/bin/bash\n\nwhile [[ $1 == \"2\" ]]\ndo\n    echo \"hello,world\"\ndone\n```\n这段代码如果我是这样运行`./hello.sh 2` 那么因为`$1`是2所以就会进入死循环，否则就什么都不会输出。\nwhile循环就是说，如果while后面的表达式成立，那么就执行一次循环。因为我这段代码没有改变$1的值，所以才会出现要么无输出要么死循环的情况。我们改成下面这种情况就好了，这意思是当我运行这个脚本，就执行10次。\n```bash\n#!/bin/bash\n\na=0\nwhile [[ $a -lt 10 ]]  #这里的 -lt 的意思是 '当左边的值小于右边的值就返回true'\ndo\n    a=$a+1\n    echo \"hello,world\"\ndone\n```\n## until\nuntil循环就相当于C和Java中的do-while循环，表示一个‘直到’的效果。下面就是说，执行循环体里的内容，一直到$a的变量大于右边的数值的时候才停止，所以才输出了11次'hello,world'\n```bash\n#!/bin/bash\n\na=0\nuntil [[ $a -gt 10 ]]; \ndo\n    a=$a+1\n    echo \"hello,world\"\ndone\n```\n\n# 0X0A 写个函数\nShell里的函数有两种定义方式，效果是一样的。\n## 方案1\n方案一是直接写函数名，后面接一个括号，然后大括号里写上函数体就好了。\n```bash\nmyFunction(){\n\techo \"hello,world\"\n}\n```\n## 方案2\n方案二是`function name()`这样定义，先声明这是一个函数，然后写上函数名，最后也是一对小括号，大括号里写函数体。\n```bash\nfunction name(){\n\techo \"hello,world\"\n}\n```\n\nShell的函数也是有返回值的，不过返回值的类型很少不像Java中可以返回数字字符串甚至返回对象，在Shell中只能返回数字，还只能是0~255的。变量只有8个二进制位，就算你返回了一个255以上的数字也会返回出溢出之后的数字的。返回值是不可以赋值的，想使用函数的返回值的话要用`$?`，这个符号代表上一次调用的函数的返回值。\n```bash\n#!/bin/bash\n\nfunction my(){\n    return $1\n}\n\nmy 1\necho $?\nmy 10\necho $?\nmy 256 \necho $?\nmy -2\necho $?\nmy 123.123\necho $?\n```\n这里前两个可以正常输出，256因为溢出了所以输出不正常，负数和浮点数不支持。\n\n# 0X0B test测试\ntest测试可以测试各种数据，包括数字、字符串、文件。使用方法如下\n```bash\n#!/bin/bash\n\nif test -e /etc/passwd #判断是否存在这个文件\nthen\n\techo \"ok\"  #存在则输出ok\nelse\n\techo \"no\"  #不存在则输出no\nfi\n```\n\n## 针对数字的测试\n-eq\t等于则为真\n-ne\t不等于则为真\n-gt\t大于则为真\n-ge\t大于等于则为真\n-lt\t小于则为真\n-le\t小于等于则为真\n\n## 针对字符串的测试\n=\t等于则为真\n!=\t不相等则为真\n-z 字符串\t字符串的长度为零则为真\n-n 字符串\t字符串的长度不为零则为真\n\n## 针对文件的测试\n-e 文件名\t如果文件存在则为真\n-r 文件名\t如果文件存在且可读则为真\n-w 文件名\t如果文件存在且可写则为真\n-x 文件名\t如果文件存在且可执行则为真\n-s 文件名\t如果文件存在且至少有一个字符则为真\n-d 文件名\t如果文件存在且为目录则为真\n-f 文件名\t如果文件存在且为普通文件则为真\n-c 文件名\t如果文件存在且为字符型特殊文件则为真\n-b 文件名\t如果文件存在且为块特殊文件则为真\n","source":"_posts/shell_programming.md","raw":"---\ntitle: Shell编程入门笔记  新手教程\ndate: 2016-10-02 18:03\ntags:\n  - Linux\n  - Shell\n---\n\n# 0X00 hello,world\n从一本*The C Programming Language*开始，我们就开始了几十年的'hello,world'之路。从那以后，机会所有的教程都从输出一句'hello,world'开始，这次也不例外。\n```bash\n#!/bin/bash\n\necho \"hello,world\"\n```\n这里的第一行是注释，这个注释是很特殊的，他会告诉系统我们使用哪个解释器来运行下面的代码，这里我们用的是`/bin/bash`，当然Python的代码就要加上`#!/usr/bin/python`。\n第二行就是输出一句'hello,world'。`echo`就是输出语句。\n```\n[root@mail shell]# chmod +x test.sh\n[root@mail shell]# ./test.sh\nhello,world\n```\n\n## 运行脚本\n执行之前要给脚本一个x权限，也就是执行权限。然后直接运行就行了。还有一种运行方式是`/bin/bash test.sh` 这样就是执行bash这个命令，将test.sh作为参数传进去，这样就可以不必写第一行的解释器声明。但是建议使用第一种方式执行脚本。\n\n# 0X01 使用变量\n既然是编程，那一定会有变量。Shell编程里的变量和C、Java不同，我们不需要声明一个变量就能直接赋值，想下面这样。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\necho $str\n```\n> 这里需要注意一点，我们在写一些代码的时候，可能习惯了像这样使用操作符`str = \"hello,world\"`,也就是在操作符两端加上空格。但是在Shell编程里这样做是被禁止的，加了空格就会导致语法错误。所以Shell编程里的空格限制是很严格的。\n\n给一个新的变量赋值的时候我们可以直接写变量名，但是我们调用这个变量的时候要给变量名前面加上一个`$`符号，就像上面我写的那样。当然最好写成下面这种形式`${str}`因为这样会更加清晰的显示出变量名。\n\n## 只读变量\n在Shell中有一种变量叫‘只读变量’，顾名思义，这种变量的值不会被改变，是固定的，我们这样来声明一个只读变量`readonly str`。只读变量之前也是可以随意更改的，只是在后面给它加上了一个只读属性而已，就像下面这样。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\nreadonly str\nstr=\"hey,world\"\necho str\n```\n就会报错：'./hello.sh: line 5: str: readonly variable'\n\n## 删除变量\n当我们不再使用一个变量的时候，可以把这个变量删除掉\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\nunset str\necho str\n```\n这里什么都不会输出，因为并没有str这个变量。在Shell中输出一个并不存在的变量不会有提示。\n\n# 0X02 执行一行命令\n既然是Shell编程，那么执行命令是最重要的事情了。所以在Shell编程里执行命令也是非常简单的，直接把要执行的命令写到这里就行了。\n```bash\n#!/bin/bash\n\nlscpu  #这个命令是查看CPU相关信息的\n```\n\n# 0X03 字符串\n字符串可以用单引号包起来，也可以用双引号包起来。单引号包起来的字符串会原封不动，会忽略转义字符和变量；双引号包起来的字符串会识别转义字符和变量。\n```bash\n#!/bin/bash\n\na=\"hello\"\nstr1='$a, world'  #单引号字符串\nstr2=\"$a, world\"  #双引号字符串\necho $str1\necho $str2\n```\n\n输出是这样的\n```bash\n[root@mail shell]# ./hello.sh\n$a, wrld        #可以看到这里没有识别到变量\nhello, world    #这里是识别到了变量的\n```\n\n## 字符串拼接\nShell里拼接字符串的语法非常简陋，直接把两个字符串变量写在一起就行了。\n```bash\n#!/bin/bash\n\nstr1=\"hello,\"\nstr2=\"world\"\necho $str1$str2  #就这么简单粗暴\n```\n这样就可以输出一个'hello,world'了\n\n## 获取长度\n在Shell编程里获取字符串长度不是通过一个len方法或者.length属性获取，而是通过下面这种并不直观的方式获取长度。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\nstr_len=${#str}\necho $str_len\n```\n\n## 部分截取\n在Shell编程里我们可以截取一个字符串中的某一段，只需要两个参数，一个来指定开始位置，一个来指定结束位置。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\necho ${str:1:4}\n```\n这样可以截取str字符串从1到4的部分。是一个闭区间，从0开始计数。\n\n## 查找位置\n我们经常会需要从一段字符串里找到某个字符出现的位置，可以通过下面的方法来查找。\n```bash\n#!/bin/bash\n\nstr=\"hello,world\"\nindex=`expr index \"$str\" lo` #查找l或者o这个字符首次出现在字符串的哪个位置\n```\n\n\n# 0X04 搞个数组\n既然是编程，那么当然要有数组这个最基本的数据结构了。但是Shell只支持一维数组，并不支持二维和多维数组。\n\n```bash\n#!/bin/bash\n\narray_str=(\"hello\" \"hey\" \"nihao\")\necho ${array_str[2]} #定义的时候用的是小括号，调用的时候是大括号\necho ${array_str[@]} #这里的一个@表示数组里的所有内容\n```\n\n## 获取数组的长度\n获取数组长度的方式和获取字符串长度的方式差不太多。\n```bash\n#!/bin/bash\n\narray_str=(\"hello\" \"hey\" \"nihao\")\nlength=${#array_str[@]} #获取数组长度\necho $length\nlength=${#array_str[2]} #获取数组中某个元素的长度\necho $length\n```\n\n# 0X05 别忘了注释\n编程的时候给关键代码加上注释是一个非常好的习惯。Shell编程里只支持单行注释，不支持多行注释。单行注释是这样的\n```bash\n#!/bin/bash\n\nstr=\"hello\"\n#str=\"world\"\necho $str\n```\n这样输出的结果是'hello'而不是'world'因为哪一行被注释掉了，并不会执行。\n那么我们需要多行注释怎么办呢？其实也不是不可以，我们可以用一个诡异的方式来实现多行注释：把需要注释掉的代码改写成一个函数，只要我们在后面不去调用这个函数，那不就和被注释掉是一样的效果了嘛。关于函数的问题下面会说的。\n\n# 0X06 Shell参数\n我们的Shell脚本经常是需要传入参数进来的，那么应该怎么传进来呢？我们有下面一段代码：\n```bash\n#!/bin/bash\n\necho \"1. $1\"\necho \"2. $2\"\necho \"3. $3\"\necho \"all is $#\"\necho \"pid is $$\"\n```\n我们运行一下这段代码，并传入两个参数\n```bash\n[root@mail shell]# ./hello.sh hello world\n1. hello\n2. world\n3. \nall is 2\npid is 22017\n```\n> $1 $2 $3 这些参数表示：传入的第几个参数\n> $# 表示传入的参数总数\n> $$ 表示这个脚本运行的PID  （进程号）\n\n# 0X07 运算符\n运算符示例\n```bash\n#!/bin/bash\n\nval=`expr 1 + 1` #注意空格问题\necho $val\n```\n最常见的 `+` `-` `*` `/` `=` `==` 全都有的，不过注意的一点是，运算符两边一定要加空格，一定。\n\n## bool布尔运算\n`!`  非\n`-o` 或\n`-a` 且\n-eq 是‘判断是否相等，相等则true’\n```bash\n#!/bin/bash\n\na=1\nb=2\n\nif [ $a -eq $b -o $a == 1 ]\nthen\n    echo \"ok\"\nelse\n    echo \"not ok\"\nfi\n```\n这段代码输出的是'ok'因为虽然$a和$b并不相等，但是后面的`-o`表示或，或后面的`$a == 1`成立了，所以还是输出了ok\n\n## 逻辑运算\n`&&` and\n`||` or\n下面这段Demo代码和上面的效果几乎是一样的\n```bash\n#!/bin/bash\n\na=1\nb=2\n\nif [[ $a -eq $b || $a == 1 ]] #这里比上面多了一组中括号\nthen\n    echo \"ok\"\nelse\n    echo \"not ok\"\nfi\n```\n\n## 字符串运算符\n`=`  这里不是赋值，是判断两个字符串是否相等\n`!=` 这里是判断不相等\n`-n` 检测字符串长度，不为0则返回true\n`-z` 检测字符串长度，为0则返回true\n`str` 检测字符串是否为空，这里的str表示一切字符串或者变量\n\n## 运算符总结：\n\n### 算术运算符\n```\n\n运算符\t说明\t                                        举例\n+\t     加法\t                                    `expr $a + $b` 结果为 30。\n-\t     减法\t                                    `expr $a - $b` 结果为 -10。\n*\t     乘法\t                                    `expr $a \\* $b` 结果为  200。\n/\t     除法\t                                    `expr $b / $a` 结果为 2。\n%\t     取余\t                                    `expr $b % $a` 结果为 0。\n=\t     赋值\ta=$b 将把变量 b 的值赋给 a。\n==\t     相等。用于比较两个数字，相同则返回 true。\t[ $a == $b ] 返回 false。\n!=\t     不相等。用于比较两个数字，不相同则返回 true。[ $a != $b ] 返回 true。\n```\n### 关系运算符\n```\n运算符\t说明\t                                      举例\n-eq\t   检测两个数是否相等，相等返回 true。\t [ $a -eq $b ] 返回 false。\n-ne\t   检测两个数是否相等，不相等返回 true。[ $a -ne $b ] 返回 true。\n-gt\t   检测左边的数是否大于右边的，如果是，则返回 true。[ $a -gt $b ] 返回 false。\n-lt\t   检测左边的数是否小于右边的，如果是，则返回 true。[ $a -lt $b ] 返回 true。\n-ge\t   检测左边的数是否大等于右边的，如果是，则返回 true。[ $a -ge $b ] 返回 false。\n-le\t   检测左边的数是否小于等于右边的，如果是，则返回 true。[ $a -le $b ] 返回 true。\n```\n\n### 布尔运算符\n```\n运算符\t说明\t                                             举例\n!\t     非运算，表达式为 true 则返回 false，否则返回 true。[ ! false ] 返回 true。\n-o\t    或运算，有一个表达式为 true 则返回 true。          [ $a -lt 20 -o $b -gt 100 ] 返回 true。\n-a\t    与运算，两个表达式都为 true 才返回 true。\t         [ $a -lt 20 -a $b -gt 100 ] 返回 false。\n```\n\n### 逻辑运算符\n```\n运算符\t说明\t      举例\n&&\t    逻辑的 AND\t[[ $a -lt 100 && $b -gt 100 ]] 返回 false\n||\t    逻辑的 OR\t [[ $a -lt 100 || $b -gt 100 ]] 返回 true\n```\n\n### 字符串运算符\n```\n运算符\t说明\t                                   举例\n=\t     检测两个字符串是否相等，相等返回 true。  [ $a = $b ] 返回 false。\n!=\t    检测两个字符串是否相等，不相等返回 true。[ $a != $b ] 返回 true。\n-z\t    检测字符串长度是否为0，为0返回 true。    [ -z $a ] 返回 false。\n-n\t    检测字符串长度是否为0，不为0返回 true。  [ -n $a ] 返回 true。\nstr   \t检测字符串是否为空，不为空返回 true。\t   [ $a ] 返回 true。\n```\n\n### 文件测试运算符\n```\n操作符\t 说明\t                                             举例\n-b file\t检测文件是否是块设备文件，如果是，则返回 true。\t   [ -b $file ] 返回 false。\n-c file\t检测文件是否是字符设备文件，如果是，则返回 true。\t [ -c $file ] 返回 false。\n-d file\t检测文件是否是目录，如果是，则返回 true。\t         [ -d $file ] 返回 false。\n-f file\t检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。[ -f $file ] 返回 true。\n-g file\t检测文件是否设置了 SGID 位，如果是，则返回 true。\t [ -g $file ] 返回 false。\n-k file\t检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。[ -k $file ] 返回 false。\n-p file\t检测文件是否是具名管道，如果是，则返回 true。\t     [ -p $file ] 返回 false。\n-u file\t检测文件是否设置了 SUID 位，如果是，则返回 true。\t [ -u $file ] 返回 false。\n-r file\t检测文件是否可读，如果是，则返回 true。\t           [ -r $file ] 返回 true。\n-w file\t检测文件是否可写，如果是，则返回 true。\t           [ -w $file ] 返回 true。\n-x file\t检测文件是否可执行，如果是，则返回 true。\t         [ -x $file ] 返回 true。\n-s file\t检测文件是否为空（文件大小是否大于0），不为空返回 true。[ -s $file ] 返回 true。\n-e file\t检测文件（包括目录）是否存在，如果是，则返回 true。[ -e $file ] 返回 true。\n```\n\n# 0X08 条件判断语句\n## if-else\nShell 编程里的if语句和平时接触的编程语言有点区别\n1. if后面要加一个中括号，中括号之间是条件，而且中括号前后都要有一个空格；\n2. if调节写好之后要写一个then表示接下来执行什么\n3. then结束之后如果没有别的条件了的话就接一个if的逆字符串fi来表示if语句结束\n4. 如果还有其他条件那就用elif，然后也是一个中括号里写条件，then后面接要执行的语句\n5. 最后的else可写可不写，表示上面的条件没达成的话要执行的语句。\n6. if语句的最后一定是一个fi，表示if语句的结束\n\n```bash\n#!/bin/bash\n\nif [ $1 == \"1\" ]\nthen\n    echo \"input is 1\"\nelif [ $1 == \"2\" ]\nthen\n    echo \"input is 2\"\nelif [ $1 == \"3\" ]\nthen\n    echo \"input is 3\"\nelse\n    echo \"input is big\"\nfi\n```\n运行起来是这样的，比如我运行的参数是`./hello.sh 2 `，那么就会输出'2'\n\n## case\n跟if一起的一般还有一个switch-case语句，但是Shell里没有switch这个关键字，但是功能是一样的。`case $1 in`表示的是$1这个变量去对比下面的选项。下面的每一个选项都要加一个回括号，然后写上要执行的语句，再加上两个连续的分号，表示这一段结束，最后的`* )`表示匹配其他全部没有匹配到的可能。\n```bash\n#!/bin/bash\n\ncase $1 in\n    \"1\" )\n        echo \"word is 1\"\n        ;;\n    \"2\" )\n        echo \"word is 2\"\n        ;;\n    * )\n        echo \"word is other\"\n        ;;\nesac\n```\n\n# 0X09 几种循环\n## for\n在Shell编程里有我们非常熟悉的for循环，但是语法个其他编程语言还是有一定的出入。\n在Shell里用for循环的话，要给每一段循环体加上`do...done`，表示这之间的代码是循环体，注意for的一行后面没有冒号，像Python的话就会有个冒号。\n```bash\n#!/bin/bash\n\nfor a in \"hello,wrld\"\t#循环输出字符串中的每个字符\ndo\n    echo $a\ndone\n\nfor a in 1 2 3 4 5      #循环输出列表中的每一个数据\ndo\n    echo $a\ndone\n```\n`in`关键字前面是一个a后面是一堆数据，我们可以理解成把a从后面的一堆数据上走一遍，也就是说相当于Python代码中这样\n```python\n#!/usr/bin/python\n\nfor i in ['123', '234', '345', '456']:\n\tprint i\n```\n## while\n```bash\n#!/bin/bash\n\nwhile [[ $1 == \"2\" ]]\ndo\n    echo \"hello,world\"\ndone\n```\n这段代码如果我是这样运行`./hello.sh 2` 那么因为`$1`是2所以就会进入死循环，否则就什么都不会输出。\nwhile循环就是说，如果while后面的表达式成立，那么就执行一次循环。因为我这段代码没有改变$1的值，所以才会出现要么无输出要么死循环的情况。我们改成下面这种情况就好了，这意思是当我运行这个脚本，就执行10次。\n```bash\n#!/bin/bash\n\na=0\nwhile [[ $a -lt 10 ]]  #这里的 -lt 的意思是 '当左边的值小于右边的值就返回true'\ndo\n    a=$a+1\n    echo \"hello,world\"\ndone\n```\n## until\nuntil循环就相当于C和Java中的do-while循环，表示一个‘直到’的效果。下面就是说，执行循环体里的内容，一直到$a的变量大于右边的数值的时候才停止，所以才输出了11次'hello,world'\n```bash\n#!/bin/bash\n\na=0\nuntil [[ $a -gt 10 ]]; \ndo\n    a=$a+1\n    echo \"hello,world\"\ndone\n```\n\n# 0X0A 写个函数\nShell里的函数有两种定义方式，效果是一样的。\n## 方案1\n方案一是直接写函数名，后面接一个括号，然后大括号里写上函数体就好了。\n```bash\nmyFunction(){\n\techo \"hello,world\"\n}\n```\n## 方案2\n方案二是`function name()`这样定义，先声明这是一个函数，然后写上函数名，最后也是一对小括号，大括号里写函数体。\n```bash\nfunction name(){\n\techo \"hello,world\"\n}\n```\n\nShell的函数也是有返回值的，不过返回值的类型很少不像Java中可以返回数字字符串甚至返回对象，在Shell中只能返回数字，还只能是0~255的。变量只有8个二进制位，就算你返回了一个255以上的数字也会返回出溢出之后的数字的。返回值是不可以赋值的，想使用函数的返回值的话要用`$?`，这个符号代表上一次调用的函数的返回值。\n```bash\n#!/bin/bash\n\nfunction my(){\n    return $1\n}\n\nmy 1\necho $?\nmy 10\necho $?\nmy 256 \necho $?\nmy -2\necho $?\nmy 123.123\necho $?\n```\n这里前两个可以正常输出，256因为溢出了所以输出不正常，负数和浮点数不支持。\n\n# 0X0B test测试\ntest测试可以测试各种数据，包括数字、字符串、文件。使用方法如下\n```bash\n#!/bin/bash\n\nif test -e /etc/passwd #判断是否存在这个文件\nthen\n\techo \"ok\"  #存在则输出ok\nelse\n\techo \"no\"  #不存在则输出no\nfi\n```\n\n## 针对数字的测试\n-eq\t等于则为真\n-ne\t不等于则为真\n-gt\t大于则为真\n-ge\t大于等于则为真\n-lt\t小于则为真\n-le\t小于等于则为真\n\n## 针对字符串的测试\n=\t等于则为真\n!=\t不相等则为真\n-z 字符串\t字符串的长度为零则为真\n-n 字符串\t字符串的长度不为零则为真\n\n## 针对文件的测试\n-e 文件名\t如果文件存在则为真\n-r 文件名\t如果文件存在且可读则为真\n-w 文件名\t如果文件存在且可写则为真\n-x 文件名\t如果文件存在且可执行则为真\n-s 文件名\t如果文件存在且至少有一个字符则为真\n-d 文件名\t如果文件存在且为目录则为真\n-f 文件名\t如果文件存在且为普通文件则为真\n-c 文件名\t如果文件存在且为字符型特殊文件则为真\n-b 文件名\t如果文件存在且为块特殊文件则为真\n","slug":"shell_programming","published":1,"updated":"2017-09-02T14:51:29.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmeo0028hnlp21qacop6","content":"<h1 id=\"0X00-hello-world\"><a href=\"#0X00-hello-world\" class=\"headerlink\" title=\"0X00 hello,world\"></a>0X00 hello,world</h1><p>从一本<em>The C Programming Language</em>开始，我们就开始了几十年的’hello,world’之路。从那以后，机会所有的教程都从输出一句’hello,world’开始，这次也不例外。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div></pre></td></tr></table></figure></p>\n<p>这里的第一行是注释，这个注释是很特殊的，他会告诉系统我们使用哪个解释器来运行下面的代码，这里我们用的是<code>/bin/bash</code>，当然Python的代码就要加上<code>#!/usr/bin/python</code>。<br>第二行就是输出一句’hello,world’。<code>echo</code>就是输出语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@mail shell]# chmod +x test.sh</div><div class=\"line\">[root@mail shell]# ./test.sh</div><div class=\"line\">hello,world</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h2><p>执行之前要给脚本一个x权限，也就是执行权限。然后直接运行就行了。还有一种运行方式是<code>/bin/bash test.sh</code> 这样就是执行bash这个命令，将test.sh作为参数传进去，这样就可以不必写第一行的解释器声明。但是建议使用第一种方式执行脚本。</p>\n<h1 id=\"0X01-使用变量\"><a href=\"#0X01-使用变量\" class=\"headerlink\" title=\"0X01 使用变量\"></a>0X01 使用变量</h1><p>既然是编程，那一定会有变量。Shell编程里的变量和C、Java不同，我们不需要声明一个变量就能直接赋值，想下面这样。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里需要注意一点，我们在写一些代码的时候，可能习惯了像这样使用操作符<code>str = &quot;hello,world&quot;</code>,也就是在操作符两端加上空格。但是在Shell编程里这样做是被禁止的，加了空格就会导致语法错误。所以Shell编程里的空格限制是很严格的。</p>\n</blockquote>\n<p>给一个新的变量赋值的时候我们可以直接写变量名，但是我们调用这个变量的时候要给变量名前面加上一个<code>$</code>符号，就像上面我写的那样。当然最好写成下面这种形式<code>${str}</code>因为这样会更加清晰的显示出变量名。</p>\n<h2 id=\"只读变量\"><a href=\"#只读变量\" class=\"headerlink\" title=\"只读变量\"></a>只读变量</h2><p>在Shell中有一种变量叫‘只读变量’，顾名思义，这种变量的值不会被改变，是固定的，我们这样来声明一个只读变量<code>readonly str</code>。只读变量之前也是可以随意更改的，只是在后面给它加上了一个只读属性而已，就像下面这样。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"built_in\">readonly</span> str</div><div class=\"line\">str=<span class=\"string\">\"hey,world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> str</div></pre></td></tr></table></figure></p>\n<p>就会报错：’./hello.sh: line 5: str: readonly variable’</p>\n<h2 id=\"删除变量\"><a href=\"#删除变量\" class=\"headerlink\" title=\"删除变量\"></a>删除变量</h2><p>当我们不再使用一个变量的时候，可以把这个变量删除掉<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"built_in\">unset</span> str</div><div class=\"line\"><span class=\"built_in\">echo</span> str</div></pre></td></tr></table></figure></p>\n<p>这里什么都不会输出，因为并没有str这个变量。在Shell中输出一个并不存在的变量不会有提示。</p>\n<h1 id=\"0X02-执行一行命令\"><a href=\"#0X02-执行一行命令\" class=\"headerlink\" title=\"0X02 执行一行命令\"></a>0X02 执行一行命令</h1><p>既然是Shell编程，那么执行命令是最重要的事情了。所以在Shell编程里执行命令也是非常简单的，直接把要执行的命令写到这里就行了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">lscpu  <span class=\"comment\">#这个命令是查看CPU相关信息的</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-字符串\"><a href=\"#0X03-字符串\" class=\"headerlink\" title=\"0X03 字符串\"></a>0X03 字符串</h1><p>字符串可以用单引号包起来，也可以用双引号包起来。单引号包起来的字符串会原封不动，会忽略转义字符和变量；双引号包起来的字符串会识别转义字符和变量。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=<span class=\"string\">\"hello\"</span></div><div class=\"line\">str1=<span class=\"string\">'$a, world'</span>  <span class=\"comment\">#单引号字符串</span></div><div class=\"line\">str2=<span class=\"string\">\"<span class=\"variable\">$a</span>, world\"</span>  <span class=\"comment\">#双引号字符串</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str1</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str2</span></div></pre></td></tr></table></figure></p>\n<p>输出是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@mail shell]<span class=\"comment\"># ./hello.sh</span></div><div class=\"line\"><span class=\"variable\">$a</span>, wrld        <span class=\"comment\">#可以看到这里没有识别到变量</span></div><div class=\"line\">hello, world    <span class=\"comment\">#这里是识别到了变量的</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>Shell里拼接字符串的语法非常简陋，直接把两个字符串变量写在一起就行了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str1=<span class=\"string\">\"hello,\"</span></div><div class=\"line\">str2=<span class=\"string\">\"world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str1</span><span class=\"variable\">$str2</span>  <span class=\"comment\">#就这么简单粗暴</span></div></pre></td></tr></table></figure></p>\n<p>这样就可以输出一个’hello,world’了</p>\n<h2 id=\"获取长度\"><a href=\"#获取长度\" class=\"headerlink\" title=\"获取长度\"></a>获取长度</h2><p>在Shell编程里获取字符串长度不是通过一个len方法或者.length属性获取，而是通过下面这种并不直观的方式获取长度。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\">str_len=<span class=\"variable\">$&#123;#str&#125;</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str_len</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"部分截取\"><a href=\"#部分截取\" class=\"headerlink\" title=\"部分截取\"></a>部分截取</h2><p>在Shell编程里我们可以截取一个字符串中的某一段，只需要两个参数，一个来指定开始位置，一个来指定结束位置。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;str:1:4&#125;</span></div></pre></td></tr></table></figure></p>\n<p>这样可以截取str字符串从1到4的部分。是一个闭区间，从0开始计数。</p>\n<h2 id=\"查找位置\"><a href=\"#查找位置\" class=\"headerlink\" title=\"查找位置\"></a>查找位置</h2><p>我们经常会需要从一段字符串里找到某个字符出现的位置，可以通过下面的方法来查找。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\">index=`expr index <span class=\"string\">\"<span class=\"variable\">$str</span>\"</span> lo` <span class=\"comment\">#查找l或者o这个字符首次出现在字符串的哪个位置</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-搞个数组\"><a href=\"#0X04-搞个数组\" class=\"headerlink\" title=\"0X04 搞个数组\"></a>0X04 搞个数组</h1><p>既然是编程，那么当然要有数组这个最基本的数据结构了。但是Shell只支持一维数组，并不支持二维和多维数组。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">array_str=(<span class=\"string\">\"hello\"</span> <span class=\"string\">\"hey\"</span> <span class=\"string\">\"nihao\"</span>)</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array_str[2]&#125;</span> <span class=\"comment\">#定义的时候用的是小括号，调用的时候是大括号</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array_str[@]&#125;</span> <span class=\"comment\">#这里的一个@表示数组里的所有内容</span></div></pre></td></tr></table></figure>\n<h2 id=\"获取数组的长度\"><a href=\"#获取数组的长度\" class=\"headerlink\" title=\"获取数组的长度\"></a>获取数组的长度</h2><p>获取数组长度的方式和获取字符串长度的方式差不太多。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">array_str=(<span class=\"string\">\"hello\"</span> <span class=\"string\">\"hey\"</span> <span class=\"string\">\"nihao\"</span>)</div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_str[@]&#125;</span> <span class=\"comment\">#获取数组长度</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$length</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_str[2]&#125;</span> <span class=\"comment\">#获取数组中某个元素的长度</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$length</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-别忘了注释\"><a href=\"#0X05-别忘了注释\" class=\"headerlink\" title=\"0X05 别忘了注释\"></a>0X05 别忘了注释</h1><p>编程的时候给关键代码加上注释是一个非常好的习惯。Shell编程里只支持单行注释，不支持多行注释。单行注释是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"comment\">#str=\"world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str</span></div></pre></td></tr></table></figure></p>\n<p>这样输出的结果是’hello’而不是’world’因为哪一行被注释掉了，并不会执行。<br>那么我们需要多行注释怎么办呢？其实也不是不可以，我们可以用一个诡异的方式来实现多行注释：把需要注释掉的代码改写成一个函数，只要我们在后面不去调用这个函数，那不就和被注释掉是一样的效果了嘛。关于函数的问题下面会说的。</p>\n<h1 id=\"0X06-Shell参数\"><a href=\"#0X06-Shell参数\" class=\"headerlink\" title=\"0X06 Shell参数\"></a>0X06 Shell参数</h1><p>我们的Shell脚本经常是需要传入参数进来的，那么应该怎么传进来呢？我们有下面一段代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1. <span class=\"variable\">$1</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2. <span class=\"variable\">$2</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"3. <span class=\"variable\">$3</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"all is <span class=\"variable\">$#</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"pid is $$\"</span></div></pre></td></tr></table></figure></p>\n<p>我们运行一下这段代码，并传入两个参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@mail shell]<span class=\"comment\"># ./hello.sh hello world</span></div><div class=\"line\">1. hello</div><div class=\"line\">2. world</div><div class=\"line\">3. </div><div class=\"line\">all is 2</div><div class=\"line\">pid is 22017</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>$1 $2 $3 这些参数表示：传入的第几个参数<br>$# 表示传入的参数总数<br>$$ 表示这个脚本运行的PID  （进程号）</p>\n</blockquote>\n<h1 id=\"0X07-运算符\"><a href=\"#0X07-运算符\" class=\"headerlink\" title=\"0X07 运算符\"></a>0X07 运算符</h1><p>运算符示例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">val=`expr 1 + 1` <span class=\"comment\">#注意空格问题</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$val</span></div></pre></td></tr></table></figure></p>\n<p>最常见的 <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>=</code> <code>==</code> 全都有的，不过注意的一点是，运算符两边一定要加空格，一定。</p>\n<h2 id=\"bool布尔运算\"><a href=\"#bool布尔运算\" class=\"headerlink\" title=\"bool布尔运算\"></a>bool布尔运算</h2><p><code>!</code>  非<br><code>-o</code> 或<br><code>-a</code> 且<br>-eq 是‘判断是否相等，相等则true’<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=1</div><div class=\"line\">b=2</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> -o <span class=\"variable\">$a</span> == 1 ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ok\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"not ok\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<p>这段代码输出的是’ok’因为虽然$a和$b并不相等，但是后面的<code>-o</code>表示或，或后面的<code>$a == 1</code>成立了，所以还是输出了ok</p>\n<h2 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h2><p><code>&amp;&amp;</code> and<br><code>||</code> or<br>下面这段Demo代码和上面的效果几乎是一样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=1</div><div class=\"line\">b=2</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> || <span class=\"variable\">$a</span> == 1 ]] <span class=\"comment\">#这里比上面多了一组中括号</span></div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ok\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"not ok\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h2><p><code>=</code>  这里不是赋值，是判断两个字符串是否相等<br><code>!=</code> 这里是判断不相等<br><code>-n</code> 检测字符串长度，不为0则返回true<br><code>-z</code> 检测字符串长度，为0则返回true<br><code>str</code> 检测字符串是否为空，这里的str表示一切字符串或者变量</p>\n<h2 id=\"运算符总结：\"><a href=\"#运算符总结：\" class=\"headerlink\" title=\"运算符总结：\"></a>运算符总结：</h2><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">运算符\t说明\t                                        举例</div><div class=\"line\">+\t     加法\t                                    `expr $a + $b` 结果为 30。</div><div class=\"line\">-\t     减法\t                                    `expr $a - $b` 结果为 -10。</div><div class=\"line\">*\t     乘法\t                                    `expr $a \\* $b` 结果为  200。</div><div class=\"line\">/\t     除法\t                                    `expr $b / $a` 结果为 2。</div><div class=\"line\">%\t     取余\t                                    `expr $b % $a` 结果为 0。</div><div class=\"line\">=\t     赋值\ta=$b 将把变量 b 的值赋给 a。</div><div class=\"line\">==\t     相等。用于比较两个数字，相同则返回 true。\t[ $a == $b ] 返回 false。</div><div class=\"line\">!=\t     不相等。用于比较两个数字，不相同则返回 true。[ $a != $b ] 返回 true。</div></pre></td></tr></table></figure>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">运算符\t说明\t                                      举例</div><div class=\"line\">-eq\t   检测两个数是否相等，相等返回 true。\t [ $a -eq $b ] 返回 false。</div><div class=\"line\">-ne\t   检测两个数是否相等，不相等返回 true。[ $a -ne $b ] 返回 true。</div><div class=\"line\">-gt\t   检测左边的数是否大于右边的，如果是，则返回 true。[ $a -gt $b ] 返回 false。</div><div class=\"line\">-lt\t   检测左边的数是否小于右边的，如果是，则返回 true。[ $a -lt $b ] 返回 true。</div><div class=\"line\">-ge\t   检测左边的数是否大等于右边的，如果是，则返回 true。[ $a -ge $b ] 返回 false。</div><div class=\"line\">-le\t   检测左边的数是否小于等于右边的，如果是，则返回 true。[ $a -le $b ] 返回 true。</div></pre></td></tr></table></figure>\n<h3 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">运算符\t说明\t                                             举例</div><div class=\"line\">!\t     非运算，表达式为 true 则返回 false，否则返回 true。[ ! false ] 返回 true。</div><div class=\"line\">-o\t    或运算，有一个表达式为 true 则返回 true。          [ $a -lt 20 -o $b -gt 100 ] 返回 true。</div><div class=\"line\">-a\t    与运算，两个表达式都为 true 才返回 true。\t         [ $a -lt 20 -a $b -gt 100 ] 返回 false。</div></pre></td></tr></table></figure>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">运算符\t说明\t      举例</div><div class=\"line\">&amp;&amp;\t    逻辑的 AND\t[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</div><div class=\"line\">||\t    逻辑的 OR\t [[ $a -lt 100 || $b -gt 100 ]] 返回 true</div></pre></td></tr></table></figure>\n<h3 id=\"字符串运算符-1\"><a href=\"#字符串运算符-1\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">运算符\t说明\t                                   举例</div><div class=\"line\">=\t     检测两个字符串是否相等，相等返回 true。  [ $a = $b ] 返回 false。</div><div class=\"line\">!=\t    检测两个字符串是否相等，不相等返回 true。[ $a != $b ] 返回 true。</div><div class=\"line\">-z\t    检测字符串长度是否为0，为0返回 true。    [ -z $a ] 返回 false。</div><div class=\"line\">-n\t    检测字符串长度是否为0，不为0返回 true。  [ -n $a ] 返回 true。</div><div class=\"line\">str   \t检测字符串是否为空，不为空返回 true。\t   [ $a ] 返回 true。</div></pre></td></tr></table></figure>\n<h3 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a>文件测试运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">操作符\t 说明\t                                             举例</div><div class=\"line\">-b file\t检测文件是否是块设备文件，如果是，则返回 true。\t   [ -b $file ] 返回 false。</div><div class=\"line\">-c file\t检测文件是否是字符设备文件，如果是，则返回 true。\t [ -c $file ] 返回 false。</div><div class=\"line\">-d file\t检测文件是否是目录，如果是，则返回 true。\t         [ -d $file ] 返回 false。</div><div class=\"line\">-f file\t检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。[ -f $file ] 返回 true。</div><div class=\"line\">-g file\t检测文件是否设置了 SGID 位，如果是，则返回 true。\t [ -g $file ] 返回 false。</div><div class=\"line\">-k file\t检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。[ -k $file ] 返回 false。</div><div class=\"line\">-p file\t检测文件是否是具名管道，如果是，则返回 true。\t     [ -p $file ] 返回 false。</div><div class=\"line\">-u file\t检测文件是否设置了 SUID 位，如果是，则返回 true。\t [ -u $file ] 返回 false。</div><div class=\"line\">-r file\t检测文件是否可读，如果是，则返回 true。\t           [ -r $file ] 返回 true。</div><div class=\"line\">-w file\t检测文件是否可写，如果是，则返回 true。\t           [ -w $file ] 返回 true。</div><div class=\"line\">-x file\t检测文件是否可执行，如果是，则返回 true。\t         [ -x $file ] 返回 true。</div><div class=\"line\">-s file\t检测文件是否为空（文件大小是否大于0），不为空返回 true。[ -s $file ] 返回 true。</div><div class=\"line\">-e file\t检测文件（包括目录）是否存在，如果是，则返回 true。[ -e $file ] 返回 true。</div></pre></td></tr></table></figure>\n<h1 id=\"0X08-条件判断语句\"><a href=\"#0X08-条件判断语句\" class=\"headerlink\" title=\"0X08 条件判断语句\"></a>0X08 条件判断语句</h1><h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if-else\"></a>if-else</h2><p>Shell 编程里的if语句和平时接触的编程语言有点区别</p>\n<ol>\n<li>if后面要加一个中括号，中括号之间是条件，而且中括号前后都要有一个空格；</li>\n<li>if调节写好之后要写一个then表示接下来执行什么</li>\n<li>then结束之后如果没有别的条件了的话就接一个if的逆字符串fi来表示if语句结束</li>\n<li>如果还有其他条件那就用elif，然后也是一个中括号里写条件，then后面接要执行的语句</li>\n<li>最后的else可写可不写，表示上面的条件没达成的话要执行的语句。</li>\n<li>if语句的最后一定是一个fi，表示if语句的结束</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">\"1\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"input is 1\"</span></div><div class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">\"2\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"input is 2\"</span></div><div class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">\"3\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"input is 3\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"input is big\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p>运行起来是这样的，比如我运行的参数是<code>./hello.sh 2</code>，那么就会输出’2’</p>\n<h2 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h2><p>跟if一起的一般还有一个switch-case语句，但是Shell里没有switch这个关键字，但是功能是一样的。<code>case $1 in</code>表示的是$1这个变量去对比下面的选项。下面的每一个选项都要加一个回括号，然后写上要执行的语句，再加上两个连续的分号，表示这一段结束，最后的<code>* )</code>表示匹配其他全部没有匹配到的可能。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"string\">\"1\"</span> )</div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"word is 1\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"string\">\"2\"</span> )</div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"word is 2\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">    * )</div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"word is other\"</span></div><div class=\"line\">        ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X09-几种循环\"><a href=\"#0X09-几种循环\" class=\"headerlink\" title=\"0X09 几种循环\"></a>0X09 几种循环</h1><h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><p>在Shell编程里有我们非常熟悉的for循环，但是语法个其他编程语言还是有一定的出入。<br>在Shell里用for循环的话，要给每一段循环体加上<code>do...done</code>，表示这之间的代码是循环体，注意for的一行后面没有冒号，像Python的话就会有个冒号。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> <span class=\"string\">\"hello,wrld\"</span>\t<span class=\"comment\">#循环输出字符串中的每个字符</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> 1 2 3 4 5      <span class=\"comment\">#循环输出列表中的每一个数据</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<p><code>in</code>关键字前面是一个a后面是一堆数据，我们可以理解成把a从后面的一堆数据上走一遍，也就是说相当于Python代码中这样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"string\">'123'</span>, <span class=\"string\">'234'</span>, <span class=\"string\">'345'</span>, <span class=\"string\">'456'</span>]:</div><div class=\"line\">\t<span class=\"keyword\">print</span> i</div></pre></td></tr></table></figure></p>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$1</span> == <span class=\"string\">\"2\"</span> ]]</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>这段代码如果我是这样运行<code>./hello.sh 2</code> 那么因为<code>$1</code>是2所以就会进入死循环，否则就什么都不会输出。<br>while循环就是说，如果while后面的表达式成立，那么就执行一次循环。因为我这段代码没有改变$1的值，所以才会出现要么无输出要么死循环的情况。我们改成下面这种情况就好了，这意思是当我运行这个脚本，就执行10次。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=0</div><div class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$a</span> -lt 10 ]]  <span class=\"comment\">#这里的 -lt 的意思是 '当左边的值小于右边的值就返回true'</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    a=<span class=\"variable\">$a</span>+1</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"until\"><a href=\"#until\" class=\"headerlink\" title=\"until\"></a>until</h2><p>until循环就相当于C和Java中的do-while循环，表示一个‘直到’的效果。下面就是说，执行循环体里的内容，一直到$a的变量大于右边的数值的时候才停止，所以才输出了11次’hello,world’<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=0</div><div class=\"line\">until [[ <span class=\"variable\">$a</span> -gt 10 ]]; </div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    a=<span class=\"variable\">$a</span>+1</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0A-写个函数\"><a href=\"#0X0A-写个函数\" class=\"headerlink\" title=\"0X0A 写个函数\"></a>0X0A 写个函数</h1><p>Shell里的函数有两种定义方式，效果是一样的。</p>\n<h2 id=\"方案1\"><a href=\"#方案1\" class=\"headerlink\" title=\"方案1\"></a>方案1</h2><p>方案一是直接写函数名，后面接一个括号，然后大括号里写上函数体就好了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">myFunction</span></span>()&#123;</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"方案2\"><a href=\"#方案2\" class=\"headerlink\" title=\"方案2\"></a>方案2</h2><p>方案二是<code>function name()</code>这样定义，先声明这是一个函数，然后写上函数名，最后也是一对小括号，大括号里写函数体。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">name</span></span>()&#123;</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Shell的函数也是有返回值的，不过返回值的类型很少不像Java中可以返回数字字符串甚至返回对象，在Shell中只能返回数字，还只能是0~255的。变量只有8个二进制位，就算你返回了一个255以上的数字也会返回出溢出之后的数字的。返回值是不可以赋值的，想使用函数的返回值的话要用<code>$?</code>，这个符号代表上一次调用的函数的返回值。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">my</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">my 1</div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div><div class=\"line\">my 10</div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div><div class=\"line\">my 256 </div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div><div class=\"line\">my -2</div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div><div class=\"line\">my 123.123</div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div></pre></td></tr></table></figure></p>\n<p>这里前两个可以正常输出，256因为溢出了所以输出不正常，负数和浮点数不支持。</p>\n<h1 id=\"0X0B-test测试\"><a href=\"#0X0B-test测试\" class=\"headerlink\" title=\"0X0B test测试\"></a>0X0B test测试</h1><p>test测试可以测试各种数据，包括数字、字符串、文件。使用方法如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -e /etc/passwd <span class=\"comment\">#判断是否存在这个文件</span></div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"ok\"</span>  <span class=\"comment\">#存在则输出ok</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"no\"</span>  <span class=\"comment\">#不存在则输出no</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"针对数字的测试\"><a href=\"#针对数字的测试\" class=\"headerlink\" title=\"针对数字的测试\"></a>针对数字的测试</h2><p>-eq    等于则为真<br>-ne    不等于则为真<br>-gt    大于则为真<br>-ge    大于等于则为真<br>-lt    小于则为真<br>-le    小于等于则为真</p>\n<h2 id=\"针对字符串的测试\"><a href=\"#针对字符串的测试\" class=\"headerlink\" title=\"针对字符串的测试\"></a>针对字符串的测试</h2><p>=    等于则为真<br>!=    不相等则为真<br>-z 字符串    字符串的长度为零则为真<br>-n 字符串    字符串的长度不为零则为真</p>\n<h2 id=\"针对文件的测试\"><a href=\"#针对文件的测试\" class=\"headerlink\" title=\"针对文件的测试\"></a>针对文件的测试</h2><p>-e 文件名    如果文件存在则为真<br>-r 文件名    如果文件存在且可读则为真<br>-w 文件名    如果文件存在且可写则为真<br>-x 文件名    如果文件存在且可执行则为真<br>-s 文件名    如果文件存在且至少有一个字符则为真<br>-d 文件名    如果文件存在且为目录则为真<br>-f 文件名    如果文件存在且为普通文件则为真<br>-c 文件名    如果文件存在且为字符型特殊文件则为真<br>-b 文件名    如果文件存在且为块特殊文件则为真</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-hello-world\"><a href=\"#0X00-hello-world\" class=\"headerlink\" title=\"0X00 hello,world\"></a>0X00 hello,world</h1><p>从一本<em>The C Programming Language</em>开始，我们就开始了几十年的’hello,world’之路。从那以后，机会所有的教程都从输出一句’hello,world’开始，这次也不例外。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div></pre></td></tr></table></figure></p>\n<p>这里的第一行是注释，这个注释是很特殊的，他会告诉系统我们使用哪个解释器来运行下面的代码，这里我们用的是<code>/bin/bash</code>，当然Python的代码就要加上<code>#!/usr/bin/python</code>。<br>第二行就是输出一句’hello,world’。<code>echo</code>就是输出语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@mail shell]# chmod +x test.sh</div><div class=\"line\">[root@mail shell]# ./test.sh</div><div class=\"line\">hello,world</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h2><p>执行之前要给脚本一个x权限，也就是执行权限。然后直接运行就行了。还有一种运行方式是<code>/bin/bash test.sh</code> 这样就是执行bash这个命令，将test.sh作为参数传进去，这样就可以不必写第一行的解释器声明。但是建议使用第一种方式执行脚本。</p>\n<h1 id=\"0X01-使用变量\"><a href=\"#0X01-使用变量\" class=\"headerlink\" title=\"0X01 使用变量\"></a>0X01 使用变量</h1><p>既然是编程，那一定会有变量。Shell编程里的变量和C、Java不同，我们不需要声明一个变量就能直接赋值，想下面这样。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里需要注意一点，我们在写一些代码的时候，可能习惯了像这样使用操作符<code>str = &quot;hello,world&quot;</code>,也就是在操作符两端加上空格。但是在Shell编程里这样做是被禁止的，加了空格就会导致语法错误。所以Shell编程里的空格限制是很严格的。</p>\n</blockquote>\n<p>给一个新的变量赋值的时候我们可以直接写变量名，但是我们调用这个变量的时候要给变量名前面加上一个<code>$</code>符号，就像上面我写的那样。当然最好写成下面这种形式<code>${str}</code>因为这样会更加清晰的显示出变量名。</p>\n<h2 id=\"只读变量\"><a href=\"#只读变量\" class=\"headerlink\" title=\"只读变量\"></a>只读变量</h2><p>在Shell中有一种变量叫‘只读变量’，顾名思义，这种变量的值不会被改变，是固定的，我们这样来声明一个只读变量<code>readonly str</code>。只读变量之前也是可以随意更改的，只是在后面给它加上了一个只读属性而已，就像下面这样。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"built_in\">readonly</span> str</div><div class=\"line\">str=<span class=\"string\">\"hey,world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> str</div></pre></td></tr></table></figure></p>\n<p>就会报错：’./hello.sh: line 5: str: readonly variable’</p>\n<h2 id=\"删除变量\"><a href=\"#删除变量\" class=\"headerlink\" title=\"删除变量\"></a>删除变量</h2><p>当我们不再使用一个变量的时候，可以把这个变量删除掉<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"built_in\">unset</span> str</div><div class=\"line\"><span class=\"built_in\">echo</span> str</div></pre></td></tr></table></figure></p>\n<p>这里什么都不会输出，因为并没有str这个变量。在Shell中输出一个并不存在的变量不会有提示。</p>\n<h1 id=\"0X02-执行一行命令\"><a href=\"#0X02-执行一行命令\" class=\"headerlink\" title=\"0X02 执行一行命令\"></a>0X02 执行一行命令</h1><p>既然是Shell编程，那么执行命令是最重要的事情了。所以在Shell编程里执行命令也是非常简单的，直接把要执行的命令写到这里就行了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">lscpu  <span class=\"comment\">#这个命令是查看CPU相关信息的</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-字符串\"><a href=\"#0X03-字符串\" class=\"headerlink\" title=\"0X03 字符串\"></a>0X03 字符串</h1><p>字符串可以用单引号包起来，也可以用双引号包起来。单引号包起来的字符串会原封不动，会忽略转义字符和变量；双引号包起来的字符串会识别转义字符和变量。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=<span class=\"string\">\"hello\"</span></div><div class=\"line\">str1=<span class=\"string\">'$a, world'</span>  <span class=\"comment\">#单引号字符串</span></div><div class=\"line\">str2=<span class=\"string\">\"<span class=\"variable\">$a</span>, world\"</span>  <span class=\"comment\">#双引号字符串</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str1</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str2</span></div></pre></td></tr></table></figure></p>\n<p>输出是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@mail shell]<span class=\"comment\"># ./hello.sh</span></div><div class=\"line\"><span class=\"variable\">$a</span>, wrld        <span class=\"comment\">#可以看到这里没有识别到变量</span></div><div class=\"line\">hello, world    <span class=\"comment\">#这里是识别到了变量的</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>Shell里拼接字符串的语法非常简陋，直接把两个字符串变量写在一起就行了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str1=<span class=\"string\">\"hello,\"</span></div><div class=\"line\">str2=<span class=\"string\">\"world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str1</span><span class=\"variable\">$str2</span>  <span class=\"comment\">#就这么简单粗暴</span></div></pre></td></tr></table></figure></p>\n<p>这样就可以输出一个’hello,world’了</p>\n<h2 id=\"获取长度\"><a href=\"#获取长度\" class=\"headerlink\" title=\"获取长度\"></a>获取长度</h2><p>在Shell编程里获取字符串长度不是通过一个len方法或者.length属性获取，而是通过下面这种并不直观的方式获取长度。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\">str_len=<span class=\"variable\">$&#123;#str&#125;</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str_len</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"部分截取\"><a href=\"#部分截取\" class=\"headerlink\" title=\"部分截取\"></a>部分截取</h2><p>在Shell编程里我们可以截取一个字符串中的某一段，只需要两个参数，一个来指定开始位置，一个来指定结束位置。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;str:1:4&#125;</span></div></pre></td></tr></table></figure></p>\n<p>这样可以截取str字符串从1到4的部分。是一个闭区间，从0开始计数。</p>\n<h2 id=\"查找位置\"><a href=\"#查找位置\" class=\"headerlink\" title=\"查找位置\"></a>查找位置</h2><p>我们经常会需要从一段字符串里找到某个字符出现的位置，可以通过下面的方法来查找。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello,world\"</span></div><div class=\"line\">index=`expr index <span class=\"string\">\"<span class=\"variable\">$str</span>\"</span> lo` <span class=\"comment\">#查找l或者o这个字符首次出现在字符串的哪个位置</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-搞个数组\"><a href=\"#0X04-搞个数组\" class=\"headerlink\" title=\"0X04 搞个数组\"></a>0X04 搞个数组</h1><p>既然是编程，那么当然要有数组这个最基本的数据结构了。但是Shell只支持一维数组，并不支持二维和多维数组。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">array_str=(<span class=\"string\">\"hello\"</span> <span class=\"string\">\"hey\"</span> <span class=\"string\">\"nihao\"</span>)</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array_str[2]&#125;</span> <span class=\"comment\">#定义的时候用的是小括号，调用的时候是大括号</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;array_str[@]&#125;</span> <span class=\"comment\">#这里的一个@表示数组里的所有内容</span></div></pre></td></tr></table></figure>\n<h2 id=\"获取数组的长度\"><a href=\"#获取数组的长度\" class=\"headerlink\" title=\"获取数组的长度\"></a>获取数组的长度</h2><p>获取数组长度的方式和获取字符串长度的方式差不太多。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">array_str=(<span class=\"string\">\"hello\"</span> <span class=\"string\">\"hey\"</span> <span class=\"string\">\"nihao\"</span>)</div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_str[@]&#125;</span> <span class=\"comment\">#获取数组长度</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$length</span></div><div class=\"line\">length=<span class=\"variable\">$&#123;#array_str[2]&#125;</span> <span class=\"comment\">#获取数组中某个元素的长度</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$length</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-别忘了注释\"><a href=\"#0X05-别忘了注释\" class=\"headerlink\" title=\"0X05 别忘了注释\"></a>0X05 别忘了注释</h1><p>编程的时候给关键代码加上注释是一个非常好的习惯。Shell编程里只支持单行注释，不支持多行注释。单行注释是这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">str=<span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"comment\">#str=\"world\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$str</span></div></pre></td></tr></table></figure></p>\n<p>这样输出的结果是’hello’而不是’world’因为哪一行被注释掉了，并不会执行。<br>那么我们需要多行注释怎么办呢？其实也不是不可以，我们可以用一个诡异的方式来实现多行注释：把需要注释掉的代码改写成一个函数，只要我们在后面不去调用这个函数，那不就和被注释掉是一样的效果了嘛。关于函数的问题下面会说的。</p>\n<h1 id=\"0X06-Shell参数\"><a href=\"#0X06-Shell参数\" class=\"headerlink\" title=\"0X06 Shell参数\"></a>0X06 Shell参数</h1><p>我们的Shell脚本经常是需要传入参数进来的，那么应该怎么传进来呢？我们有下面一段代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1. <span class=\"variable\">$1</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2. <span class=\"variable\">$2</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"3. <span class=\"variable\">$3</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"all is <span class=\"variable\">$#</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"pid is $$\"</span></div></pre></td></tr></table></figure></p>\n<p>我们运行一下这段代码，并传入两个参数<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@mail shell]<span class=\"comment\"># ./hello.sh hello world</span></div><div class=\"line\">1. hello</div><div class=\"line\">2. world</div><div class=\"line\">3. </div><div class=\"line\">all is 2</div><div class=\"line\">pid is 22017</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>$1 $2 $3 这些参数表示：传入的第几个参数<br>$# 表示传入的参数总数<br>$$ 表示这个脚本运行的PID  （进程号）</p>\n</blockquote>\n<h1 id=\"0X07-运算符\"><a href=\"#0X07-运算符\" class=\"headerlink\" title=\"0X07 运算符\"></a>0X07 运算符</h1><p>运算符示例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">val=`expr 1 + 1` <span class=\"comment\">#注意空格问题</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$val</span></div></pre></td></tr></table></figure></p>\n<p>最常见的 <code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>=</code> <code>==</code> 全都有的，不过注意的一点是，运算符两边一定要加空格，一定。</p>\n<h2 id=\"bool布尔运算\"><a href=\"#bool布尔运算\" class=\"headerlink\" title=\"bool布尔运算\"></a>bool布尔运算</h2><p><code>!</code>  非<br><code>-o</code> 或<br><code>-a</code> 且<br>-eq 是‘判断是否相等，相等则true’<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=1</div><div class=\"line\">b=2</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> -o <span class=\"variable\">$a</span> == 1 ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ok\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"not ok\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<p>这段代码输出的是’ok’因为虽然$a和$b并不相等，但是后面的<code>-o</code>表示或，或后面的<code>$a == 1</code>成立了，所以还是输出了ok</p>\n<h2 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h2><p><code>&amp;&amp;</code> and<br><code>||</code> or<br>下面这段Demo代码和上面的效果几乎是一样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=1</div><div class=\"line\">b=2</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$a</span> -eq <span class=\"variable\">$b</span> || <span class=\"variable\">$a</span> == 1 ]] <span class=\"comment\">#这里比上面多了一组中括号</span></div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ok\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"not ok\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"字符串运算符\"><a href=\"#字符串运算符\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h2><p><code>=</code>  这里不是赋值，是判断两个字符串是否相等<br><code>!=</code> 这里是判断不相等<br><code>-n</code> 检测字符串长度，不为0则返回true<br><code>-z</code> 检测字符串长度，为0则返回true<br><code>str</code> 检测字符串是否为空，这里的str表示一切字符串或者变量</p>\n<h2 id=\"运算符总结：\"><a href=\"#运算符总结：\" class=\"headerlink\" title=\"运算符总结：\"></a>运算符总结：</h2><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">运算符\t说明\t                                        举例</div><div class=\"line\">+\t     加法\t                                    `expr $a + $b` 结果为 30。</div><div class=\"line\">-\t     减法\t                                    `expr $a - $b` 结果为 -10。</div><div class=\"line\">*\t     乘法\t                                    `expr $a \\* $b` 结果为  200。</div><div class=\"line\">/\t     除法\t                                    `expr $b / $a` 结果为 2。</div><div class=\"line\">%\t     取余\t                                    `expr $b % $a` 结果为 0。</div><div class=\"line\">=\t     赋值\ta=$b 将把变量 b 的值赋给 a。</div><div class=\"line\">==\t     相等。用于比较两个数字，相同则返回 true。\t[ $a == $b ] 返回 false。</div><div class=\"line\">!=\t     不相等。用于比较两个数字，不相同则返回 true。[ $a != $b ] 返回 true。</div></pre></td></tr></table></figure>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">运算符\t说明\t                                      举例</div><div class=\"line\">-eq\t   检测两个数是否相等，相等返回 true。\t [ $a -eq $b ] 返回 false。</div><div class=\"line\">-ne\t   检测两个数是否相等，不相等返回 true。[ $a -ne $b ] 返回 true。</div><div class=\"line\">-gt\t   检测左边的数是否大于右边的，如果是，则返回 true。[ $a -gt $b ] 返回 false。</div><div class=\"line\">-lt\t   检测左边的数是否小于右边的，如果是，则返回 true。[ $a -lt $b ] 返回 true。</div><div class=\"line\">-ge\t   检测左边的数是否大等于右边的，如果是，则返回 true。[ $a -ge $b ] 返回 false。</div><div class=\"line\">-le\t   检测左边的数是否小于等于右边的，如果是，则返回 true。[ $a -le $b ] 返回 true。</div></pre></td></tr></table></figure>\n<h3 id=\"布尔运算符\"><a href=\"#布尔运算符\" class=\"headerlink\" title=\"布尔运算符\"></a>布尔运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">运算符\t说明\t                                             举例</div><div class=\"line\">!\t     非运算，表达式为 true 则返回 false，否则返回 true。[ ! false ] 返回 true。</div><div class=\"line\">-o\t    或运算，有一个表达式为 true 则返回 true。          [ $a -lt 20 -o $b -gt 100 ] 返回 true。</div><div class=\"line\">-a\t    与运算，两个表达式都为 true 才返回 true。\t         [ $a -lt 20 -a $b -gt 100 ] 返回 false。</div></pre></td></tr></table></figure>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">运算符\t说明\t      举例</div><div class=\"line\">&amp;&amp;\t    逻辑的 AND\t[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</div><div class=\"line\">||\t    逻辑的 OR\t [[ $a -lt 100 || $b -gt 100 ]] 返回 true</div></pre></td></tr></table></figure>\n<h3 id=\"字符串运算符-1\"><a href=\"#字符串运算符-1\" class=\"headerlink\" title=\"字符串运算符\"></a>字符串运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">运算符\t说明\t                                   举例</div><div class=\"line\">=\t     检测两个字符串是否相等，相等返回 true。  [ $a = $b ] 返回 false。</div><div class=\"line\">!=\t    检测两个字符串是否相等，不相等返回 true。[ $a != $b ] 返回 true。</div><div class=\"line\">-z\t    检测字符串长度是否为0，为0返回 true。    [ -z $a ] 返回 false。</div><div class=\"line\">-n\t    检测字符串长度是否为0，不为0返回 true。  [ -n $a ] 返回 true。</div><div class=\"line\">str   \t检测字符串是否为空，不为空返回 true。\t   [ $a ] 返回 true。</div></pre></td></tr></table></figure>\n<h3 id=\"文件测试运算符\"><a href=\"#文件测试运算符\" class=\"headerlink\" title=\"文件测试运算符\"></a>文件测试运算符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">操作符\t 说明\t                                             举例</div><div class=\"line\">-b file\t检测文件是否是块设备文件，如果是，则返回 true。\t   [ -b $file ] 返回 false。</div><div class=\"line\">-c file\t检测文件是否是字符设备文件，如果是，则返回 true。\t [ -c $file ] 返回 false。</div><div class=\"line\">-d file\t检测文件是否是目录，如果是，则返回 true。\t         [ -d $file ] 返回 false。</div><div class=\"line\">-f file\t检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。[ -f $file ] 返回 true。</div><div class=\"line\">-g file\t检测文件是否设置了 SGID 位，如果是，则返回 true。\t [ -g $file ] 返回 false。</div><div class=\"line\">-k file\t检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。[ -k $file ] 返回 false。</div><div class=\"line\">-p file\t检测文件是否是具名管道，如果是，则返回 true。\t     [ -p $file ] 返回 false。</div><div class=\"line\">-u file\t检测文件是否设置了 SUID 位，如果是，则返回 true。\t [ -u $file ] 返回 false。</div><div class=\"line\">-r file\t检测文件是否可读，如果是，则返回 true。\t           [ -r $file ] 返回 true。</div><div class=\"line\">-w file\t检测文件是否可写，如果是，则返回 true。\t           [ -w $file ] 返回 true。</div><div class=\"line\">-x file\t检测文件是否可执行，如果是，则返回 true。\t         [ -x $file ] 返回 true。</div><div class=\"line\">-s file\t检测文件是否为空（文件大小是否大于0），不为空返回 true。[ -s $file ] 返回 true。</div><div class=\"line\">-e file\t检测文件（包括目录）是否存在，如果是，则返回 true。[ -e $file ] 返回 true。</div></pre></td></tr></table></figure>\n<h1 id=\"0X08-条件判断语句\"><a href=\"#0X08-条件判断语句\" class=\"headerlink\" title=\"0X08 条件判断语句\"></a>0X08 条件判断语句</h1><h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if-else\"></a>if-else</h2><p>Shell 编程里的if语句和平时接触的编程语言有点区别</p>\n<ol>\n<li>if后面要加一个中括号，中括号之间是条件，而且中括号前后都要有一个空格；</li>\n<li>if调节写好之后要写一个then表示接下来执行什么</li>\n<li>then结束之后如果没有别的条件了的话就接一个if的逆字符串fi来表示if语句结束</li>\n<li>如果还有其他条件那就用elif，然后也是一个中括号里写条件，then后面接要执行的语句</li>\n<li>最后的else可写可不写，表示上面的条件没达成的话要执行的语句。</li>\n<li>if语句的最后一定是一个fi，表示if语句的结束</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">\"1\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"input is 1\"</span></div><div class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">\"2\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"input is 2\"</span></div><div class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$1</span> == <span class=\"string\">\"3\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"input is 3\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"input is big\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p>运行起来是这样的，比如我运行的参数是<code>./hello.sh 2</code>，那么就会输出’2’</p>\n<h2 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h2><p>跟if一起的一般还有一个switch-case语句，但是Shell里没有switch这个关键字，但是功能是一样的。<code>case $1 in</code>表示的是$1这个变量去对比下面的选项。下面的每一个选项都要加一个回括号，然后写上要执行的语句，再加上两个连续的分号，表示这一段结束，最后的<code>* )</code>表示匹配其他全部没有匹配到的可能。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"string\">\"1\"</span> )</div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"word is 1\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">    <span class=\"string\">\"2\"</span> )</div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"word is 2\"</span></div><div class=\"line\">        ;;</div><div class=\"line\">    * )</div><div class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"word is other\"</span></div><div class=\"line\">        ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X09-几种循环\"><a href=\"#0X09-几种循环\" class=\"headerlink\" title=\"0X09 几种循环\"></a>0X09 几种循环</h1><h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><p>在Shell编程里有我们非常熟悉的for循环，但是语法个其他编程语言还是有一定的出入。<br>在Shell里用for循环的话，要给每一段循环体加上<code>do...done</code>，表示这之间的代码是循环体，注意for的一行后面没有冒号，像Python的话就会有个冒号。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> <span class=\"string\">\"hello,wrld\"</span>\t<span class=\"comment\">#循环输出字符串中的每个字符</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> 1 2 3 4 5      <span class=\"comment\">#循环输出列表中的每一个数据</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<p><code>in</code>关键字前面是一个a后面是一堆数据，我们可以理解成把a从后面的一堆数据上走一遍，也就是说相当于Python代码中这样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"string\">'123'</span>, <span class=\"string\">'234'</span>, <span class=\"string\">'345'</span>, <span class=\"string\">'456'</span>]:</div><div class=\"line\">\t<span class=\"keyword\">print</span> i</div></pre></td></tr></table></figure></p>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$1</span> == <span class=\"string\">\"2\"</span> ]]</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>这段代码如果我是这样运行<code>./hello.sh 2</code> 那么因为<code>$1</code>是2所以就会进入死循环，否则就什么都不会输出。<br>while循环就是说，如果while后面的表达式成立，那么就执行一次循环。因为我这段代码没有改变$1的值，所以才会出现要么无输出要么死循环的情况。我们改成下面这种情况就好了，这意思是当我运行这个脚本，就执行10次。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=0</div><div class=\"line\"><span class=\"keyword\">while</span> [[ <span class=\"variable\">$a</span> -lt 10 ]]  <span class=\"comment\">#这里的 -lt 的意思是 '当左边的值小于右边的值就返回true'</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    a=<span class=\"variable\">$a</span>+1</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"until\"><a href=\"#until\" class=\"headerlink\" title=\"until\"></a>until</h2><p>until循环就相当于C和Java中的do-while循环，表示一个‘直到’的效果。下面就是说，执行循环体里的内容，一直到$a的变量大于右边的数值的时候才停止，所以才输出了11次’hello,world’<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">a=0</div><div class=\"line\">until [[ <span class=\"variable\">$a</span> -gt 10 ]]; </div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">    a=<span class=\"variable\">$a</span>+1</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\"><span class=\"keyword\">done</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X0A-写个函数\"><a href=\"#0X0A-写个函数\" class=\"headerlink\" title=\"0X0A 写个函数\"></a>0X0A 写个函数</h1><p>Shell里的函数有两种定义方式，效果是一样的。</p>\n<h2 id=\"方案1\"><a href=\"#方案1\" class=\"headerlink\" title=\"方案1\"></a>方案1</h2><p>方案一是直接写函数名，后面接一个括号，然后大括号里写上函数体就好了。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">myFunction</span></span>()&#123;</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"方案2\"><a href=\"#方案2\" class=\"headerlink\" title=\"方案2\"></a>方案2</h2><p>方案二是<code>function name()</code>这样定义，先声明这是一个函数，然后写上函数名，最后也是一对小括号，大括号里写函数体。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">name</span></span>()&#123;</div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"hello,world\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Shell的函数也是有返回值的，不过返回值的类型很少不像Java中可以返回数字字符串甚至返回对象，在Shell中只能返回数字，还只能是0~255的。变量只有8个二进制位，就算你返回了一个255以上的数字也会返回出溢出之后的数字的。返回值是不可以赋值的，想使用函数的返回值的话要用<code>$?</code>，这个符号代表上一次调用的函数的返回值。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">my</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$1</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">my 1</div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div><div class=\"line\">my 10</div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div><div class=\"line\">my 256 </div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div><div class=\"line\">my -2</div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div><div class=\"line\">my 123.123</div><div class=\"line\"><span class=\"built_in\">echo</span> $?</div></pre></td></tr></table></figure></p>\n<p>这里前两个可以正常输出，256因为溢出了所以输出不正常，负数和浮点数不支持。</p>\n<h1 id=\"0X0B-test测试\"><a href=\"#0X0B-test测试\" class=\"headerlink\" title=\"0X0B test测试\"></a>0X0B test测试</h1><p>test测试可以测试各种数据，包括数字、字符串、文件。使用方法如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -e /etc/passwd <span class=\"comment\">#判断是否存在这个文件</span></div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"ok\"</span>  <span class=\"comment\">#存在则输出ok</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"no\"</span>  <span class=\"comment\">#不存在则输出no</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"针对数字的测试\"><a href=\"#针对数字的测试\" class=\"headerlink\" title=\"针对数字的测试\"></a>针对数字的测试</h2><p>-eq    等于则为真<br>-ne    不等于则为真<br>-gt    大于则为真<br>-ge    大于等于则为真<br>-lt    小于则为真<br>-le    小于等于则为真</p>\n<h2 id=\"针对字符串的测试\"><a href=\"#针对字符串的测试\" class=\"headerlink\" title=\"针对字符串的测试\"></a>针对字符串的测试</h2><p>=    等于则为真<br>!=    不相等则为真<br>-z 字符串    字符串的长度为零则为真<br>-n 字符串    字符串的长度不为零则为真</p>\n<h2 id=\"针对文件的测试\"><a href=\"#针对文件的测试\" class=\"headerlink\" title=\"针对文件的测试\"></a>针对文件的测试</h2><p>-e 文件名    如果文件存在则为真<br>-r 文件名    如果文件存在且可读则为真<br>-w 文件名    如果文件存在且可写则为真<br>-x 文件名    如果文件存在且可执行则为真<br>-s 文件名    如果文件存在且至少有一个字符则为真<br>-d 文件名    如果文件存在且为目录则为真<br>-f 文件名    如果文件存在且为普通文件则为真<br>-c 文件名    如果文件存在且为字符型特殊文件则为真<br>-b 文件名    如果文件存在且为块特殊文件则为真</p>\n"},{"title":"Python 奇技淫巧 (五) 系统脚本","date":"2017-01-31T07:39:00.000Z","_content":"\n> ##### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 退出程序，显示错误信息\n写脚本的时候经常会有执行出错，出错的时候可以用一句话把程序退出并且打印错误信息\n`raise SystemExit('error message')`\n\n# 0X01 输入密码\n有的时候需要输入用户名和密码，使用`input()`输入用户名自然没有问题，但是用相同的方法输入密码的时候时使用明文的。长期用Linux的可能对Linux中密码的输入比较有印象，输入密码的时候是密文，且没有任何提示，包括星号，所以用这种方法输入密码是非常安全的。使用`petpass`库可以简单的输入用户名和密码，输入用户名最简单还是`input()`，如果要获取当前登录的用户名就可以使用`getpass.getuser()`，输入密码就可以使用`getpass.getpass()`来实现Linux中的那种密码输入。 **如果测试的时候有问题可以在命令行下测试，比如Windows的CMD或者Linux的终端**\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport getpass\n\n\nif __name__ == \"__main__\":\n    user = input(\"Username:\")\n    # user = getpass.getuser()\n\n    passwd = getpass.getpass()\n```\n\n# 0X03 执行命令\n在Linux中想要用Python代替Shell必然会出现在Python中调用命令的时候，那么这个时候就可以用这个方法来执行命令并获得输出内容。`subprocess.check_output([])`这个方法的参数是一个列表，列表里是一个或多个字符串，就像下面介绍的那样把命令通过空格拆分开，放到这个列表中。`check_output`返回的是一个二进制串，可以对其进行编码转变成人类可读的字符串。 **这种方法只在Linux里测试过** 毕竟没几个人会在WIndows下写脚本是吧。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport subprocess\n\n\nif __name__ == \"__main__\":\n    out_bype  = subprocess.check_output(['ls', '/dev'])\n    out_text = out_bype.decode('utf-8')\n    print(out_text)\n```\n\n# 0X04 复制/移动 文件/目录\n在Python中复制移动文件和目录非常简单，尤其是在不考虑链接的情况下。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nimport shutil\n\n\nif __name__ == \"__main__\":\n    shutil.copy('/etc/passwd', 'passwd')\t# 将/etc/passwd复制到当前目录，等同于Linux中的  cp /etc/passwd passwd\n    shutil.copytree('/etc', 'etc')\t\t\t# 复制目录\n\n    shutil.move('passwd', 'mima')\t\t\t# 移动文件，也可以重命名，和Linux中的mv命令一样\n```\n\n# 0X05 获取终端大小\n在Linux中一般是在终端下工作，那么有的时候需要知道当前终端大小来控制输出的字符串长度。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport os\n\nif __name__ == \"__main__\":\n    sz = os.get_terminal_size()\n    columns = sz.columns\n    lines   = sz.lines\n    print(sz)\n    print(columns)\n    print(lines)\n```\n\n# 0X06 os.walk()\n经常需要遍历一个目录，来获取目录中的内容，如果只需要查看一个目录，那么使用`os.listdir()`就足够了，如果只判断一个文件是否为目录，则`os.path.isdir()`也足够了。但是有的时候我们需要逐层遍历目录，且区别对待目录和文件，那么通常会自己手写一个递归的方法来解决。这样虽然能解决问题，但是毕竟多写了代码且效率还不高，其实`os`库里有一个方法值得我们使用就是`os.walk()`。这个方法接收一个目录作为参数，返回一个迭代器，每次迭代是一个元组，元组有三个元素，第一个元素是当前路径，第二个元素是当前目录下的目录名，第三个元素是当前目录下的文件。具体的可以看代码注释\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport os\n\nif __name__ == \"__main__\":\n    files = os.walk('D:/movie')\t\t# 这里调用了方法，传入一个路径，返回一个可迭代对象\n    for i in files:\t\t# 开始迭代\n        print('path_name: ', i[0])\t# 输出当前路径\n        print('dir_name : ', i[1])\t# 当前目录下的目录\n        print('file_name: ', i[2])\t# 当前目录下的文件\n        print('-----------------')\n```\n\n这个输出是下面这样的\n```bash\npath_name:  D:/movie\ndir_name :  ['加勒比海盗', '机械师', '火影忍者', '蜘蛛侠']\nfile_name:  ['V字仇杀队.mkv', 'wikileaks-720p.mkv', '湄公河行动.mkv', '盗梦空间.mkv', '神奇动物在哪里.mp4', '绝地逃亡.mkv']\n-----------------\npath_name:  D:/movie\\加勒比海盗\ndir_name :  []\nfile_name:  ['加勒比海盗1：黑珍珠号的诅咒.mkv', '加勒比海盗2：聚魂棺.avi', '加勒比海盗3：世界尽头.avi', '加勒比海盗4：惊涛怪浪.mkv']\n-----------------\npath_name:  D:/movie\\机械师\ndir_name :  []\nfile_name:  ['机械师1.mkv', '机械师2：复活.mp4']\n-----------------\npath_name:  D:/movie\\火影忍者\ndir_name :  []\nfile_name:  ['火影忍者：博人传.mp4', '火影忍者：忍者之路.mkv', '火影忍者：终章.mp4']\n-----------------\npath_name:  D:/movie\\蜘蛛侠\ndir_name :  []\nfile_name:  ['蜘蛛侠1-2002.mkv', '蜘蛛侠2-2004.mkv', '蜘蛛侠3-2007.mkv', '超凡蜘蛛侠1-2012.mkv', '超凡蜘蛛侠2-2014.mp4']\n-----------------\n```\n\n# 0X07 修改配置文件\n在Linux中有大量的配置文件，Windows中也有一些ini格式的配置文件，语法都一样的。那么用脚本来修改配置文件当然不必要全部读完整个文件后正则匹配，有一个非常简单且好用的方法。下面是我用来做测试的实例配置文件，命名为`1.ini`放在`D:/`根目录。\n```config\n[home]\nphone = On\nkindle = Off\nlearn = False\n\n[school]\nphone = On\nkindle = On\nlearn = True\n```\n可以看到，手机无论在哪都开机，Kindle只有在学校才用，学习也只有在学校才学。那么我们可以通过下面的方式来读取和修改这个配置文件。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom configparser import ConfigParser\nimport sys\n\nif __name__ == \"__main__\":\n    cfg = ConfigParser()    # 实例化一个对象\n    cfg.read('D:/1.ini')    # 读取配置文件\n\n    tables = cfg.sections() # 获取标签\n    print(tables)\n\n    phone_value = cfg.get('home', 'Phone')  # 获取home标签下Phone的值\n    print(phone_value)\n\n    kindle_value = cfg.get('school', 'Kindle')  # 获取school下Kindle的值\n    print(kindle_value)\n\n    learn_value = cfg.get('school', 'learn')    # 获取school下learn的值\n    print(learn_value)\n\n    cfg.set('home', 'learn', 'True')     # 修改home下的learn为True\n    f = open('D:/1.ini', 'w')            # 用可写模式打开文件\n    cfg.write(f)        # 将数据写回\n    f.close()           # 关闭文件\n```\n\n# 0X08 打开浏览器\n不管是要给用户展示一个页面还是要将数据用HTML形式展示出来，都需要打开浏览器，这个在Python中可以用一行代码来搞定。`webbrowser.open_new('http://blog.just666.cn')`可以打开一个新的浏览器窗口，并打开这个链接，`webbrowser.open_new_table('http://blog.just666.cn')`可以在当前浏览器窗口新开一个标签。（需要先导入`webbrowser`这个包）\n","source":"_posts/python_magic_5.md","raw":"---\ntitle: Python 奇技淫巧 (五) 系统脚本\ndate: 2017-01-31 15:39\ntags:\n  - Python\n  - Script\n---\n\n> ##### 文章中的代码仅在Python3中测试成功，没有在Python2中测试。\n\n# 0X00 退出程序，显示错误信息\n写脚本的时候经常会有执行出错，出错的时候可以用一句话把程序退出并且打印错误信息\n`raise SystemExit('error message')`\n\n# 0X01 输入密码\n有的时候需要输入用户名和密码，使用`input()`输入用户名自然没有问题，但是用相同的方法输入密码的时候时使用明文的。长期用Linux的可能对Linux中密码的输入比较有印象，输入密码的时候是密文，且没有任何提示，包括星号，所以用这种方法输入密码是非常安全的。使用`petpass`库可以简单的输入用户名和密码，输入用户名最简单还是`input()`，如果要获取当前登录的用户名就可以使用`getpass.getuser()`，输入密码就可以使用`getpass.getpass()`来实现Linux中的那种密码输入。 **如果测试的时候有问题可以在命令行下测试，比如Windows的CMD或者Linux的终端**\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport getpass\n\n\nif __name__ == \"__main__\":\n    user = input(\"Username:\")\n    # user = getpass.getuser()\n\n    passwd = getpass.getpass()\n```\n\n# 0X03 执行命令\n在Linux中想要用Python代替Shell必然会出现在Python中调用命令的时候，那么这个时候就可以用这个方法来执行命令并获得输出内容。`subprocess.check_output([])`这个方法的参数是一个列表，列表里是一个或多个字符串，就像下面介绍的那样把命令通过空格拆分开，放到这个列表中。`check_output`返回的是一个二进制串，可以对其进行编码转变成人类可读的字符串。 **这种方法只在Linux里测试过** 毕竟没几个人会在WIndows下写脚本是吧。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport subprocess\n\n\nif __name__ == \"__main__\":\n    out_bype  = subprocess.check_output(['ls', '/dev'])\n    out_text = out_bype.decode('utf-8')\n    print(out_text)\n```\n\n# 0X04 复制/移动 文件/目录\n在Python中复制移动文件和目录非常简单，尤其是在不考虑链接的情况下。\n```Python\n#!/usr/bin/python\n# coding=utf-8\n\nimport shutil\n\n\nif __name__ == \"__main__\":\n    shutil.copy('/etc/passwd', 'passwd')\t# 将/etc/passwd复制到当前目录，等同于Linux中的  cp /etc/passwd passwd\n    shutil.copytree('/etc', 'etc')\t\t\t# 复制目录\n\n    shutil.move('passwd', 'mima')\t\t\t# 移动文件，也可以重命名，和Linux中的mv命令一样\n```\n\n# 0X05 获取终端大小\n在Linux中一般是在终端下工作，那么有的时候需要知道当前终端大小来控制输出的字符串长度。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport os\n\nif __name__ == \"__main__\":\n    sz = os.get_terminal_size()\n    columns = sz.columns\n    lines   = sz.lines\n    print(sz)\n    print(columns)\n    print(lines)\n```\n\n# 0X06 os.walk()\n经常需要遍历一个目录，来获取目录中的内容，如果只需要查看一个目录，那么使用`os.listdir()`就足够了，如果只判断一个文件是否为目录，则`os.path.isdir()`也足够了。但是有的时候我们需要逐层遍历目录，且区别对待目录和文件，那么通常会自己手写一个递归的方法来解决。这样虽然能解决问题，但是毕竟多写了代码且效率还不高，其实`os`库里有一个方法值得我们使用就是`os.walk()`。这个方法接收一个目录作为参数，返回一个迭代器，每次迭代是一个元组，元组有三个元素，第一个元素是当前路径，第二个元素是当前目录下的目录名，第三个元素是当前目录下的文件。具体的可以看代码注释\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nimport os\n\nif __name__ == \"__main__\":\n    files = os.walk('D:/movie')\t\t# 这里调用了方法，传入一个路径，返回一个可迭代对象\n    for i in files:\t\t# 开始迭代\n        print('path_name: ', i[0])\t# 输出当前路径\n        print('dir_name : ', i[1])\t# 当前目录下的目录\n        print('file_name: ', i[2])\t# 当前目录下的文件\n        print('-----------------')\n```\n\n这个输出是下面这样的\n```bash\npath_name:  D:/movie\ndir_name :  ['加勒比海盗', '机械师', '火影忍者', '蜘蛛侠']\nfile_name:  ['V字仇杀队.mkv', 'wikileaks-720p.mkv', '湄公河行动.mkv', '盗梦空间.mkv', '神奇动物在哪里.mp4', '绝地逃亡.mkv']\n-----------------\npath_name:  D:/movie\\加勒比海盗\ndir_name :  []\nfile_name:  ['加勒比海盗1：黑珍珠号的诅咒.mkv', '加勒比海盗2：聚魂棺.avi', '加勒比海盗3：世界尽头.avi', '加勒比海盗4：惊涛怪浪.mkv']\n-----------------\npath_name:  D:/movie\\机械师\ndir_name :  []\nfile_name:  ['机械师1.mkv', '机械师2：复活.mp4']\n-----------------\npath_name:  D:/movie\\火影忍者\ndir_name :  []\nfile_name:  ['火影忍者：博人传.mp4', '火影忍者：忍者之路.mkv', '火影忍者：终章.mp4']\n-----------------\npath_name:  D:/movie\\蜘蛛侠\ndir_name :  []\nfile_name:  ['蜘蛛侠1-2002.mkv', '蜘蛛侠2-2004.mkv', '蜘蛛侠3-2007.mkv', '超凡蜘蛛侠1-2012.mkv', '超凡蜘蛛侠2-2014.mp4']\n-----------------\n```\n\n# 0X07 修改配置文件\n在Linux中有大量的配置文件，Windows中也有一些ini格式的配置文件，语法都一样的。那么用脚本来修改配置文件当然不必要全部读完整个文件后正则匹配，有一个非常简单且好用的方法。下面是我用来做测试的实例配置文件，命名为`1.ini`放在`D:/`根目录。\n```config\n[home]\nphone = On\nkindle = Off\nlearn = False\n\n[school]\nphone = On\nkindle = On\nlearn = True\n```\n可以看到，手机无论在哪都开机，Kindle只有在学校才用，学习也只有在学校才学。那么我们可以通过下面的方式来读取和修改这个配置文件。\n```python\n#!/usr/bin/python\n# coding=utf-8\n\nfrom configparser import ConfigParser\nimport sys\n\nif __name__ == \"__main__\":\n    cfg = ConfigParser()    # 实例化一个对象\n    cfg.read('D:/1.ini')    # 读取配置文件\n\n    tables = cfg.sections() # 获取标签\n    print(tables)\n\n    phone_value = cfg.get('home', 'Phone')  # 获取home标签下Phone的值\n    print(phone_value)\n\n    kindle_value = cfg.get('school', 'Kindle')  # 获取school下Kindle的值\n    print(kindle_value)\n\n    learn_value = cfg.get('school', 'learn')    # 获取school下learn的值\n    print(learn_value)\n\n    cfg.set('home', 'learn', 'True')     # 修改home下的learn为True\n    f = open('D:/1.ini', 'w')            # 用可写模式打开文件\n    cfg.write(f)        # 将数据写回\n    f.close()           # 关闭文件\n```\n\n# 0X08 打开浏览器\n不管是要给用户展示一个页面还是要将数据用HTML形式展示出来，都需要打开浏览器，这个在Python中可以用一行代码来搞定。`webbrowser.open_new('http://blog.just666.cn')`可以打开一个新的浏览器窗口，并打开这个链接，`webbrowser.open_new_table('http://blog.just666.cn')`可以在当前浏览器窗口新开一个标签。（需要先导入`webbrowser`这个包）\n","slug":"python_magic_5","published":1,"updated":"2017-09-02T14:49:42.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmke0087hnlpmwx83fno","content":"<blockquote>\n<h5 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h5></blockquote>\n<h1 id=\"0X00-退出程序，显示错误信息\"><a href=\"#0X00-退出程序，显示错误信息\" class=\"headerlink\" title=\"0X00 退出程序，显示错误信息\"></a>0X00 退出程序，显示错误信息</h1><p>写脚本的时候经常会有执行出错，出错的时候可以用一句话把程序退出并且打印错误信息<br><code>raise SystemExit(&#39;error message&#39;)</code></p>\n<h1 id=\"0X01-输入密码\"><a href=\"#0X01-输入密码\" class=\"headerlink\" title=\"0X01 输入密码\"></a>0X01 输入密码</h1><p>有的时候需要输入用户名和密码，使用<code>input()</code>输入用户名自然没有问题，但是用相同的方法输入密码的时候时使用明文的。长期用Linux的可能对Linux中密码的输入比较有印象，输入密码的时候是密文，且没有任何提示，包括星号，所以用这种方法输入密码是非常安全的。使用<code>petpass</code>库可以简单的输入用户名和密码，输入用户名最简单还是<code>input()</code>，如果要获取当前登录的用户名就可以使用<code>getpass.getuser()</code>，输入密码就可以使用<code>getpass.getpass()</code>来实现Linux中的那种密码输入。 <strong>如果测试的时候有问题可以在命令行下测试，比如Windows的CMD或者Linux的终端</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> getpass</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    user = input(<span class=\"string\">\"Username:\"</span>)</div><div class=\"line\">    <span class=\"comment\"># user = getpass.getuser()</span></div><div class=\"line\"></div><div class=\"line\">    passwd = getpass.getpass()</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-执行命令\"><a href=\"#0X03-执行命令\" class=\"headerlink\" title=\"0X03 执行命令\"></a>0X03 执行命令</h1><p>在Linux中想要用Python代替Shell必然会出现在Python中调用命令的时候，那么这个时候就可以用这个方法来执行命令并获得输出内容。<code>subprocess.check_output([])</code>这个方法的参数是一个列表，列表里是一个或多个字符串，就像下面介绍的那样把命令通过空格拆分开，放到这个列表中。<code>check_output</code>返回的是一个二进制串，可以对其进行编码转变成人类可读的字符串。 <strong>这种方法只在Linux里测试过</strong> 毕竟没几个人会在WIndows下写脚本是吧。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> subprocess</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    out_bype  = subprocess.check_output([<span class=\"string\">'ls'</span>, <span class=\"string\">'/dev'</span>])</div><div class=\"line\">    out_text = out_bype.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">    print(out_text)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-复制-移动-文件-目录\"><a href=\"#0X04-复制-移动-文件-目录\" class=\"headerlink\" title=\"0X04 复制/移动 文件/目录\"></a>0X04 复制/移动 文件/目录</h1><p>在Python中复制移动文件和目录非常简单，尤其是在不考虑链接的情况下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> shutil</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    shutil.copy(<span class=\"string\">'/etc/passwd'</span>, <span class=\"string\">'passwd'</span>)\t<span class=\"comment\"># 将/etc/passwd复制到当前目录，等同于Linux中的  cp /etc/passwd passwd</span></div><div class=\"line\">    shutil.copytree(<span class=\"string\">'/etc'</span>, <span class=\"string\">'etc'</span>)\t\t\t<span class=\"comment\"># 复制目录</span></div><div class=\"line\"></div><div class=\"line\">    shutil.move(<span class=\"string\">'passwd'</span>, <span class=\"string\">'mima'</span>)\t\t\t<span class=\"comment\"># 移动文件，也可以重命名，和Linux中的mv命令一样</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-获取终端大小\"><a href=\"#0X05-获取终端大小\" class=\"headerlink\" title=\"0X05 获取终端大小\"></a>0X05 获取终端大小</h1><p>在Linux中一般是在终端下工作，那么有的时候需要知道当前终端大小来控制输出的字符串长度。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    sz = os.get_terminal_size()</div><div class=\"line\">    columns = sz.columns</div><div class=\"line\">    lines   = sz.lines</div><div class=\"line\">    print(sz)</div><div class=\"line\">    print(columns)</div><div class=\"line\">    print(lines)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-os-walk\"><a href=\"#0X06-os-walk\" class=\"headerlink\" title=\"0X06 os.walk()\"></a>0X06 os.walk()</h1><p>经常需要遍历一个目录，来获取目录中的内容，如果只需要查看一个目录，那么使用<code>os.listdir()</code>就足够了，如果只判断一个文件是否为目录，则<code>os.path.isdir()</code>也足够了。但是有的时候我们需要逐层遍历目录，且区别对待目录和文件，那么通常会自己手写一个递归的方法来解决。这样虽然能解决问题，但是毕竟多写了代码且效率还不高，其实<code>os</code>库里有一个方法值得我们使用就是<code>os.walk()</code>。这个方法接收一个目录作为参数，返回一个迭代器，每次迭代是一个元组，元组有三个元素，第一个元素是当前路径，第二个元素是当前目录下的目录名，第三个元素是当前目录下的文件。具体的可以看代码注释<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    files = os.walk(<span class=\"string\">'D:/movie'</span>)\t\t<span class=\"comment\"># 这里调用了方法，传入一个路径，返回一个可迭代对象</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> files:\t\t<span class=\"comment\"># 开始迭代</span></div><div class=\"line\">        print(<span class=\"string\">'path_name: '</span>, i[<span class=\"number\">0</span>])\t<span class=\"comment\"># 输出当前路径</span></div><div class=\"line\">        print(<span class=\"string\">'dir_name : '</span>, i[<span class=\"number\">1</span>])\t<span class=\"comment\"># 当前目录下的目录</span></div><div class=\"line\">        print(<span class=\"string\">'file_name: '</span>, i[<span class=\"number\">2</span>])\t<span class=\"comment\"># 当前目录下的文件</span></div><div class=\"line\">        print(<span class=\"string\">'-----------------'</span>)</div></pre></td></tr></table></figure></p>\n<p>这个输出是下面这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">path_name:  D:/movie</div><div class=\"line\">dir_name :  [<span class=\"string\">'加勒比海盗'</span>, <span class=\"string\">'机械师'</span>, <span class=\"string\">'火影忍者'</span>, <span class=\"string\">'蜘蛛侠'</span>]</div><div class=\"line\">file_name:  [<span class=\"string\">'V字仇杀队.mkv'</span>, <span class=\"string\">'wikileaks-720p.mkv'</span>, <span class=\"string\">'湄公河行动.mkv'</span>, <span class=\"string\">'盗梦空间.mkv'</span>, <span class=\"string\">'神奇动物在哪里.mp4'</span>, <span class=\"string\">'绝地逃亡.mkv'</span>]</div><div class=\"line\">-----------------</div><div class=\"line\">path_name:  D:/movie\\加勒比海盗</div><div class=\"line\">dir_name :  []</div><div class=\"line\">file_name:  [<span class=\"string\">'加勒比海盗1：黑珍珠号的诅咒.mkv'</span>, <span class=\"string\">'加勒比海盗2：聚魂棺.avi'</span>, <span class=\"string\">'加勒比海盗3：世界尽头.avi'</span>, <span class=\"string\">'加勒比海盗4：惊涛怪浪.mkv'</span>]</div><div class=\"line\">-----------------</div><div class=\"line\">path_name:  D:/movie\\机械师</div><div class=\"line\">dir_name :  []</div><div class=\"line\">file_name:  [<span class=\"string\">'机械师1.mkv'</span>, <span class=\"string\">'机械师2：复活.mp4'</span>]</div><div class=\"line\">-----------------</div><div class=\"line\">path_name:  D:/movie\\火影忍者</div><div class=\"line\">dir_name :  []</div><div class=\"line\">file_name:  [<span class=\"string\">'火影忍者：博人传.mp4'</span>, <span class=\"string\">'火影忍者：忍者之路.mkv'</span>, <span class=\"string\">'火影忍者：终章.mp4'</span>]</div><div class=\"line\">-----------------</div><div class=\"line\">path_name:  D:/movie\\蜘蛛侠</div><div class=\"line\">dir_name :  []</div><div class=\"line\">file_name:  [<span class=\"string\">'蜘蛛侠1-2002.mkv'</span>, <span class=\"string\">'蜘蛛侠2-2004.mkv'</span>, <span class=\"string\">'蜘蛛侠3-2007.mkv'</span>, <span class=\"string\">'超凡蜘蛛侠1-2012.mkv'</span>, <span class=\"string\">'超凡蜘蛛侠2-2014.mp4'</span>]</div><div class=\"line\">-----------------</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-修改配置文件\"><a href=\"#0X07-修改配置文件\" class=\"headerlink\" title=\"0X07 修改配置文件\"></a>0X07 修改配置文件</h1><p>在Linux中有大量的配置文件，Windows中也有一些ini格式的配置文件，语法都一样的。那么用脚本来修改配置文件当然不必要全部读完整个文件后正则匹配，有一个非常简单且好用的方法。下面是我用来做测试的实例配置文件，命名为<code>1.ini</code>放在<code>D:/</code>根目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[home]</div><div class=\"line\">phone = On</div><div class=\"line\">kindle = Off</div><div class=\"line\">learn = False</div><div class=\"line\"></div><div class=\"line\">[school]</div><div class=\"line\">phone = On</div><div class=\"line\">kindle = On</div><div class=\"line\">learn = True</div></pre></td></tr></table></figure></p>\n<p>可以看到，手机无论在哪都开机，Kindle只有在学校才用，学习也只有在学校才学。那么我们可以通过下面的方式来读取和修改这个配置文件。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> configparser <span class=\"keyword\">import</span> ConfigParser</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    cfg = ConfigParser()    <span class=\"comment\"># 实例化一个对象</span></div><div class=\"line\">    cfg.read(<span class=\"string\">'D:/1.ini'</span>)    <span class=\"comment\"># 读取配置文件</span></div><div class=\"line\"></div><div class=\"line\">    tables = cfg.sections() <span class=\"comment\"># 获取标签</span></div><div class=\"line\">    print(tables)</div><div class=\"line\"></div><div class=\"line\">    phone_value = cfg.get(<span class=\"string\">'home'</span>, <span class=\"string\">'Phone'</span>)  <span class=\"comment\"># 获取home标签下Phone的值</span></div><div class=\"line\">    print(phone_value)</div><div class=\"line\"></div><div class=\"line\">    kindle_value = cfg.get(<span class=\"string\">'school'</span>, <span class=\"string\">'Kindle'</span>)  <span class=\"comment\"># 获取school下Kindle的值</span></div><div class=\"line\">    print(kindle_value)</div><div class=\"line\"></div><div class=\"line\">    learn_value = cfg.get(<span class=\"string\">'school'</span>, <span class=\"string\">'learn'</span>)    <span class=\"comment\"># 获取school下learn的值</span></div><div class=\"line\">    print(learn_value)</div><div class=\"line\"></div><div class=\"line\">    cfg.set(<span class=\"string\">'home'</span>, <span class=\"string\">'learn'</span>, <span class=\"string\">'True'</span>)     <span class=\"comment\"># 修改home下的learn为True</span></div><div class=\"line\">    f = open(<span class=\"string\">'D:/1.ini'</span>, <span class=\"string\">'w'</span>)            <span class=\"comment\"># 用可写模式打开文件</span></div><div class=\"line\">    cfg.write(f)        <span class=\"comment\"># 将数据写回</span></div><div class=\"line\">    f.close()           <span class=\"comment\"># 关闭文件</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-打开浏览器\"><a href=\"#0X08-打开浏览器\" class=\"headerlink\" title=\"0X08 打开浏览器\"></a>0X08 打开浏览器</h1><p>不管是要给用户展示一个页面还是要将数据用HTML形式展示出来，都需要打开浏览器，这个在Python中可以用一行代码来搞定。<code>webbrowser.open_new(&#39;http://blog.just666.cn&#39;)</code>可以打开一个新的浏览器窗口，并打开这个链接，<code>webbrowser.open_new_table(&#39;http://blog.just666.cn&#39;)</code>可以在当前浏览器窗口新开一个标签。（需要先导入<code>webbrowser</code>这个包）</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h5 id=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"><a href=\"#文章中的代码仅在Python3中测试成功，没有在Python2中测试。\" class=\"headerlink\" title=\"文章中的代码仅在Python3中测试成功，没有在Python2中测试。\"></a>文章中的代码仅在Python3中测试成功，没有在Python2中测试。</h5></blockquote>\n<h1 id=\"0X00-退出程序，显示错误信息\"><a href=\"#0X00-退出程序，显示错误信息\" class=\"headerlink\" title=\"0X00 退出程序，显示错误信息\"></a>0X00 退出程序，显示错误信息</h1><p>写脚本的时候经常会有执行出错，出错的时候可以用一句话把程序退出并且打印错误信息<br><code>raise SystemExit(&#39;error message&#39;)</code></p>\n<h1 id=\"0X01-输入密码\"><a href=\"#0X01-输入密码\" class=\"headerlink\" title=\"0X01 输入密码\"></a>0X01 输入密码</h1><p>有的时候需要输入用户名和密码，使用<code>input()</code>输入用户名自然没有问题，但是用相同的方法输入密码的时候时使用明文的。长期用Linux的可能对Linux中密码的输入比较有印象，输入密码的时候是密文，且没有任何提示，包括星号，所以用这种方法输入密码是非常安全的。使用<code>petpass</code>库可以简单的输入用户名和密码，输入用户名最简单还是<code>input()</code>，如果要获取当前登录的用户名就可以使用<code>getpass.getuser()</code>，输入密码就可以使用<code>getpass.getpass()</code>来实现Linux中的那种密码输入。 <strong>如果测试的时候有问题可以在命令行下测试，比如Windows的CMD或者Linux的终端</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> getpass</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    user = input(<span class=\"string\">\"Username:\"</span>)</div><div class=\"line\">    <span class=\"comment\"># user = getpass.getuser()</span></div><div class=\"line\"></div><div class=\"line\">    passwd = getpass.getpass()</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X03-执行命令\"><a href=\"#0X03-执行命令\" class=\"headerlink\" title=\"0X03 执行命令\"></a>0X03 执行命令</h1><p>在Linux中想要用Python代替Shell必然会出现在Python中调用命令的时候，那么这个时候就可以用这个方法来执行命令并获得输出内容。<code>subprocess.check_output([])</code>这个方法的参数是一个列表，列表里是一个或多个字符串，就像下面介绍的那样把命令通过空格拆分开，放到这个列表中。<code>check_output</code>返回的是一个二进制串，可以对其进行编码转变成人类可读的字符串。 <strong>这种方法只在Linux里测试过</strong> 毕竟没几个人会在WIndows下写脚本是吧。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> subprocess</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    out_bype  = subprocess.check_output([<span class=\"string\">'ls'</span>, <span class=\"string\">'/dev'</span>])</div><div class=\"line\">    out_text = out_bype.decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">    print(out_text)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X04-复制-移动-文件-目录\"><a href=\"#0X04-复制-移动-文件-目录\" class=\"headerlink\" title=\"0X04 复制/移动 文件/目录\"></a>0X04 复制/移动 文件/目录</h1><p>在Python中复制移动文件和目录非常简单，尤其是在不考虑链接的情况下。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> shutil</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    shutil.copy(<span class=\"string\">'/etc/passwd'</span>, <span class=\"string\">'passwd'</span>)\t<span class=\"comment\"># 将/etc/passwd复制到当前目录，等同于Linux中的  cp /etc/passwd passwd</span></div><div class=\"line\">    shutil.copytree(<span class=\"string\">'/etc'</span>, <span class=\"string\">'etc'</span>)\t\t\t<span class=\"comment\"># 复制目录</span></div><div class=\"line\"></div><div class=\"line\">    shutil.move(<span class=\"string\">'passwd'</span>, <span class=\"string\">'mima'</span>)\t\t\t<span class=\"comment\"># 移动文件，也可以重命名，和Linux中的mv命令一样</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X05-获取终端大小\"><a href=\"#0X05-获取终端大小\" class=\"headerlink\" title=\"0X05 获取终端大小\"></a>0X05 获取终端大小</h1><p>在Linux中一般是在终端下工作，那么有的时候需要知道当前终端大小来控制输出的字符串长度。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    sz = os.get_terminal_size()</div><div class=\"line\">    columns = sz.columns</div><div class=\"line\">    lines   = sz.lines</div><div class=\"line\">    print(sz)</div><div class=\"line\">    print(columns)</div><div class=\"line\">    print(lines)</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X06-os-walk\"><a href=\"#0X06-os-walk\" class=\"headerlink\" title=\"0X06 os.walk()\"></a>0X06 os.walk()</h1><p>经常需要遍历一个目录，来获取目录中的内容，如果只需要查看一个目录，那么使用<code>os.listdir()</code>就足够了，如果只判断一个文件是否为目录，则<code>os.path.isdir()</code>也足够了。但是有的时候我们需要逐层遍历目录，且区别对待目录和文件，那么通常会自己手写一个递归的方法来解决。这样虽然能解决问题，但是毕竟多写了代码且效率还不高，其实<code>os</code>库里有一个方法值得我们使用就是<code>os.walk()</code>。这个方法接收一个目录作为参数，返回一个迭代器，每次迭代是一个元组，元组有三个元素，第一个元素是当前路径，第二个元素是当前目录下的目录名，第三个元素是当前目录下的文件。具体的可以看代码注释<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    files = os.walk(<span class=\"string\">'D:/movie'</span>)\t\t<span class=\"comment\"># 这里调用了方法，传入一个路径，返回一个可迭代对象</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> files:\t\t<span class=\"comment\"># 开始迭代</span></div><div class=\"line\">        print(<span class=\"string\">'path_name: '</span>, i[<span class=\"number\">0</span>])\t<span class=\"comment\"># 输出当前路径</span></div><div class=\"line\">        print(<span class=\"string\">'dir_name : '</span>, i[<span class=\"number\">1</span>])\t<span class=\"comment\"># 当前目录下的目录</span></div><div class=\"line\">        print(<span class=\"string\">'file_name: '</span>, i[<span class=\"number\">2</span>])\t<span class=\"comment\"># 当前目录下的文件</span></div><div class=\"line\">        print(<span class=\"string\">'-----------------'</span>)</div></pre></td></tr></table></figure></p>\n<p>这个输出是下面这样的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">path_name:  D:/movie</div><div class=\"line\">dir_name :  [<span class=\"string\">'加勒比海盗'</span>, <span class=\"string\">'机械师'</span>, <span class=\"string\">'火影忍者'</span>, <span class=\"string\">'蜘蛛侠'</span>]</div><div class=\"line\">file_name:  [<span class=\"string\">'V字仇杀队.mkv'</span>, <span class=\"string\">'wikileaks-720p.mkv'</span>, <span class=\"string\">'湄公河行动.mkv'</span>, <span class=\"string\">'盗梦空间.mkv'</span>, <span class=\"string\">'神奇动物在哪里.mp4'</span>, <span class=\"string\">'绝地逃亡.mkv'</span>]</div><div class=\"line\">-----------------</div><div class=\"line\">path_name:  D:/movie\\加勒比海盗</div><div class=\"line\">dir_name :  []</div><div class=\"line\">file_name:  [<span class=\"string\">'加勒比海盗1：黑珍珠号的诅咒.mkv'</span>, <span class=\"string\">'加勒比海盗2：聚魂棺.avi'</span>, <span class=\"string\">'加勒比海盗3：世界尽头.avi'</span>, <span class=\"string\">'加勒比海盗4：惊涛怪浪.mkv'</span>]</div><div class=\"line\">-----------------</div><div class=\"line\">path_name:  D:/movie\\机械师</div><div class=\"line\">dir_name :  []</div><div class=\"line\">file_name:  [<span class=\"string\">'机械师1.mkv'</span>, <span class=\"string\">'机械师2：复活.mp4'</span>]</div><div class=\"line\">-----------------</div><div class=\"line\">path_name:  D:/movie\\火影忍者</div><div class=\"line\">dir_name :  []</div><div class=\"line\">file_name:  [<span class=\"string\">'火影忍者：博人传.mp4'</span>, <span class=\"string\">'火影忍者：忍者之路.mkv'</span>, <span class=\"string\">'火影忍者：终章.mp4'</span>]</div><div class=\"line\">-----------------</div><div class=\"line\">path_name:  D:/movie\\蜘蛛侠</div><div class=\"line\">dir_name :  []</div><div class=\"line\">file_name:  [<span class=\"string\">'蜘蛛侠1-2002.mkv'</span>, <span class=\"string\">'蜘蛛侠2-2004.mkv'</span>, <span class=\"string\">'蜘蛛侠3-2007.mkv'</span>, <span class=\"string\">'超凡蜘蛛侠1-2012.mkv'</span>, <span class=\"string\">'超凡蜘蛛侠2-2014.mp4'</span>]</div><div class=\"line\">-----------------</div></pre></td></tr></table></figure></p>\n<h1 id=\"0X07-修改配置文件\"><a href=\"#0X07-修改配置文件\" class=\"headerlink\" title=\"0X07 修改配置文件\"></a>0X07 修改配置文件</h1><p>在Linux中有大量的配置文件，Windows中也有一些ini格式的配置文件，语法都一样的。那么用脚本来修改配置文件当然不必要全部读完整个文件后正则匹配，有一个非常简单且好用的方法。下面是我用来做测试的实例配置文件，命名为<code>1.ini</code>放在<code>D:/</code>根目录。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[home]</div><div class=\"line\">phone = On</div><div class=\"line\">kindle = Off</div><div class=\"line\">learn = False</div><div class=\"line\"></div><div class=\"line\">[school]</div><div class=\"line\">phone = On</div><div class=\"line\">kindle = On</div><div class=\"line\">learn = True</div></pre></td></tr></table></figure></p>\n<p>可以看到，手机无论在哪都开机，Kindle只有在学校才用，学习也只有在学校才学。那么我们可以通过下面的方式来读取和修改这个配置文件。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"comment\"># coding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> configparser <span class=\"keyword\">import</span> ConfigParser</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    cfg = ConfigParser()    <span class=\"comment\"># 实例化一个对象</span></div><div class=\"line\">    cfg.read(<span class=\"string\">'D:/1.ini'</span>)    <span class=\"comment\"># 读取配置文件</span></div><div class=\"line\"></div><div class=\"line\">    tables = cfg.sections() <span class=\"comment\"># 获取标签</span></div><div class=\"line\">    print(tables)</div><div class=\"line\"></div><div class=\"line\">    phone_value = cfg.get(<span class=\"string\">'home'</span>, <span class=\"string\">'Phone'</span>)  <span class=\"comment\"># 获取home标签下Phone的值</span></div><div class=\"line\">    print(phone_value)</div><div class=\"line\"></div><div class=\"line\">    kindle_value = cfg.get(<span class=\"string\">'school'</span>, <span class=\"string\">'Kindle'</span>)  <span class=\"comment\"># 获取school下Kindle的值</span></div><div class=\"line\">    print(kindle_value)</div><div class=\"line\"></div><div class=\"line\">    learn_value = cfg.get(<span class=\"string\">'school'</span>, <span class=\"string\">'learn'</span>)    <span class=\"comment\"># 获取school下learn的值</span></div><div class=\"line\">    print(learn_value)</div><div class=\"line\"></div><div class=\"line\">    cfg.set(<span class=\"string\">'home'</span>, <span class=\"string\">'learn'</span>, <span class=\"string\">'True'</span>)     <span class=\"comment\"># 修改home下的learn为True</span></div><div class=\"line\">    f = open(<span class=\"string\">'D:/1.ini'</span>, <span class=\"string\">'w'</span>)            <span class=\"comment\"># 用可写模式打开文件</span></div><div class=\"line\">    cfg.write(f)        <span class=\"comment\"># 将数据写回</span></div><div class=\"line\">    f.close()           <span class=\"comment\"># 关闭文件</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"0X08-打开浏览器\"><a href=\"#0X08-打开浏览器\" class=\"headerlink\" title=\"0X08 打开浏览器\"></a>0X08 打开浏览器</h1><p>不管是要给用户展示一个页面还是要将数据用HTML形式展示出来，都需要打开浏览器，这个在Python中可以用一行代码来搞定。<code>webbrowser.open_new(&#39;http://blog.just666.cn&#39;)</code>可以打开一个新的浏览器窗口，并打开这个链接，<code>webbrowser.open_new_table(&#39;http://blog.just666.cn&#39;)</code>可以在当前浏览器窗口新开一个标签。（需要先导入<code>webbrowser</code>这个包）</p>\n"},{"title":"Python中OS库的常用方法","date":"2017-04-01T12:56:00.000Z","_content":"\n在写一些系统脚本或者自动化运维脚本的时候经常会用到os库，这里做个整理，方便查找\n\n### os.sep\n获得当前操作系统使用的目录分隔符，比如Windows就会得到`\\`而Linux/Unix就会得到`/`\n\n### os.name\n获得当前使用的操作系统，Windows是NT内核，所以会得到`nt`，而Linux/Unix用户则会得到`posix`\n\n### os.getcwd()\n获得当前工作目录，即当前Python脚本工作的目录路径。\n\n### os.getenv()\n用来获得环境变量\n`os.getenv('PATH')`\n\n### os.environ\n可以获取并修改环境变量\n```Python\nprint(os.environ['PATH'])\nos.environ += 'D:/testdir/bin/'\nprint(os.environ[\"PATH\"])\n```\n\n### os.listdir()\n列出某目录下所有的目录和文件\n`print(os.listdir())`\n\n### os.remove()\n删除文件\n`os.remove('D:/test.file')`\n\n### os.system()\n运行Shell或者CMD命令\n`os.system('ifconfig')`\n\n### os.linesep\n获取当前平台使用的行终止符。例如，Windows使用`\\r\\n`，Linux使用`\\n`而Mac使用`\\r`。\n\n### os.path.split()\n获得一个列表，list[0]是路径的，list[1]是文件名\n```Python\npath = 'D:/game/gtav/bin/gtav.exe'\nprint(os.path.split(path)[0])\nprint(os.path.split(path)[1])\n```\n\n### os.path.isfile()和os.path.isdir()\n判断路径是不是文件/目录\n```Python\nprint(os.path.isfile('D:/game/gtav/bin/gtav.exe'))\nprint(os.path.isdir('D:/game/gtav/bin'))\n```\n\n### os.path.existe()\n函数用来检验给出的路径是否真地存在\n```Python\npath = 'D:\\\\hadoop-2.6.5\\\\bin'\nprint(os.path.exists(path))\npath = 'D:\\\\hadoop-2.6.5\\\\bin\\\\hadoop'\nprint(os.path.exists(path))\n```\n\n### os.chdir(dirname)\n切换工作目录，相当于`cd`的命令\n```Python\nos.chdir('D:/game/gtav/')\nprint(os.getcwd())\n```\n\n### os.path.getsize(name)\n获取文件大小，以字节为单位\n```Python\nsize = os.path.getsize('D:/iso/debian-8.6.0-amd64-DVD-1.iso')\nprint(size/1024/1024/1024, 'GB')\n```\n\n### os.path.abspath(name)\n获取绝对路径，如果在Python工作目录下有一个文件`file.txt`，那么我就可以直接`open('file.txt')`，也可以用该方法获得其绝对路径`print(os.path.abspath('file.txt'))`。也可以用来规范路径字符串`print(os.path.abspath('D:/game\\gtav\\bin/gtav.exe'))`\n\n### os.path.normpath(path)\n专门用来规范路径\n```Python\npath = 'D:/test/sdf\\zfb'\nprint(os.path.normpath(path))\n```\n\n### os.path.splitext()\n获取文件名和扩展名\n```Python\npath = '/home/shawn/hello.py'\nprint(os.path.splitext(path))\n```\n\n### os.path.join(path,name)\n连接目录和文件名，可以不用自己添加分隔符，能减少bug率提升跨平台性\n\n### os.path.basename(path)\n获取路径中的文件名\n\n### os.path.dirname(path)\n获取路径中的目录名\n","source":"_posts/python_os_lib.md","raw":"---\ntitle: Python中OS库的常用方法\ndate: 2017-04-01 20:56\ntags:\n  - Python\n---\n\n在写一些系统脚本或者自动化运维脚本的时候经常会用到os库，这里做个整理，方便查找\n\n### os.sep\n获得当前操作系统使用的目录分隔符，比如Windows就会得到`\\`而Linux/Unix就会得到`/`\n\n### os.name\n获得当前使用的操作系统，Windows是NT内核，所以会得到`nt`，而Linux/Unix用户则会得到`posix`\n\n### os.getcwd()\n获得当前工作目录，即当前Python脚本工作的目录路径。\n\n### os.getenv()\n用来获得环境变量\n`os.getenv('PATH')`\n\n### os.environ\n可以获取并修改环境变量\n```Python\nprint(os.environ['PATH'])\nos.environ += 'D:/testdir/bin/'\nprint(os.environ[\"PATH\"])\n```\n\n### os.listdir()\n列出某目录下所有的目录和文件\n`print(os.listdir())`\n\n### os.remove()\n删除文件\n`os.remove('D:/test.file')`\n\n### os.system()\n运行Shell或者CMD命令\n`os.system('ifconfig')`\n\n### os.linesep\n获取当前平台使用的行终止符。例如，Windows使用`\\r\\n`，Linux使用`\\n`而Mac使用`\\r`。\n\n### os.path.split()\n获得一个列表，list[0]是路径的，list[1]是文件名\n```Python\npath = 'D:/game/gtav/bin/gtav.exe'\nprint(os.path.split(path)[0])\nprint(os.path.split(path)[1])\n```\n\n### os.path.isfile()和os.path.isdir()\n判断路径是不是文件/目录\n```Python\nprint(os.path.isfile('D:/game/gtav/bin/gtav.exe'))\nprint(os.path.isdir('D:/game/gtav/bin'))\n```\n\n### os.path.existe()\n函数用来检验给出的路径是否真地存在\n```Python\npath = 'D:\\\\hadoop-2.6.5\\\\bin'\nprint(os.path.exists(path))\npath = 'D:\\\\hadoop-2.6.5\\\\bin\\\\hadoop'\nprint(os.path.exists(path))\n```\n\n### os.chdir(dirname)\n切换工作目录，相当于`cd`的命令\n```Python\nos.chdir('D:/game/gtav/')\nprint(os.getcwd())\n```\n\n### os.path.getsize(name)\n获取文件大小，以字节为单位\n```Python\nsize = os.path.getsize('D:/iso/debian-8.6.0-amd64-DVD-1.iso')\nprint(size/1024/1024/1024, 'GB')\n```\n\n### os.path.abspath(name)\n获取绝对路径，如果在Python工作目录下有一个文件`file.txt`，那么我就可以直接`open('file.txt')`，也可以用该方法获得其绝对路径`print(os.path.abspath('file.txt'))`。也可以用来规范路径字符串`print(os.path.abspath('D:/game\\gtav\\bin/gtav.exe'))`\n\n### os.path.normpath(path)\n专门用来规范路径\n```Python\npath = 'D:/test/sdf\\zfb'\nprint(os.path.normpath(path))\n```\n\n### os.path.splitext()\n获取文件名和扩展名\n```Python\npath = '/home/shawn/hello.py'\nprint(os.path.splitext(path))\n```\n\n### os.path.join(path,name)\n连接目录和文件名，可以不用自己添加分隔符，能减少bug率提升跨平台性\n\n### os.path.basename(path)\n获取路径中的文件名\n\n### os.path.dirname(path)\n获取路径中的目录名\n","slug":"python_os_lib","published":1,"updated":"2017-09-02T14:50:11.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7w1kmkf0088hnlpl49bhsql","content":"<p>在写一些系统脚本或者自动化运维脚本的时候经常会用到os库，这里做个整理，方便查找</p>\n<h3 id=\"os-sep\"><a href=\"#os-sep\" class=\"headerlink\" title=\"os.sep\"></a>os.sep</h3><p>获得当前操作系统使用的目录分隔符，比如Windows就会得到<code>\\</code>而Linux/Unix就会得到<code>/</code></p>\n<h3 id=\"os-name\"><a href=\"#os-name\" class=\"headerlink\" title=\"os.name\"></a>os.name</h3><p>获得当前使用的操作系统，Windows是NT内核，所以会得到<code>nt</code>，而Linux/Unix用户则会得到<code>posix</code></p>\n<h3 id=\"os-getcwd\"><a href=\"#os-getcwd\" class=\"headerlink\" title=\"os.getcwd()\"></a>os.getcwd()</h3><p>获得当前工作目录，即当前Python脚本工作的目录路径。</p>\n<h3 id=\"os-getenv\"><a href=\"#os-getenv\" class=\"headerlink\" title=\"os.getenv()\"></a>os.getenv()</h3><p>用来获得环境变量<br><code>os.getenv(&#39;PATH&#39;)</code></p>\n<h3 id=\"os-environ\"><a href=\"#os-environ\" class=\"headerlink\" title=\"os.environ\"></a>os.environ</h3><p>可以获取并修改环境变量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(os.environ[<span class=\"string\">'PATH'</span>])</div><div class=\"line\">os.environ += <span class=\"string\">'D:/testdir/bin/'</span></div><div class=\"line\">print(os.environ[<span class=\"string\">\"PATH\"</span>])</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-listdir\"><a href=\"#os-listdir\" class=\"headerlink\" title=\"os.listdir()\"></a>os.listdir()</h3><p>列出某目录下所有的目录和文件<br><code>print(os.listdir())</code></p>\n<h3 id=\"os-remove\"><a href=\"#os-remove\" class=\"headerlink\" title=\"os.remove()\"></a>os.remove()</h3><p>删除文件<br><code>os.remove(&#39;D:/test.file&#39;)</code></p>\n<h3 id=\"os-system\"><a href=\"#os-system\" class=\"headerlink\" title=\"os.system()\"></a>os.system()</h3><p>运行Shell或者CMD命令<br><code>os.system(&#39;ifconfig&#39;)</code></p>\n<h3 id=\"os-linesep\"><a href=\"#os-linesep\" class=\"headerlink\" title=\"os.linesep\"></a>os.linesep</h3><p>获取当前平台使用的行终止符。例如，Windows使用<code>\\r\\n</code>，Linux使用<code>\\n</code>而Mac使用<code>\\r</code>。</p>\n<h3 id=\"os-path-split\"><a href=\"#os-path-split\" class=\"headerlink\" title=\"os.path.split()\"></a>os.path.split()</h3><p>获得一个列表，list[0]是路径的，list[1]是文件名<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">path = <span class=\"string\">'D:/game/gtav/bin/gtav.exe'</span></div><div class=\"line\">print(os.path.split(path)[<span class=\"number\">0</span>])</div><div class=\"line\">print(os.path.split(path)[<span class=\"number\">1</span>])</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-isfile-和os-path-isdir\"><a href=\"#os-path-isfile-和os-path-isdir\" class=\"headerlink\" title=\"os.path.isfile()和os.path.isdir()\"></a>os.path.isfile()和os.path.isdir()</h3><p>判断路径是不是文件/目录<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(os.path.isfile(<span class=\"string\">'D:/game/gtav/bin/gtav.exe'</span>))</div><div class=\"line\">print(os.path.isdir(<span class=\"string\">'D:/game/gtav/bin'</span>))</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-existe\"><a href=\"#os-path-existe\" class=\"headerlink\" title=\"os.path.existe()\"></a>os.path.existe()</h3><p>函数用来检验给出的路径是否真地存在<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">path = <span class=\"string\">'D:\\\\hadoop-2.6.5\\\\bin'</span></div><div class=\"line\">print(os.path.exists(path))</div><div class=\"line\">path = <span class=\"string\">'D:\\\\hadoop-2.6.5\\\\bin\\\\hadoop'</span></div><div class=\"line\">print(os.path.exists(path))</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-chdir-dirname\"><a href=\"#os-chdir-dirname\" class=\"headerlink\" title=\"os.chdir(dirname)\"></a>os.chdir(dirname)</h3><p>切换工作目录，相当于<code>cd</code>的命令<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.chdir(<span class=\"string\">'D:/game/gtav/'</span>)</div><div class=\"line\">print(os.getcwd())</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-getsize-name\"><a href=\"#os-path-getsize-name\" class=\"headerlink\" title=\"os.path.getsize(name)\"></a>os.path.getsize(name)</h3><p>获取文件大小，以字节为单位<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">size = os.path.getsize(<span class=\"string\">'D:/iso/debian-8.6.0-amd64-DVD-1.iso'</span>)</div><div class=\"line\">print(size/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>, <span class=\"string\">'GB'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-abspath-name\"><a href=\"#os-path-abspath-name\" class=\"headerlink\" title=\"os.path.abspath(name)\"></a>os.path.abspath(name)</h3><p>获取绝对路径，如果在Python工作目录下有一个文件<code>file.txt</code>，那么我就可以直接<code>open(&#39;file.txt&#39;)</code>，也可以用该方法获得其绝对路径<code>print(os.path.abspath(&#39;file.txt&#39;))</code>。也可以用来规范路径字符串<code>print(os.path.abspath(&#39;D:/game\\gtav\\bin/gtav.exe&#39;))</code></p>\n<h3 id=\"os-path-normpath-path\"><a href=\"#os-path-normpath-path\" class=\"headerlink\" title=\"os.path.normpath(path)\"></a>os.path.normpath(path)</h3><p>专门用来规范路径<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">path = <span class=\"string\">'D:/test/sdf\\zfb'</span></div><div class=\"line\">print(os.path.normpath(path))</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-splitext\"><a href=\"#os-path-splitext\" class=\"headerlink\" title=\"os.path.splitext()\"></a>os.path.splitext()</h3><p>获取文件名和扩展名<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">path = <span class=\"string\">'/home/shawn/hello.py'</span></div><div class=\"line\">print(os.path.splitext(path))</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-join-path-name\"><a href=\"#os-path-join-path-name\" class=\"headerlink\" title=\"os.path.join(path,name)\"></a>os.path.join(path,name)</h3><p>连接目录和文件名，可以不用自己添加分隔符，能减少bug率提升跨平台性</p>\n<h3 id=\"os-path-basename-path\"><a href=\"#os-path-basename-path\" class=\"headerlink\" title=\"os.path.basename(path)\"></a>os.path.basename(path)</h3><p>获取路径中的文件名</p>\n<h3 id=\"os-path-dirname-path\"><a href=\"#os-path-dirname-path\" class=\"headerlink\" title=\"os.path.dirname(path)\"></a>os.path.dirname(path)</h3><p>获取路径中的目录名</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在写一些系统脚本或者自动化运维脚本的时候经常会用到os库，这里做个整理，方便查找</p>\n<h3 id=\"os-sep\"><a href=\"#os-sep\" class=\"headerlink\" title=\"os.sep\"></a>os.sep</h3><p>获得当前操作系统使用的目录分隔符，比如Windows就会得到<code>\\</code>而Linux/Unix就会得到<code>/</code></p>\n<h3 id=\"os-name\"><a href=\"#os-name\" class=\"headerlink\" title=\"os.name\"></a>os.name</h3><p>获得当前使用的操作系统，Windows是NT内核，所以会得到<code>nt</code>，而Linux/Unix用户则会得到<code>posix</code></p>\n<h3 id=\"os-getcwd\"><a href=\"#os-getcwd\" class=\"headerlink\" title=\"os.getcwd()\"></a>os.getcwd()</h3><p>获得当前工作目录，即当前Python脚本工作的目录路径。</p>\n<h3 id=\"os-getenv\"><a href=\"#os-getenv\" class=\"headerlink\" title=\"os.getenv()\"></a>os.getenv()</h3><p>用来获得环境变量<br><code>os.getenv(&#39;PATH&#39;)</code></p>\n<h3 id=\"os-environ\"><a href=\"#os-environ\" class=\"headerlink\" title=\"os.environ\"></a>os.environ</h3><p>可以获取并修改环境变量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(os.environ[<span class=\"string\">'PATH'</span>])</div><div class=\"line\">os.environ += <span class=\"string\">'D:/testdir/bin/'</span></div><div class=\"line\">print(os.environ[<span class=\"string\">\"PATH\"</span>])</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-listdir\"><a href=\"#os-listdir\" class=\"headerlink\" title=\"os.listdir()\"></a>os.listdir()</h3><p>列出某目录下所有的目录和文件<br><code>print(os.listdir())</code></p>\n<h3 id=\"os-remove\"><a href=\"#os-remove\" class=\"headerlink\" title=\"os.remove()\"></a>os.remove()</h3><p>删除文件<br><code>os.remove(&#39;D:/test.file&#39;)</code></p>\n<h3 id=\"os-system\"><a href=\"#os-system\" class=\"headerlink\" title=\"os.system()\"></a>os.system()</h3><p>运行Shell或者CMD命令<br><code>os.system(&#39;ifconfig&#39;)</code></p>\n<h3 id=\"os-linesep\"><a href=\"#os-linesep\" class=\"headerlink\" title=\"os.linesep\"></a>os.linesep</h3><p>获取当前平台使用的行终止符。例如，Windows使用<code>\\r\\n</code>，Linux使用<code>\\n</code>而Mac使用<code>\\r</code>。</p>\n<h3 id=\"os-path-split\"><a href=\"#os-path-split\" class=\"headerlink\" title=\"os.path.split()\"></a>os.path.split()</h3><p>获得一个列表，list[0]是路径的，list[1]是文件名<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">path = <span class=\"string\">'D:/game/gtav/bin/gtav.exe'</span></div><div class=\"line\">print(os.path.split(path)[<span class=\"number\">0</span>])</div><div class=\"line\">print(os.path.split(path)[<span class=\"number\">1</span>])</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-isfile-和os-path-isdir\"><a href=\"#os-path-isfile-和os-path-isdir\" class=\"headerlink\" title=\"os.path.isfile()和os.path.isdir()\"></a>os.path.isfile()和os.path.isdir()</h3><p>判断路径是不是文件/目录<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(os.path.isfile(<span class=\"string\">'D:/game/gtav/bin/gtav.exe'</span>))</div><div class=\"line\">print(os.path.isdir(<span class=\"string\">'D:/game/gtav/bin'</span>))</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-existe\"><a href=\"#os-path-existe\" class=\"headerlink\" title=\"os.path.existe()\"></a>os.path.existe()</h3><p>函数用来检验给出的路径是否真地存在<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">path = <span class=\"string\">'D:\\\\hadoop-2.6.5\\\\bin'</span></div><div class=\"line\">print(os.path.exists(path))</div><div class=\"line\">path = <span class=\"string\">'D:\\\\hadoop-2.6.5\\\\bin\\\\hadoop'</span></div><div class=\"line\">print(os.path.exists(path))</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-chdir-dirname\"><a href=\"#os-chdir-dirname\" class=\"headerlink\" title=\"os.chdir(dirname)\"></a>os.chdir(dirname)</h3><p>切换工作目录，相当于<code>cd</code>的命令<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">os.chdir(<span class=\"string\">'D:/game/gtav/'</span>)</div><div class=\"line\">print(os.getcwd())</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-getsize-name\"><a href=\"#os-path-getsize-name\" class=\"headerlink\" title=\"os.path.getsize(name)\"></a>os.path.getsize(name)</h3><p>获取文件大小，以字节为单位<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">size = os.path.getsize(<span class=\"string\">'D:/iso/debian-8.6.0-amd64-DVD-1.iso'</span>)</div><div class=\"line\">print(size/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>, <span class=\"string\">'GB'</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-abspath-name\"><a href=\"#os-path-abspath-name\" class=\"headerlink\" title=\"os.path.abspath(name)\"></a>os.path.abspath(name)</h3><p>获取绝对路径，如果在Python工作目录下有一个文件<code>file.txt</code>，那么我就可以直接<code>open(&#39;file.txt&#39;)</code>，也可以用该方法获得其绝对路径<code>print(os.path.abspath(&#39;file.txt&#39;))</code>。也可以用来规范路径字符串<code>print(os.path.abspath(&#39;D:/game\\gtav\\bin/gtav.exe&#39;))</code></p>\n<h3 id=\"os-path-normpath-path\"><a href=\"#os-path-normpath-path\" class=\"headerlink\" title=\"os.path.normpath(path)\"></a>os.path.normpath(path)</h3><p>专门用来规范路径<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">path = <span class=\"string\">'D:/test/sdf\\zfb'</span></div><div class=\"line\">print(os.path.normpath(path))</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-splitext\"><a href=\"#os-path-splitext\" class=\"headerlink\" title=\"os.path.splitext()\"></a>os.path.splitext()</h3><p>获取文件名和扩展名<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">path = <span class=\"string\">'/home/shawn/hello.py'</span></div><div class=\"line\">print(os.path.splitext(path))</div></pre></td></tr></table></figure></p>\n<h3 id=\"os-path-join-path-name\"><a href=\"#os-path-join-path-name\" class=\"headerlink\" title=\"os.path.join(path,name)\"></a>os.path.join(path,name)</h3><p>连接目录和文件名，可以不用自己添加分隔符，能减少bug率提升跨平台性</p>\n<h3 id=\"os-path-basename-path\"><a href=\"#os-path-basename-path\" class=\"headerlink\" title=\"os.path.basename(path)\"></a>os.path.basename(path)</h3><p>获取路径中的文件名</p>\n<h3 id=\"os-path-dirname-path\"><a href=\"#os-path-dirname-path\" class=\"headerlink\" title=\"os.path.dirname(path)\"></a>os.path.dirname(path)</h3><p>获取路径中的目录名</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj7w1kmdg0001hnlpczblimiy","tag_id":"cj7w1kmdq0004hnlp3g0x4b2k","_id":"cj7w1kme0000mhnlp6s4e8vxn"},{"post_id":"cj7w1kmdg0001hnlpczblimiy","tag_id":"cj7w1kmdv000bhnlpgyuh59ag","_id":"cj7w1kme0000ohnlp8qp2hdzp"},{"post_id":"cj7w1kmdg0001hnlpczblimiy","tag_id":"cj7w1kmdx000ehnlpos1e8bqa","_id":"cj7w1kme1000rhnlp7ep6thjb"},{"post_id":"cj7w1kmdg0001hnlpczblimiy","tag_id":"cj7w1kmdy000hhnlprwff9ybj","_id":"cj7w1kme2000thnlpqv97ntn2"},{"post_id":"cj7w1kmdm0003hnlpwvyprpo8","tag_id":"cj7w1kmdz000khnlprbegno37","_id":"cj7w1kme3000xhnlp3hqtaf7s"},{"post_id":"cj7w1kmdm0003hnlpwvyprpo8","tag_id":"cj7w1kme1000qhnlpphbiycbz","_id":"cj7w1kme4000zhnlp7c60z361"},{"post_id":"cj7w1kmds0006hnlpllp748pw","tag_id":"cj7w1kme2000vhnlp7z10zd8z","_id":"cj7w1kme60015hnlp2uxih5b6"},{"post_id":"cj7w1kmds0006hnlpllp748pw","tag_id":"cj7w1kme40010hnlp850dol6x","_id":"cj7w1kme70017hnlpx3vb0chu"},{"post_id":"cj7w1kmdt0008hnlpa5047go7","tag_id":"cj7w1kme50013hnlpjqxfzdbh","_id":"cj7w1kmed001hhnlprtvvej4l"},{"post_id":"cj7w1kmdt0008hnlpa5047go7","tag_id":"cj7w1kme70019hnlp3iq8aso0","_id":"cj7w1kmee001jhnlppkib72lu"},{"post_id":"cj7w1kmdt0008hnlpa5047go7","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmef001mhnlp8cps6g3w"},{"post_id":"cj7w1kmdv000chnlpek2ko13p","tag_id":"cj7w1kmec001fhnlp0juq5ml7","_id":"cj7w1kmel001xhnlpdtxhsskw"},{"post_id":"cj7w1kmdv000chnlpek2ko13p","tag_id":"cj7w1kmee001khnlpfieadw5e","_id":"cj7w1kmel001zhnlp5fjnik5s"},{"post_id":"cj7w1kmdv000chnlpek2ko13p","tag_id":"cj7w1kmeh001phnlpuvys38b1","_id":"cj7w1kmem0022hnlpyzqqb4x7"},{"post_id":"cj7w1kmdv000chnlpek2ko13p","tag_id":"cj7w1kme2000vhnlp7z10zd8z","_id":"cj7w1kmen0024hnlpjqgp3b6q"},{"post_id":"cj7w1kmdw000dhnlpcy7j3vwy","tag_id":"cj7w1kmek001vhnlpqz3j6mba","_id":"cj7w1kmeo0027hnlpmlxyd2uu"},{"post_id":"cj7w1kmdw000dhnlpcy7j3vwy","tag_id":"cj7w1kmem0020hnlplgmvx4gs","_id":"cj7w1kmeo0029hnlpo5r708lg"},{"post_id":"cj7w1kmdx000fhnlpbacn27th","tag_id":"cj7w1kmen0025hnlp31nujwom","_id":"cj7w1kmep002ghnlp7ex0fcjd"},{"post_id":"cj7w1kmdx000fhnlpbacn27th","tag_id":"cj7w1kmeo002ahnlp7z17c590","_id":"cj7w1kmeq002hhnlp416em056"},{"post_id":"cj7w1kmdx000fhnlpbacn27th","tag_id":"cj7w1kmep002bhnlp5hqbk9xs","_id":"cj7w1kmeq002jhnlpjopv5fh2"},{"post_id":"cj7w1kmdx000fhnlpbacn27th","tag_id":"cj7w1kmep002chnlphrgoimi6","_id":"cj7w1kmeq002khnlpjup6a7pq"},{"post_id":"cj7w1kmdx000fhnlpbacn27th","tag_id":"cj7w1kmep002dhnlpa8jxifmj","_id":"cj7w1kmeq002mhnlp6jb7ay0i"},{"post_id":"cj7w1kmdx000fhnlpbacn27th","tag_id":"cj7w1kmep002ehnlpagvfnzhm","_id":"cj7w1kmeq002nhnlpb4ce5kuf"},{"post_id":"cj7w1kmdx000ghnlp6izskfu0","tag_id":"cj7w1kmep002fhnlp8a9tam6g","_id":"cj7w1kmeq002phnlpo95bygx9"},{"post_id":"cj7w1kmdx000ghnlp6izskfu0","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmer002qhnlplb39g9sf"},{"post_id":"cj7w1kmdx000ghnlp6izskfu0","tag_id":"cj7w1kmeq002lhnlpfm90ivu8","_id":"cj7w1kmer002shnlppo21onf2"},{"post_id":"cj7w1kmdy000ihnlpx1ochklw","tag_id":"cj7w1kmek001vhnlpqz3j6mba","_id":"cj7w1kmer002uhnlp5xooqjd6"},{"post_id":"cj7w1kmdy000ihnlpx1ochklw","tag_id":"cj7w1kmer002rhnlp54l1olqc","_id":"cj7w1kmer002vhnlpgq7dtpur"},{"post_id":"cj7w1kmdz000jhnlp91ldo11o","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmes002zhnlp5hympobd"},{"post_id":"cj7w1kmdz000jhnlp91ldo11o","tag_id":"cj7w1kmer002whnlp2q30q6nf","_id":"cj7w1kmes0030hnlpr835vh1j"},{"post_id":"cj7w1kmdz000jhnlp91ldo11o","tag_id":"cj7w1kmes002xhnlpdetzffzb","_id":"cj7w1kmes0032hnlpsw0u0fyk"},{"post_id":"cj7w1kmdz000lhnlp3ps0yxzv","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmet0035hnlpvvzvaowg"},{"post_id":"cj7w1kmdz000lhnlp3ps0yxzv","tag_id":"cj7w1kmes0031hnlp43ciutbu","_id":"cj7w1kmet0036hnlpmkwaqc3f"},{"post_id":"cj7w1kmdz000lhnlp3ps0yxzv","tag_id":"cj7w1kmes0033hnlpa6r32hx5","_id":"cj7w1kmet0038hnlpzo74o5sh"},{"post_id":"cj7w1kme0000nhnlpofsltmpo","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmeu003bhnlpqe8pphjp"},{"post_id":"cj7w1kme0000nhnlpofsltmpo","tag_id":"cj7w1kmet0037hnlpbrjqs2ra","_id":"cj7w1kmeu003chnlplspthji1"},{"post_id":"cj7w1kme0000nhnlpofsltmpo","tag_id":"cj7w1kmet0039hnlpd9adzk35","_id":"cj7w1kmeu003ehnlpcaeg6iqj"},{"post_id":"cj7w1kme0000phnlpxu9jnjj5","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmev003ghnlp3zmotg2e"},{"post_id":"cj7w1kme0000phnlpxu9jnjj5","tag_id":"cj7w1kmeu003dhnlppvzl2n16","_id":"cj7w1kmev003hhnlpiexpomqt"},{"post_id":"cj7w1kme1000shnlpaq0msigc","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmex003mhnlpigwxodm5"},{"post_id":"cj7w1kme1000shnlpaq0msigc","tag_id":"cj7w1kmev003ihnlpx177wx77","_id":"cj7w1kmex003nhnlpyul5f35e"},{"post_id":"cj7w1kme1000shnlpaq0msigc","tag_id":"cj7w1kmew003jhnlp7sz4861i","_id":"cj7w1kmey003phnlp1h1078fx"},{"post_id":"cj7w1kme1000shnlpaq0msigc","tag_id":"cj7w1kmew003khnlpa70dl6fl","_id":"cj7w1kmey003qhnlp3rkfp5jg"},{"post_id":"cj7w1kme2000uhnlpydx6hrtq","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmez003whnlp0uv39ql5"},{"post_id":"cj7w1kme2000uhnlpydx6hrtq","tag_id":"cj7w1kmex003ohnlp8jlp5lov","_id":"cj7w1kmez003xhnlpsa9lk7pk"},{"post_id":"cj7w1kme2000uhnlpydx6hrtq","tag_id":"cj7w1kmey003rhnlppp8subno","_id":"cj7w1kmf0003zhnlpjxq4bmqp"},{"post_id":"cj7w1kme2000uhnlpydx6hrtq","tag_id":"cj7w1kmey003shnlpct8m836g","_id":"cj7w1kmf00040hnlpf6ls8xdm"},{"post_id":"cj7w1kme2000uhnlpydx6hrtq","tag_id":"cj7w1kmep002dhnlpa8jxifmj","_id":"cj7w1kmf00042hnlpgk4mc74s"},{"post_id":"cj7w1kme2000uhnlpydx6hrtq","tag_id":"cj7w1kmez003uhnlpwv4cbllj","_id":"cj7w1kmf00043hnlpqao3d2vq"},{"post_id":"cj7w1kme3000whnlp6p5lml3b","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmf00046hnlp45ldbybm"},{"post_id":"cj7w1kme3000whnlp6p5lml3b","tag_id":"cj7w1kmez003yhnlpn31oa6zk","_id":"cj7w1kmf10047hnlpad778lj8"},{"post_id":"cj7w1kme3000whnlp6p5lml3b","tag_id":"cj7w1kmf00041hnlpy2ortx3z","_id":"cj7w1kmf10049hnlp9v9xil29"},{"post_id":"cj7w1kme3000whnlp6p5lml3b","tag_id":"cj7w1kmf00044hnlpc8y570m7","_id":"cj7w1kmf1004ahnlpxbj8nqw8"},{"post_id":"cj7w1kme3000yhnlppq3gv885","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmf1004chnlpdc0xh8to"},{"post_id":"cj7w1kme3000yhnlppq3gv885","tag_id":"cj7w1kmf10048hnlp14pu7g5s","_id":"cj7w1kmf2004dhnlpd4cxl5v8"},{"post_id":"cj7w1kme3000yhnlppq3gv885","tag_id":"cj7w1kme2000vhnlp7z10zd8z","_id":"cj7w1kmf2004fhnlpor5mn27w"},{"post_id":"cj7w1kme40011hnlplghw037v","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmf4004mhnlp2rinw6ox"},{"post_id":"cj7w1kme40011hnlplghw037v","tag_id":"cj7w1kmex003ohnlp8jlp5lov","_id":"cj7w1kmf4004nhnlpleyxy649"},{"post_id":"cj7w1kme40011hnlplghw037v","tag_id":"cj7w1kmey003rhnlppp8subno","_id":"cj7w1kmf5004phnlpmdp67vu2"},{"post_id":"cj7w1kme40011hnlplghw037v","tag_id":"cj7w1kmey003shnlpct8m836g","_id":"cj7w1kmf5004qhnlp78ktfnlb"},{"post_id":"cj7w1kme40011hnlplghw037v","tag_id":"cj7w1kmf3004ihnlpqkjqkl0b","_id":"cj7w1kmf5004shnlp1k62ndqy"},{"post_id":"cj7w1kme40011hnlplghw037v","tag_id":"cj7w1kmf3004jhnlp46zhnxew","_id":"cj7w1kmf5004thnlphijdgd8l"},{"post_id":"cj7w1kme40011hnlplghw037v","tag_id":"cj7w1kmf4004khnlp5af1ejq6","_id":"cj7w1kmf5004vhnlp675exkfh"},{"post_id":"cj7w1kme50012hnlpfkcxfs2x","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmf6004xhnlpi5eq7fw9"},{"post_id":"cj7w1kme50012hnlpfkcxfs2x","tag_id":"cj7w1kmf4004ohnlpnnkekeau","_id":"cj7w1kmf6004yhnlpf1sfqflz"},{"post_id":"cj7w1kme50012hnlpfkcxfs2x","tag_id":"cj7w1kmf5004rhnlp845g60ab","_id":"cj7w1kmf60050hnlp24fxredx"},{"post_id":"cj7w1kme50012hnlpfkcxfs2x","tag_id":"cj7w1kmf5004uhnlpndrwt2xa","_id":"cj7w1kmf60051hnlpc55y97pn"},{"post_id":"cj7w1kme50012hnlpfkcxfs2x","tag_id":"cj7w1kme40010hnlp850dol6x","_id":"cj7w1kmf70053hnlpliu4tu0f"},{"post_id":"cj7w1kme50014hnlpk9i8d6ez","tag_id":"cj7w1kmex003ohnlp8jlp5lov","_id":"cj7w1kmf90055hnlpmi99ucqt"},{"post_id":"cj7w1kme50014hnlpk9i8d6ez","tag_id":"cj7w1kmey003rhnlppp8subno","_id":"cj7w1kmf90056hnlp3ymzbjkv"},{"post_id":"cj7w1kme50014hnlpk9i8d6ez","tag_id":"cj7w1kmey003shnlpct8m836g","_id":"cj7w1kmf90058hnlpcbwenyp1"},{"post_id":"cj7w1kme60016hnlpds9tvagi","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmfa005chnlpqd422fjq"},{"post_id":"cj7w1kme60016hnlpds9tvagi","tag_id":"cj7w1kmf90057hnlph6b4snm7","_id":"cj7w1kmfa005dhnlpv18wyie8"},{"post_id":"cj7w1kme60016hnlpds9tvagi","tag_id":"cj7w1kmf90059hnlpbl7aerwh","_id":"cj7w1kmfb005fhnlpr4def7g8"},{"post_id":"cj7w1kme60016hnlpds9tvagi","tag_id":"cj7w1kmf9005ahnlpbiacklq5","_id":"cj7w1kmfb005ghnlp2xdcwjei"},{"post_id":"cj7w1kme70018hnlpjtppxf3x","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmfd005nhnlp8j098uce"},{"post_id":"cj7w1kme70018hnlpjtppxf3x","tag_id":"cj7w1kmfa005ehnlpukhoh6ij","_id":"cj7w1kmfd005ohnlpt3gb7oth"},{"post_id":"cj7w1kme70018hnlpjtppxf3x","tag_id":"cj7w1kmfb005hhnlpxqgpwkpl","_id":"cj7w1kmfd005qhnlp5lu6r0um"},{"post_id":"cj7w1kme70018hnlpjtppxf3x","tag_id":"cj7w1kmfb005ihnlpm9p1pvqy","_id":"cj7w1kmfd005rhnlpeuh6ph1i"},{"post_id":"cj7w1kme70018hnlpjtppxf3x","tag_id":"cj7w1kmfb005jhnlpiv0ev0og","_id":"cj7w1kmfe005thnlppd58x8og"},{"post_id":"cj7w1kme70018hnlpjtppxf3x","tag_id":"cj7w1kmep002bhnlp5hqbk9xs","_id":"cj7w1kmfe005uhnlpo5go76yt"},{"post_id":"cj7w1kme70018hnlpjtppxf3x","tag_id":"cj7w1kmfc005lhnlpjwip85tl","_id":"cj7w1kmfe005whnlp5qp0yraa"},{"post_id":"cj7w1kme7001ahnlpm2d4thp7","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfe005xhnlpyko9e9et"},{"post_id":"cj7w1kme9001bhnlp0fgzk6nn","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmff005zhnlp85yukvqg"},{"post_id":"cj7w1kme9001bhnlp0fgzk6nn","tag_id":"cj7w1kmfd005shnlpv70f5x5s","_id":"cj7w1kmff0060hnlpj1c9zdq5"},{"post_id":"cj7w1kmea001dhnlpq3fiy6vm","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmff0062hnlplfr0yjil"},{"post_id":"cj7w1kmea001dhnlpq3fiy6vm","tag_id":"cj7w1kmff005yhnlp6vh5wp45","_id":"cj7w1kmfg0063hnlp9gte037o"},{"post_id":"cj7w1kmeb001ehnlp5vcethfx","tag_id":"cj7w1kme40010hnlp850dol6x","_id":"cj7w1kmfh0066hnlpdhfanyc5"},{"post_id":"cj7w1kmeb001ehnlp5vcethfx","tag_id":"cj7w1kmff0061hnlp8xlaa6nl","_id":"cj7w1kmfh0067hnlpz0qi83h0"},{"post_id":"cj7w1kmeb001ehnlp5vcethfx","tag_id":"cj7w1kmf5004uhnlpndrwt2xa","_id":"cj7w1kmfi0069hnlp5w8v8kfg"},{"post_id":"cj7w1kmed001ihnlpl5ec7pja","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfj006ehnlp7tinu9o1"},{"post_id":"cj7w1kmed001ihnlpl5ec7pja","tag_id":"cj7w1kmfh0068hnlpzjw36fvy","_id":"cj7w1kmfj006fhnlpq3t415hr"},{"post_id":"cj7w1kmed001ihnlpl5ec7pja","tag_id":"cj7w1kmfi006ahnlp14as5fsk","_id":"cj7w1kmfj006hhnlpke2h1bjn"},{"post_id":"cj7w1kmed001ihnlpl5ec7pja","tag_id":"cj7w1kmfi006bhnlpe0tg3els","_id":"cj7w1kmfj006ihnlpl61d1n70"},{"post_id":"cj7w1kmed001ihnlpl5ec7pja","tag_id":"cj7w1kmfi006chnlpgepb33e5","_id":"cj7w1kmfk006khnlpb7qbhbrx"},{"post_id":"cj7w1kmee001lhnlpp1ee9wfs","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfk006lhnlpbwb9c8bk"},{"post_id":"cj7w1kmee001lhnlpp1ee9wfs","tag_id":"cj7w1kmfj006ghnlp0wcsvntk","_id":"cj7w1kmfk006nhnlpvqa9l0xp"},{"post_id":"cj7w1kmef001nhnlp0bb3ttsv","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfl006rhnlpvwykzjtr"},{"post_id":"cj7w1kmef001nhnlp0bb3ttsv","tag_id":"cj7w1kmfj006ghnlp0wcsvntk","_id":"cj7w1kmfl006shnlpeqggp41j"},{"post_id":"cj7w1kmef001nhnlp0bb3ttsv","tag_id":"cj7w1kmfk006ohnlph5ve15s2","_id":"cj7w1kmfm006uhnlpgi0qm0af"},{"post_id":"cj7w1kmef001nhnlp0bb3ttsv","tag_id":"cj7w1kmfl006phnlpf859n4dt","_id":"cj7w1kmfm006vhnlps9cfhs7l"},{"post_id":"cj7w1kmeg001ohnlplpjf4c5l","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfm006xhnlph6ogd845"},{"post_id":"cj7w1kmeg001ohnlplpjf4c5l","tag_id":"cj7w1kmfl006thnlpezxqwaaz","_id":"cj7w1kmfm006yhnlpwda4pjte"},{"post_id":"cj7w1kmeh001qhnlponxjmk7s","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfn0071hnlp8yynfoq5"},{"post_id":"cj7w1kmeh001qhnlponxjmk7s","tag_id":"cj7w1kmfm006zhnlp5aqdibfk","_id":"cj7w1kmfn0072hnlpdxys28a1"},{"post_id":"cj7w1kmei001rhnlp94js38ao","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfn0075hnlplp00ji51"},{"post_id":"cj7w1kmei001rhnlp94js38ao","tag_id":"cj7w1kmfn0073hnlp4wv5gsqt","_id":"cj7w1kmfo0076hnlpdthij8hs"},{"post_id":"cj7w1kmej001thnlpuys514aw","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfo0079hnlpwhfa0ljs"},{"post_id":"cj7w1kmej001thnlpuys514aw","tag_id":"cj7w1kmfi006chnlpgepb33e5","_id":"cj7w1kmfo007ahnlpso2mufb7"},{"post_id":"cj7w1kmek001uhnlpoc10fhdl","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfp007dhnlpr38s4mco"},{"post_id":"cj7w1kmek001uhnlpoc10fhdl","tag_id":"cj7w1kmfm006zhnlp5aqdibfk","_id":"cj7w1kmfp007ehnlpiry6gu1t"},{"post_id":"cj7w1kmel001whnlplxugi3ic","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfq007jhnlpkrriqpdb"},{"post_id":"cj7w1kmel001whnlplxugi3ic","tag_id":"cj7w1kmfp007fhnlpgnw174r1","_id":"cj7w1kmfr007khnlp99u4ew2a"},{"post_id":"cj7w1kmel001whnlplxugi3ic","tag_id":"cj7w1kmfq007ghnlpcjvrn4bo","_id":"cj7w1kmfr007mhnlpol6qjw1c"},{"post_id":"cj7w1kmel001whnlplxugi3ic","tag_id":"cj7w1kmfq007hhnlpzaluvbpa","_id":"cj7w1kmfr007nhnlpencq0g2u"},{"post_id":"cj7w1kmel001yhnlpp5njltjh","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfs007qhnlpeh04z7ng"},{"post_id":"cj7w1kmel001yhnlpp5njltjh","tag_id":"cj7w1kmfr007lhnlp0z2t2zwv","_id":"cj7w1kmfs007rhnlp0qm33qlj"},{"post_id":"cj7w1kmel001yhnlpp5njltjh","tag_id":"cj7w1kmfr007ohnlpnhb702hv","_id":"cj7w1kmfs007thnlpkyyzhzi6"},{"post_id":"cj7w1kmem0023hnlp4wdpxrbg","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmfs007vhnlpfd0uehy7"},{"post_id":"cj7w1kmem0023hnlp4wdpxrbg","tag_id":"cj7w1kmfs007shnlp4zchvroc","_id":"cj7w1kmfs007whnlp179rvqjm"},{"post_id":"cj7w1kmen0026hnlp8qw3on6f","tag_id":"cj7w1kmfs007uhnlp74uiiuhb","_id":"cj7w1kmft0081hnlp82u2dejz"},{"post_id":"cj7w1kmen0026hnlp8qw3on6f","tag_id":"cj7w1kmfs007xhnlpv9e2s7nz","_id":"cj7w1kmft0082hnlpbe7mqjuj"},{"post_id":"cj7w1kmen0026hnlp8qw3on6f","tag_id":"cj7w1kmft007yhnlpvnjwzsto","_id":"cj7w1kmft0083hnlpupi3bf2z"},{"post_id":"cj7w1kmen0026hnlp8qw3on6f","tag_id":"cj7w1kmft007zhnlp3v3kcjer","_id":"cj7w1kmfu0084hnlp1hidot22"},{"post_id":"cj7w1kmeo0028hnlp21qacop6","tag_id":"cj7w1kmea001chnlp1uyvhari","_id":"cj7w1kmfu0085hnlpvh462n4o"},{"post_id":"cj7w1kmeo0028hnlp21qacop6","tag_id":"cj7w1kmft0080hnlpqf27kxwz","_id":"cj7w1kmfu0086hnlp3l1kadf4"},{"post_id":"cj7w1kmkf0088hnlpl49bhsql","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmkg008ahnlpuahiklxp"},{"post_id":"cj7w1kmke0087hnlpmwx83fno","tag_id":"cj7w1kmeq002ihnlpuxi14yhw","_id":"cj7w1kmkg008bhnlp2boqsvun"},{"post_id":"cj7w1kmke0087hnlpmwx83fno","tag_id":"cj7w1kmkg0089hnlpdylc3ol7","_id":"cj7w1kmkh008chnlp9sxnjixv"}],"Tag":[{"name":"Apache","_id":"cj7w1kmdq0004hnlp3g0x4b2k"},{"name":"Web服务","_id":"cj7w1kmdv000bhnlpgyuh59ag"},{"name":"虚拟主机","_id":"cj7w1kmdx000ehnlpos1e8bqa"},{"name":"PHP","_id":"cj7w1kmdy000hhnlprwff9ybj"},{"name":"C语言","_id":"cj7w1kmdz000khnlprbegno37"},{"name":"Bool","_id":"cj7w1kme1000qhnlpphbiycbz"},{"name":"文件系统","_id":"cj7w1kme2000vhnlp7z10zd8z"},{"name":"操作系统","_id":"cj7w1kme40010hnlp850dol6x"},{"name":"防火墙","_id":"cj7w1kme50013hnlpjqxfzdbh"},{"name":"firewall-cmd","_id":"cj7w1kme70019hnlp3iq8aso0"},{"name":"Linux","_id":"cj7w1kmea001chnlp1uyvhari"},{"name":"HDFS","_id":"cj7w1kmec001fhnlp0juq5ml7"},{"name":"大数据","_id":"cj7w1kmee001khnlpfieadw5e"},{"name":"Hadoop","_id":"cj7w1kmeh001phnlpuvys38b1"},{"name":"Java","_id":"cj7w1kmek001vhnlpqz3j6mba"},{"name":"面向对象","_id":"cj7w1kmem0020hnlplgmvx4gs"},{"name":"MD5","_id":"cj7w1kmen0025hnlp31nujwom"},{"name":"BASE64","_id":"cj7w1kmeo002ahnlp7z17c590"},{"name":"加密","_id":"cj7w1kmep002bhnlp5hqbk9xs"},{"name":"解密","_id":"cj7w1kmep002chnlphrgoimi6"},{"name":"编码","_id":"cj7w1kmep002dhnlpa8jxifmj"},{"name":"解码","_id":"cj7w1kmep002ehnlpagvfnzhm"},{"name":"flask","_id":"cj7w1kmep002fhnlp8a9tam6g"},{"name":"Python","_id":"cj7w1kmeq002ihnlpuxi14yhw"},{"name":"API","_id":"cj7w1kmeq002lhnlpfm90ivu8"},{"name":"字符串","_id":"cj7w1kmer002rhnlp54l1olqc"},{"name":"ACL","_id":"cj7w1kmer002whnlp2q30q6nf"},{"name":"权限","_id":"cj7w1kmes002xhnlpdetzffzb"},{"name":"Crontab","_id":"cj7w1kmes0031hnlp43ciutbu"},{"name":"计划任务","_id":"cj7w1kmes0033hnlpa6r32hx5"},{"name":"DHCP","_id":"cj7w1kmet0037hnlpbrjqs2ra"},{"name":"服务配置","_id":"cj7w1kmet0039hnlpd9adzk35"},{"name":"目录树","_id":"cj7w1kmeu003dhnlppvzl2n16"},{"name":"软链接","_id":"cj7w1kmev003ihnlpx177wx77"},{"name":"硬链接","_id":"cj7w1kmew003jhnlp7sz4861i"},{"name":"链接","_id":"cj7w1kmew003khnlpa70dl6fl"},{"name":"MySQL","_id":"cj7w1kmex003ohnlp8jlp5lov"},{"name":"MariaDB","_id":"cj7w1kmey003rhnlppp8subno"},{"name":"数据库","_id":"cj7w1kmey003shnlpct8m836g"},{"name":"中文","_id":"cj7w1kmez003uhnlpwv4cbllj"},{"name":"LVM","_id":"cj7w1kmez003yhnlpn31oa6zk"},{"name":"分区","_id":"cj7w1kmf00041hnlpy2ortx3z"},{"name":"格式化","_id":"cj7w1kmf00044hnlpc8y570m7"},{"name":"NFS","_id":"cj7w1kmf10048hnlp14pu7g5s"},{"name":"用户管理","_id":"cj7w1kmf3004ihnlpqkjqkl0b"},{"name":"服务安装","_id":"cj7w1kmf3004jhnlp46zhnxew"},{"name":"数据备份","_id":"cj7w1kmf4004khnlp5af1ejq6"},{"name":"swap","_id":"cj7w1kmf4004ohnlpnnkekeau"},{"name":"交换分区","_id":"cj7w1kmf5004rhnlp845g60ab"},{"name":"虚拟内存","_id":"cj7w1kmf5004uhnlpndrwt2xa"},{"name":"nmcli","_id":"cj7w1kmf90057hnlph6b4snm7"},{"name":"ip","_id":"cj7w1kmf90059hnlpbl7aerwh"},{"name":"网络","_id":"cj7w1kmf9005ahnlpbiacklq5"},{"name":"OpenSSH","_id":"cj7w1kmfa005ehnlpukhoh6ij"},{"name":"公钥","_id":"cj7w1kmfb005hhnlpxqgpwkpl"},{"name":"私钥","_id":"cj7w1kmfb005ihnlpm9p1pvqy"},{"name":"签名","_id":"cj7w1kmfb005jhnlpiv0ev0og"},{"name":"非对称加密","_id":"cj7w1kmfc005lhnlpjwip85tl"},{"name":"Demo","_id":"cj7w1kmfd005shnlpv70f5x5s"},{"name":"Exception","_id":"cj7w1kmff005yhnlp6vh5wp45"},{"name":"算法","_id":"cj7w1kmff0061hnlp8xlaa6nl"},{"name":"实例方法","_id":"cj7w1kmfh0068hnlpzjw36fvy"},{"name":"静态方法","_id":"cj7w1kmfi006ahnlp14as5fsk"},{"name":"类方法","_id":"cj7w1kmfi006bhnlpe0tg3els"},{"name":"OOP","_id":"cj7w1kmfi006chnlpgepb33e5"},{"name":"数据结构","_id":"cj7w1kmfj006ghnlp0wcsvntk"},{"name":"Dict","_id":"cj7w1kmfk006ohnlph5ve15s2"},{"name":"List","_id":"cj7w1kmfl006phnlpf859n4dt"},{"name":"function","_id":"cj7w1kmfl006thnlpezxqwaaz"},{"name":"String","_id":"cj7w1kmfm006zhnlp5aqdibfk"},{"name":"I/O","_id":"cj7w1kmfn0073hnlp4wv5gsqt"},{"name":"RabbieMQ","_id":"cj7w1kmfp007fhnlpgnw174r1"},{"name":"消息队列","_id":"cj7w1kmfq007ghnlpcjvrn4bo"},{"name":"demo","_id":"cj7w1kmfq007hhnlpzaluvbpa"},{"name":"pip","_id":"cj7w1kmfr007lhnlp0z2t2zwv"},{"name":"virtualenv","_id":"cj7w1kmfr007ohnlpnhb702hv"},{"name":"Virtualenvwapper","_id":"cj7w1kmfs007shnlp4zchvroc"},{"name":"Shadowsocks","_id":"cj7w1kmfs007uhnlp74uiiuhb"},{"name":"梯子","_id":"cj7w1kmfs007xhnlpv9e2s7nz"},{"name":"代理","_id":"cj7w1kmft007yhnlpvnjwzsto"},{"name":"VPS","_id":"cj7w1kmft007zhnlp3v3kcjer"},{"name":"Shell","_id":"cj7w1kmft0080hnlpqf27kxwz"},{"name":"Script","_id":"cj7w1kmkg0089hnlpdylc3ol7"}]}}